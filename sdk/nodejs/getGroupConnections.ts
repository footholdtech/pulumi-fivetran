// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source returns a list of information about all connections within a group in your Fivetran account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fivetran from "@footholdtech/fivetran";
 *
 * const groupConnections = fivetran.getGroupConnections({
 *     id: "anonymous_mystery",
 *     schema: "connection_schema_name",
 * });
 * ```
 */
export function getGroupConnections(args: GetGroupConnectionsArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupConnectionsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fivetran:index/getGroupConnections:getGroupConnections", {
        "connections": args.connections,
        "id": args.id,
        "schema": args.schema,
    }, opts);
}

/**
 * A collection of arguments for invoking getGroupConnections.
 */
export interface GetGroupConnectionsArgs {
    connections?: inputs.GetGroupConnectionsConnection[];
    /**
     * The ID of this resource.
     */
    id: string;
    /**
     * Optional filter. When defined, the data source will only contain information for the connection with the specified schema name.
     */
    schema?: string;
}

/**
 * A collection of values returned by getGroupConnections.
 */
export interface GetGroupConnectionsResult {
    readonly connections?: outputs.GetGroupConnectionsConnection[];
    /**
     * The ID of this resource.
     */
    readonly id: string;
    /**
     * Optional filter. When defined, the data source will only contain information for the connection with the specified schema name.
     */
    readonly schema?: string;
}
/**
 * This data source returns a list of information about all connections within a group in your Fivetran account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fivetran from "@footholdtech/fivetran";
 *
 * const groupConnections = fivetran.getGroupConnections({
 *     id: "anonymous_mystery",
 *     schema: "connection_schema_name",
 * });
 * ```
 */
export function getGroupConnectionsOutput(args: GetGroupConnectionsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetGroupConnectionsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("fivetran:index/getGroupConnections:getGroupConnections", {
        "connections": args.connections,
        "id": args.id,
        "schema": args.schema,
    }, opts);
}

/**
 * A collection of arguments for invoking getGroupConnections.
 */
export interface GetGroupConnectionsOutputArgs {
    connections?: pulumi.Input<pulumi.Input<inputs.GetGroupConnectionsConnectionArgs>[]>;
    /**
     * The ID of this resource.
     */
    id: pulumi.Input<string>;
    /**
     * Optional filter. When defined, the data source will only contain information for the connection with the specified schema name.
     */
    schema?: pulumi.Input<string>;
}
