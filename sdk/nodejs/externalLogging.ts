// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * 1. To import an existing `fivetran_external_logging` resource into your Terraform state, you need to get **External Logging Group ID** on the external logging page in your Fivetran dashboard.
 *
 * To retrieve existing groups, use the [fivetran_groups data source](/docs/data-sources/groups).
 *
 * 2. Define an empty resource in your `.tf` configuration:
 *
 * hcl
 *
 * resource "fivetran_external_logging" "my_imported_external_logging" {
 *
 * }
 *
 * 3. Run the `pulumi import` command with the following parameters:
 *
 * ```sh
 * $ pulumi import fivetran:index/externalLogging:ExternalLogging my_imported_external_logging {your External Logging Group ID}
 * ```
 *
 * 4. Use the `terraform state show` command to get the values from the state:
 *
 * terraform state show 'fivetran_external_logging.my_imported_external_logging'
 *
 * 5. Copy the values and paste them to your `.tf` configuration.
 *
 * -> The `config` object in the state contains all properties defined in the schema. You need to remove properties from the `config` that are not related to destinations. See the [Fivetran REST API documentation](https://fivetran.com/docs/rest-api/log-service-management#logservicesetupconfigurations) for reference to find the properties you need to keep in the `config` section.
 */
export class ExternalLogging extends pulumi.CustomResource {
    /**
     * Get an existing ExternalLogging resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExternalLoggingState, opts?: pulumi.CustomResourceOptions): ExternalLogging {
        return new ExternalLogging(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fivetran:index/externalLogging:ExternalLogging';

    /**
     * Returns true if the given object is an instance of ExternalLogging.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExternalLogging {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExternalLogging.__pulumiType;
    }

    public readonly config!: pulumi.Output<outputs.ExternalLoggingConfig | undefined>;
    /**
     * The boolean value specifying whether the log service is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The unique identifier for the log service within the Fivetran system.
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * Specifies whether the setup tests should be run automatically. The default value is TRUE.
     */
    public readonly runSetupTests!: pulumi.Output<boolean | undefined>;
    /**
     * The name for the log service type within the Fivetran system. We support the following log services: azure*monitor*log, cloudwatch, datadog*log, new*relic_log, splunkLog, stackdriver.
     */
    public readonly service!: pulumi.Output<string>;

    /**
     * Create a ExternalLogging resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExternalLoggingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExternalLoggingArgs | ExternalLoggingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExternalLoggingState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["runSetupTests"] = state ? state.runSetupTests : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
        } else {
            const args = argsOrState as ExternalLoggingArgs | undefined;
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.service === undefined) && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["runSetupTests"] = args ? args.runSetupTests : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExternalLogging.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExternalLogging resources.
 */
export interface ExternalLoggingState {
    config?: pulumi.Input<inputs.ExternalLoggingConfig>;
    /**
     * The boolean value specifying whether the log service is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The unique identifier for the log service within the Fivetran system.
     */
    groupId?: pulumi.Input<string>;
    /**
     * Specifies whether the setup tests should be run automatically. The default value is TRUE.
     */
    runSetupTests?: pulumi.Input<boolean>;
    /**
     * The name for the log service type within the Fivetran system. We support the following log services: azure*monitor*log, cloudwatch, datadog*log, new*relic_log, splunkLog, stackdriver.
     */
    service?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExternalLogging resource.
 */
export interface ExternalLoggingArgs {
    config?: pulumi.Input<inputs.ExternalLoggingConfig>;
    /**
     * The boolean value specifying whether the log service is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The unique identifier for the log service within the Fivetran system.
     */
    groupId: pulumi.Input<string>;
    /**
     * Specifies whether the setup tests should be run automatically. The default value is TRUE.
     */
    runSetupTests?: pulumi.Input<boolean>;
    /**
     * The name for the log service type within the Fivetran system. We support the following log services: azure*monitor*log, cloudwatch, datadog*log, new*relic_log, splunkLog, stackdriver.
     */
    service: pulumi.Input<string>;
}
