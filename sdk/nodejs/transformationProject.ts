// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * 1. To import an existing `fivetran_transformation_project` resource into your Terraform state, you need to get **Transformation Project ID** via API call `GET https://api.fivetran.com/v1/transformation-projects` to retrieve available projects.
 *
 * 2. Fetch project details for particular `project-id` using `GET https://api.fivetran.com/v1/transformation-projects/{project-id}` to ensure that this is the project you want to import.
 *
 * 3. Define an empty resource in your `.tf` configuration:
 *
 * hcl
 *
 * resource "fivetran_transformation_project" "my_imported_fivetran_transformation_project" {
 *
 * }
 *
 * 4. Run the `pulumi import` command:
 *
 * ```sh
 * $ pulumi import fivetran:index/transformationProject:TransformationProject my_imported_fivetran_transformation_project {Transformation Project ID}
 * ```
 *
 * 4. Use the `terraform state show` command to get the values from the state:
 *
 * terraform state show 'fivetran_transformation_project.my_imported_fivetran_transformation_project'
 *
 * 5. Copy the values and paste them to your `.tf` configuration.
 */
export class TransformationProject extends pulumi.CustomResource {
    /**
     * Get an existing TransformationProject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransformationProjectState, opts?: pulumi.CustomResourceOptions): TransformationProject {
        return new TransformationProject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fivetran:index/transformationProject:TransformationProject';

    /**
     * Returns true if the given object is an instance of TransformationProject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TransformationProject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransformationProject.__pulumiType;
    }

    /**
     * The timestamp of the transformation Project creation.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The unique identifier for the User within the Fivetran system who created the dbt Project.
     */
    public /*out*/ readonly createdById!: pulumi.Output<string>;
    /**
     * List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
     */
    public /*out*/ readonly errors!: pulumi.Output<string[]>;
    /**
     * The unique identifier for the group within the Fivetran system.
     */
    public readonly groupId!: pulumi.Output<string>;
    public readonly projectConfig!: pulumi.Output<outputs.TransformationProjectProjectConfig | undefined>;
    /**
     * Specifies whether the setup tests should be run automatically. The default value is TRUE.
     */
    public readonly runTests!: pulumi.Output<boolean>;
    /**
     * Status of transformation Project (NOT_READY, READY, ERROR).
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Transformation project type.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a TransformationProject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransformationProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransformationProjectArgs | TransformationProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TransformationProjectState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdById"] = state ? state.createdById : undefined;
            resourceInputs["errors"] = state ? state.errors : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["projectConfig"] = state ? state.projectConfig : undefined;
            resourceInputs["runTests"] = state ? state.runTests : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as TransformationProjectArgs | undefined;
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["projectConfig"] = args ? args.projectConfig : undefined;
            resourceInputs["runTests"] = args ? args.runTests : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdById"] = undefined /*out*/;
            resourceInputs["errors"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TransformationProject.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TransformationProject resources.
 */
export interface TransformationProjectState {
    /**
     * The timestamp of the transformation Project creation.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The unique identifier for the User within the Fivetran system who created the dbt Project.
     */
    createdById?: pulumi.Input<string>;
    /**
     * List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
     */
    errors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique identifier for the group within the Fivetran system.
     */
    groupId?: pulumi.Input<string>;
    projectConfig?: pulumi.Input<inputs.TransformationProjectProjectConfig>;
    /**
     * Specifies whether the setup tests should be run automatically. The default value is TRUE.
     */
    runTests?: pulumi.Input<boolean>;
    /**
     * Status of transformation Project (NOT_READY, READY, ERROR).
     */
    status?: pulumi.Input<string>;
    /**
     * Transformation project type.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TransformationProject resource.
 */
export interface TransformationProjectArgs {
    /**
     * The unique identifier for the group within the Fivetran system.
     */
    groupId: pulumi.Input<string>;
    projectConfig?: pulumi.Input<inputs.TransformationProjectProjectConfig>;
    /**
     * Specifies whether the setup tests should be run automatically. The default value is TRUE.
     */
    runTests?: pulumi.Input<boolean>;
    /**
     * Transformation project type.
     */
    type: pulumi.Input<string>;
}
