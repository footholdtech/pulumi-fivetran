// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * You don't need to import this resource as it is synthetic (doesn't create new instances in upstream).
 */
export class ConnectorSchemaConfig extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorSchemaConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorSchemaConfigState, opts?: pulumi.CustomResourceOptions): ConnectorSchemaConfig {
        return new ConnectorSchemaConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fivetran:index/connectorSchemaConfig:ConnectorSchemaConfig';

    /**
     * Returns true if the given object is an instance of ConnectorSchemaConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorSchemaConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorSchemaConfig.__pulumiType;
    }

    /**
     * The unique identifier for the connector within the Fivetran system.
     */
    public readonly connectorId!: pulumi.Output<string>;
    /**
     * @deprecated Configure `schemas` instead. This attribute will be removed in the next major version of the provider.
     */
    public readonly schema!: pulumi.Output<outputs.ConnectorSchemaConfigSchema[] | undefined>;
    /**
     * The value specifying how new source data is handled.
     */
    public readonly schemaChangeHandling!: pulumi.Output<string | undefined>;
    /**
     * Map of schema configurations.
     */
    public readonly schemas!: pulumi.Output<{[key: string]: outputs.ConnectorSchemaConfigSchemas} | undefined>;
    /**
     * Schema settings in Json format, following Fivetran API endpoint contract for `schemas` field (a map of schemas).
     */
    public readonly schemasJson!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ConnectorSchemaConfigTimeouts | undefined>;
    /**
     * The value defines validation method. - NONE: no validation, any configuration accepted. - TABLES: validate table names,
     * fail on attempt to configure non-existing schemas/tables. - COLUMNS: validate the whole schema config including column
     * names. The resource will try to fetch columns for every configured table and verify column names.
     */
    public readonly validationLevel!: pulumi.Output<string>;

    /**
     * Create a ConnectorSchemaConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorSchemaConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorSchemaConfigArgs | ConnectorSchemaConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorSchemaConfigState | undefined;
            resourceInputs["connectorId"] = state ? state.connectorId : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["schemaChangeHandling"] = state ? state.schemaChangeHandling : undefined;
            resourceInputs["schemas"] = state ? state.schemas : undefined;
            resourceInputs["schemasJson"] = state ? state.schemasJson : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["validationLevel"] = state ? state.validationLevel : undefined;
        } else {
            const args = argsOrState as ConnectorSchemaConfigArgs | undefined;
            if ((!args || args.connectorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorId'");
            }
            resourceInputs["connectorId"] = args ? args.connectorId : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["schemaChangeHandling"] = args ? args.schemaChangeHandling : undefined;
            resourceInputs["schemas"] = args ? args.schemas : undefined;
            resourceInputs["schemasJson"] = args ? args.schemasJson : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["validationLevel"] = args ? args.validationLevel : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectorSchemaConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConnectorSchemaConfig resources.
 */
export interface ConnectorSchemaConfigState {
    /**
     * The unique identifier for the connector within the Fivetran system.
     */
    connectorId?: pulumi.Input<string>;
    /**
     * @deprecated Configure `schemas` instead. This attribute will be removed in the next major version of the provider.
     */
    schema?: pulumi.Input<pulumi.Input<inputs.ConnectorSchemaConfigSchema>[]>;
    /**
     * The value specifying how new source data is handled.
     */
    schemaChangeHandling?: pulumi.Input<string>;
    /**
     * Map of schema configurations.
     */
    schemas?: pulumi.Input<{[key: string]: pulumi.Input<inputs.ConnectorSchemaConfigSchemas>}>;
    /**
     * Schema settings in Json format, following Fivetran API endpoint contract for `schemas` field (a map of schemas).
     */
    schemasJson?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ConnectorSchemaConfigTimeouts>;
    /**
     * The value defines validation method. - NONE: no validation, any configuration accepted. - TABLES: validate table names,
     * fail on attempt to configure non-existing schemas/tables. - COLUMNS: validate the whole schema config including column
     * names. The resource will try to fetch columns for every configured table and verify column names.
     */
    validationLevel?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectorSchemaConfig resource.
 */
export interface ConnectorSchemaConfigArgs {
    /**
     * The unique identifier for the connector within the Fivetran system.
     */
    connectorId: pulumi.Input<string>;
    /**
     * @deprecated Configure `schemas` instead. This attribute will be removed in the next major version of the provider.
     */
    schema?: pulumi.Input<pulumi.Input<inputs.ConnectorSchemaConfigSchema>[]>;
    /**
     * The value specifying how new source data is handled.
     */
    schemaChangeHandling?: pulumi.Input<string>;
    /**
     * Map of schema configurations.
     */
    schemas?: pulumi.Input<{[key: string]: pulumi.Input<inputs.ConnectorSchemaConfigSchemas>}>;
    /**
     * Schema settings in Json format, following Fivetran API endpoint contract for `schemas` field (a map of schemas).
     */
    schemasJson?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ConnectorSchemaConfigTimeouts>;
    /**
     * The value defines validation method. - NONE: no validation, any configuration accepted. - TABLES: validate table names,
     * fail on attempt to configure non-existing schemas/tables. - COLUMNS: validate the whole schema config including column
     * names. The resource will try to fetch columns for every configured table and verify column names.
     */
    validationLevel?: pulumi.Input<string>;
}
