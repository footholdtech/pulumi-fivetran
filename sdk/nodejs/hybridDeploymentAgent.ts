// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource allows you to create, update, and delete hybrid deployment agents.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fivetran from "@footholdtech/fivetran";
 *
 * const hybridDeploymentAgent = new fivetran.HybridDeploymentAgent("hybrid_deployment_agent", {
 *     displayName: "display_name",
 *     groupId: "group_id",
 *     authType: "AUTO",
 * });
 * ```
 */
export class HybridDeploymentAgent extends pulumi.CustomResource {
    /**
     * Get an existing HybridDeploymentAgent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HybridDeploymentAgentState, opts?: pulumi.CustomResourceOptions): HybridDeploymentAgent {
        return new HybridDeploymentAgent(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fivetran:index/hybridDeploymentAgent:HybridDeploymentAgent';

    /**
     * Returns true if the given object is an instance of HybridDeploymentAgent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HybridDeploymentAgent {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HybridDeploymentAgent.__pulumiType;
    }

    /**
     * Base64-encoded content of the auth.json file.
     */
    public /*out*/ readonly authJson!: pulumi.Output<string>;
    /**
     * Type of authentification. Possible values `AUTO`,`MANUAL`
     */
    public readonly authType!: pulumi.Output<string>;
    /**
     * Determines whether re-authentication needs to be performed.
     */
    public readonly authenticationCounter!: pulumi.Output<number>;
    /**
     * Base64-encoded content of the config.json file.
     */
    public /*out*/ readonly configJson!: pulumi.Output<string>;
    /**
     * The unique name for the hybrid deployment agent.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Base64-encoded content of the compose file for the chosen containerization type.
     */
    public /*out*/ readonly dockerComposeYaml!: pulumi.Output<string>;
    /**
     * Environment type. Possible values `DOCKER`,`PODMAN`,`KUBERNETES`,`SNOWPARK`
     */
    public readonly envType!: pulumi.Output<string>;
    /**
     * The unique identifier for the Group within the Fivetran system.
     */
    public readonly groupId!: pulumi.Output<string>;
    /**
     * The timestamp of the time the hybrid deployment agent was created in your account.
     */
    public /*out*/ readonly registeredAt!: pulumi.Output<string>;
    /**
     * Base64 encoded content of token.
     */
    public /*out*/ readonly token!: pulumi.Output<string>;

    /**
     * Create a HybridDeploymentAgent resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HybridDeploymentAgentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HybridDeploymentAgentArgs | HybridDeploymentAgentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HybridDeploymentAgentState | undefined;
            resourceInputs["authJson"] = state ? state.authJson : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["authenticationCounter"] = state ? state.authenticationCounter : undefined;
            resourceInputs["configJson"] = state ? state.configJson : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["dockerComposeYaml"] = state ? state.dockerComposeYaml : undefined;
            resourceInputs["envType"] = state ? state.envType : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["registeredAt"] = state ? state.registeredAt : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
        } else {
            const args = argsOrState as HybridDeploymentAgentArgs | undefined;
            if ((!args || args.authType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authType'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.envType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'envType'");
            }
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["authenticationCounter"] = args ? args.authenticationCounter : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["envType"] = args ? args.envType : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["authJson"] = undefined /*out*/;
            resourceInputs["configJson"] = undefined /*out*/;
            resourceInputs["dockerComposeYaml"] = undefined /*out*/;
            resourceInputs["registeredAt"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HybridDeploymentAgent.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HybridDeploymentAgent resources.
 */
export interface HybridDeploymentAgentState {
    /**
     * Base64-encoded content of the auth.json file.
     */
    authJson?: pulumi.Input<string>;
    /**
     * Type of authentification. Possible values `AUTO`,`MANUAL`
     */
    authType?: pulumi.Input<string>;
    /**
     * Determines whether re-authentication needs to be performed.
     */
    authenticationCounter?: pulumi.Input<number>;
    /**
     * Base64-encoded content of the config.json file.
     */
    configJson?: pulumi.Input<string>;
    /**
     * The unique name for the hybrid deployment agent.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Base64-encoded content of the compose file for the chosen containerization type.
     */
    dockerComposeYaml?: pulumi.Input<string>;
    /**
     * Environment type. Possible values `DOCKER`,`PODMAN`,`KUBERNETES`,`SNOWPARK`
     */
    envType?: pulumi.Input<string>;
    /**
     * The unique identifier for the Group within the Fivetran system.
     */
    groupId?: pulumi.Input<string>;
    /**
     * The timestamp of the time the hybrid deployment agent was created in your account.
     */
    registeredAt?: pulumi.Input<string>;
    /**
     * Base64 encoded content of token.
     */
    token?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HybridDeploymentAgent resource.
 */
export interface HybridDeploymentAgentArgs {
    /**
     * Type of authentification. Possible values `AUTO`,`MANUAL`
     */
    authType: pulumi.Input<string>;
    /**
     * Determines whether re-authentication needs to be performed.
     */
    authenticationCounter?: pulumi.Input<number>;
    /**
     * The unique name for the hybrid deployment agent.
     */
    displayName: pulumi.Input<string>;
    /**
     * Environment type. Possible values `DOCKER`,`PODMAN`,`KUBERNETES`,`SNOWPARK`
     */
    envType: pulumi.Input<string>;
    /**
     * The unique identifier for the Group within the Fivetran system.
     */
    groupId: pulumi.Input<string>;
}
