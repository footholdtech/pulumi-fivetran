// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ConnectorArgs, ConnectorState } from "./connector";
export type Connector = import("./connector").Connector;
export const Connector: typeof import("./connector").Connector = null as any;
utilities.lazyLoad(exports, ["Connector"], () => require("./connector"));

export { ConnectorScheduleArgs, ConnectorScheduleState } from "./connectorSchedule";
export type ConnectorSchedule = import("./connectorSchedule").ConnectorSchedule;
export const ConnectorSchedule: typeof import("./connectorSchedule").ConnectorSchedule = null as any;
utilities.lazyLoad(exports, ["ConnectorSchedule"], () => require("./connectorSchedule"));

export { ConnectorSchemaConfigArgs, ConnectorSchemaConfigState } from "./connectorSchemaConfig";
export type ConnectorSchemaConfig = import("./connectorSchemaConfig").ConnectorSchemaConfig;
export const ConnectorSchemaConfig: typeof import("./connectorSchemaConfig").ConnectorSchemaConfig = null as any;
utilities.lazyLoad(exports, ["ConnectorSchemaConfig"], () => require("./connectorSchemaConfig"));

export { DbtProjectArgs, DbtProjectState } from "./dbtProject";
export type DbtProject = import("./dbtProject").DbtProject;
export const DbtProject: typeof import("./dbtProject").DbtProject = null as any;
utilities.lazyLoad(exports, ["DbtProject"], () => require("./dbtProject"));

export { DbtTransformationArgs, DbtTransformationState } from "./dbtTransformation";
export type DbtTransformation = import("./dbtTransformation").DbtTransformation;
export const DbtTransformation: typeof import("./dbtTransformation").DbtTransformation = null as any;
utilities.lazyLoad(exports, ["DbtTransformation"], () => require("./dbtTransformation"));

export { DestinationArgs, DestinationState } from "./destination";
export type Destination = import("./destination").Destination;
export const Destination: typeof import("./destination").Destination = null as any;
utilities.lazyLoad(exports, ["Destination"], () => require("./destination"));

export { GetConnectorArgs, GetConnectorResult, GetConnectorOutputArgs } from "./getConnector";
export const getConnector: typeof import("./getConnector").getConnector = null as any;
export const getConnectorOutput: typeof import("./getConnector").getConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getConnector","getConnectorOutput"], () => require("./getConnector"));

export { GetConnectorsMetadataArgs, GetConnectorsMetadataResult, GetConnectorsMetadataOutputArgs } from "./getConnectorsMetadata";
export const getConnectorsMetadata: typeof import("./getConnectorsMetadata").getConnectorsMetadata = null as any;
export const getConnectorsMetadataOutput: typeof import("./getConnectorsMetadata").getConnectorsMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getConnectorsMetadata","getConnectorsMetadataOutput"], () => require("./getConnectorsMetadata"));

export { GetDbtModelsArgs, GetDbtModelsResult, GetDbtModelsOutputArgs } from "./getDbtModels";
export const getDbtModels: typeof import("./getDbtModels").getDbtModels = null as any;
export const getDbtModelsOutput: typeof import("./getDbtModels").getDbtModelsOutput = null as any;
utilities.lazyLoad(exports, ["getDbtModels","getDbtModelsOutput"], () => require("./getDbtModels"));

export { GetDbtProjectArgs, GetDbtProjectResult, GetDbtProjectOutputArgs } from "./getDbtProject";
export const getDbtProject: typeof import("./getDbtProject").getDbtProject = null as any;
export const getDbtProjectOutput: typeof import("./getDbtProject").getDbtProjectOutput = null as any;
utilities.lazyLoad(exports, ["getDbtProject","getDbtProjectOutput"], () => require("./getDbtProject"));

export { GetDbtProjectsArgs, GetDbtProjectsResult, GetDbtProjectsOutputArgs } from "./getDbtProjects";
export const getDbtProjects: typeof import("./getDbtProjects").getDbtProjects = null as any;
export const getDbtProjectsOutput: typeof import("./getDbtProjects").getDbtProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getDbtProjects","getDbtProjectsOutput"], () => require("./getDbtProjects"));

export { GetDbtTransformationArgs, GetDbtTransformationResult, GetDbtTransformationOutputArgs } from "./getDbtTransformation";
export const getDbtTransformation: typeof import("./getDbtTransformation").getDbtTransformation = null as any;
export const getDbtTransformationOutput: typeof import("./getDbtTransformation").getDbtTransformationOutput = null as any;
utilities.lazyLoad(exports, ["getDbtTransformation","getDbtTransformationOutput"], () => require("./getDbtTransformation"));

export { GetDestinationArgs, GetDestinationResult, GetDestinationOutputArgs } from "./getDestination";
export const getDestination: typeof import("./getDestination").getDestination = null as any;
export const getDestinationOutput: typeof import("./getDestination").getDestinationOutput = null as any;
utilities.lazyLoad(exports, ["getDestination","getDestinationOutput"], () => require("./getDestination"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetGroupConnectorsArgs, GetGroupConnectorsResult, GetGroupConnectorsOutputArgs } from "./getGroupConnectors";
export const getGroupConnectors: typeof import("./getGroupConnectors").getGroupConnectors = null as any;
export const getGroupConnectorsOutput: typeof import("./getGroupConnectors").getGroupConnectorsOutput = null as any;
utilities.lazyLoad(exports, ["getGroupConnectors","getGroupConnectorsOutput"], () => require("./getGroupConnectors"));

export { GetGroupUsersArgs, GetGroupUsersResult, GetGroupUsersOutputArgs } from "./getGroupUsers";
export const getGroupUsers: typeof import("./getGroupUsers").getGroupUsers = null as any;
export const getGroupUsersOutput: typeof import("./getGroupUsers").getGroupUsersOutput = null as any;
utilities.lazyLoad(exports, ["getGroupUsers","getGroupUsersOutput"], () => require("./getGroupUsers"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GetWebhookArgs, GetWebhookResult, GetWebhookOutputArgs } from "./getWebhook";
export const getWebhook: typeof import("./getWebhook").getWebhook = null as any;
export const getWebhookOutput: typeof import("./getWebhook").getWebhookOutput = null as any;
utilities.lazyLoad(exports, ["getWebhook","getWebhookOutput"], () => require("./getWebhook"));

export { GetWebhooksArgs, GetWebhooksResult, GetWebhooksOutputArgs } from "./getWebhooks";
export const getWebhooks: typeof import("./getWebhooks").getWebhooks = null as any;
export const getWebhooksOutput: typeof import("./getWebhooks").getWebhooksOutput = null as any;
utilities.lazyLoad(exports, ["getWebhooks","getWebhooksOutput"], () => require("./getWebhooks"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupUsersArgs, GroupUsersState } from "./groupUsers";
export type GroupUsers = import("./groupUsers").GroupUsers;
export const GroupUsers: typeof import("./groupUsers").GroupUsers = null as any;
utilities.lazyLoad(exports, ["GroupUsers"], () => require("./groupUsers"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { WebhookArgs, WebhookState } from "./webhook";
export type Webhook = import("./webhook").Webhook;
export const Webhook: typeof import("./webhook").Webhook = null as any;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fivetran:index/connector:Connector":
                return new Connector(name, <any>undefined, { urn })
            case "fivetran:index/connectorSchedule:ConnectorSchedule":
                return new ConnectorSchedule(name, <any>undefined, { urn })
            case "fivetran:index/connectorSchemaConfig:ConnectorSchemaConfig":
                return new ConnectorSchemaConfig(name, <any>undefined, { urn })
            case "fivetran:index/dbtProject:DbtProject":
                return new DbtProject(name, <any>undefined, { urn })
            case "fivetran:index/dbtTransformation:DbtTransformation":
                return new DbtTransformation(name, <any>undefined, { urn })
            case "fivetran:index/destination:Destination":
                return new Destination(name, <any>undefined, { urn })
            case "fivetran:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "fivetran:index/groupUsers:GroupUsers":
                return new GroupUsers(name, <any>undefined, { urn })
            case "fivetran:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "fivetran:index/webhook:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fivetran", "index/connector", _module)
pulumi.runtime.registerResourceModule("fivetran", "index/connectorSchedule", _module)
pulumi.runtime.registerResourceModule("fivetran", "index/connectorSchemaConfig", _module)
pulumi.runtime.registerResourceModule("fivetran", "index/dbtProject", _module)
pulumi.runtime.registerResourceModule("fivetran", "index/dbtTransformation", _module)
pulumi.runtime.registerResourceModule("fivetran", "index/destination", _module)
pulumi.runtime.registerResourceModule("fivetran", "index/group", _module)
pulumi.runtime.registerResourceModule("fivetran", "index/groupUsers", _module)
pulumi.runtime.registerResourceModule("fivetran", "index/user", _module)
pulumi.runtime.registerResourceModule("fivetran", "index/webhook", _module)
pulumi.runtime.registerResourcePackage("fivetran", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:fivetran") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
