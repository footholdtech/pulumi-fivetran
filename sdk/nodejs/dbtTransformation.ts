// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Resource is in ALPHA state.
 *
 * This resource allows you to add, manage and delete dbt Transformations for existing dbt Model.
 * To retrieve available dbt Models use this [Retrieve dbt Project models](https://fivetran.com/docs/rest-api/dbt-transformation-management#retrievedbtprojectmodels) endpoint.
 *
 * ## Import
 *
 * 1. To import an existing `fivetran_dbt_transformation` resource into your Terraform state, you need to get **Transformation ID** on the transformation page in your Fivetran dashboard.
 *
 * 2. Define an empty resource in your `.tf` configuration:
 *
 * hcl
 *
 * resource "fivetran_dbt_transformation" "my_imported_fivetran_dbt_transformation" {
 *
 * }
 *
 * 3. Run the `pulumi import` command:
 *
 * ```sh
 * $ pulumi import fivetran:index/dbtTransformation:DbtTransformation my_imported_fivetran_dbt_transformation {Transformation ID}
 * ```
 *
 * 4. Use the `terraform state show` command to get the values from the state:
 *
 * terraform state show 'fivetran_dbt_transformation.my_imported_fivetran_dbt_transformation'
 *
 * 5. Copy the values and paste them to your `.tf` configuration.
 */
export class DbtTransformation extends pulumi.CustomResource {
    /**
     * Get an existing DbtTransformation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbtTransformationState, opts?: pulumi.CustomResourceOptions): DbtTransformation {
        return new DbtTransformation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fivetran:index/dbtTransformation:DbtTransformation';

    /**
     * Returns true if the given object is an instance of DbtTransformation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbtTransformation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbtTransformation.__pulumiType;
    }

    /**
     * Identifiers of related connectors.
     */
    public /*out*/ readonly connectorIds!: pulumi.Output<string[]>;
    /**
     * The timestamp of the dbt Transformation creation.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The unique identifier for the dbt Model within the Fivetran system.
     */
    public /*out*/ readonly dbtModelId!: pulumi.Output<string>;
    /**
     * Target dbt Model name.
     */
    public readonly dbtModelName!: pulumi.Output<string>;
    /**
     * The unique identifier for the dbt Project within the Fivetran system.
     */
    public readonly dbtProjectId!: pulumi.Output<string>;
    /**
     * Identifiers of related models.
     */
    public /*out*/ readonly modelIds!: pulumi.Output<string[]>;
    /**
     * The dbt Model name.
     */
    public /*out*/ readonly outputModelName!: pulumi.Output<string>;
    /**
     * The field indicating whether the transformation will be set into the paused state. By default, the value is false.
     */
    public readonly paused!: pulumi.Output<boolean>;
    /**
     * The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
     */
    public readonly runTests!: pulumi.Output<boolean>;
    public readonly schedule!: pulumi.Output<outputs.DbtTransformationSchedule | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DbtTransformationTimeouts | undefined>;

    /**
     * Create a DbtTransformation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbtTransformationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbtTransformationArgs | DbtTransformationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbtTransformationState | undefined;
            resourceInputs["connectorIds"] = state ? state.connectorIds : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dbtModelId"] = state ? state.dbtModelId : undefined;
            resourceInputs["dbtModelName"] = state ? state.dbtModelName : undefined;
            resourceInputs["dbtProjectId"] = state ? state.dbtProjectId : undefined;
            resourceInputs["modelIds"] = state ? state.modelIds : undefined;
            resourceInputs["outputModelName"] = state ? state.outputModelName : undefined;
            resourceInputs["paused"] = state ? state.paused : undefined;
            resourceInputs["runTests"] = state ? state.runTests : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DbtTransformationArgs | undefined;
            if ((!args || args.dbtModelName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbtModelName'");
            }
            if ((!args || args.dbtProjectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbtProjectId'");
            }
            resourceInputs["dbtModelName"] = args ? args.dbtModelName : undefined;
            resourceInputs["dbtProjectId"] = args ? args.dbtProjectId : undefined;
            resourceInputs["paused"] = args ? args.paused : undefined;
            resourceInputs["runTests"] = args ? args.runTests : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["connectorIds"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dbtModelId"] = undefined /*out*/;
            resourceInputs["modelIds"] = undefined /*out*/;
            resourceInputs["outputModelName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DbtTransformation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DbtTransformation resources.
 */
export interface DbtTransformationState {
    /**
     * Identifiers of related connectors.
     */
    connectorIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The timestamp of the dbt Transformation creation.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The unique identifier for the dbt Model within the Fivetran system.
     */
    dbtModelId?: pulumi.Input<string>;
    /**
     * Target dbt Model name.
     */
    dbtModelName?: pulumi.Input<string>;
    /**
     * The unique identifier for the dbt Project within the Fivetran system.
     */
    dbtProjectId?: pulumi.Input<string>;
    /**
     * Identifiers of related models.
     */
    modelIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The dbt Model name.
     */
    outputModelName?: pulumi.Input<string>;
    /**
     * The field indicating whether the transformation will be set into the paused state. By default, the value is false.
     */
    paused?: pulumi.Input<boolean>;
    /**
     * The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
     */
    runTests?: pulumi.Input<boolean>;
    schedule?: pulumi.Input<inputs.DbtTransformationSchedule>;
    timeouts?: pulumi.Input<inputs.DbtTransformationTimeouts>;
}

/**
 * The set of arguments for constructing a DbtTransformation resource.
 */
export interface DbtTransformationArgs {
    /**
     * Target dbt Model name.
     */
    dbtModelName: pulumi.Input<string>;
    /**
     * The unique identifier for the dbt Project within the Fivetran system.
     */
    dbtProjectId: pulumi.Input<string>;
    /**
     * The field indicating whether the transformation will be set into the paused state. By default, the value is false.
     */
    paused?: pulumi.Input<boolean>;
    /**
     * The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
     */
    runTests?: pulumi.Input<boolean>;
    schedule?: pulumi.Input<inputs.DbtTransformationSchedule>;
    timeouts?: pulumi.Input<inputs.DbtTransformationTimeouts>;
}
