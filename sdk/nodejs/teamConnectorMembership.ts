// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource allows you to create, update, and delete connector membership for teams
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fivetran from "@footholdtech/fivetran";
 *
 * const testTeamConnectorMembership = new fivetran.TeamConnectorMembership("testTeamConnectorMembership", {
 *     teamId: "test_team",
 *     connectors: [
 *         {
 *             connectorId: "test_connector",
 *             role: "Connector Administrator",
 *             createdAt: "2020-05-25T15:26:47.306509Z",
 *         },
 *         {
 *             connectorId: "test_connector",
 *             role: "Connector Administrator",
 *             createdAt: "2020-05-25T15:26:47.306509Z",
 *         },
 *     ],
 * }, {
 *     provider: fivetran_provider,
 * });
 * ```
 *
 * ## Import
 *
 * 1. To import an existing `fivetran_team_connector_membership` resource into your Terraform state, you need to get `team_id` and `connector_id`
 *
 * You can retrieve all teams using the [fivetran_teams data source](/docs/data-sources/teams).
 *
 * 2. Define an empty resource in your `.tf` configuration:
 *
 * hcl
 *
 * resource "fivetran_team_connector_membership" "my_imported_fivetran_team_connector_membership" {
 *
 * }
 *
 * 3. Run the `pulumi import` command:
 *
 * ```sh
 * $ pulumi import fivetran:index/teamConnectorMembership:TeamConnectorMembership my_imported_fivetran_team_connector_membership {team_id}
 * ```
 *
 * 4. Use the `terraform state show` command to get the values from the state:
 *
 * terraform state show 'fivetran_team_connector_membership.my_imported_fivetran_team_connector_membership'
 *
 * 5. Copy the values and paste them to your `.tf` configuration.
 */
export class TeamConnectorMembership extends pulumi.CustomResource {
    /**
     * Get an existing TeamConnectorMembership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamConnectorMembershipState, opts?: pulumi.CustomResourceOptions): TeamConnectorMembership {
        return new TeamConnectorMembership(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fivetran:index/teamConnectorMembership:TeamConnectorMembership';

    /**
     * Returns true if the given object is an instance of TeamConnectorMembership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamConnectorMembership {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamConnectorMembership.__pulumiType;
    }

    public readonly connectors!: pulumi.Output<outputs.TeamConnectorMembershipConnector[] | undefined>;
    /**
     * The unique identifier for the team within your account.
     */
    public readonly teamId!: pulumi.Output<string>;

    /**
     * Create a TeamConnectorMembership resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamConnectorMembershipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamConnectorMembershipArgs | TeamConnectorMembershipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamConnectorMembershipState | undefined;
            resourceInputs["connectors"] = state ? state.connectors : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        } else {
            const args = argsOrState as TeamConnectorMembershipArgs | undefined;
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            resourceInputs["connectors"] = args ? args.connectors : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamConnectorMembership.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TeamConnectorMembership resources.
 */
export interface TeamConnectorMembershipState {
    connectors?: pulumi.Input<pulumi.Input<inputs.TeamConnectorMembershipConnector>[]>;
    /**
     * The unique identifier for the team within your account.
     */
    teamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TeamConnectorMembership resource.
 */
export interface TeamConnectorMembershipArgs {
    connectors?: pulumi.Input<pulumi.Input<inputs.TeamConnectorMembershipConnector>[]>;
    /**
     * The unique identifier for the team within your account.
     */
    teamId: pulumi.Input<string>;
}
