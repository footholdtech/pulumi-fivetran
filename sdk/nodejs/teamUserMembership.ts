// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource allows you to create, update, and delete user membership for teams
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fivetran from "@footholdtech/fivetran";
 *
 * const testTeamUserMembership = new fivetran.TeamUserMembership("testTeamUserMembership", {
 *     teamId: "test_team",
 *     users: [
 *         {
 *             userId: "test_user",
 *             role: "Connector Administrator",
 *         },
 *         {
 *             userId: "test_user",
 *             role: "Connector Administrator",
 *         },
 *     ],
 * }, {
 *     provider: fivetran_provider,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * 1. To import an existing `fivetran_team_user_membership` resource into your Terraform state, you need to get `team_id` and `user_id`
 *
 * You can retrieve all teams using the [fivetran_teams data source](/docs/data-sources/teams).
 *
 * 2. Define an empty resource in your `.tf` configuration:
 *
 * hcl
 *
 * resource "fivetran_team_user_membership" "my_imported_fivetran_team_user_membership" {
 *
 * }
 *
 * 3. Run the `pulumi import` command:
 *
 * ```sh
 * $ pulumi import fivetran:index/teamUserMembership:TeamUserMembership my_imported_fivetran_team_user_membership {team_id}
 * ```
 *
 * 4. Use the `terraform state show` command to get the values from the state:
 *
 * terraform state show 'fivetran_team_user_membership.my_imported_fivetran_team_user_membership'
 *
 * 5. Copy the values and paste them to your `.tf` configuration.
 */
export class TeamUserMembership extends pulumi.CustomResource {
    /**
     * Get an existing TeamUserMembership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamUserMembershipState, opts?: pulumi.CustomResourceOptions): TeamUserMembership {
        return new TeamUserMembership(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fivetran:index/teamUserMembership:TeamUserMembership';

    /**
     * Returns true if the given object is an instance of TeamUserMembership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamUserMembership {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamUserMembership.__pulumiType;
    }

    /**
     * The unique identifier for the team within your account.
     */
    public readonly teamId!: pulumi.Output<string>;
    public readonly users!: pulumi.Output<outputs.TeamUserMembershipUser[] | undefined>;

    /**
     * Create a TeamUserMembership resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamUserMembershipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamUserMembershipArgs | TeamUserMembershipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamUserMembershipState | undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as TeamUserMembershipArgs | undefined;
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamUserMembership.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TeamUserMembership resources.
 */
export interface TeamUserMembershipState {
    /**
     * The unique identifier for the team within your account.
     */
    teamId?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.TeamUserMembershipUser>[]>;
}

/**
 * The set of arguments for constructing a TeamUserMembership resource.
 */
export interface TeamUserMembershipArgs {
    /**
     * The unique identifier for the team within your account.
     */
    teamId: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.TeamUserMembershipUser>[]>;
}
