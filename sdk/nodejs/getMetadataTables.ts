// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source returns table-level metadata for an existing connector within your Fivetran account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fivetran from "@pulumi/fivetran";
 *
 * const metadataTables = fivetran.getMetadataTables({});
 * ```
 */
export function getMetadataTables(args: GetMetadataTablesArgs, opts?: pulumi.InvokeOptions): Promise<GetMetadataTablesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fivetran:index/getMetadataTables:getMetadataTables", {
        "id": args.id,
        "metadataTables": args.metadataTables,
    }, opts);
}

/**
 * A collection of arguments for invoking getMetadataTables.
 */
export interface GetMetadataTablesArgs {
    /**
     * The unique table identifier
     */
    id: string;
    metadataTables?: inputs.GetMetadataTablesMetadataTable[];
}

/**
 * A collection of values returned by getMetadataTables.
 */
export interface GetMetadataTablesResult {
    /**
     * The unique identifier for the connector within the Fivetran system. Data-source will represent a set of tables of connector.
     */
    readonly id: string;
    readonly metadataTables: outputs.GetMetadataTablesMetadataTable[];
}
/**
 * This data source returns table-level metadata for an existing connector within your Fivetran account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fivetran from "@pulumi/fivetran";
 *
 * const metadataTables = fivetran.getMetadataTables({});
 * ```
 */
export function getMetadataTablesOutput(args: GetMetadataTablesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMetadataTablesResult> {
    return pulumi.output(args).apply((a: any) => getMetadataTables(a, opts))
}

/**
 * A collection of arguments for invoking getMetadataTables.
 */
export interface GetMetadataTablesOutputArgs {
    /**
     * The unique table identifier
     */
    id: pulumi.Input<string>;
    metadataTables?: pulumi.Input<pulumi.Input<inputs.GetMetadataTablesMetadataTableArgs>[]>;
}
