// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran
{
    /// <summary>
    /// ## Import
    /// 
    /// You don't need to import this resource as it is synthetic (doesn't create new instances in upstream).
    /// </summary>
    [FivetranResourceType("fivetran:index/connectorSchemaConfig:ConnectorSchemaConfig")]
    public partial class ConnectorSchemaConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The unique identifier for the connector within the Fivetran system.
        /// </summary>
        [Output("connectorId")]
        public Output<string> ConnectorId { get; private set; } = null!;

        [Output("schema")]
        public Output<ImmutableArray<Outputs.ConnectorSchemaConfigSchema>> Schema { get; private set; } = null!;

        /// <summary>
        /// The value specifying how new source data is handled.
        /// </summary>
        [Output("schemaChangeHandling")]
        public Output<string> SchemaChangeHandling { get; private set; } = null!;

        /// <summary>
        /// Map of schema configurations.
        /// </summary>
        [Output("schemas")]
        public Output<ImmutableDictionary<string, Outputs.ConnectorSchemaConfigSchemas>?> Schemas { get; private set; } = null!;

        /// <summary>
        /// Schema settings in Json format, following Fivetran API endpoint contract for `schemas` field (a map of schemas).
        /// </summary>
        [Output("schemasJson")]
        public Output<string?> SchemasJson { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.ConnectorSchemaConfigTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// The value defines validation method. - NONE: no validation, any configuration accepted. - TABLES: validate table names,
        /// fail on attempt to configure non-existing schemas/tables. - COLUMNS: validate the whole schema config including column
        /// names. The resource will try to fetch columns for every configured table and verify column names.
        /// </summary>
        [Output("validationLevel")]
        public Output<string> ValidationLevel { get; private set; } = null!;


        /// <summary>
        /// Create a ConnectorSchemaConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConnectorSchemaConfig(string name, ConnectorSchemaConfigArgs args, CustomResourceOptions? options = null)
            : base("fivetran:index/connectorSchemaConfig:ConnectorSchemaConfig", name, args ?? new ConnectorSchemaConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConnectorSchemaConfig(string name, Input<string> id, ConnectorSchemaConfigState? state = null, CustomResourceOptions? options = null)
            : base("fivetran:index/connectorSchemaConfig:ConnectorSchemaConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/footholdtech/pulumi-fivetran",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConnectorSchemaConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConnectorSchemaConfig Get(string name, Input<string> id, ConnectorSchemaConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new ConnectorSchemaConfig(name, id, state, options);
        }
    }

    public sealed class ConnectorSchemaConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique identifier for the connector within the Fivetran system.
        /// </summary>
        [Input("connectorId", required: true)]
        public Input<string> ConnectorId { get; set; } = null!;

        [Input("schema")]
        private InputList<Inputs.ConnectorSchemaConfigSchemaArgs>? _schema;
        [Obsolete(@"Configure `schemas` instead. This attribute will be removed in the next major version of the provider.")]
        public InputList<Inputs.ConnectorSchemaConfigSchemaArgs> Schema
        {
            get => _schema ?? (_schema = new InputList<Inputs.ConnectorSchemaConfigSchemaArgs>());
            set => _schema = value;
        }

        /// <summary>
        /// The value specifying how new source data is handled.
        /// </summary>
        [Input("schemaChangeHandling", required: true)]
        public Input<string> SchemaChangeHandling { get; set; } = null!;

        [Input("schemas")]
        private InputMap<Inputs.ConnectorSchemaConfigSchemasArgs>? _schemas;

        /// <summary>
        /// Map of schema configurations.
        /// </summary>
        public InputMap<Inputs.ConnectorSchemaConfigSchemasArgs> Schemas
        {
            get => _schemas ?? (_schemas = new InputMap<Inputs.ConnectorSchemaConfigSchemasArgs>());
            set => _schemas = value;
        }

        /// <summary>
        /// Schema settings in Json format, following Fivetran API endpoint contract for `schemas` field (a map of schemas).
        /// </summary>
        [Input("schemasJson")]
        public Input<string>? SchemasJson { get; set; }

        [Input("timeouts")]
        public Input<Inputs.ConnectorSchemaConfigTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// The value defines validation method. - NONE: no validation, any configuration accepted. - TABLES: validate table names,
        /// fail on attempt to configure non-existing schemas/tables. - COLUMNS: validate the whole schema config including column
        /// names. The resource will try to fetch columns for every configured table and verify column names.
        /// </summary>
        [Input("validationLevel")]
        public Input<string>? ValidationLevel { get; set; }

        public ConnectorSchemaConfigArgs()
        {
        }
        public static new ConnectorSchemaConfigArgs Empty => new ConnectorSchemaConfigArgs();
    }

    public sealed class ConnectorSchemaConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique identifier for the connector within the Fivetran system.
        /// </summary>
        [Input("connectorId")]
        public Input<string>? ConnectorId { get; set; }

        [Input("schema")]
        private InputList<Inputs.ConnectorSchemaConfigSchemaGetArgs>? _schema;
        [Obsolete(@"Configure `schemas` instead. This attribute will be removed in the next major version of the provider.")]
        public InputList<Inputs.ConnectorSchemaConfigSchemaGetArgs> Schema
        {
            get => _schema ?? (_schema = new InputList<Inputs.ConnectorSchemaConfigSchemaGetArgs>());
            set => _schema = value;
        }

        /// <summary>
        /// The value specifying how new source data is handled.
        /// </summary>
        [Input("schemaChangeHandling")]
        public Input<string>? SchemaChangeHandling { get; set; }

        [Input("schemas")]
        private InputMap<Inputs.ConnectorSchemaConfigSchemasGetArgs>? _schemas;

        /// <summary>
        /// Map of schema configurations.
        /// </summary>
        public InputMap<Inputs.ConnectorSchemaConfigSchemasGetArgs> Schemas
        {
            get => _schemas ?? (_schemas = new InputMap<Inputs.ConnectorSchemaConfigSchemasGetArgs>());
            set => _schemas = value;
        }

        /// <summary>
        /// Schema settings in Json format, following Fivetran API endpoint contract for `schemas` field (a map of schemas).
        /// </summary>
        [Input("schemasJson")]
        public Input<string>? SchemasJson { get; set; }

        [Input("timeouts")]
        public Input<Inputs.ConnectorSchemaConfigTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// The value defines validation method. - NONE: no validation, any configuration accepted. - TABLES: validate table names,
        /// fail on attempt to configure non-existing schemas/tables. - COLUMNS: validate the whole schema config including column
        /// names. The resource will try to fetch columns for every configured table and verify column names.
        /// </summary>
        [Input("validationLevel")]
        public Input<string>? ValidationLevel { get; set; }

        public ConnectorSchemaConfigState()
        {
        }
        public static new ConnectorSchemaConfigState Empty => new ConnectorSchemaConfigState();
    }
}
