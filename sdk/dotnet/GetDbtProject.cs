// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran
{
    public static class GetDbtProject
    {
        /// <summary>
        /// This data source returns a dbt Project object.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fivetran = Pulumi.Fivetran;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var project = Fivetran.GetDbtProject.Invoke(new()
        ///     {
        ///         Id = "project_id",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetDbtProjectResult> InvokeAsync(GetDbtProjectArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDbtProjectResult>("fivetran:index/getDbtProject:getDbtProject", args ?? new GetDbtProjectArgs(), options.WithDefaults());

        /// <summary>
        /// This data source returns a dbt Project object.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fivetran = Pulumi.Fivetran;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var project = Fivetran.GetDbtProject.Invoke(new()
        ///     {
        ///         Id = "project_id",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetDbtProjectResult> Invoke(GetDbtProjectInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDbtProjectResult>("fivetran:index/getDbtProject:getDbtProject", args ?? new GetDbtProjectInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDbtProjectArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for the dbt Model within the Fivetran system.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("models")]
        private List<Inputs.GetDbtProjectModelArgs>? _models;

        /// <summary>
        /// The collection of dbt Models.
        /// </summary>
        public List<Inputs.GetDbtProjectModelArgs> Models
        {
            get => _models ?? (_models = new List<Inputs.GetDbtProjectModelArgs>());
            set => _models = value;
        }

        public GetDbtProjectArgs()
        {
        }
        public static new GetDbtProjectArgs Empty => new GetDbtProjectArgs();
    }

    public sealed class GetDbtProjectInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for the dbt Model within the Fivetran system.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("models")]
        private InputList<Inputs.GetDbtProjectModelInputArgs>? _models;

        /// <summary>
        /// The collection of dbt Models.
        /// </summary>
        public InputList<Inputs.GetDbtProjectModelInputArgs> Models
        {
            get => _models ?? (_models = new InputList<Inputs.GetDbtProjectModelInputArgs>());
            set => _models = value;
        }

        public GetDbtProjectInvokeArgs()
        {
        }
        public static new GetDbtProjectInvokeArgs Empty => new GetDbtProjectInvokeArgs();
    }


    [OutputType]
    public sealed class GetDbtProjectResult
    {
        /// <summary>
        /// The timestamp of the dbt Project creation.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The unique identifier for the User within the Fivetran system who created the dbt Project.
        /// </summary>
        public readonly string CreatedById;
        /// <summary>
        /// The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
        /// </summary>
        public readonly string DbtVersion;
        /// <summary>
        /// Default schema in destination. This production schema will contain your transformed data.
        /// </summary>
        public readonly string DefaultSchema;
        public readonly ImmutableArray<string> EnvironmentVars;
        /// <summary>
        /// The unique identifier for the group within the Fivetran system.
        /// </summary>
        public readonly string GroupId;
        /// <summary>
        /// The unique identifier for the dbt Project within the Fivetran system.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The collection of dbt Models.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDbtProjectModelResult> Models;
        /// <summary>
        /// Type specific dbt Project configuration parameters.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDbtProjectProjectConfigResult> ProjectConfigs;
        /// <summary>
        /// Public key to grant Fivetran SSH access to git repository.
        /// </summary>
        public readonly string PublicKey;
        /// <summary>
        /// Status of dbt Project (NOT_READY, READY, ERROR).
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Target name to set or override the value from the deployment.yaml
        /// </summary>
        public readonly string TargetName;
        /// <summary>
        /// The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
        /// </summary>
        public readonly int Threads;
        /// <summary>
        /// Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetDbtProjectResult(
            string createdAt,

            string createdById,

            string dbtVersion,

            string defaultSchema,

            ImmutableArray<string> environmentVars,

            string groupId,

            string id,

            ImmutableArray<Outputs.GetDbtProjectModelResult> models,

            ImmutableArray<Outputs.GetDbtProjectProjectConfigResult> projectConfigs,

            string publicKey,

            string status,

            string targetName,

            int threads,

            string type)
        {
            CreatedAt = createdAt;
            CreatedById = createdById;
            DbtVersion = dbtVersion;
            DefaultSchema = defaultSchema;
            EnvironmentVars = environmentVars;
            GroupId = groupId;
            Id = id;
            Models = models;
            ProjectConfigs = projectConfigs;
            PublicKey = publicKey;
            Status = status;
            TargetName = targetName;
            Threads = threads;
            Type = type;
        }
    }
}
