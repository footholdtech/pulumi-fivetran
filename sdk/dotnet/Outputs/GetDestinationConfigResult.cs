// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran.Outputs
{

    [OutputType]
    public sealed class GetDestinationConfigResult
    {
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `aurora_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_postgres_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_data_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_database`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_managed_db_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_rds_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_rds_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `panoply`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `periscope_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_gcp_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_rds_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `redshift`: Require TLS through Tunnel
        /// 	- Service `sql_server_rds_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// </summary>
        public readonly bool AlwaysEncrypted;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `snowflake`: Password-based or key-based authentication type
        /// </summary>
        public readonly string Auth;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Authentication type
        /// 	- Service `databricks`: Authentication type
        /// 	- Service `new_s3_datalake`: Authentication type
        /// 	- Service `onelake`: Authentication type
        /// 	- Service `redshift`: Authentication type. Default value: `PASSWORD`.
        /// </summary>
        public readonly string AuthType;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `new_s3_datalake`: AWS access key to access the S3 bucket and AWS Glue
        /// </summary>
        public readonly string AwsAccessKeyId;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `new_s3_datalake`: AWS secret access key to access the S3 bucket and AWS Glue
        /// </summary>
        public readonly string AwsSecretAccessKey;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Comma-separated list of Confluent Cloud servers in the `server:port` format.
        /// </summary>
        public readonly ImmutableArray<string> BootstrapServers;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `big_query`: Customer bucket. If specified, your GCS bucket will be used to process the data instead of a Fivetran-managed bucket. The bucket must be present in the same location as the dataset location.
        /// 	- Service `big_query_dts`: Customer bucket. If specified, your GCS bucket will be used to process the data instead of a Fivetran-managed bucket. The bucket must be present in the same location as the dataset location.
        /// 	- Service `managed_big_query`: Customer bucket. If specified, your GCS bucket will be used to process the data instead of a Fivetran-managed bucket. The bucket must be present in the same location as the dataset location.
        /// 	- Service `new_s3_datalake`: (Immutable) The name of the bucket to be used as destination
        /// </summary>
        public readonly string Bucket;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Catalog name
        /// 	- Service `databricks`: Catalog name
        /// 	- Service `new_s3_datalake`: Catalog name
        /// 	- Service `onelake`: Catalog name
        /// </summary>
        public readonly string Catalog;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Client id of service principal
        /// 	- Service `onelake`: Client ID of service principal
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `databricks`: Databricks deployment cloud
        /// </summary>
        public readonly string CloudProvider;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `panoply`: Cluster ID.
        /// 	- Service `periscope_warehouse`: Cluster ID.
        /// 	- Service `redshift`: Cluster ID. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `panoply`: Cluster region.
        /// 	- Service `periscope_warehouse`: Cluster region.
        /// 	- Service `redshift`: Cluster region. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
        /// </summary>
        public readonly string ClusterRegion;
        public readonly string ConnectionMethod;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Connection method. Default value: `Directly`.
        /// 	- Service `aurora_postgres_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `aurora_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `azure_postgres_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `azure_sql_data_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `azure_sql_database`: Connection method. Default value: `Directly`.
        /// 	- Service `azure_sql_managed_db_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `databricks`: Connection method. Default value: `Directly`.
        /// 	- Service `maria_rds_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `maria_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `mysql_rds_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `mysql_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `panoply`: Connection method. Default value: `Directly`.
        /// 	- Service `periscope_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `postgres_gcp_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `postgres_rds_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `postgres_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `redshift`: Connection method. Default value: `Directly`.
        /// 	- Service `snowflake`: Connection method. Default value: `Directly`.
        /// 	- Service `sql_server_rds_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `sql_server_warehouse`: Connection method. Default value: `Directly`.
        /// </summary>
        public readonly string ConnectionType;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: (Immutable) Container to store delta table files
        /// 	- Service `onelake`: Workspace name to store delta table files
        /// </summary>
        public readonly string ContainerName;
        public readonly string ControllerId;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `databricks`: Whether to create external tables
        /// </summary>
        public readonly bool CreateExternalTables;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Confluent Cloud message format.
        /// </summary>
        public readonly string DataFormat;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `big_query`: Data location. Datasets will reside in this location.
        /// 	- Service `big_query_dts`: Data location. Datasets will reside in this location.
        /// 	- Service `managed_big_query`: Data location. Datasets will reside in this location.
        /// </summary>
        public readonly string DataSetLocation;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: Database name
        /// 	- Service `aurora_warehouse`: Database name
        /// 	- Service `azure_postgres_warehouse`: Database name
        /// 	- Service `azure_sql_data_warehouse`: Database name
        /// 	- Service `azure_sql_database`: Database name
        /// 	- Service `azure_sql_managed_db_warehouse`: Database name
        /// 	- Service `maria_rds_warehouse`: Database name
        /// 	- Service `maria_warehouse`: Database name
        /// 	- Service `mysql_rds_warehouse`: Database name
        /// 	- Service `mysql_warehouse`: Database name
        /// 	- Service `panoply`: Database name
        /// 	- Service `periscope_warehouse`: Database name
        /// 	- Service `postgres_gcp_warehouse`: Database name
        /// 	- Service `postgres_rds_warehouse`: Database name
        /// 	- Service `postgres_warehouse`: Database name
        /// 	- Service `redshift`: Database name
        /// 	- Service `snowflake`: Database name
        /// 	- Service `sql_server_rds_warehouse`: Database name
        /// 	- Service `sql_server_warehouse`: Database name
        /// </summary>
        public readonly string Database;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Databricks Connection method. Default value: `Directly`.
        /// 	- Service `new_s3_datalake`: Databricks Connection method. Default value: `Directly`.
        /// 	- Service `onelake`: Databricks Connection method. Default value: `Directly`.
        /// </summary>
        public readonly string DatabricksConnectionType;
        public readonly bool EnableRemoteExecution;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aws_msk_wh`: Fivetran generated External ID
        /// 	- Service `panoply`: Fivetran generated External ID
        /// 	- Service `periscope_warehouse`: Fivetran generated External ID
        /// 	- Service `redshift`: Fivetran generated External ID
        /// </summary>
        public readonly string ExternalId;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `databricks`: External location to store Delta tables. Default value: `""`  (null). By default, the external tables will reside in the `/{schema}/{table}` path, and if you specify an external location in the `{externalLocation}/{schema}/{table}` path.
        /// </summary>
        public readonly string ExternalLocation;
        public readonly string FivetranGlueRoleArn;
        public readonly string FivetranMskRoleArn;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `new_s3_datalake`: ARN of the role which you created with different required policy mentioned in our setup guide
        /// </summary>
        public readonly string FivetranRoleArn;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: Server name
        /// 	- Service `aurora_warehouse`: Server name
        /// 	- Service `azure_postgres_warehouse`: Server name
        /// 	- Service `azure_sql_data_warehouse`: Server name
        /// 	- Service `azure_sql_database`: Server name
        /// 	- Service `azure_sql_managed_db_warehouse`: Server name
        /// 	- Service `maria_rds_warehouse`: Server name
        /// 	- Service `maria_warehouse`: Server name
        /// 	- Service `mysql_rds_warehouse`: Server name
        /// 	- Service `mysql_warehouse`: Server name
        /// 	- Service `panoply`: Server name
        /// 	- Service `periscope_warehouse`: Server name
        /// 	- Service `postgres_gcp_warehouse`: Server name
        /// 	- Service `postgres_rds_warehouse`: Server name
        /// 	- Service `postgres_warehouse`: Server name
        /// 	- Service `redshift`: Server name
        /// 	- Service `snowflake`: Server name
        /// 	- Service `sql_server_rds_warehouse`: Server name
        /// 	- Service `sql_server_warehouse`: Server name
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: HTTP path
        /// 	- Service `databricks`: HTTP path
        /// 	- Service `new_s3_datalake`: HTTP path
        /// 	- Service `onelake`: HTTP path
        /// </summary>
        public readonly string HttpPath;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `snowflake`: Indicates that a private key is encrypted. The default value: `false`. The field can be specified if authentication type is `KEY_PAIR`.
        /// </summary>
        public readonly bool IsPrivateKeyEncrypted;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `new_s3_datalake`: We use PrivateLink by default if your s3 bucket is in the same region as Fivetran. Turning on this toggle ensures that Fivetran always connects to s3 bucket over PrivateLink. Learn more in our [PrivateLink documentation](https://fivetran.com/docs/connectors/databases/connection-options#awsprivatelinkbeta).
        /// </summary>
        public readonly bool IsPrivateLinkRequired;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `redshift`: Is your destination Redshift Serverless
        /// </summary>
        public readonly bool IsRedshiftServerless;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `onelake`: (Immutable) OneLake lakehouse GUID
        /// </summary>
        public readonly string LakehouseGuid;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `onelake`: (Immutable) Name of your lakehouse
        /// </summary>
        public readonly string LakehouseName;
        public readonly string MskStsRegion;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Number of partitions per topic.
        /// </summary>
        public readonly int NumOfPartitions;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: OAuth 2.0 client ID
        /// 	- Service `databricks`: OAuth 2.0 client ID
        /// 	- Service `new_s3_datalake`: OAuth 2.0 client ID
        /// 	- Service `onelake`: OAuth 2.0 client ID
        /// </summary>
        public readonly string Oauth2ClientId;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: OAuth 2.0 secret
        /// 	- Service `databricks`: OAuth 2.0 secret
        /// 	- Service `new_s3_datalake`: OAuth 2.0 secret
        /// 	- Service `onelake`: OAuth 2.0 secret
        /// </summary>
        public readonly string Oauth2Secret;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `snowflake`: In case private key is encrypted, you are required to enter passphrase that was used to encrypt the private key. The field can be specified if authentication type is `KEY_PAIR`.
        /// </summary>
        public readonly string Passphrase;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: Database user password
        /// 	- Service `aurora_warehouse`: Database user password
        /// 	- Service `azure_postgres_warehouse`: Database user password
        /// 	- Service `azure_sql_data_warehouse`: Database user password
        /// 	- Service `azure_sql_database`: Database user password
        /// 	- Service `azure_sql_managed_db_warehouse`: Database user password
        /// 	- Service `maria_rds_warehouse`: Database user password
        /// 	- Service `maria_warehouse`: Database user password
        /// 	- Service `mysql_rds_warehouse`: Database user password
        /// 	- Service `mysql_warehouse`: Database user password
        /// 	- Service `panoply`: Database user password
        /// 	- Service `periscope_warehouse`: Database user password
        /// 	- Service `postgres_gcp_warehouse`: Database user password
        /// 	- Service `postgres_rds_warehouse`: Database user password
        /// 	- Service `postgres_warehouse`: Database user password
        /// 	- Service `redshift`: Database user password. Required if authentication type is `PASSWORD`.
        /// 	- Service `snowflake`: Database user password. The field should be specified if authentication type is `PASSWORD`.
        /// 	- Service `sql_server_rds_warehouse`: Database user password
        /// 	- Service `sql_server_warehouse`: Database user password
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Personal access token
        /// 	- Service `databricks`: Personal access token
        /// 	- Service `new_s3_datalake`: Personal access token
        /// 	- Service `onelake`: Personal access token
        /// </summary>
        public readonly string PersonalAccessToken;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Server port number
        /// 	- Service `aurora_postgres_warehouse`: Server port number
        /// 	- Service `aurora_warehouse`: Server port number
        /// 	- Service `azure_postgres_warehouse`: Server port number
        /// 	- Service `azure_sql_data_warehouse`: Server port number
        /// 	- Service `azure_sql_database`: Server port number
        /// 	- Service `azure_sql_managed_db_warehouse`: Server port number
        /// 	- Service `databricks`: Server port number
        /// 	- Service `maria_rds_warehouse`: Server port number
        /// 	- Service `maria_warehouse`: Server port number
        /// 	- Service `mysql_rds_warehouse`: Server port number
        /// 	- Service `mysql_warehouse`: Server port number
        /// 	- Service `new_s3_datalake`: Server port number
        /// 	- Service `onelake`: Server port number
        /// 	- Service `panoply`: Server port number
        /// 	- Service `periscope_warehouse`: Server port number
        /// 	- Service `postgres_gcp_warehouse`: Server port number
        /// 	- Service `postgres_rds_warehouse`: Server port number
        /// 	- Service `postgres_warehouse`: Server port number
        /// 	- Service `redshift`: Server port number
        /// 	- Service `snowflake`: Server port number
        /// 	- Service `sql_server_rds_warehouse`: Server port number
        /// 	- Service `sql_server_warehouse`: Server port number
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: (Immutable) path/to/data within the container
        /// 	- Service `new_s3_datalake`: (Immutable) Prefix path of the bucket for which you have configured access policy. It is not required if access has been granted to entire Bucket in the access policy
        /// 	- Service `onelake`: (Immutable) path/to/data within your lakehouse inside the Files directory
        /// </summary>
        public readonly string PrefixPath;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `snowflake`: Private access key.  The field should be specified if authentication type is `KEY_PAIR`.
        /// </summary>
        public readonly string PrivateKey;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `big_query`: BigQuery project ID
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: Public Key
        /// 	- Service `aurora_warehouse`: Public Key
        /// 	- Service `azure_postgres_warehouse`: Public Key
        /// 	- Service `azure_sql_data_warehouse`: Public Key
        /// 	- Service `azure_sql_database`: Public Key
        /// 	- Service `azure_sql_managed_db_warehouse`: Public Key
        /// 	- Service `maria_rds_warehouse`: Public Key
        /// 	- Service `maria_warehouse`: Public Key
        /// 	- Service `mysql_rds_warehouse`: Public Key
        /// 	- Service `mysql_warehouse`: Public Key
        /// 	- Service `panoply`: Public Key
        /// 	- Service `periscope_warehouse`: Public Key
        /// 	- Service `postgres_gcp_warehouse`: Public Key
        /// 	- Service `postgres_rds_warehouse`: Public Key
        /// 	- Service `postgres_warehouse`: Public Key
        /// 	- Service `redshift`: Public Key
        /// 	- Service `sql_server_rds_warehouse`: Public Key
        /// 	- Service `sql_server_warehouse`: Public Key
        /// </summary>
        public readonly string PublicKey;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `new_s3_datalake`: Region of your AWS S3 bucket
        /// </summary>
        public readonly string Region;
        public readonly string RegistryName;
        public readonly string RegistryStsRegion;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Replication factor.
        /// </summary>
        public readonly int ReplicationFactor;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `aurora_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `azure_postgres_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `azure_sql_data_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `azure_sql_database`: Field to test Self serve Private Link
        /// 	- Service `azure_sql_managed_db_warehouse`: Field to test Self serve Private Link
        /// 	- Service `databricks`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `maria_rds_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `maria_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `mysql_rds_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `mysql_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `panoply`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `periscope_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `postgres_gcp_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `postgres_rds_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `postgres_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `redshift`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `snowflake`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `sql_server_rds_warehouse`: Field to test Self serve Private Link
        /// 	- Service `sql_server_warehouse`: Field to test Self serve Private Link
        /// </summary>
        public readonly string ResourceId;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `snowflake`: If not specified, Fivetran will use the user's default role
        /// </summary>
        public readonly string Role;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `redshift`: Role ARN with Redshift permissions. Required if authentication type is `IAM`.
        /// </summary>
        public readonly string RoleArn;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Security protocol for Confluent Cloud interaction.
        /// </summary>
        public readonly string SaslMechanism;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Confluent Cloud SASL key.
        /// </summary>
        public readonly string SaslPlainKey;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Confluent Cloud SASL secret.
        /// </summary>
        public readonly string SaslPlainSecret;
        public readonly string SchemaCompatibility;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Schema Registry
        /// </summary>
        public readonly string SchemaRegistry;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Schema registry API key.
        /// </summary>
        public readonly string SchemaRegistryApiKey;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Schema registry API secret.
        /// </summary>
        public readonly string SchemaRegistryApiSecret;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Schema registry URL.
        /// </summary>
        public readonly string SchemaRegistryUrl;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `big_query`: Private key of the customer service account. If specified, your service account will be used to process the data instead of the Fivetran-managed service account.
        /// 	- Service `big_query_dts`: Private key of the customer service account. If specified, your service account will be used to process the data instead of the Fivetran-managed service account.
        /// 	- Service `managed_big_query`: Private key of the customer service account. If specified, your service account will be used to process the data instead of the Fivetran-managed service account.
        /// </summary>
        public readonly string SecretKey;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Secret value for service principal
        /// 	- Service `onelake`: Secret value for service principal
        /// </summary>
        public readonly string SecretValue;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Security protocol for Confluent Cloud interaction.
        /// </summary>
        public readonly string SecurityProtocol;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Server Host name
        /// 	- Service `databricks`: Server name
        /// 	- Service `new_s3_datalake`: Server host name
        /// 	- Service `onelake`: Server Host name
        /// </summary>
        public readonly string ServerHostName;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Should maintain tables in Databricks 
        /// 	- Service `new_s3_datalake`: Should maintain tables in Databricks 
        /// 	- Service `onelake`: Should maintain tables in Databricks
        /// </summary>
        public readonly bool ShouldMaintainTablesInDatabricks;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Snapshots older than the retention period are deleted every week. Default value: `ONE_WEEK`.
        /// 	- Service `new_s3_datalake`: Snapshots older than the retention period are deleted every week. Default value: `ONE_WEEK`.
        /// 	- Service `onelake`: Snapshots older than the retention period are deleted every week. Default value: `ONE_WEEK`.
        /// </summary>
        public readonly string SnapshotRetentionPeriod;
        public readonly string SnowflakeCloud;
        public readonly string SnowflakeRegion;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: (Immutable) Storage account for Azure Data Lake Storage Gen2 name
        /// 	- Service `onelake`: (Immutable) Storage account for Azure Data Lake Storage Gen2 name
        /// </summary>
        public readonly string StorageAccountName;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `new_s3_datalake`: (Immutable) The table format in which you want to sync your tables. Valid values are ICEBERG and DELTA_LAKE
        /// </summary>
        public readonly string TableFormat;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Tenant id of service principal
        /// 	- Service `onelake`: Tenant ID of service principal
        /// </summary>
        public readonly string TenantId;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `aurora_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_postgres_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_data_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_database`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_managed_db_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_rds_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_rds_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `panoply`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `periscope_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_gcp_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_rds_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `redshift`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_rds_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// </summary>
        public readonly string TunnelHost;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `aurora_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_postgres_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_data_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_database`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_managed_db_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_rds_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_rds_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `panoply`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `periscope_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_gcp_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_rds_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `redshift`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_rds_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// </summary>
        public readonly int TunnelPort;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `aurora_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_postgres_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_data_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_database`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_managed_db_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_rds_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_rds_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `panoply`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `periscope_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_gcp_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_rds_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `redshift`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_rds_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// </summary>
        public readonly string TunnelUser;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: Database user name
        /// 	- Service `aurora_warehouse`: Database user name
        /// 	- Service `azure_postgres_warehouse`: Database user name
        /// 	- Service `azure_sql_data_warehouse`: Database user name
        /// 	- Service `azure_sql_database`: Database user name
        /// 	- Service `azure_sql_managed_db_warehouse`: Database user name
        /// 	- Service `maria_rds_warehouse`: Database user name
        /// 	- Service `maria_warehouse`: Database user name
        /// 	- Service `mysql_rds_warehouse`: Database user name
        /// 	- Service `mysql_warehouse`: Database user name
        /// 	- Service `panoply`: Database user name
        /// 	- Service `periscope_warehouse`: Database user name
        /// 	- Service `postgres_gcp_warehouse`: Database user name
        /// 	- Service `postgres_rds_warehouse`: Database user name
        /// 	- Service `postgres_warehouse`: Database user name
        /// 	- Service `redshift`: Database user name
        /// 	- Service `snowflake`: Database user name
        /// 	- Service `sql_server_rds_warehouse`: Database user name
        /// 	- Service `sql_server_warehouse`: Database user name
        /// </summary>
        public readonly string User;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `onelake`: (Immutable) OneLake workspace GUID
        /// </summary>
        public readonly string WorkspaceGuid;
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `onelake`: OneLake workspace name
        /// </summary>
        public readonly string WorkspaceName;

        [OutputConstructor]
        private GetDestinationConfigResult(
            bool alwaysEncrypted,

            string auth,

            string authType,

            string awsAccessKeyId,

            string awsSecretAccessKey,

            ImmutableArray<string> bootstrapServers,

            string bucket,

            string catalog,

            string clientId,

            string cloudProvider,

            string clusterId,

            string clusterRegion,

            string connectionMethod,

            string connectionType,

            string containerName,

            string controllerId,

            bool createExternalTables,

            string dataFormat,

            string dataSetLocation,

            string database,

            string databricksConnectionType,

            bool enableRemoteExecution,

            string externalId,

            string externalLocation,

            string fivetranGlueRoleArn,

            string fivetranMskRoleArn,

            string fivetranRoleArn,

            string host,

            string httpPath,

            bool isPrivateKeyEncrypted,

            bool isPrivateLinkRequired,

            bool isRedshiftServerless,

            string lakehouseGuid,

            string lakehouseName,

            string mskStsRegion,

            int numOfPartitions,

            string oauth2ClientId,

            string oauth2Secret,

            string passphrase,

            string password,

            string personalAccessToken,

            int port,

            string prefixPath,

            string privateKey,

            string projectId,

            string publicKey,

            string region,

            string registryName,

            string registryStsRegion,

            int replicationFactor,

            string resourceId,

            string role,

            string roleArn,

            string saslMechanism,

            string saslPlainKey,

            string saslPlainSecret,

            string schemaCompatibility,

            string schemaRegistry,

            string schemaRegistryApiKey,

            string schemaRegistryApiSecret,

            string schemaRegistryUrl,

            string secretKey,

            string secretValue,

            string securityProtocol,

            string serverHostName,

            bool shouldMaintainTablesInDatabricks,

            string snapshotRetentionPeriod,

            string snowflakeCloud,

            string snowflakeRegion,

            string storageAccountName,

            string tableFormat,

            string tenantId,

            string tunnelHost,

            int tunnelPort,

            string tunnelUser,

            string user,

            string workspaceGuid,

            string workspaceName)
        {
            AlwaysEncrypted = alwaysEncrypted;
            Auth = auth;
            AuthType = authType;
            AwsAccessKeyId = awsAccessKeyId;
            AwsSecretAccessKey = awsSecretAccessKey;
            BootstrapServers = bootstrapServers;
            Bucket = bucket;
            Catalog = catalog;
            ClientId = clientId;
            CloudProvider = cloudProvider;
            ClusterId = clusterId;
            ClusterRegion = clusterRegion;
            ConnectionMethod = connectionMethod;
            ConnectionType = connectionType;
            ContainerName = containerName;
            ControllerId = controllerId;
            CreateExternalTables = createExternalTables;
            DataFormat = dataFormat;
            DataSetLocation = dataSetLocation;
            Database = database;
            DatabricksConnectionType = databricksConnectionType;
            EnableRemoteExecution = enableRemoteExecution;
            ExternalId = externalId;
            ExternalLocation = externalLocation;
            FivetranGlueRoleArn = fivetranGlueRoleArn;
            FivetranMskRoleArn = fivetranMskRoleArn;
            FivetranRoleArn = fivetranRoleArn;
            Host = host;
            HttpPath = httpPath;
            IsPrivateKeyEncrypted = isPrivateKeyEncrypted;
            IsPrivateLinkRequired = isPrivateLinkRequired;
            IsRedshiftServerless = isRedshiftServerless;
            LakehouseGuid = lakehouseGuid;
            LakehouseName = lakehouseName;
            MskStsRegion = mskStsRegion;
            NumOfPartitions = numOfPartitions;
            Oauth2ClientId = oauth2ClientId;
            Oauth2Secret = oauth2Secret;
            Passphrase = passphrase;
            Password = password;
            PersonalAccessToken = personalAccessToken;
            Port = port;
            PrefixPath = prefixPath;
            PrivateKey = privateKey;
            ProjectId = projectId;
            PublicKey = publicKey;
            Region = region;
            RegistryName = registryName;
            RegistryStsRegion = registryStsRegion;
            ReplicationFactor = replicationFactor;
            ResourceId = resourceId;
            Role = role;
            RoleArn = roleArn;
            SaslMechanism = saslMechanism;
            SaslPlainKey = saslPlainKey;
            SaslPlainSecret = saslPlainSecret;
            SchemaCompatibility = schemaCompatibility;
            SchemaRegistry = schemaRegistry;
            SchemaRegistryApiKey = schemaRegistryApiKey;
            SchemaRegistryApiSecret = schemaRegistryApiSecret;
            SchemaRegistryUrl = schemaRegistryUrl;
            SecretKey = secretKey;
            SecretValue = secretValue;
            SecurityProtocol = securityProtocol;
            ServerHostName = serverHostName;
            ShouldMaintainTablesInDatabricks = shouldMaintainTablesInDatabricks;
            SnapshotRetentionPeriod = snapshotRetentionPeriod;
            SnowflakeCloud = snowflakeCloud;
            SnowflakeRegion = snowflakeRegion;
            StorageAccountName = storageAccountName;
            TableFormat = tableFormat;
            TenantId = tenantId;
            TunnelHost = tunnelHost;
            TunnelPort = tunnelPort;
            TunnelUser = tunnelUser;
            User = user;
            WorkspaceGuid = workspaceGuid;
            WorkspaceName = workspaceName;
        }
    }
}
