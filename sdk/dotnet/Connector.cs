// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran
{
    /// <summary>
    /// ## Import
    /// 
    /// ### How to authorize connector
    /// </summary>
    [FivetranResourceType("fivetran:index/connector:Connector")]
    public partial class Connector : global::Pulumi.CustomResource
    {
        [Output("auth")]
        public Output<Outputs.ConnectorAuth?> Auth { get; private set; } = null!;

        [Output("config")]
        public Output<Outputs.ConnectorConfig?> Config { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the user who has created the connector in your account.
        /// </summary>
        [Output("connectedBy")]
        public Output<string> ConnectedBy { get; private set; } = null!;

        /// <summary>
        /// The timestamp of the time the connector was created in your account.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("destinationSchema")]
        public Output<Outputs.ConnectorDestinationSchema?> DestinationSchema { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the Group (Destination) within the Fivetran system.
        /// </summary>
        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;

        /// <summary>
        /// The name used both as the connector's name within the Fivetran system and as the source schema's name within your
        /// destination.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the setup tests should be run automatically. The default value is TRUE.
        /// </summary>
        [Output("runSetupTests")]
        public Output<bool> RunSetupTests { get; private set; } = null!;

        /// <summary>
        /// The connector type id within the Fivetran system.
        /// </summary>
        [Output("service")]
        public Output<string> Service { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.ConnectorTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
        /// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
        /// certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
        /// </summary>
        [Output("trustCertificates")]
        public Output<bool> TrustCertificates { get; private set; } = null!;

        /// <summary>
        /// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
        /// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
        /// fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
        /// </summary>
        [Output("trustFingerprints")]
        public Output<bool> TrustFingerprints { get; private set; } = null!;


        /// <summary>
        /// Create a Connector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connector(string name, ConnectorArgs args, CustomResourceOptions? options = null)
            : base("fivetran:index/connector:Connector", name, args ?? new ConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connector(string name, Input<string> id, ConnectorState? state = null, CustomResourceOptions? options = null)
            : base("fivetran:index/connector:Connector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/footholdtech/pulumi-fivetran",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connector Get(string name, Input<string> id, ConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new Connector(name, id, state, options);
        }
    }

    public sealed class ConnectorArgs : global::Pulumi.ResourceArgs
    {
        [Input("auth")]
        public Input<Inputs.ConnectorAuthArgs>? Auth { get; set; }

        [Input("config")]
        public Input<Inputs.ConnectorConfigArgs>? Config { get; set; }

        [Input("destinationSchema")]
        public Input<Inputs.ConnectorDestinationSchemaArgs>? DestinationSchema { get; set; }

        /// <summary>
        /// The unique identifier for the Group (Destination) within the Fivetran system.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        /// <summary>
        /// Specifies whether the setup tests should be run automatically. The default value is TRUE.
        /// </summary>
        [Input("runSetupTests")]
        public Input<bool>? RunSetupTests { get; set; }

        /// <summary>
        /// The connector type id within the Fivetran system.
        /// </summary>
        [Input("service", required: true)]
        public Input<string> Service { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.ConnectorTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
        /// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
        /// certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
        /// </summary>
        [Input("trustCertificates")]
        public Input<bool>? TrustCertificates { get; set; }

        /// <summary>
        /// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
        /// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
        /// fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
        /// </summary>
        [Input("trustFingerprints")]
        public Input<bool>? TrustFingerprints { get; set; }

        public ConnectorArgs()
        {
        }
        public static new ConnectorArgs Empty => new ConnectorArgs();
    }

    public sealed class ConnectorState : global::Pulumi.ResourceArgs
    {
        [Input("auth")]
        public Input<Inputs.ConnectorAuthGetArgs>? Auth { get; set; }

        [Input("config")]
        public Input<Inputs.ConnectorConfigGetArgs>? Config { get; set; }

        /// <summary>
        /// The unique identifier of the user who has created the connector in your account.
        /// </summary>
        [Input("connectedBy")]
        public Input<string>? ConnectedBy { get; set; }

        /// <summary>
        /// The timestamp of the time the connector was created in your account.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("destinationSchema")]
        public Input<Inputs.ConnectorDestinationSchemaGetArgs>? DestinationSchema { get; set; }

        /// <summary>
        /// The unique identifier for the Group (Destination) within the Fivetran system.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// The name used both as the connector's name within the Fivetran system and as the source schema's name within your
        /// destination.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies whether the setup tests should be run automatically. The default value is TRUE.
        /// </summary>
        [Input("runSetupTests")]
        public Input<bool>? RunSetupTests { get; set; }

        /// <summary>
        /// The connector type id within the Fivetran system.
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        [Input("timeouts")]
        public Input<Inputs.ConnectorTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
        /// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
        /// certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
        /// </summary>
        [Input("trustCertificates")]
        public Input<bool>? TrustCertificates { get; set; }

        /// <summary>
        /// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
        /// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
        /// fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
        /// </summary>
        [Input("trustFingerprints")]
        public Input<bool>? TrustFingerprints { get; set; }

        public ConnectorState()
        {
        }
        public static new ConnectorState Empty => new ConnectorState();
    }
}
