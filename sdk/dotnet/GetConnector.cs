// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran
{
    public static class GetConnector
    {
        /// <summary>
        /// This data source returns a connector object.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fivetran = Pulumi.Fivetran;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var connector = Fivetran.GetConnector.Invoke(new()
        ///     {
        ///         Id = "anonymous_mystery",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetConnectorResult> InvokeAsync(GetConnectorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConnectorResult>("fivetran:index/getConnector:getConnector", args ?? new GetConnectorArgs(), options.WithDefaults());

        /// <summary>
        /// This data source returns a connector object.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fivetran = Pulumi.Fivetran;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var connector = Fivetran.GetConnector.Invoke(new()
        ///     {
        ///         Id = "anonymous_mystery",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetConnectorResult> Invoke(GetConnectorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectorResult>("fivetran:index/getConnector:getConnector", args ?? new GetConnectorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectorArgs : global::Pulumi.InvokeArgs
    {
        [Input("config")]
        public Inputs.GetConnectorConfigArgs? Config { get; set; }

        [Input("destinationSchema")]
        public Inputs.GetConnectorDestinationSchemaArgs? DestinationSchema { get; set; }

        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("status")]
        public Inputs.GetConnectorStatusArgs? Status { get; set; }

        public GetConnectorArgs()
        {
        }
        public static new GetConnectorArgs Empty => new GetConnectorArgs();
    }

    public sealed class GetConnectorInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("config")]
        public Input<Inputs.GetConnectorConfigInputArgs>? Config { get; set; }

        [Input("destinationSchema")]
        public Input<Inputs.GetConnectorDestinationSchemaInputArgs>? DestinationSchema { get; set; }

        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("status")]
        public Input<Inputs.GetConnectorStatusInputArgs>? Status { get; set; }

        public GetConnectorInvokeArgs()
        {
        }
        public static new GetConnectorInvokeArgs Empty => new GetConnectorInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectorResult
    {
        public readonly Outputs.GetConnectorConfigResult? Config;
        public readonly string ConnectedBy;
        public readonly string CreatedAt;
        public readonly string DailySyncTime;
        public readonly Outputs.GetConnectorDestinationSchemaResult? DestinationSchema;
        public readonly string FailedAt;
        public readonly string GroupId;
        public readonly string Id;
        public readonly string Name;
        public readonly bool PauseAfterTrial;
        public readonly bool Paused;
        public readonly string ScheduleType;
        public readonly string Service;
        public readonly string ServiceVersion;
        public readonly Outputs.GetConnectorStatusResult? Status;
        public readonly string SucceededAt;
        public readonly int SyncFrequency;

        [OutputConstructor]
        private GetConnectorResult(
            Outputs.GetConnectorConfigResult? config,

            string connectedBy,

            string createdAt,

            string dailySyncTime,

            Outputs.GetConnectorDestinationSchemaResult? destinationSchema,

            string failedAt,

            string groupId,

            string id,

            string name,

            bool pauseAfterTrial,

            bool paused,

            string scheduleType,

            string service,

            string serviceVersion,

            Outputs.GetConnectorStatusResult? status,

            string succeededAt,

            int syncFrequency)
        {
            Config = config;
            ConnectedBy = connectedBy;
            CreatedAt = createdAt;
            DailySyncTime = dailySyncTime;
            DestinationSchema = destinationSchema;
            FailedAt = failedAt;
            GroupId = groupId;
            Id = id;
            Name = name;
            PauseAfterTrial = pauseAfterTrial;
            Paused = paused;
            ScheduleType = scheduleType;
            Service = service;
            ServiceVersion = serviceVersion;
            Status = status;
            SucceededAt = succeededAt;
            SyncFrequency = syncFrequency;
        }
    }
}
