// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran
{
    /// <summary>
    /// This resource is Deprecated, please follow the 1.5.0 migration guide to update the schema.
    /// 
    /// This resource allows you to add, manage and delete dbt Transformations for existing dbt Model.
    /// To retrieve available dbt Models use this [Retrieve dbt Project models](https://fivetran.com/docs/rest-api/dbt-transformation-management#retrievedbtprojectmodels) endpoint.
    /// 
    /// ## Import
    /// 
    /// 1. To import an existing `fivetran_dbt_transformation` resource into your Terraform state, you need to get **Transformation ID** on the transformation page in your Fivetran dashboard.
    /// 
    /// 2. Define an empty resource in your `.tf` configuration:
    /// 
    /// hcl
    /// 
    /// resource "fivetran_dbt_transformation" "my_imported_fivetran_dbt_transformation" {
    /// 
    /// }
    /// 
    /// 3. Run the `pulumi import` command:
    /// 
    /// ```sh
    /// $ pulumi import fivetran:index/dbtTransformation:DbtTransformation my_imported_fivetran_dbt_transformation {Transformation ID}
    /// ```
    /// 
    /// 4. Use the `terraform state show` command to get the values from the state:
    /// 
    /// terraform state show 'fivetran_dbt_transformation.my_imported_fivetran_dbt_transformation'
    /// 
    /// 5. Copy the values and paste them to your `.tf` configuration.
    /// </summary>
    [FivetranResourceType("fivetran:index/dbtTransformation:DbtTransformation")]
    public partial class DbtTransformation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifiers of related connectors.
        /// </summary>
        [Output("connectorIds")]
        public Output<ImmutableArray<string>> ConnectorIds { get; private set; } = null!;

        /// <summary>
        /// The timestamp of the dbt Transformation creation.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the dbt Model within the Fivetran system.
        /// </summary>
        [Output("dbtModelId")]
        public Output<string> DbtModelId { get; private set; } = null!;

        /// <summary>
        /// Target dbt Model name.
        /// </summary>
        [Output("dbtModelName")]
        public Output<string> DbtModelName { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the dbt Project within the Fivetran system.
        /// </summary>
        [Output("dbtProjectId")]
        public Output<string> DbtProjectId { get; private set; } = null!;

        /// <summary>
        /// Identifiers of related models.
        /// </summary>
        [Output("modelIds")]
        public Output<ImmutableArray<string>> ModelIds { get; private set; } = null!;

        /// <summary>
        /// The dbt Model name.
        /// </summary>
        [Output("outputModelName")]
        public Output<string> OutputModelName { get; private set; } = null!;

        /// <summary>
        /// The field indicating whether the transformation will be set into the paused state. By default, the value is false.
        /// </summary>
        [Output("paused")]
        public Output<bool> Paused { get; private set; } = null!;

        /// <summary>
        /// The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
        /// </summary>
        [Output("runTests")]
        public Output<bool> RunTests { get; private set; } = null!;

        [Output("schedule")]
        public Output<Outputs.DbtTransformationSchedule?> Schedule { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.DbtTransformationTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a DbtTransformation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DbtTransformation(string name, DbtTransformationArgs args, CustomResourceOptions? options = null)
            : base("fivetran:index/dbtTransformation:DbtTransformation", name, args ?? new DbtTransformationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DbtTransformation(string name, Input<string> id, DbtTransformationState? state = null, CustomResourceOptions? options = null)
            : base("fivetran:index/dbtTransformation:DbtTransformation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/footholdtech/pulumi-fivetran",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DbtTransformation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DbtTransformation Get(string name, Input<string> id, DbtTransformationState? state = null, CustomResourceOptions? options = null)
        {
            return new DbtTransformation(name, id, state, options);
        }
    }

    public sealed class DbtTransformationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Target dbt Model name.
        /// </summary>
        [Input("dbtModelName", required: true)]
        public Input<string> DbtModelName { get; set; } = null!;

        /// <summary>
        /// The unique identifier for the dbt Project within the Fivetran system.
        /// </summary>
        [Input("dbtProjectId", required: true)]
        public Input<string> DbtProjectId { get; set; } = null!;

        /// <summary>
        /// The field indicating whether the transformation will be set into the paused state. By default, the value is false.
        /// </summary>
        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        /// <summary>
        /// The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
        /// </summary>
        [Input("runTests")]
        public Input<bool>? RunTests { get; set; }

        [Input("schedule")]
        public Input<Inputs.DbtTransformationScheduleArgs>? Schedule { get; set; }

        [Input("timeouts")]
        public Input<Inputs.DbtTransformationTimeoutsArgs>? Timeouts { get; set; }

        public DbtTransformationArgs()
        {
        }
        public static new DbtTransformationArgs Empty => new DbtTransformationArgs();
    }

    public sealed class DbtTransformationState : global::Pulumi.ResourceArgs
    {
        [Input("connectorIds")]
        private InputList<string>? _connectorIds;

        /// <summary>
        /// Identifiers of related connectors.
        /// </summary>
        public InputList<string> ConnectorIds
        {
            get => _connectorIds ?? (_connectorIds = new InputList<string>());
            set => _connectorIds = value;
        }

        /// <summary>
        /// The timestamp of the dbt Transformation creation.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The unique identifier for the dbt Model within the Fivetran system.
        /// </summary>
        [Input("dbtModelId")]
        public Input<string>? DbtModelId { get; set; }

        /// <summary>
        /// Target dbt Model name.
        /// </summary>
        [Input("dbtModelName")]
        public Input<string>? DbtModelName { get; set; }

        /// <summary>
        /// The unique identifier for the dbt Project within the Fivetran system.
        /// </summary>
        [Input("dbtProjectId")]
        public Input<string>? DbtProjectId { get; set; }

        [Input("modelIds")]
        private InputList<string>? _modelIds;

        /// <summary>
        /// Identifiers of related models.
        /// </summary>
        public InputList<string> ModelIds
        {
            get => _modelIds ?? (_modelIds = new InputList<string>());
            set => _modelIds = value;
        }

        /// <summary>
        /// The dbt Model name.
        /// </summary>
        [Input("outputModelName")]
        public Input<string>? OutputModelName { get; set; }

        /// <summary>
        /// The field indicating whether the transformation will be set into the paused state. By default, the value is false.
        /// </summary>
        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        /// <summary>
        /// The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
        /// </summary>
        [Input("runTests")]
        public Input<bool>? RunTests { get; set; }

        [Input("schedule")]
        public Input<Inputs.DbtTransformationScheduleGetArgs>? Schedule { get; set; }

        [Input("timeouts")]
        public Input<Inputs.DbtTransformationTimeoutsGetArgs>? Timeouts { get; set; }

        public DbtTransformationState()
        {
        }
        public static new DbtTransformationState Empty => new DbtTransformationState();
    }
}
