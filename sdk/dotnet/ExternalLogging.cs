// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran
{
    /// <summary>
    /// ## Import
    /// 
    /// 1. To import an existing `fivetran_external_logging` resource into your Terraform state, you need to get **External Logging Group ID** on the external logging page in your Fivetran dashboard.
    /// 
    /// To retrieve existing groups, use the [fivetran_groups data source](/docs/data-sources/groups).
    /// 
    /// 2. Define an empty resource in your `.tf` configuration:
    /// 
    /// hcl
    /// 
    /// resource "fivetran_external_logging" "my_imported_external_logging" {
    /// 
    /// }
    /// 
    /// 3. Run the `pulumi import` command with the following parameters:
    /// 
    /// ```sh
    /// $ pulumi import fivetran:index/externalLogging:ExternalLogging my_imported_external_logging {your External Logging Group ID}
    /// ```
    /// 
    /// 4. Use the `terraform state show` command to get the values from the state:
    /// 
    /// terraform state show 'fivetran_external_logging.my_imported_external_logging'
    /// 
    /// 5. Copy the values and paste them to your `.tf` configuration.
    /// 
    /// -&gt; The `config` object in the state contains all properties defined in the schema. You need to remove properties from the `config` that are not related to destinations. See the [Fivetran REST API documentation](https://fivetran.com/docs/rest-api/log-service-management#logservicesetupconfigurations) for reference to find the properties you need to keep in the `config` section.
    /// </summary>
    [FivetranResourceType("fivetran:index/externalLogging:ExternalLogging")]
    public partial class ExternalLogging : global::Pulumi.CustomResource
    {
        [Output("config")]
        public Output<Outputs.ExternalLoggingConfig?> Config { get; private set; } = null!;

        /// <summary>
        /// The boolean value specifying whether the log service is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the log service within the Fivetran system.
        /// </summary>
        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the setup tests should be run automatically. The default value is TRUE.
        /// </summary>
        [Output("runSetupTests")]
        public Output<bool?> RunSetupTests { get; private set; } = null!;

        /// <summary>
        /// The name for the log service type within the Fivetran system. We support the following log services: azure*monitor*log, cloudwatch, datadog*log, new*relic_log, splunkLog, stackdriver.
        /// </summary>
        [Output("service")]
        public Output<string> Service { get; private set; } = null!;


        /// <summary>
        /// Create a ExternalLogging resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ExternalLogging(string name, ExternalLoggingArgs args, CustomResourceOptions? options = null)
            : base("fivetran:index/externalLogging:ExternalLogging", name, args ?? new ExternalLoggingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ExternalLogging(string name, Input<string> id, ExternalLoggingState? state = null, CustomResourceOptions? options = null)
            : base("fivetran:index/externalLogging:ExternalLogging", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/footholdtech/pulumi-fivetran",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ExternalLogging resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ExternalLogging Get(string name, Input<string> id, ExternalLoggingState? state = null, CustomResourceOptions? options = null)
        {
            return new ExternalLogging(name, id, state, options);
        }
    }

    public sealed class ExternalLoggingArgs : global::Pulumi.ResourceArgs
    {
        [Input("config")]
        public Input<Inputs.ExternalLoggingConfigArgs>? Config { get; set; }

        /// <summary>
        /// The boolean value specifying whether the log service is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The unique identifier for the log service within the Fivetran system.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        /// <summary>
        /// Specifies whether the setup tests should be run automatically. The default value is TRUE.
        /// </summary>
        [Input("runSetupTests")]
        public Input<bool>? RunSetupTests { get; set; }

        /// <summary>
        /// The name for the log service type within the Fivetran system. We support the following log services: azure*monitor*log, cloudwatch, datadog*log, new*relic_log, splunkLog, stackdriver.
        /// </summary>
        [Input("service", required: true)]
        public Input<string> Service { get; set; } = null!;

        public ExternalLoggingArgs()
        {
        }
        public static new ExternalLoggingArgs Empty => new ExternalLoggingArgs();
    }

    public sealed class ExternalLoggingState : global::Pulumi.ResourceArgs
    {
        [Input("config")]
        public Input<Inputs.ExternalLoggingConfigGetArgs>? Config { get; set; }

        /// <summary>
        /// The boolean value specifying whether the log service is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The unique identifier for the log service within the Fivetran system.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// Specifies whether the setup tests should be run automatically. The default value is TRUE.
        /// </summary>
        [Input("runSetupTests")]
        public Input<bool>? RunSetupTests { get; set; }

        /// <summary>
        /// The name for the log service type within the Fivetran system. We support the following log services: azure*monitor*log, cloudwatch, datadog*log, new*relic_log, splunkLog, stackdriver.
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        public ExternalLoggingState()
        {
        }
        public static new ExternalLoggingState Empty => new ExternalLoggingState();
    }
}
