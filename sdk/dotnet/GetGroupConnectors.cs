// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran
{
    public static class GetGroupConnectors
    {
        /// <summary>
        /// This data source returns a list of information about all connectors within a group in your Fivetran account.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fivetran = Pulumi.Fivetran;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var groupConnectors = Fivetran.GetGroupConnectors.Invoke(new()
        ///     {
        ///         Id = "anonymous_mystery",
        ///         Schema = "connector_schema_name",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetGroupConnectorsResult> InvokeAsync(GetGroupConnectorsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGroupConnectorsResult>("fivetran:index/getGroupConnectors:getGroupConnectors", args ?? new GetGroupConnectorsArgs(), options.WithDefaults());

        /// <summary>
        /// This data source returns a list of information about all connectors within a group in your Fivetran account.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fivetran = Pulumi.Fivetran;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var groupConnectors = Fivetran.GetGroupConnectors.Invoke(new()
        ///     {
        ///         Id = "anonymous_mystery",
        ///         Schema = "connector_schema_name",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetGroupConnectorsResult> Invoke(GetGroupConnectorsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGroupConnectorsResult>("fivetran:index/getGroupConnectors:getGroupConnectors", args ?? new GetGroupConnectorsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGroupConnectorsArgs : global::Pulumi.InvokeArgs
    {
        [Input("connectors")]
        private List<Inputs.GetGroupConnectorsConnectorArgs>? _connectors;
        public List<Inputs.GetGroupConnectorsConnectorArgs> Connectors
        {
            get => _connectors ?? (_connectors = new List<Inputs.GetGroupConnectorsConnectorArgs>());
            set => _connectors = value;
        }

        /// <summary>
        /// The ID of this resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// Optional filter. When defined, the data source will only contain information for the connector with the specified schema name.
        /// </summary>
        [Input("schema")]
        public string? Schema { get; set; }

        public GetGroupConnectorsArgs()
        {
        }
        public static new GetGroupConnectorsArgs Empty => new GetGroupConnectorsArgs();
    }

    public sealed class GetGroupConnectorsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("connectors")]
        private InputList<Inputs.GetGroupConnectorsConnectorInputArgs>? _connectors;
        public InputList<Inputs.GetGroupConnectorsConnectorInputArgs> Connectors
        {
            get => _connectors ?? (_connectors = new InputList<Inputs.GetGroupConnectorsConnectorInputArgs>());
            set => _connectors = value;
        }

        /// <summary>
        /// The ID of this resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// Optional filter. When defined, the data source will only contain information for the connector with the specified schema name.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        public GetGroupConnectorsInvokeArgs()
        {
        }
        public static new GetGroupConnectorsInvokeArgs Empty => new GetGroupConnectorsInvokeArgs();
    }


    [OutputType]
    public sealed class GetGroupConnectorsResult
    {
        public readonly ImmutableArray<Outputs.GetGroupConnectorsConnectorResult> Connectors;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Optional filter. When defined, the data source will only contain information for the connector with the specified schema name.
        /// </summary>
        public readonly string? Schema;

        [OutputConstructor]
        private GetGroupConnectorsResult(
            ImmutableArray<Outputs.GetGroupConnectorsConnectorResult> connectors,

            string id,

            string? schema)
        {
            Connectors = connectors;
            Id = id;
            Schema = schema;
        }
    }
}
