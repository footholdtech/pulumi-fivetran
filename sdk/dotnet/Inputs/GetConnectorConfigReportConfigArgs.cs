// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran.Inputs
{

    public sealed class GetConnectorConfigReportConfigInputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `yahoo_dsp`: Set the value to `PREBUILT` if it's one of the preconfigured reports (see the `prebuilt_report_type` option). Otherwise, set to `CUSTOM`.
        /// </summary>
        [Input("configType", required: true)]
        public Input<string> ConfigType { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `yahoo_dsp`: [Currency](https://developer.yahooinc.com/dsp/api/docs/reporting/payloadspec.html) used in a report. Default value: `USD`.
        /// </summary>
        [Input("currency", required: true)]
        public Input<string> Currency { get; set; } = null!;

        [Input("dimensions", required: true)]
        private InputList<string>? _dimensions;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `yahoo_dsp`: [Dimensions](https://developer.yahooinc.com/dsp/api/docs/reporting/dimensions.html) used in a report. Must be populated if `config_type` is set to `CUSTOM`.
        /// </summary>
        public InputList<string> Dimensions
        {
            get => _dimensions ?? (_dimensions = new InputList<string>());
            set => _dimensions = value;
        }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `yahoo_dsp`: The [granularity](https://developer.yahooinc.com/dsp/api/docs/reporting/range-examples.html#interval-type-id) of data in a report. Default value: `DAY`.
        /// </summary>
        [Input("intervalType", required: true)]
        public Input<string> IntervalType { get; set; } = null!;

        [Input("metrics", required: true)]
        private InputList<string>? _metrics;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `yahoo_dsp`: [Metrics](https://developer.yahooinc.com/dsp/api/docs/reporting/metrics.html) used in a report. Must be populated if `config_type` is set to `CUSTOM`.
        /// </summary>
        public InputList<string> Metrics
        {
            get => _metrics ?? (_metrics = new InputList<string>());
            set => _metrics = value;
        }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `yahoo_dsp`: Specific report type to sync. Must be populated if `config_type` is set to `PREBUILT`.
        /// </summary>
        [Input("prebuiltReportType", required: true)]
        public Input<string> PrebuiltReportType { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `yahoo_dsp`: Table name in destination.
        /// </summary>
        [Input("reportName", required: true)]
        public Input<string> ReportName { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `yahoo_dsp`: Specify the time zone to be used to request report data
        /// </summary>
        [Input("timeZone", required: true)]
        public Input<string> TimeZone { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `yahoo_dsp`: Use advertiser timezone to request report data.
        /// </summary>
        [Input("useAdvertiserTimezone", required: true)]
        public Input<bool> UseAdvertiserTimezone { get; set; } = null!;

        public GetConnectorConfigReportConfigInputArgs()
        {
        }
        public static new GetConnectorConfigReportConfigInputArgs Empty => new GetConnectorConfigReportConfigInputArgs();
    }
}
