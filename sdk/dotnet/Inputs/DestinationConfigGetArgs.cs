// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran.Inputs
{

    public sealed class DestinationConfigGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `aurora_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_postgres_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_data_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_database`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_managed_db_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_rds_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_rds_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `panoply`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `periscope_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_gcp_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_rds_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `redshift`: Require TLS through Tunnel
        /// 	- Service `sql_server_rds_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// </summary>
        [Input("alwaysEncrypted")]
        public Input<bool>? AlwaysEncrypted { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `snowflake`: Password-based or key-based authentication type
        /// </summary>
        [Input("auth")]
        public Input<string>? Auth { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Authentication type
        /// 	- Service `databricks`: Authentication type
        /// 	- Service `new_s3_datalake`: Authentication type
        /// 	- Service `onelake`: Authentication type
        /// 	- Service `redshift`: Authentication type. Default value: `PASSWORD`.
        /// </summary>
        [Input("authType")]
        public Input<string>? AuthType { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `new_s3_datalake`: AWS access key to access the S3 bucket and AWS Glue
        /// </summary>
        [Input("awsAccessKeyId")]
        public Input<string>? AwsAccessKeyId { get; set; }

        [Input("awsSecretAccessKey")]
        private Input<string>? _awsSecretAccessKey;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `new_s3_datalake`: AWS secret access key to access the S3 bucket and AWS Glue
        /// </summary>
        public Input<string>? AwsSecretAccessKey
        {
            get => _awsSecretAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _awsSecretAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("bootstrapServers")]
        private InputList<string>? _bootstrapServers;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Comma-separated list of Confluent Cloud servers in the `server:port` format.
        /// </summary>
        public InputList<string> BootstrapServers
        {
            get => _bootstrapServers ?? (_bootstrapServers = new InputList<string>());
            set => _bootstrapServers = value;
        }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `big_query`: Customer bucket. If specified, your GCS bucket will be used to process the data instead of a Fivetran-managed bucket. The bucket must be present in the same location as the dataset location.
        /// 	- Service `big_query_dts`: Customer bucket. If specified, your GCS bucket will be used to process the data instead of a Fivetran-managed bucket. The bucket must be present in the same location as the dataset location.
        /// 	- Service `managed_big_query`: Customer bucket. If specified, your GCS bucket will be used to process the data instead of a Fivetran-managed bucket. The bucket must be present in the same location as the dataset location.
        /// 	- Service `new_s3_datalake`: (Immutable) The name of the bucket to be used as destination
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Catalog name
        /// 	- Service `databricks`: Catalog name
        /// 	- Service `new_s3_datalake`: Catalog name
        /// 	- Service `onelake`: Catalog name
        /// </summary>
        [Input("catalog")]
        public Input<string>? Catalog { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Client id of service principal
        /// 	- Service `onelake`: Client ID of service principal
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `databricks`: Databricks deployment cloud
        /// </summary>
        [Input("cloudProvider")]
        public Input<string>? CloudProvider { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `panoply`: Cluster ID.
        /// 	- Service `periscope_warehouse`: Cluster ID.
        /// 	- Service `redshift`: Cluster ID. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `panoply`: Cluster region.
        /// 	- Service `periscope_warehouse`: Cluster region.
        /// 	- Service `redshift`: Cluster region. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
        /// </summary>
        [Input("clusterRegion")]
        public Input<string>? ClusterRegion { get; set; }

        [Input("connectionMethod")]
        public Input<string>? ConnectionMethod { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Connection method. Default value: `Directly`.
        /// 	- Service `aurora_postgres_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `aurora_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `azure_postgres_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `azure_sql_data_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `azure_sql_database`: Connection method. Default value: `Directly`.
        /// 	- Service `azure_sql_managed_db_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `databricks`: Connection method. Default value: `Directly`.
        /// 	- Service `maria_rds_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `maria_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `mysql_rds_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `mysql_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `panoply`: Connection method. Default value: `Directly`.
        /// 	- Service `periscope_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `postgres_gcp_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `postgres_rds_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `postgres_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `redshift`: Connection method. Default value: `Directly`.
        /// 	- Service `snowflake`: Connection method. Default value: `Directly`.
        /// 	- Service `sql_server_rds_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `sql_server_warehouse`: Connection method. Default value: `Directly`.
        /// </summary>
        [Input("connectionType")]
        public Input<string>? ConnectionType { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: (Immutable) Container to store delta table files
        /// 	- Service `onelake`: Workspace name to store delta table files
        /// </summary>
        [Input("containerName")]
        public Input<string>? ContainerName { get; set; }

        [Input("controllerId")]
        public Input<string>? ControllerId { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `databricks`: Whether to create external tables
        /// </summary>
        [Input("createExternalTables")]
        public Input<bool>? CreateExternalTables { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Confluent Cloud message format.
        /// </summary>
        [Input("dataFormat")]
        public Input<string>? DataFormat { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `big_query`: Data location. Datasets will reside in this location.
        /// 	- Service `big_query_dts`: Data location. Datasets will reside in this location.
        /// 	- Service `managed_big_query`: Data location. Datasets will reside in this location.
        /// </summary>
        [Input("dataSetLocation")]
        public Input<string>? DataSetLocation { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: Database name
        /// 	- Service `aurora_warehouse`: Database name
        /// 	- Service `azure_postgres_warehouse`: Database name
        /// 	- Service `azure_sql_data_warehouse`: Database name
        /// 	- Service `azure_sql_database`: Database name
        /// 	- Service `azure_sql_managed_db_warehouse`: Database name
        /// 	- Service `maria_rds_warehouse`: Database name
        /// 	- Service `maria_warehouse`: Database name
        /// 	- Service `mysql_rds_warehouse`: Database name
        /// 	- Service `mysql_warehouse`: Database name
        /// 	- Service `panoply`: Database name
        /// 	- Service `periscope_warehouse`: Database name
        /// 	- Service `postgres_gcp_warehouse`: Database name
        /// 	- Service `postgres_rds_warehouse`: Database name
        /// 	- Service `postgres_warehouse`: Database name
        /// 	- Service `redshift`: Database name
        /// 	- Service `snowflake`: Database name
        /// 	- Service `sql_server_rds_warehouse`: Database name
        /// 	- Service `sql_server_warehouse`: Database name
        /// </summary>
        [Input("database")]
        public Input<string>? Database { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Databricks Connection method. Default value: `Directly`.
        /// 	- Service `new_s3_datalake`: Databricks Connection method. Default value: `Directly`.
        /// 	- Service `onelake`: Databricks Connection method. Default value: `Directly`.
        /// </summary>
        [Input("databricksConnectionType")]
        public Input<string>? DatabricksConnectionType { get; set; }

        [Input("enableExternalStorageForUnstructuredFiles")]
        public Input<bool>? EnableExternalStorageForUnstructuredFiles { get; set; }

        [Input("enableRemoteExecution")]
        public Input<bool>? EnableRemoteExecution { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Populate all tables in a single topic.
        /// </summary>
        [Input("enableSingleTopic")]
        public Input<bool>? EnableSingleTopic { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aws_msk_wh`: Fivetran generated External ID
        /// 	- Service `panoply`: Fivetran generated External ID
        /// 	- Service `periscope_warehouse`: Fivetran generated External ID
        /// 	- Service `redshift`: Fivetran generated External ID
        /// </summary>
        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `databricks`: External location to store Delta tables. Default value: `""`  (null). By default, the external tables will reside in the `/{schema}/{table}` path, and if you specify an external location in the `{externalLocation}/{schema}/{table}` path.
        /// </summary>
        [Input("externalLocation")]
        public Input<string>? ExternalLocation { get; set; }

        [Input("externalStageStorageProvider")]
        public Input<string>? ExternalStageStorageProvider { get; set; }

        [Input("externalStorageIntegration")]
        public Input<string>? ExternalStorageIntegration { get; set; }

        [Input("externalStorageParentFolderUri")]
        public Input<string>? ExternalStorageParentFolderUri { get; set; }

        [Input("fivetranGlueRoleArn")]
        public Input<string>? FivetranGlueRoleArn { get; set; }

        [Input("fivetranMskRoleArn")]
        public Input<string>? FivetranMskRoleArn { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `new_s3_datalake`: ARN of the role which you created with different required policy mentioned in our setup guide
        /// </summary>
        [Input("fivetranRoleArn")]
        public Input<string>? FivetranRoleArn { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: Server name
        /// 	- Service `aurora_warehouse`: Server name
        /// 	- Service `azure_postgres_warehouse`: Server name
        /// 	- Service `azure_sql_data_warehouse`: Server name
        /// 	- Service `azure_sql_database`: Server name
        /// 	- Service `azure_sql_managed_db_warehouse`: Server name
        /// 	- Service `maria_rds_warehouse`: Server name
        /// 	- Service `maria_warehouse`: Server name
        /// 	- Service `mysql_rds_warehouse`: Server name
        /// 	- Service `mysql_warehouse`: Server name
        /// 	- Service `panoply`: Server name
        /// 	- Service `periscope_warehouse`: Server name
        /// 	- Service `postgres_gcp_warehouse`: Server name
        /// 	- Service `postgres_rds_warehouse`: Server name
        /// 	- Service `postgres_warehouse`: Server name
        /// 	- Service `redshift`: Server name
        /// 	- Service `snowflake`: Server name
        /// 	- Service `sql_server_rds_warehouse`: Server name
        /// 	- Service `sql_server_warehouse`: Server name
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: HTTP path
        /// 	- Service `databricks`: HTTP path
        /// 	- Service `new_s3_datalake`: HTTP path
        /// 	- Service `onelake`: HTTP path
        /// </summary>
        [Input("httpPath")]
        public Input<string>? HttpPath { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `snowflake`: Indicates that a private key is encrypted. The default value: `false`. The field can be specified if authentication type is `KEY_PAIR`.
        /// </summary>
        [Input("isPrivateKeyEncrypted")]
        public Input<bool>? IsPrivateKeyEncrypted { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `new_s3_datalake`: We use PrivateLink by default if your s3 bucket is in the same region as Fivetran. Turning on this toggle ensures that Fivetran always connects to s3 bucket over PrivateLink. Learn more in our [PrivateLink documentation](https://fivetran.com/docs/connectors/databases/connection-options#awsprivatelinkbeta).
        /// </summary>
        [Input("isPrivateLinkRequired")]
        public Input<bool>? IsPrivateLinkRequired { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `redshift`: Is your destination Redshift Serverless
        /// </summary>
        [Input("isRedshiftServerless")]
        public Input<bool>? IsRedshiftServerless { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `onelake`: (Immutable) OneLake lakehouse GUID
        /// </summary>
        [Input("lakehouseGuid")]
        public Input<string>? LakehouseGuid { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `onelake`: (Immutable) Name of your lakehouse
        /// </summary>
        [Input("lakehouseName")]
        public Input<string>? LakehouseName { get; set; }

        [Input("mskStsRegion")]
        public Input<string>? MskStsRegion { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Number of partitions per topic.
        /// </summary>
        [Input("numOfPartitions")]
        public Input<int>? NumOfPartitions { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: OAuth 2.0 client ID
        /// 	- Service `databricks`: OAuth 2.0 client ID
        /// 	- Service `new_s3_datalake`: OAuth 2.0 client ID
        /// 	- Service `onelake`: OAuth 2.0 client ID
        /// </summary>
        [Input("oauth2ClientId")]
        public Input<string>? Oauth2ClientId { get; set; }

        [Input("oauth2Secret")]
        private Input<string>? _oauth2Secret;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: OAuth 2.0 secret
        /// 	- Service `databricks`: OAuth 2.0 secret
        /// 	- Service `new_s3_datalake`: OAuth 2.0 secret
        /// 	- Service `onelake`: OAuth 2.0 secret
        /// </summary>
        public Input<string>? Oauth2Secret
        {
            get => _oauth2Secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _oauth2Secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("passphrase")]
        private Input<string>? _passphrase;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `snowflake`: In case private key is encrypted, you are required to enter passphrase that was used to encrypt the private key. The field can be specified if authentication type is `KEY_PAIR`.
        /// </summary>
        public Input<string>? Passphrase
        {
            get => _passphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: Database user password
        /// 	- Service `aurora_warehouse`: Database user password
        /// 	- Service `azure_postgres_warehouse`: Database user password
        /// 	- Service `azure_sql_data_warehouse`: Database user password
        /// 	- Service `azure_sql_database`: Database user password
        /// 	- Service `azure_sql_managed_db_warehouse`: Database user password
        /// 	- Service `maria_rds_warehouse`: Database user password
        /// 	- Service `maria_warehouse`: Database user password
        /// 	- Service `mysql_rds_warehouse`: Database user password
        /// 	- Service `mysql_warehouse`: Database user password
        /// 	- Service `panoply`: Database user password
        /// 	- Service `periscope_warehouse`: Database user password
        /// 	- Service `postgres_gcp_warehouse`: Database user password
        /// 	- Service `postgres_rds_warehouse`: Database user password
        /// 	- Service `postgres_warehouse`: Database user password
        /// 	- Service `redshift`: Database user password. Required if authentication type is `PASSWORD`.
        /// 	- Service `snowflake`: Database user password. The field should be specified if authentication type is `PASSWORD`.
        /// 	- Service `sql_server_rds_warehouse`: Database user password
        /// 	- Service `sql_server_warehouse`: Database user password
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("personalAccessToken")]
        private Input<string>? _personalAccessToken;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Personal access token
        /// 	- Service `databricks`: Personal access token
        /// 	- Service `new_s3_datalake`: Personal access token
        /// 	- Service `onelake`: Personal access token
        /// </summary>
        public Input<string>? PersonalAccessToken
        {
            get => _personalAccessToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _personalAccessToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Server port number
        /// 	- Service `aurora_postgres_warehouse`: Server port number
        /// 	- Service `aurora_warehouse`: Server port number
        /// 	- Service `azure_postgres_warehouse`: Server port number
        /// 	- Service `azure_sql_data_warehouse`: Server port number
        /// 	- Service `azure_sql_database`: Server port number
        /// 	- Service `azure_sql_managed_db_warehouse`: Server port number
        /// 	- Service `databricks`: Server port number
        /// 	- Service `maria_rds_warehouse`: Server port number
        /// 	- Service `maria_warehouse`: Server port number
        /// 	- Service `mysql_rds_warehouse`: Server port number
        /// 	- Service `mysql_warehouse`: Server port number
        /// 	- Service `new_s3_datalake`: Server port number
        /// 	- Service `onelake`: Server port number
        /// 	- Service `panoply`: Server port number
        /// 	- Service `periscope_warehouse`: Server port number
        /// 	- Service `postgres_gcp_warehouse`: Server port number
        /// 	- Service `postgres_rds_warehouse`: Server port number
        /// 	- Service `postgres_warehouse`: Server port number
        /// 	- Service `redshift`: Server port number
        /// 	- Service `snowflake`: Server port number
        /// 	- Service `sql_server_rds_warehouse`: Server port number
        /// 	- Service `sql_server_warehouse`: Server port number
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: (Immutable) path/to/data within the container
        /// 	- Service `new_s3_datalake`: (Immutable) Prefix path of the bucket for which you have configured access policy. It is not required if access has been granted to entire Bucket in the access policy
        /// 	- Service `onelake`: (Immutable) path/to/data within your lakehouse inside the Files directory
        /// </summary>
        [Input("prefixPath")]
        public Input<string>? PrefixPath { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `snowflake`: Private access key.  The field should be specified if authentication type is `KEY_PAIR`.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `big_query`: BigQuery project ID
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: Public Key
        /// 	- Service `aurora_warehouse`: Public Key
        /// 	- Service `azure_postgres_warehouse`: Public Key
        /// 	- Service `azure_sql_data_warehouse`: Public Key
        /// 	- Service `azure_sql_database`: Public Key
        /// 	- Service `azure_sql_managed_db_warehouse`: Public Key
        /// 	- Service `maria_rds_warehouse`: Public Key
        /// 	- Service `maria_warehouse`: Public Key
        /// 	- Service `mysql_rds_warehouse`: Public Key
        /// 	- Service `mysql_warehouse`: Public Key
        /// 	- Service `panoply`: Public Key
        /// 	- Service `periscope_warehouse`: Public Key
        /// 	- Service `postgres_gcp_warehouse`: Public Key
        /// 	- Service `postgres_rds_warehouse`: Public Key
        /// 	- Service `postgres_warehouse`: Public Key
        /// 	- Service `redshift`: Public Key
        /// 	- Service `sql_server_rds_warehouse`: Public Key
        /// 	- Service `sql_server_warehouse`: Public Key
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `new_s3_datalake`: Region of your AWS S3 bucket
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("registryName")]
        public Input<string>? RegistryName { get; set; }

        [Input("registryStsRegion")]
        public Input<string>? RegistryStsRegion { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Replication factor.
        /// </summary>
        [Input("replicationFactor")]
        public Input<int>? ReplicationFactor { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `aurora_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `azure_postgres_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `azure_sql_data_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `azure_sql_database`: Field to test Self serve Private Link
        /// 	- Service `azure_sql_managed_db_warehouse`: Field to test Self serve Private Link
        /// 	- Service `databricks`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `maria_rds_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `maria_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `mysql_rds_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `mysql_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `panoply`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `periscope_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `postgres_gcp_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `postgres_rds_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `postgres_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `redshift`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `snowflake`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `sql_server_rds_warehouse`: Field to test Self serve Private Link
        /// 	- Service `sql_server_warehouse`: Field to test Self serve Private Link
        /// </summary>
        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `snowflake`: If not specified, Fivetran will use the user's default role
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        [Input("roleArn")]
        private Input<string>? _roleArn;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `redshift`: Role ARN with Redshift permissions. Required if authentication type is `IAM`.
        /// </summary>
        public Input<string>? RoleArn
        {
            get => _roleArn;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _roleArn = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Security protocol for Confluent Cloud interaction.
        /// </summary>
        [Input("saslMechanism")]
        public Input<string>? SaslMechanism { get; set; }

        [Input("saslPlainKey")]
        private Input<string>? _saslPlainKey;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Confluent Cloud SASL key.
        /// </summary>
        public Input<string>? SaslPlainKey
        {
            get => _saslPlainKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _saslPlainKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("saslPlainSecret")]
        private Input<string>? _saslPlainSecret;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Confluent Cloud SASL secret.
        /// </summary>
        public Input<string>? SaslPlainSecret
        {
            get => _saslPlainSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _saslPlainSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("schemaCompatibility")]
        public Input<string>? SchemaCompatibility { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Schema Registry
        /// </summary>
        [Input("schemaRegistry")]
        public Input<string>? SchemaRegistry { get; set; }

        [Input("schemaRegistryApiKey")]
        private Input<string>? _schemaRegistryApiKey;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Schema registry API key.
        /// </summary>
        public Input<string>? SchemaRegistryApiKey
        {
            get => _schemaRegistryApiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _schemaRegistryApiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("schemaRegistryApiSecret")]
        private Input<string>? _schemaRegistryApiSecret;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Schema registry API secret.
        /// </summary>
        public Input<string>? SchemaRegistryApiSecret
        {
            get => _schemaRegistryApiSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _schemaRegistryApiSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Schema registry URL.
        /// </summary>
        [Input("schemaRegistryUrl")]
        public Input<string>? SchemaRegistryUrl { get; set; }

        [Input("secretKey")]
        private Input<string>? _secretKey;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `big_query`: Private key of the customer service account. If specified, your service account will be used to process the data instead of the Fivetran-managed service account.
        /// 	- Service `big_query_dts`: Private key of the customer service account. If specified, your service account will be used to process the data instead of the Fivetran-managed service account.
        /// 	- Service `managed_big_query`: Private key of the customer service account. If specified, your service account will be used to process the data instead of the Fivetran-managed service account.
        /// </summary>
        public Input<string>? SecretKey
        {
            get => _secretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("secretValue")]
        private Input<string>? _secretValue;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Secret value for service principal
        /// 	- Service `onelake`: Secret value for service principal
        /// </summary>
        public Input<string>? SecretValue
        {
            get => _secretValue;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretValue = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Security protocol for Confluent Cloud interaction.
        /// </summary>
        [Input("securityProtocol")]
        public Input<string>? SecurityProtocol { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Server Host name
        /// 	- Service `databricks`: Server name
        /// 	- Service `new_s3_datalake`: Server host name
        /// 	- Service `onelake`: Server Host name
        /// </summary>
        [Input("serverHostName")]
        public Input<string>? ServerHostName { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Should maintain tables in Databricks 
        /// 	- Service `new_s3_datalake`: Should maintain tables in Databricks 
        /// 	- Service `onelake`: Should maintain tables in Databricks
        /// </summary>
        [Input("shouldMaintainTablesInDatabricks")]
        public Input<bool>? ShouldMaintainTablesInDatabricks { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Snapshots older than the retention period are deleted every week. Default value: `ONE_WEEK`.
        /// 	- Service `new_s3_datalake`: Snapshots older than the retention period are deleted every week. Default value: `ONE_WEEK`.
        /// 	- Service `onelake`: Snapshots older than the retention period are deleted every week. Default value: `ONE_WEEK`.
        /// </summary>
        [Input("snapshotRetentionPeriod")]
        public Input<string>? SnapshotRetentionPeriod { get; set; }

        [Input("snowflakeCloud")]
        public Input<string>? SnowflakeCloud { get; set; }

        [Input("snowflakeRegion")]
        public Input<string>? SnowflakeRegion { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: (Immutable) Storage account for Azure Data Lake Storage Gen2 name
        /// 	- Service `onelake`: (Immutable) Storage account for Azure Data Lake Storage Gen2 name
        /// </summary>
        [Input("storageAccountName")]
        public Input<string>? StorageAccountName { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `new_s3_datalake`: (Immutable) The table format in which you want to sync your tables. Valid values are ICEBERG and DELTA_LAKE
        /// </summary>
        [Input("tableFormat")]
        public Input<string>? TableFormat { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Tenant id of service principal
        /// 	- Service `onelake`: Tenant ID of service principal
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `aurora_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_postgres_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_data_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_database`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_managed_db_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_rds_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_rds_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `panoply`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `periscope_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_gcp_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_rds_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `redshift`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_rds_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// </summary>
        [Input("tunnelHost")]
        public Input<string>? TunnelHost { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `aurora_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_postgres_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_data_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_database`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_managed_db_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_rds_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_rds_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `panoply`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `periscope_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_gcp_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_rds_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `redshift`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_rds_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// </summary>
        [Input("tunnelPort")]
        public Input<int>? TunnelPort { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `aurora_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_postgres_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_data_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_database`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_managed_db_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_rds_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_rds_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `panoply`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `periscope_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_gcp_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_rds_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `redshift`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_rds_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// </summary>
        [Input("tunnelUser")]
        public Input<string>? TunnelUser { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: Database user name
        /// 	- Service `aurora_warehouse`: Database user name
        /// 	- Service `azure_postgres_warehouse`: Database user name
        /// 	- Service `azure_sql_data_warehouse`: Database user name
        /// 	- Service `azure_sql_database`: Database user name
        /// 	- Service `azure_sql_managed_db_warehouse`: Database user name
        /// 	- Service `maria_rds_warehouse`: Database user name
        /// 	- Service `maria_warehouse`: Database user name
        /// 	- Service `mysql_rds_warehouse`: Database user name
        /// 	- Service `mysql_warehouse`: Database user name
        /// 	- Service `panoply`: Database user name
        /// 	- Service `periscope_warehouse`: Database user name
        /// 	- Service `postgres_gcp_warehouse`: Database user name
        /// 	- Service `postgres_rds_warehouse`: Database user name
        /// 	- Service `postgres_warehouse`: Database user name
        /// 	- Service `redshift`: Database user name
        /// 	- Service `snowflake`: Database user name
        /// 	- Service `sql_server_rds_warehouse`: Database user name
        /// 	- Service `sql_server_warehouse`: Database user name
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `onelake`: (Immutable) OneLake workspace GUID
        /// </summary>
        [Input("workspaceGuid")]
        public Input<string>? WorkspaceGuid { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `onelake`: OneLake workspace name
        /// </summary>
        [Input("workspaceName")]
        public Input<string>? WorkspaceName { get; set; }

        public DestinationConfigGetArgs()
        {
        }
        public static new DestinationConfigGetArgs Empty => new DestinationConfigGetArgs();
    }
}
