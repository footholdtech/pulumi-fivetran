// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran.Inputs
{

    public sealed class DestinationConfigGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The connector authorization settings. Check possible config formats in [create method](https://www.terraform.io/openapi/reference/v1/operation/create_connector/)
        /// </summary>
        [Input("auth")]
        public Input<string>? Auth { get; set; }

        /// <summary>
        /// Authentication type. Default value: `PASSWORD`.
        /// </summary>
        [Input("authType")]
        public Input<string>? AuthType { get; set; }

        /// <summary>
        /// Customer bucket. If specified, your GCS bucket will be used to process the data instead of a Fivetran-managed bucket. The bucket must be present in the same location as the dataset location.
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// Catalog name
        /// </summary>
        [Input("catalog")]
        public Input<string>? Catalog { get; set; }

        /// <summary>
        /// Cluster ID. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Cluster region. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
        /// </summary>
        [Input("clusterRegion")]
        public Input<string>? ClusterRegion { get; set; }

        /// <summary>
        /// Connection method. Default value: `Directly`.
        /// </summary>
        [Input("connectionType")]
        public Input<string>? ConnectionType { get; set; }

        /// <summary>
        /// Whether to create external tables
        /// </summary>
        [Input("createExternalTables")]
        public Input<string>? CreateExternalTables { get; set; }

        /// <summary>
        /// Data location. Datasets will reside in this location.
        /// </summary>
        [Input("dataSetLocation")]
        public Input<string>? DataSetLocation { get; set; }

        /// <summary>
        /// Database name
        /// </summary>
        [Input("database")]
        public Input<string>? Database { get; set; }

        /// <summary>
        /// External location to store Delta tables. Default value: `""`  (null). By default, the external tables will reside in the `/{schema}/{table}` path, and if you specify an external location in the `{externalLocation}/{schema}/{table}` path.
        /// </summary>
        [Input("externalLocation")]
        public Input<string>? ExternalLocation { get; set; }

        /// <summary>
        /// ARN of the role which you created with different required policy mentioned in our setup guide
        /// </summary>
        [Input("fivetranRoleArn")]
        public Input<string>? FivetranRoleArn { get; set; }

        /// <summary>
        /// Server name
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// HTTP path
        /// </summary>
        [Input("httpPath")]
        public Input<string>? HttpPath { get; set; }

        /// <summary>
        /// Indicates that a private key is encrypted. The default value: `false`. The field can be specified if authentication type is `KEY_PAIR`.
        /// </summary>
        [Input("isPrivateKeyEncrypted")]
        public Input<string>? IsPrivateKeyEncrypted { get; set; }

        [Input("passphrase")]
        private Input<string>? _passphrase;

        /// <summary>
        /// In case private key is encrypted, you are required to enter passphrase that was used to encrypt the private key. The field can be specified if authentication type is `KEY_PAIR`.
        /// </summary>
        public Input<string>? Passphrase
        {
            get => _passphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Database user password
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("personalAccessToken")]
        private Input<string>? _personalAccessToken;

        /// <summary>
        /// Personal access token
        /// </summary>
        public Input<string>? PersonalAccessToken
        {
            get => _personalAccessToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _personalAccessToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Server port number
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Prefix path of the bucket for which you have configured access policy. It is not required if access has been granted to entire Bucket in the access policy
        /// </summary>
        [Input("prefixPath")]
        public Input<string>? PrefixPath { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// Private access key.  The field should be specified if authentication type is `KEY_PAIR`.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// BigQuery project ID
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Public key to grant Fivetran SSH access to git repository.
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        /// <summary>
        /// Region of your AWS S3 bucket
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The group role that you would like to assign this new user to. Supported group roles: ‘Destination Administrator‘, ‘Destination Reviewer‘, ‘Destination Analyst‘, ‘Connector Creator‘, or a custom destination role
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        [Input("roleArn")]
        private Input<string>? _roleArn;

        /// <summary>
        /// Role ARN with Redshift permissions. Required if authentication type is `IAM`.
        /// </summary>
        public Input<string>? RoleArn
        {
            get => _roleArn;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _roleArn = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("secretKey")]
        private Input<string>? _secretKey;

        /// <summary>
        /// Private key of the customer service account. If specified, your service account will be used to process the data instead of the Fivetran-managed service account.
        /// </summary>
        public Input<string>? SecretKey
        {
            get => _secretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Server name
        /// </summary>
        [Input("serverHostName")]
        public Input<string>? ServerHostName { get; set; }

        /// <summary>
        /// SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// </summary>
        [Input("tunnelHost")]
        public Input<string>? TunnelHost { get; set; }

        /// <summary>
        /// SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// </summary>
        [Input("tunnelPort")]
        public Input<string>? TunnelPort { get; set; }

        /// <summary>
        /// SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// </summary>
        [Input("tunnelUser")]
        public Input<string>? TunnelUser { get; set; }

        /// <summary>
        /// Database user name
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public DestinationConfigGetArgs()
        {
        }
        public static new DestinationConfigGetArgs Empty => new DestinationConfigGetArgs();
    }
}
