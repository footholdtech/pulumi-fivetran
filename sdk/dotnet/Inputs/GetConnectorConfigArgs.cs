// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran.Inputs
{

    public sealed class GetConnectorConfigInputArgs : global::Pulumi.ResourceArgs
    {
        [Input("absConnectionMethod", required: true)]
        public Input<string> AbsConnectionMethod { get; set; } = null!;

        [Input("absConnectionString", required: true)]
        public Input<string> AbsConnectionString { get; set; } = null!;

        [Input("absContainerAddress", required: true)]
        public Input<string> AbsContainerAddress { get; set; } = null!;

        [Input("absContainerName", required: true)]
        public Input<string> AbsContainerName { get; set; } = null!;

        [Input("absHostIp", required: true)]
        public Input<string> AbsHostIp { get; set; } = null!;

        [Input("absHostUser", required: true)]
        public Input<string> AbsHostUser { get; set; } = null!;

        [Input("absPrefix", required: true)]
        public Input<string> AbsPrefix { get; set; } = null!;

        [Input("absPublicKey", required: true)]
        public Input<string> AbsPublicKey { get; set; } = null!;

        [Input("accessKey", required: true)]
        public Input<string> AccessKey { get; set; } = null!;

        [Input("accessKeyId", required: true)]
        public Input<string> AccessKeyId { get; set; } = null!;

        [Input("accessKeySecret", required: true)]
        private Input<string>? _accessKeySecret;
        public Input<string>? AccessKeySecret
        {
            get => _accessKeySecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessKeySecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("accessToken", required: true)]
        private Input<string>? _accessToken;
        public Input<string>? AccessToken
        {
            get => _accessToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("accessType", required: true)]
        public Input<string> AccessType { get; set; } = null!;

        [Input("account", required: true)]
        public Input<string> Account { get; set; } = null!;

        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        [Input("accountIds", required: true)]
        private InputList<string>? _accountIds;
        public InputList<string> AccountIds
        {
            get => _accountIds ?? (_accountIds = new InputList<string>());
            set => _accountIds = value;
        }

        [Input("accountKey", required: true)]
        private Input<string>? _accountKey;
        public Input<string>? AccountKey
        {
            get => _accountKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accountKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        [Input("accountSyncMode", required: true)]
        public Input<string> AccountSyncMode { get; set; } = null!;

        [Input("accounts", required: true)]
        private InputList<string>? _accounts;
        public InputList<string> Accounts
        {
            get => _accounts ?? (_accounts = new InputList<string>());
            set => _accounts = value;
        }

        [Input("accountsRedditAds", required: true)]
        private InputList<Inputs.GetConnectorConfigAccountsRedditAdInputArgs>? _accountsRedditAds;
        public InputList<Inputs.GetConnectorConfigAccountsRedditAdInputArgs> AccountsRedditAds
        {
            get => _accountsRedditAds ?? (_accountsRedditAds = new InputList<Inputs.GetConnectorConfigAccountsRedditAdInputArgs>());
            set => _accountsRedditAds = value;
        }

        [Input("accountsSyncMode", required: true)]
        public Input<string> AccountsSyncMode { get; set; } = null!;

        [Input("actionBreakdowns", required: true)]
        private InputList<string>? _actionBreakdowns;
        public InputList<string> ActionBreakdowns
        {
            get => _actionBreakdowns ?? (_actionBreakdowns = new InputList<string>());
            set => _actionBreakdowns = value;
        }

        [Input("actionReportTime", required: true)]
        public Input<string> ActionReportTime { get; set; } = null!;

        [Input("adAnalytics", required: true)]
        public Input<string> AdAnalytics { get; set; } = null!;

        [Input("adUnitView", required: true)]
        public Input<string> AdUnitView { get; set; } = null!;

        [Input("adminApiKey", required: true)]
        private Input<string>? _adminApiKey;
        public Input<string>? AdminApiKey
        {
            get => _adminApiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _adminApiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("adobeAnalyticsConfigurations", required: true)]
        private InputList<Inputs.GetConnectorConfigAdobeAnalyticsConfigurationInputArgs>? _adobeAnalyticsConfigurations;
        public InputList<Inputs.GetConnectorConfigAdobeAnalyticsConfigurationInputArgs> AdobeAnalyticsConfigurations
        {
            get => _adobeAnalyticsConfigurations ?? (_adobeAnalyticsConfigurations = new InputList<Inputs.GetConnectorConfigAdobeAnalyticsConfigurationInputArgs>());
            set => _adobeAnalyticsConfigurations = value;
        }

        [Input("advertisables", required: true)]
        private InputList<string>? _advertisables;
        public InputList<string> Advertisables
        {
            get => _advertisables ?? (_advertisables = new InputList<string>());
            set => _advertisables = value;
        }

        [Input("advertisers", required: true)]
        private InputList<string>? _advertisers;
        public InputList<string> Advertisers
        {
            get => _advertisers ?? (_advertisers = new InputList<string>());
            set => _advertisers = value;
        }

        [Input("advertisersIds", required: true)]
        private InputList<string>? _advertisersIds;
        public InputList<string> AdvertisersIds
        {
            get => _advertisersIds ?? (_advertisersIds = new InputList<string>());
            set => _advertisersIds = value;
        }

        [Input("advertisersSyncMode", required: true)]
        public Input<string> AdvertisersSyncMode { get; set; } = null!;

        [Input("agentHost", required: true)]
        public Input<string> AgentHost { get; set; } = null!;

        [Input("agentOraHome", required: true)]
        public Input<string> AgentOraHome { get; set; } = null!;

        [Input("agentPassword", required: true)]
        private Input<string>? _agentPassword;
        public Input<string>? AgentPassword
        {
            get => _agentPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _agentPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("agentPort", required: true)]
        public Input<string> AgentPort { get; set; } = null!;

        [Input("agentPublicCert", required: true)]
        public Input<string> AgentPublicCert { get; set; } = null!;

        [Input("agentUser", required: true)]
        public Input<string> AgentUser { get; set; } = null!;

        [Input("aggregation", required: true)]
        public Input<string> Aggregation { get; set; } = null!;

        [Input("alwaysEncrypted", required: true)]
        public Input<string> AlwaysEncrypted { get; set; } = null!;

        [Input("apiAccessToken", required: true)]
        private Input<string>? _apiAccessToken;
        public Input<string>? ApiAccessToken
        {
            get => _apiAccessToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiAccessToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("apiId", required: true)]
        public Input<string> ApiId { get; set; } = null!;

        [Input("apiKey", required: true)]
        private Input<string>? _apiKey;
        public Input<string>? ApiKey
        {
            get => _apiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("apiKeys", required: true)]
        private InputList<string>? _apiKeys;
        public InputList<string> ApiKeys
        {
            get => _apiKeys ?? (_apiKeys = new InputList<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<string>());
                _apiKeys = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("apiQuota", required: true)]
        public Input<string> ApiQuota { get; set; } = null!;

        [Input("apiRequestsPerMinute", required: true)]
        public Input<string> ApiRequestsPerMinute { get; set; } = null!;

        [Input("apiSecret", required: true)]
        private Input<string>? _apiSecret;
        public Input<string>? ApiSecret
        {
            get => _apiSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("apiSecretKey", required: true)]
        private Input<string>? _apiSecretKey;
        public Input<string>? ApiSecretKey
        {
            get => _apiSecretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiSecretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("apiToken", required: true)]
        private Input<string>? _apiToken;
        public Input<string>? ApiToken
        {
            get => _apiToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("apiType", required: true)]
        public Input<string> ApiType { get; set; } = null!;

        [Input("apiUrl", required: true)]
        public Input<string> ApiUrl { get; set; } = null!;

        [Input("apiUsage", required: true)]
        public Input<string> ApiUsage { get; set; } = null!;

        [Input("apiVersion", required: true)]
        public Input<string> ApiVersion { get; set; } = null!;

        [Input("appId", required: true)]
        private Input<string>? _appId;
        public Input<string>? AppId
        {
            get => _appId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _appId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("appIds", required: true)]
        private InputList<string>? _appIds;
        public InputList<string> AppIds
        {
            get => _appIds ?? (_appIds = new InputList<string>());
            set => _appIds = value;
        }

        [Input("appIdsAppsflyers", required: true)]
        private InputList<Inputs.GetConnectorConfigAppIdsAppsflyerInputArgs>? _appIdsAppsflyers;
        public InputList<Inputs.GetConnectorConfigAppIdsAppsflyerInputArgs> AppIdsAppsflyers
        {
            get => _appIdsAppsflyers ?? (_appIdsAppsflyers = new InputList<Inputs.GetConnectorConfigAppIdsAppsflyerInputArgs>());
            set => _appIdsAppsflyers = value;
        }

        [Input("appSpecificPassword", required: true)]
        private Input<string>? _appSpecificPassword;
        public Input<string>? AppSpecificPassword
        {
            get => _appSpecificPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _appSpecificPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("appSyncMode", required: true)]
        public Input<string> AppSyncMode { get; set; } = null!;

        [Input("appendFileOption", required: true)]
        public Input<string> AppendFileOption { get; set; } = null!;

        [Input("applicationKey", required: true)]
        private Input<string>? _applicationKey;
        public Input<string>? ApplicationKey
        {
            get => _applicationKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _applicationKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("apps", required: true)]
        private InputList<string>? _apps;
        public InputList<string> Apps
        {
            get => _apps ?? (_apps = new InputList<string>());
            set => _apps = value;
        }

        [Input("archiveLogFormat", required: true)]
        public Input<string> ArchiveLogFormat { get; set; } = null!;

        [Input("archiveLogPath", required: true)]
        public Input<string> ArchiveLogPath { get; set; } = null!;

        [Input("archivePattern", required: true)]
        public Input<string> ArchivePattern { get; set; } = null!;

        [Input("areSoapCredentialsProvided", required: true)]
        public Input<string> AreSoapCredentialsProvided { get; set; } = null!;

        [Input("asbIp", required: true)]
        public Input<string> AsbIp { get; set; } = null!;

        [Input("asmOption", required: true)]
        public Input<string> AsmOption { get; set; } = null!;

        [Input("asmOracleHome", required: true)]
        public Input<string> AsmOracleHome { get; set; } = null!;

        [Input("asmPassword", required: true)]
        private Input<string>? _asmPassword;
        public Input<string>? AsmPassword
        {
            get => _asmPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _asmPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("asmTns", required: true)]
        public Input<string> AsmTns { get; set; } = null!;

        [Input("asmUser", required: true)]
        public Input<string> AsmUser { get; set; } = null!;

        [Input("attributionWindow", required: true)]
        public Input<string> AttributionWindow { get; set; } = null!;

        [Input("attributionWindowSize", required: true)]
        public Input<string> AttributionWindowSize { get; set; } = null!;

        [Input("auth", required: true)]
        public Input<string> Auth { get; set; } = null!;

        [Input("authMethod", required: true)]
        public Input<string> AuthMethod { get; set; } = null!;

        [Input("authMode", required: true)]
        public Input<string> AuthMode { get; set; } = null!;

        [Input("authType", required: true)]
        public Input<string> AuthType { get; set; } = null!;

        [Input("authorizationMethod", required: true)]
        public Input<string> AuthorizationMethod { get; set; } = null!;

        [Input("awsRegionCode", required: true)]
        public Input<string> AwsRegionCode { get; set; } = null!;

        [Input("baseCurrency", required: true)]
        public Input<string> BaseCurrency { get; set; } = null!;

        [Input("baseDomain", required: true)]
        public Input<string> BaseDomain { get; set; } = null!;

        [Input("baseId", required: true)]
        public Input<string> BaseId { get; set; } = null!;

        [Input("baseUrl", required: true)]
        public Input<string> BaseUrl { get; set; } = null!;

        [Input("bearerToken", required: true)]
        private Input<string>? _bearerToken;
        public Input<string>? BearerToken
        {
            get => _bearerToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _bearerToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("blobSasUrl", required: true)]
        private Input<string>? _blobSasUrl;
        public Input<string>? BlobSasUrl
        {
            get => _blobSasUrl;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _blobSasUrl = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("breakdowns", required: true)]
        private InputList<string>? _breakdowns;
        public InputList<string> Breakdowns
        {
            get => _breakdowns ?? (_breakdowns = new InputList<string>());
            set => _breakdowns = value;
        }

        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        [Input("bucketService", required: true)]
        public Input<string> BucketService { get; set; } = null!;

        [Input("businessId", required: true)]
        private Input<string>? _businessId;
        public Input<string>? BusinessId
        {
            get => _businessId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _businessId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("businessUnitId", required: true)]
        public Input<string> BusinessUnitId { get; set; } = null!;

        [Input("certificate", required: true)]
        public Input<string> Certificate { get; set; } = null!;

        [Input("clickAttributionWindow", required: true)]
        public Input<string> ClickAttributionWindow { get; set; } = null!;

        [Input("clientCert", required: true)]
        private Input<string>? _clientCert;
        public Input<string>? ClientCert
        {
            get => _clientCert;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientCert = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientCertKey", required: true)]
        private Input<string>? _clientCertKey;
        public Input<string>? ClientCertKey
        {
            get => _clientCertKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientCertKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientId", required: true)]
        public Input<string> ClientId { get; set; } = null!;

        [Input("clientKey", required: true)]
        private Input<string>? _clientKey;
        public Input<string>? ClientKey
        {
            get => _clientKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientName", required: true)]
        public Input<string> ClientName { get; set; } = null!;

        [Input("clientSecret", required: true)]
        private Input<string>? _clientSecret;
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("cloudStorageType", required: true)]
        public Input<string> CloudStorageType { get; set; } = null!;

        [Input("columns", required: true)]
        private InputList<string>? _columns;
        public InputList<string> Columns
        {
            get => _columns ?? (_columns = new InputList<string>());
            set => _columns = value;
        }

        [Input("companyId", required: true)]
        public Input<string> CompanyId { get; set; } = null!;

        [Input("companyKey", required: true)]
        private Input<string>? _companyKey;
        public Input<string>? CompanyKey
        {
            get => _companyKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _companyKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("compression", required: true)]
        public Input<string> Compression { get; set; } = null!;

        [Input("configMethod", required: true)]
        public Input<string> ConfigMethod { get; set; } = null!;

        [Input("configRepositoryUrl", required: true)]
        public Input<string> ConfigRepositoryUrl { get; set; } = null!;

        [Input("configType", required: true)]
        public Input<string> ConfigType { get; set; } = null!;

        [Input("connectingUser", required: true)]
        public Input<string> ConnectingUser { get; set; } = null!;

        [Input("connectingUserEmail", required: true)]
        public Input<string> ConnectingUserEmail { get; set; } = null!;

        [Input("connectionMethod", required: true)]
        public Input<string> ConnectionMethod { get; set; } = null!;

        [Input("connectionString", required: true)]
        public Input<string> ConnectionString { get; set; } = null!;

        [Input("connectionType", required: true)]
        public Input<string> ConnectionType { get; set; } = null!;

        [Input("consumerGroup", required: true)]
        public Input<string> ConsumerGroup { get; set; } = null!;

        [Input("consumerKey", required: true)]
        private Input<string>? _consumerKey;
        public Input<string>? ConsumerKey
        {
            get => _consumerKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _consumerKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("consumerSecret", required: true)]
        private Input<string>? _consumerSecret;
        public Input<string>? ConsumerSecret
        {
            get => _consumerSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _consumerSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("containerAddress", required: true)]
        public Input<string> ContainerAddress { get; set; } = null!;

        [Input("containerName", required: true)]
        public Input<string> ContainerName { get; set; } = null!;

        [Input("contentOwnerId", required: true)]
        public Input<string> ContentOwnerId { get; set; } = null!;

        [Input("conversationWebhookUrl", required: true)]
        public Input<string> ConversationWebhookUrl { get; set; } = null!;

        [Input("conversionDimensions", required: true)]
        private InputList<string>? _conversionDimensions;
        public InputList<string> ConversionDimensions
        {
            get => _conversionDimensions ?? (_conversionDimensions = new InputList<string>());
            set => _conversionDimensions = value;
        }

        [Input("conversionReportTime", required: true)]
        public Input<string> ConversionReportTime { get; set; } = null!;

        [Input("conversionWindowSize", required: true)]
        public Input<string> ConversionWindowSize { get; set; } = null!;

        [Input("csvDefinition", required: true)]
        public Input<string> CsvDefinition { get; set; } = null!;

        [Input("currency", required: true)]
        public Input<string> Currency { get; set; } = null!;

        [Input("customEventSyncMode", required: true)]
        public Input<string> CustomEventSyncMode { get; set; } = null!;

        [Input("customEvents", required: true)]
        private InputList<string>? _customEvents;
        public InputList<string> CustomEvents
        {
            get => _customEvents ?? (_customEvents = new InputList<string>());
            set => _customEvents = value;
        }

        [Input("customFieldIds", required: true)]
        private InputList<string>? _customFieldIds;
        public InputList<string> CustomFieldIds
        {
            get => _customFieldIds ?? (_customFieldIds = new InputList<string>());
            set => _customFieldIds = value;
        }

        [Input("customFloodlightVariables", required: true)]
        private InputList<string>? _customFloodlightVariables;
        public InputList<string> CustomFloodlightVariables
        {
            get => _customFloodlightVariables ?? (_customFloodlightVariables = new InputList<string>());
            set => _customFloodlightVariables = value;
        }

        [Input("customReports", required: true)]
        private InputList<Inputs.GetConnectorConfigCustomReportInputArgs>? _customReports;
        public InputList<Inputs.GetConnectorConfigCustomReportInputArgs> CustomReports
        {
            get => _customReports ?? (_customReports = new InputList<Inputs.GetConnectorConfigCustomReportInputArgs>());
            set => _customReports = value;
        }

        [Input("customTables", required: true)]
        private InputList<Inputs.GetConnectorConfigCustomTableInputArgs>? _customTables;
        public InputList<Inputs.GetConnectorConfigCustomTableInputArgs> CustomTables
        {
            get => _customTables ?? (_customTables = new InputList<Inputs.GetConnectorConfigCustomTableInputArgs>());
            set => _customTables = value;
        }

        [Input("customerId", required: true)]
        public Input<string> CustomerId { get; set; } = null!;

        [Input("customerListId", required: true)]
        public Input<string> CustomerListId { get; set; } = null!;

        [Input("dailyApiCallLimit", required: true)]
        public Input<string> DailyApiCallLimit { get; set; } = null!;

        [Input("dataAccessMethod", required: true)]
        public Input<string> DataAccessMethod { get; set; } = null!;

        [Input("dataCenter", required: true)]
        public Input<string> DataCenter { get; set; } = null!;

        [Input("dataSetName", required: true)]
        public Input<string> DataSetName { get; set; } = null!;

        [Input("database", required: true)]
        public Input<string> Database { get; set; } = null!;

        [Input("datasetId", required: true)]
        public Input<string> DatasetId { get; set; } = null!;

        [Input("datasource", required: true)]
        public Input<string> Datasource { get; set; } = null!;

        [Input("dateGranularity", required: true)]
        public Input<string> DateGranularity { get; set; } = null!;

        [Input("delimiter", required: true)]
        public Input<string> Delimiter { get; set; } = null!;

        [Input("dimensionAttributes", required: true)]
        private InputList<string>? _dimensionAttributes;
        public InputList<string> DimensionAttributes
        {
            get => _dimensionAttributes ?? (_dimensionAttributes = new InputList<string>());
            set => _dimensionAttributes = value;
        }

        [Input("dimensions", required: true)]
        private InputList<string>? _dimensions;
        public InputList<string> Dimensions
        {
            get => _dimensions ?? (_dimensions = new InputList<string>());
            set => _dimensions = value;
        }

        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        [Input("domainHostName", required: true)]
        public Input<string> DomainHostName { get; set; } = null!;

        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        [Input("domainType", required: true)]
        public Input<string> DomainType { get; set; } = null!;

        [Input("elements", required: true)]
        private InputList<string>? _elements;
        public InputList<string> Elements
        {
            get => _elements ?? (_elements = new InputList<string>());
            set => _elements = value;
        }

        [Input("email", required: true)]
        public Input<string> Email { get; set; } = null!;

        [Input("emptyHeader", required: true)]
        public Input<string> EmptyHeader { get; set; } = null!;

        [Input("enableAllDimensionCombinations", required: true)]
        public Input<string> EnableAllDimensionCombinations { get; set; } = null!;

        [Input("enableArchiveLogOnly", required: true)]
        public Input<string> EnableArchiveLogOnly { get; set; } = null!;

        [Input("enableEnrichments", required: true)]
        public Input<string> EnableEnrichments { get; set; } = null!;

        [Input("enableExports", required: true)]
        public Input<string> EnableExports { get; set; } = null!;

        [Input("enableTde", required: true)]
        public Input<string> EnableTde { get; set; } = null!;

        [Input("encodedPublicKey", required: true)]
        public Input<string> EncodedPublicKey { get; set; } = null!;

        [Input("encryptionKey", required: true)]
        private Input<string>? _encryptionKey;
        public Input<string>? EncryptionKey
        {
            get => _encryptionKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _encryptionKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("endpoint", required: true)]
        public Input<string> Endpoint { get; set; } = null!;

        [Input("engagementAttributionWindow", required: true)]
        public Input<string> EngagementAttributionWindow { get; set; } = null!;

        [Input("enrichedExport", required: true)]
        public Input<string> EnrichedExport { get; set; } = null!;

        [Input("entityId", required: true)]
        public Input<string> EntityId { get; set; } = null!;

        [Input("environment", required: true)]
        public Input<string> Environment { get; set; } = null!;

        [Input("escapeChar", required: true)]
        public Input<string> EscapeChar { get; set; } = null!;

        [Input("euRegion", required: true)]
        public Input<string> EuRegion { get; set; } = null!;

        [Input("events", required: true)]
        private InputList<string>? _events;
        public InputList<string> Events
        {
            get => _events ?? (_events = new InputList<string>());
            set => _events = value;
        }

        [Input("exportStorageType", required: true)]
        public Input<string> ExportStorageType { get; set; } = null!;

        [Input("externalId", required: true)]
        public Input<string> ExternalId { get; set; } = null!;

        [Input("fields", required: true)]
        private InputList<string>? _fields;
        public InputList<string> Fields
        {
            get => _fields ?? (_fields = new InputList<string>());
            set => _fields = value;
        }

        [Input("fileType", required: true)]
        public Input<string> FileType { get; set; } = null!;

        [Input("filter", required: true)]
        public Input<string> Filter { get; set; } = null!;

        [Input("financeAccountSyncMode", required: true)]
        public Input<string> FinanceAccountSyncMode { get; set; } = null!;

        [Input("financeAccounts", required: true)]
        private InputList<string>? _financeAccounts;
        public InputList<string> FinanceAccounts
        {
            get => _financeAccounts ?? (_financeAccounts = new InputList<string>());
            set => _financeAccounts = value;
        }

        [Input("folder", required: true)]
        public Input<string> Folder { get; set; } = null!;

        [Input("folderId", required: true)]
        public Input<string> FolderId { get; set; } = null!;

        [Input("folderPath", required: true)]
        public Input<string> FolderPath { get; set; } = null!;

        [Input("forecastId", required: true)]
        public Input<string> ForecastId { get; set; } = null!;

        [Input("ftpHost", required: true)]
        public Input<string> FtpHost { get; set; } = null!;

        [Input("ftpPassword", required: true)]
        private Input<string>? _ftpPassword;
        public Input<string>? FtpPassword
        {
            get => _ftpPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _ftpPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("ftpPort", required: true)]
        public Input<string> FtpPort { get; set; } = null!;

        [Input("ftpUser", required: true)]
        public Input<string> FtpUser { get; set; } = null!;

        [Input("function", required: true)]
        public Input<string> Function { get; set; } = null!;

        [Input("functionApp", required: true)]
        public Input<string> FunctionApp { get; set; } = null!;

        [Input("functionKey", required: true)]
        public Input<string> FunctionKey { get; set; } = null!;

        [Input("functionName", required: true)]
        public Input<string> FunctionName { get; set; } = null!;

        [Input("functionTrigger", required: true)]
        private Input<string>? _functionTrigger;
        public Input<string>? FunctionTrigger
        {
            get => _functionTrigger;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _functionTrigger = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("gcsBucket", required: true)]
        public Input<string> GcsBucket { get; set; } = null!;

        [Input("gcsFolder", required: true)]
        public Input<string> GcsFolder { get; set; } = null!;

        [Input("groupName", required: true)]
        public Input<string> GroupName { get; set; } = null!;

        [Input("hasManagePermissions", required: true)]
        public Input<string> HasManagePermissions { get; set; } = null!;

        [Input("homeFolder", required: true)]
        public Input<string> HomeFolder { get; set; } = null!;

        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        [Input("hostIp", required: true)]
        public Input<string> HostIp { get; set; } = null!;

        [Input("hostUser", required: true)]
        public Input<string> HostUser { get; set; } = null!;

        [Input("hosts", required: true)]
        private InputList<string>? _hosts;
        public InputList<string> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<string>());
            set => _hosts = value;
        }

        [Input("identity", required: true)]
        public Input<string> Identity { get; set; } = null!;

        [Input("instance", required: true)]
        public Input<string> Instance { get; set; } = null!;

        [Input("instanceNumber", required: true)]
        public Input<string> InstanceNumber { get; set; } = null!;

        [Input("instanceUrl", required: true)]
        public Input<string> InstanceUrl { get; set; } = null!;

        [Input("integrationKey", required: true)]
        public Input<string> IntegrationKey { get; set; } = null!;

        [Input("isAccountLevelConnector", required: true)]
        public Input<string> IsAccountLevelConnector { get; set; } = null!;

        [Input("isAuth2Enabled", required: true)]
        public Input<string> IsAuth2Enabled { get; set; } = null!;

        [Input("isCustomApiCredentials", required: true)]
        public Input<string> IsCustomApiCredentials { get; set; } = null!;

        [Input("isFtps", required: true)]
        public Input<string> IsFtps { get; set; } = null!;

        [Input("isKeypair", required: true)]
        public Input<string> IsKeypair { get; set; } = null!;

        [Input("isMultiEntityFeatureEnabled", required: true)]
        public Input<string> IsMultiEntityFeatureEnabled { get; set; } = null!;

        [Input("isNewPackage", required: true)]
        public Input<string> IsNewPackage { get; set; } = null!;

        [Input("isPrivateKeyEncrypted", required: true)]
        public Input<string> IsPrivateKeyEncrypted { get; set; } = null!;

        [Input("isPrivateLinkRequired", required: true)]
        public Input<string> IsPrivateLinkRequired { get; set; } = null!;

        [Input("isPublic", required: true)]
        public Input<string> IsPublic { get; set; } = null!;

        [Input("isSailthruConnectEnabled", required: true)]
        public Input<string> IsSailthruConnectEnabled { get; set; } = null!;

        [Input("isSecure", required: true)]
        public Input<string> IsSecure { get; set; } = null!;

        [Input("isSingleTableMode", required: true)]
        public Input<string> IsSingleTableMode { get; set; } = null!;

        [Input("isVendor", required: true)]
        public Input<string> IsVendor { get; set; } = null!;

        [Input("jsonDeliveryMode", required: true)]
        public Input<string> JsonDeliveryMode { get; set; } = null!;

        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        [Input("keyPassword", required: true)]
        private Input<string>? _keyPassword;
        public Input<string>? KeyPassword
        {
            get => _keyPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keyPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("keyStoreType", required: true)]
        public Input<string> KeyStoreType { get; set; } = null!;

        [Input("keystore", required: true)]
        private Input<string>? _keystore;
        public Input<string>? Keystore
        {
            get => _keystore;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keystore = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("keystorePassword", required: true)]
        private Input<string>? _keystorePassword;
        public Input<string>? KeystorePassword
        {
            get => _keystorePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keystorePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("lastSyncedChangesUtc_", required: true)]
        public Input<string> LastSyncedChangesUtc_ { get; set; } = null!;

        [Input("latestVersion", required: true)]
        public Input<string> LatestVersion { get; set; } = null!;

        [Input("lineSeparator", required: true)]
        public Input<string> LineSeparator { get; set; } = null!;

        [Input("listStrategy", required: true)]
        public Input<string> ListStrategy { get; set; } = null!;

        [Input("listSyncMode", required: true)]
        public Input<string> ListSyncMode { get; set; } = null!;

        [Input("logJournal", required: true)]
        public Input<string> LogJournal { get; set; } = null!;

        [Input("logJournalSchema", required: true)]
        public Input<string> LogJournalSchema { get; set; } = null!;

        [Input("login", required: true)]
        public Input<string> Login { get; set; } = null!;

        [Input("loginPassword", required: true)]
        private Input<string>? _loginPassword;
        public Input<string>? LoginPassword
        {
            get => _loginPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _loginPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("managerAccounts", required: true)]
        private InputList<string>? _managerAccounts;
        public InputList<string> ManagerAccounts
        {
            get => _managerAccounts ?? (_managerAccounts = new InputList<string>());
            set => _managerAccounts = value;
        }

        [Input("merchantId", required: true)]
        public Input<string> MerchantId { get; set; } = null!;

        [Input("messageType", required: true)]
        public Input<string> MessageType { get; set; } = null!;

        [Input("metrics", required: true)]
        private InputList<string>? _metrics;
        public InputList<string> Metrics
        {
            get => _metrics ?? (_metrics = new InputList<string>());
            set => _metrics = value;
        }

        [Input("namedRange", required: true)]
        public Input<string> NamedRange { get; set; } = null!;

        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        [Input("networkCode", required: true)]
        public Input<string> NetworkCode { get; set; } = null!;

        [Input("nullSequence", required: true)]
        public Input<string> NullSequence { get; set; } = null!;

        [Input("oauthToken", required: true)]
        private Input<string>? _oauthToken;
        public Input<string>? OauthToken
        {
            get => _oauthToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _oauthToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("oauthTokenSecret", required: true)]
        private Input<string>? _oauthTokenSecret;
        public Input<string>? OauthTokenSecret
        {
            get => _oauthTokenSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _oauthTokenSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("onError", required: true)]
        public Input<string> OnError { get; set; } = null!;

        [Input("onPremise", required: true)]
        public Input<string> OnPremise { get; set; } = null!;

        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        [Input("organizations", required: true)]
        private InputList<string>? _organizations;
        public InputList<string> Organizations
        {
            get => _organizations ?? (_organizations = new InputList<string>());
            set => _organizations = value;
        }

        [Input("packedModeTables", required: true)]
        private InputList<string>? _packedModeTables;
        public InputList<string> PackedModeTables
        {
            get => _packedModeTables ?? (_packedModeTables = new InputList<string>());
            set => _packedModeTables = value;
        }

        [Input("packingMode", required: true)]
        public Input<string> PackingMode { get; set; } = null!;

        [Input("pages", required: true)]
        private InputList<string>? _pages;
        public InputList<string> Pages
        {
            get => _pages ?? (_pages = new InputList<string>());
            set => _pages = value;
        }

        [Input("partners", required: true)]
        private InputList<string>? _partners;
        public InputList<string> Partners
        {
            get => _partners ?? (_partners = new InputList<string>());
            set => _partners = value;
        }

        [Input("passphrase", required: true)]
        private Input<string>? _passphrase;
        public Input<string>? Passphrase
        {
            get => _passphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("password", required: true)]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("pat", required: true)]
        private Input<string>? _pat;
        public Input<string>? Pat
        {
            get => _pat;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _pat = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        [Input("pattern", required: true)]
        public Input<string> Pattern { get; set; } = null!;

        [Input("pdbName", required: true)]
        public Input<string> PdbName { get; set; } = null!;

        [Input("pemCertificate", required: true)]
        private Input<string>? _pemCertificate;
        public Input<string>? PemCertificate
        {
            get => _pemCertificate;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _pemCertificate = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("pemPrivateKey", required: true)]
        private Input<string>? _pemPrivateKey;
        public Input<string>? PemPrivateKey
        {
            get => _pemPrivateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _pemPrivateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("perInteractionDimensions", required: true)]
        private InputList<string>? _perInteractionDimensions;
        public InputList<string> PerInteractionDimensions
        {
            get => _perInteractionDimensions ?? (_perInteractionDimensions = new InputList<string>());
            set => _perInteractionDimensions = value;
        }

        [Input("personalAccessToken", required: true)]
        private Input<string>? _personalAccessToken;
        public Input<string>? PersonalAccessToken
        {
            get => _personalAccessToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _personalAccessToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("pgpPassPhrase", required: true)]
        private Input<string>? _pgpPassPhrase;
        public Input<string>? PgpPassPhrase
        {
            get => _pgpPassPhrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _pgpPassPhrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("pgpSecretKey", required: true)]
        private Input<string>? _pgpSecretKey;
        public Input<string>? PgpSecretKey
        {
            get => _pgpSecretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _pgpSecretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("phoneNumber", required: true)]
        public Input<string> PhoneNumber { get; set; } = null!;

        [Input("port", required: true)]
        public Input<string> Port { get; set; } = null!;

        [Input("postClickAttributionWindowSize", required: true)]
        public Input<string> PostClickAttributionWindowSize { get; set; } = null!;

        [Input("prebuiltReport", required: true)]
        public Input<string> PrebuiltReport { get; set; } = null!;

        [Input("prefix", required: true)]
        public Input<string> Prefix { get; set; } = null!;

        [Input("primaryKeys", required: true)]
        private InputList<string>? _primaryKeys;
        public InputList<string> PrimaryKeys
        {
            get => _primaryKeys ?? (_primaryKeys = new InputList<string>());
            set => _primaryKeys = value;
        }

        [Input("privateKey", required: true)]
        private Input<string>? _privateKey;
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("profiles", required: true)]
        private InputList<string>? _profiles;
        public InputList<string> Profiles
        {
            get => _profiles ?? (_profiles = new InputList<string>());
            set => _profiles = value;
        }

        [Input("projectCredentials", required: true)]
        private InputList<Inputs.GetConnectorConfigProjectCredentialInputArgs>? _projectCredentials;
        public InputList<Inputs.GetConnectorConfigProjectCredentialInputArgs> ProjectCredentials
        {
            get => _projectCredentials ?? (_projectCredentials = new InputList<Inputs.GetConnectorConfigProjectCredentialInputArgs>());
            set => _projectCredentials = value;
        }

        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("projects", required: true)]
        private InputList<string>? _projects;
        public InputList<string> Projects
        {
            get => _projects ?? (_projects = new InputList<string>());
            set => _projects = value;
        }

        [Input("properties", required: true)]
        private InputList<string>? _properties;
        public InputList<string> Properties
        {
            get => _properties ?? (_properties = new InputList<string>());
            set => _properties = value;
        }

        [Input("publicKey", required: true)]
        public Input<string> PublicKey { get; set; } = null!;

        [Input("publicationName", required: true)]
        public Input<string> PublicationName { get; set; } = null!;

        [Input("queryId", required: true)]
        public Input<string> QueryId { get; set; } = null!;

        [Input("queryParamValue", required: true)]
        private Input<string>? _queryParamValue;
        public Input<string>? QueryParamValue
        {
            get => _queryParamValue;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _queryParamValue = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("refreshTokenExpiresAt", required: true)]
        public Input<string> RefreshTokenExpiresAt { get; set; } = null!;

        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        [Input("replicaId", required: true)]
        public Input<string> ReplicaId { get; set; } = null!;

        [Input("replicationSlot", required: true)]
        public Input<string> ReplicationSlot { get; set; } = null!;

        [Input("reportConfigurationIds", required: true)]
        private InputList<string>? _reportConfigurationIds;
        public InputList<string> ReportConfigurationIds
        {
            get => _reportConfigurationIds ?? (_reportConfigurationIds = new InputList<string>());
            set => _reportConfigurationIds = value;
        }

        [Input("reportFormatType", required: true)]
        public Input<string> ReportFormatType { get; set; } = null!;

        [Input("reportSuites", required: true)]
        private InputList<string>? _reportSuites;
        public InputList<string> ReportSuites
        {
            get => _reportSuites ?? (_reportSuites = new InputList<string>());
            set => _reportSuites = value;
        }

        [Input("reportTimezone", required: true)]
        public Input<string> ReportTimezone { get; set; } = null!;

        [Input("reportType", required: true)]
        public Input<string> ReportType { get; set; } = null!;

        [Input("reportUrl", required: true)]
        public Input<string> ReportUrl { get; set; } = null!;

        [Input("reports", required: true)]
        private InputList<Inputs.GetConnectorConfigReportInputArgs>? _reports;
        public InputList<Inputs.GetConnectorConfigReportInputArgs> Reports
        {
            get => _reports ?? (_reports = new InputList<Inputs.GetConnectorConfigReportInputArgs>());
            set => _reports = value;
        }

        [Input("reportsLinkedinAds", required: true)]
        private InputList<string>? _reportsLinkedinAds;
        public InputList<string> ReportsLinkedinAds
        {
            get => _reportsLinkedinAds ?? (_reportsLinkedinAds = new InputList<string>());
            set => _reportsLinkedinAds = value;
        }

        [Input("repositories", required: true)]
        private InputList<string>? _repositories;
        public InputList<string> Repositories
        {
            get => _repositories ?? (_repositories = new InputList<string>());
            set => _repositories = value;
        }

        [Input("resourceToken", required: true)]
        private Input<string>? _resourceToken;
        public Input<string>? ResourceToken
        {
            get => _resourceToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _resourceToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("resourceUrl", required: true)]
        public Input<string> ResourceUrl { get; set; } = null!;

        [Input("restApiLimit", required: true)]
        public Input<string> RestApiLimit { get; set; } = null!;

        [Input("rfcLibraryPath", required: true)]
        public Input<string> RfcLibraryPath { get; set; } = null!;

        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        [Input("roleArn", required: true)]
        private Input<string>? _roleArn;
        public Input<string>? RoleArn
        {
            get => _roleArn;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _roleArn = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("rollbackWindowSize", required: true)]
        public Input<string> RollbackWindowSize { get; set; } = null!;

        [Input("s3Bucket", required: true)]
        public Input<string> S3Bucket { get; set; } = null!;

        [Input("s3ExportBucket", required: true)]
        public Input<string> S3ExportBucket { get; set; } = null!;

        [Input("s3ExportFolder", required: true)]
        public Input<string> S3ExportFolder { get; set; } = null!;

        [Input("s3ExportRoleArn", required: true)]
        private Input<string>? _s3ExportRoleArn;
        public Input<string>? S3ExportRoleArn
        {
            get => _s3ExportRoleArn;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _s3ExportRoleArn = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("s3RoleArn", required: true)]
        private Input<string>? _s3RoleArn;
        public Input<string>? S3RoleArn
        {
            get => _s3RoleArn;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _s3RoleArn = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("s3bucket", required: true)]
        public Input<string> S3bucket { get; set; } = null!;

        [Input("s3externalId", required: true)]
        public Input<string> S3externalId { get; set; } = null!;

        [Input("s3folder", required: true)]
        public Input<string> S3folder { get; set; } = null!;

        [Input("s3path", required: true)]
        public Input<string> S3path { get; set; } = null!;

        [Input("s3roleArn", required: true)]
        private Input<string>? _s3roleArn;
        public Input<string>? S3roleArn
        {
            get => _s3roleArn;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _s3roleArn = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("salesAccountSyncMode", required: true)]
        public Input<string> SalesAccountSyncMode { get; set; } = null!;

        [Input("salesAccounts", required: true)]
        private InputList<string>? _salesAccounts;
        public InputList<string> SalesAccounts
        {
            get => _salesAccounts ?? (_salesAccounts = new InputList<string>());
            set => _salesAccounts = value;
        }

        [Input("salesforceSecurityToken", required: true)]
        private Input<string>? _salesforceSecurityToken;
        public Input<string>? SalesforceSecurityToken
        {
            get => _salesforceSecurityToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _salesforceSecurityToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("sandboxAccount", required: true)]
        public Input<string> SandboxAccount { get; set; } = null!;

        [Input("sapSchema", required: true)]
        public Input<string> SapSchema { get; set; } = null!;

        [Input("sapUser", required: true)]
        public Input<string> SapUser { get; set; } = null!;

        [Input("saslMechanism", required: true)]
        public Input<string> SaslMechanism { get; set; } = null!;

        [Input("saslPlainKey", required: true)]
        private Input<string>? _saslPlainKey;
        public Input<string>? SaslPlainKey
        {
            get => _saslPlainKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _saslPlainKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("saslPlainSecret", required: true)]
        private Input<string>? _saslPlainSecret;
        public Input<string>? SaslPlainSecret
        {
            get => _saslPlainSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _saslPlainSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("saslScram256Key", required: true)]
        private Input<string>? _saslScram256Key;
        public Input<string>? SaslScram256Key
        {
            get => _saslScram256Key;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _saslScram256Key = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("saslScram256Secret", required: true)]
        private Input<string>? _saslScram256Secret;
        public Input<string>? SaslScram256Secret
        {
            get => _saslScram256Secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _saslScram256Secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("saslScram512Key", required: true)]
        private Input<string>? _saslScram512Key;
        public Input<string>? SaslScram512Key
        {
            get => _saslScram512Key;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _saslScram512Key = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("saslScram512Secret", required: true)]
        private Input<string>? _saslScram512Secret;
        public Input<string>? SaslScram512Secret
        {
            get => _saslScram512Secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _saslScram512Secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("schemaRegistryCredentialsSource", required: true)]
        public Input<string> SchemaRegistryCredentialsSource { get; set; } = null!;

        [Input("schemaRegistryKey", required: true)]
        private Input<string>? _schemaRegistryKey;
        public Input<string>? SchemaRegistryKey
        {
            get => _schemaRegistryKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _schemaRegistryKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("schemaRegistrySecret", required: true)]
        private Input<string>? _schemaRegistrySecret;
        public Input<string>? SchemaRegistrySecret
        {
            get => _schemaRegistrySecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _schemaRegistrySecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("schemaRegistryUrls", required: true)]
        private InputList<string>? _schemaRegistryUrls;
        public InputList<string> SchemaRegistryUrls
        {
            get => _schemaRegistryUrls ?? (_schemaRegistryUrls = new InputList<string>());
            set => _schemaRegistryUrls = value;
        }

        [Input("secret", required: true)]
        private Input<string>? _secret;
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("secretKey", required: true)]
        private Input<string>? _secretKey;
        public Input<string>? SecretKey
        {
            get => _secretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("secrets", required: true)]
        private Input<string>? _secrets;
        public Input<string>? Secrets
        {
            get => _secrets;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secrets = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("secretsLists", required: true)]
        private InputList<Inputs.GetConnectorConfigSecretsListInputArgs>? _secretsLists;
        public InputList<Inputs.GetConnectorConfigSecretsListInputArgs> SecretsLists
        {
            get => _secretsLists ?? (_secretsLists = new InputList<Inputs.GetConnectorConfigSecretsListInputArgs>());
            set => _secretsLists = value;
        }

        [Input("securityProtocol", required: true)]
        public Input<string> SecurityProtocol { get; set; } = null!;

        [Input("segments", required: true)]
        private InputList<string>? _segments;
        public InputList<string> Segments
        {
            get => _segments ?? (_segments = new InputList<string>());
            set => _segments = value;
        }

        [Input("selectedExports", required: true)]
        private InputList<string>? _selectedExports;
        public InputList<string> SelectedExports
        {
            get => _selectedExports ?? (_selectedExports = new InputList<string>());
            set => _selectedExports = value;
        }

        [Input("senderId", required: true)]
        public Input<string> SenderId { get; set; } = null!;

        [Input("senderPassword", required: true)]
        private Input<string>? _senderPassword;
        public Input<string>? SenderPassword
        {
            get => _senderPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _senderPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("serverUrl", required: true)]
        public Input<string> ServerUrl { get; set; } = null!;

        [Input("servers", required: true)]
        private InputList<string>? _servers;
        public InputList<string> Servers
        {
            get => _servers ?? (_servers = new InputList<string>());
            set => _servers = value;
        }

        [Input("serviceAccount", required: true)]
        public Input<string> ServiceAccount { get; set; } = null!;

        [Input("serviceAccountEmail", required: true)]
        public Input<string> ServiceAccountEmail { get; set; } = null!;

        [Input("serviceAccountKey", required: true)]
        private Input<string>? _serviceAccountKey;
        public Input<string>? ServiceAccountKey
        {
            get => _serviceAccountKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _serviceAccountKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("serviceVersion", required: true)]
        public Input<string> ServiceVersion { get; set; } = null!;

        [Input("sftpHost", required: true)]
        public Input<string> SftpHost { get; set; } = null!;

        [Input("sftpIsKeyPair", required: true)]
        public Input<string> SftpIsKeyPair { get; set; } = null!;

        [Input("sftpPassword", required: true)]
        private Input<string>? _sftpPassword;
        public Input<string>? SftpPassword
        {
            get => _sftpPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sftpPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("sftpPort", required: true)]
        public Input<string> SftpPort { get; set; } = null!;

        [Input("sftpPublicKey", required: true)]
        public Input<string> SftpPublicKey { get; set; } = null!;

        [Input("sftpUser", required: true)]
        public Input<string> SftpUser { get; set; } = null!;

        [Input("shareUrl", required: true)]
        public Input<string> ShareUrl { get; set; } = null!;

        [Input("sheetId", required: true)]
        public Input<string> SheetId { get; set; } = null!;

        [Input("shop", required: true)]
        public Input<string> Shop { get; set; } = null!;

        [Input("shortCode", required: true)]
        private Input<string>? _shortCode;
        public Input<string>? ShortCode
        {
            get => _shortCode;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _shortCode = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("showRecordsWithNoMetrics", required: true)]
        public Input<string> ShowRecordsWithNoMetrics { get; set; } = null!;

        [Input("sid", required: true)]
        public Input<string> Sid { get; set; } = null!;

        [Input("signerPublicKey", required: true)]
        public Input<string> SignerPublicKey { get; set; } = null!;

        [Input("siteAddress", required: true)]
        public Input<string> SiteAddress { get; set; } = null!;

        [Input("siteId", required: true)]
        public Input<string> SiteId { get; set; } = null!;

        [Input("siteName", required: true)]
        public Input<string> SiteName { get; set; } = null!;

        [Input("siteUrls", required: true)]
        private InputList<string>? _siteUrls;
        public InputList<string> SiteUrls
        {
            get => _siteUrls ?? (_siteUrls = new InputList<string>());
            set => _siteUrls = value;
        }

        [Input("skipAfter", required: true)]
        public Input<string> SkipAfter { get; set; } = null!;

        [Input("skipBefore", required: true)]
        public Input<string> SkipBefore { get; set; } = null!;

        [Input("soapUri", required: true)]
        public Input<string> SoapUri { get; set; } = null!;

        [Input("socialDataSyncTimeframe", required: true)]
        public Input<string> SocialDataSyncTimeframe { get; set; } = null!;

        [Input("source", required: true)]
        public Input<string> Source { get; set; } = null!;

        [Input("storeHash", required: true)]
        public Input<string> StoreHash { get; set; } = null!;

        [Input("subDomain", required: true)]
        public Input<string> SubDomain { get; set; } = null!;

        [Input("subdomain", required: true)]
        public Input<string> Subdomain { get; set; } = null!;

        [Input("subscriberName", required: true)]
        public Input<string> SubscriberName { get; set; } = null!;

        [Input("subscription", required: true)]
        public Input<string> Subscription { get; set; } = null!;

        [Input("supportConnectedAccountsSync", required: true)]
        public Input<string> SupportConnectedAccountsSync { get; set; } = null!;

        [Input("supportNestedColumns", required: true)]
        public Input<string> SupportNestedColumns { get; set; } = null!;

        [Input("surveyIds", required: true)]
        public Input<string> SurveyIds { get; set; } = null!;

        [Input("swipeAttributionWindow", required: true)]
        public Input<string> SwipeAttributionWindow { get; set; } = null!;

        [Input("syncDataLocker", required: true)]
        public Input<string> SyncDataLocker { get; set; } = null!;

        [Input("syncFormat", required: true)]
        public Input<string> SyncFormat { get; set; } = null!;

        [Input("syncFormulaFields", required: true)]
        public Input<string> SyncFormulaFields { get; set; } = null!;

        [Input("syncMetadata", required: true)]
        public Input<string> SyncMetadata { get; set; } = null!;

        [Input("syncMethod", required: true)]
        public Input<string> SyncMethod { get; set; } = null!;

        [Input("syncMode", required: true)]
        public Input<string> SyncMode { get; set; } = null!;

        [Input("syncMultipleAccounts", required: true)]
        public Input<string> SyncMultipleAccounts { get; set; } = null!;

        [Input("syncPackMode", required: true)]
        public Input<string> SyncPackMode { get; set; } = null!;

        [Input("syncPullApi", required: true)]
        public Input<string> SyncPullApi { get; set; } = null!;

        [Input("syncType", required: true)]
        public Input<string> SyncType { get; set; } = null!;

        [Input("tableName", required: true)]
        public Input<string> TableName { get; set; } = null!;

        [Input("tdeCertificate", required: true)]
        private Input<string>? _tdeCertificate;
        public Input<string>? TdeCertificate
        {
            get => _tdeCertificate;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tdeCertificate = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tdeCertificateName", required: true)]
        public Input<string> TdeCertificateName { get; set; } = null!;

        [Input("tdePassword", required: true)]
        private Input<string>? _tdePassword;
        public Input<string>? TdePassword
        {
            get => _tdePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tdePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tdePrivateKey", required: true)]
        private Input<string>? _tdePrivateKey;
        public Input<string>? TdePrivateKey
        {
            get => _tdePrivateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tdePrivateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        [Input("technicalAccountId", required: true)]
        public Input<string> TechnicalAccountId { get; set; } = null!;

        [Input("templateLabels", required: true)]
        private InputList<string>? _templateLabels;
        public InputList<string> TemplateLabels
        {
            get => _templateLabels ?? (_templateLabels = new InputList<string>());
            set => _templateLabels = value;
        }

        [Input("tenantId", required: true)]
        private Input<string>? _tenantId;
        public Input<string>? TenantId
        {
            get => _tenantId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tenantId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("testTableName", required: true)]
        public Input<string> TestTableName { get; set; } = null!;

        [Input("timeZone", required: true)]
        public Input<string> TimeZone { get; set; } = null!;

        [Input("timeframeMonths", required: true)]
        public Input<string> TimeframeMonths { get; set; } = null!;

        [Input("tns", required: true)]
        public Input<string> Tns { get; set; } = null!;

        [Input("tokenAuthenticatedContainer", required: true)]
        public Input<string> TokenAuthenticatedContainer { get; set; } = null!;

        [Input("tokenAuthenticatedDatabase", required: true)]
        public Input<string> TokenAuthenticatedDatabase { get; set; } = null!;

        [Input("tokenId", required: true)]
        private Input<string>? _tokenId;
        public Input<string>? TokenId
        {
            get => _tokenId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tokenId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tokenKey", required: true)]
        private Input<string>? _tokenKey;
        public Input<string>? TokenKey
        {
            get => _tokenKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tokenKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tokenSecret", required: true)]
        private Input<string>? _tokenSecret;
        public Input<string>? TokenSecret
        {
            get => _tokenSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tokenSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tokenSecretKey", required: true)]
        private Input<string>? _tokenSecretKey;
        public Input<string>? TokenSecretKey
        {
            get => _tokenSecretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tokenSecretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("topics", required: true)]
        private InputList<string>? _topics;
        public InputList<string> Topics
        {
            get => _topics ?? (_topics = new InputList<string>());
            set => _topics = value;
        }

        [Input("trustStoreType", required: true)]
        public Input<string> TrustStoreType { get; set; } = null!;

        [Input("trustedCert", required: true)]
        private Input<string>? _trustedCert;
        public Input<string>? TrustedCert
        {
            get => _trustedCert;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _trustedCert = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("truststore", required: true)]
        private Input<string>? _truststore;
        public Input<string>? Truststore
        {
            get => _truststore;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _truststore = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tunnelHost", required: true)]
        public Input<string> TunnelHost { get; set; } = null!;

        [Input("tunnelPort", required: true)]
        public Input<string> TunnelPort { get; set; } = null!;

        [Input("tunnelUser", required: true)]
        public Input<string> TunnelUser { get; set; } = null!;

        [Input("uniqueId", required: true)]
        public Input<string> UniqueId { get; set; } = null!;

        [Input("updateConfigOnEachSync", required: true)]
        public Input<string> UpdateConfigOnEachSync { get; set; } = null!;

        [Input("updateMethod", required: true)]
        public Input<string> UpdateMethod { get; set; } = null!;

        [Input("uri", required: true)]
        public Input<string> Uri { get; set; } = null!;

        [Input("useApiKeys", required: true)]
        public Input<string> UseApiKeys { get; set; } = null!;

        [Input("useCustomerBucket", required: true)]
        public Input<string> UseCustomerBucket { get; set; } = null!;

        [Input("useOracleRac", required: true)]
        public Input<string> UseOracleRac { get; set; } = null!;

        [Input("usePgpEncryptionOptions", required: true)]
        public Input<string> UsePgpEncryptionOptions { get; set; } = null!;

        [Input("useServiceAccount", required: true)]
        public Input<string> UseServiceAccount { get; set; } = null!;

        [Input("useTemplateLabels", required: true)]
        public Input<string> UseTemplateLabels { get; set; } = null!;

        [Input("useWebhooks", required: true)]
        public Input<string> UseWebhooks { get; set; } = null!;

        [Input("useWorkspace", required: true)]
        public Input<string> UseWorkspace { get; set; } = null!;

        [Input("user", required: true)]
        public Input<string> User { get; set; } = null!;

        [Input("userId", required: true)]
        public Input<string> UserId { get; set; } = null!;

        [Input("userKey", required: true)]
        public Input<string> UserKey { get; set; } = null!;

        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        [Input("userProfiles", required: true)]
        private InputList<string>? _userProfiles;
        public InputList<string> UserProfiles
        {
            get => _userProfiles ?? (_userProfiles = new InputList<string>());
            set => _userProfiles = value;
        }

        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        [Input("viewAttributionWindow", required: true)]
        public Input<string> ViewAttributionWindow { get; set; } = null!;

        [Input("viewThroughAttributionWindowSize", required: true)]
        public Input<string> ViewThroughAttributionWindowSize { get; set; } = null!;

        [Input("webhookEndpoint", required: true)]
        public Input<string> WebhookEndpoint { get; set; } = null!;

        [Input("webhookKey", required: true)]
        public Input<string> WebhookKey { get; set; } = null!;

        [Input("webhookUrl", required: true)]
        public Input<string> WebhookUrl { get; set; } = null!;

        [Input("wordPressSiteIdOrWoocommerceDomainName", required: true)]
        public Input<string> WordPressSiteIdOrWoocommerceDomainName { get; set; } = null!;

        [Input("workspaceName", required: true)]
        public Input<string> WorkspaceName { get; set; } = null!;

        [Input("workspaceSameAsSource", required: true)]
        public Input<string> WorkspaceSameAsSource { get; set; } = null!;

        [Input("workspaceSchema", required: true)]
        public Input<string> WorkspaceSchema { get; set; } = null!;

        [Input("wsCertificate", required: true)]
        private Input<string>? _wsCertificate;
        public Input<string>? WsCertificate
        {
            get => _wsCertificate;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _wsCertificate = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public GetConnectorConfigInputArgs()
        {
        }
        public static new GetConnectorConfigInputArgs Empty => new GetConnectorConfigInputArgs();
    }
}
