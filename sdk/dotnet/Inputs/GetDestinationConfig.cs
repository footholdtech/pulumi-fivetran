// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran.Inputs
{

    public sealed class GetDestinationConfigArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `aurora_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_postgres_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_data_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_database`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_managed_db_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_rds_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_rds_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `panoply`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `periscope_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_gcp_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_rds_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `redshift`: Require TLS through Tunnel
        /// 	- Service `sql_server_rds_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_warehouse`: Specifies whether TLS is required. Must be populated if `connection_type` is set to `SshTunnel`.
        /// </summary>
        [Input("alwaysEncrypted", required: true)]
        public bool AlwaysEncrypted { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `snowflake`: Password-based or key-based authentication type
        /// </summary>
        [Input("auth", required: true)]
        public string Auth { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Authentication type
        /// 	- Service `databricks`: Authentication type
        /// 	- Service `new_s3_datalake`: Authentication type
        /// 	- Service `onelake`: Authentication type
        /// 	- Service `redshift`: Authentication type. Default value: `PASSWORD`.
        /// </summary>
        [Input("authType", required: true)]
        public string AuthType { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `new_s3_datalake`: AWS access key to access the S3 bucket and AWS Glue
        /// </summary>
        [Input("awsAccessKeyId", required: true)]
        public string AwsAccessKeyId { get; set; } = null!;

        [Input("awsSecretAccessKey", required: true)]
        private string? _awsSecretAccessKey;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `new_s3_datalake`: AWS secret access key to access the S3 bucket and AWS Glue
        /// </summary>
        public string? AwsSecretAccessKey
        {
            get => _awsSecretAccessKey;
            set => _awsSecretAccessKey = value;
        }

        [Input("bootstrapServers", required: true)]
        private List<string>? _bootstrapServers;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Comma-separated list of Confluent Cloud servers in the `server:port` format.
        /// </summary>
        public List<string> BootstrapServers
        {
            get => _bootstrapServers ?? (_bootstrapServers = new List<string>());
            set => _bootstrapServers = value;
        }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `big_query`: Customer bucket. If specified, your GCS bucket will be used to process the data instead of a Fivetran-managed bucket. The bucket must be present in the same location as the dataset location.
        /// 	- Service `big_query_dts`: Customer bucket. If specified, your GCS bucket will be used to process the data instead of a Fivetran-managed bucket. The bucket must be present in the same location as the dataset location.
        /// 	- Service `managed_big_query`: Customer bucket. If specified, your GCS bucket will be used to process the data instead of a Fivetran-managed bucket. The bucket must be present in the same location as the dataset location.
        /// 	- Service `new_s3_datalake`: (Immutable) The name of the bucket to be used as destination
        /// </summary>
        [Input("bucket", required: true)]
        public string Bucket { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Catalog name
        /// 	- Service `databricks`: Catalog name
        /// 	- Service `new_s3_datalake`: Catalog name
        /// 	- Service `onelake`: Catalog name
        /// </summary>
        [Input("catalog", required: true)]
        public string Catalog { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Client id of service principal
        /// 	- Service `onelake`: Client ID of service principal
        /// </summary>
        [Input("clientId", required: true)]
        public string ClientId { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `databricks`: Databricks deployment cloud
        /// </summary>
        [Input("cloudProvider", required: true)]
        public string CloudProvider { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `panoply`: Cluster ID.
        /// 	- Service `periscope_warehouse`: Cluster ID.
        /// 	- Service `redshift`: Cluster ID. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `panoply`: Cluster region.
        /// 	- Service `periscope_warehouse`: Cluster region.
        /// 	- Service `redshift`: Cluster region. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
        /// </summary>
        [Input("clusterRegion", required: true)]
        public string ClusterRegion { get; set; } = null!;

        [Input("connectionMethod", required: true)]
        public string ConnectionMethod { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Connection method. Default value: `Directly`.
        /// 	- Service `aurora_postgres_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `aurora_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `azure_postgres_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `azure_sql_data_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `azure_sql_database`: Connection method. Default value: `Directly`.
        /// 	- Service `azure_sql_managed_db_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `databricks`: Connection method. Default value: `Directly`.
        /// 	- Service `maria_rds_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `maria_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `mysql_rds_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `mysql_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `panoply`: Connection method. Default value: `Directly`.
        /// 	- Service `periscope_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `postgres_gcp_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `postgres_rds_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `postgres_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `redshift`: Connection method. Default value: `Directly`.
        /// 	- Service `snowflake`: Connection method. Default value: `Directly`.
        /// 	- Service `sql_server_rds_warehouse`: Connection method. Default value: `Directly`.
        /// 	- Service `sql_server_warehouse`: Connection method. Default value: `Directly`.
        /// </summary>
        [Input("connectionType", required: true)]
        public string ConnectionType { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: (Immutable) Container to store delta table files
        /// 	- Service `onelake`: Workspace name to store delta table files
        /// </summary>
        [Input("containerName", required: true)]
        public string ContainerName { get; set; } = null!;

        [Input("controllerId", required: true)]
        public string ControllerId { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `databricks`: Whether to create external tables
        /// </summary>
        [Input("createExternalTables", required: true)]
        public bool CreateExternalTables { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Confluent Cloud message format.
        /// </summary>
        [Input("dataFormat", required: true)]
        public string DataFormat { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `big_query`: Data location. Datasets will reside in this location.
        /// 	- Service `big_query_dts`: Data location. Datasets will reside in this location.
        /// 	- Service `managed_big_query`: Data location. Datasets will reside in this location.
        /// </summary>
        [Input("dataSetLocation", required: true)]
        public string DataSetLocation { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: Database name
        /// 	- Service `aurora_warehouse`: Database name
        /// 	- Service `azure_postgres_warehouse`: Database name
        /// 	- Service `azure_sql_data_warehouse`: Database name
        /// 	- Service `azure_sql_database`: Database name
        /// 	- Service `azure_sql_managed_db_warehouse`: Database name
        /// 	- Service `maria_rds_warehouse`: Database name
        /// 	- Service `maria_warehouse`: Database name
        /// 	- Service `mysql_rds_warehouse`: Database name
        /// 	- Service `mysql_warehouse`: Database name
        /// 	- Service `panoply`: Database name
        /// 	- Service `periscope_warehouse`: Database name
        /// 	- Service `postgres_gcp_warehouse`: Database name
        /// 	- Service `postgres_rds_warehouse`: Database name
        /// 	- Service `postgres_warehouse`: Database name
        /// 	- Service `redshift`: Database name
        /// 	- Service `snowflake`: Database name
        /// 	- Service `sql_server_rds_warehouse`: Database name
        /// 	- Service `sql_server_warehouse`: Database name
        /// </summary>
        [Input("database", required: true)]
        public string Database { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Databricks Connection method. Default value: `Directly`.
        /// 	- Service `new_s3_datalake`: Databricks Connection method. Default value: `Directly`.
        /// 	- Service `onelake`: Databricks Connection method. Default value: `Directly`.
        /// </summary>
        [Input("databricksConnectionType", required: true)]
        public string DatabricksConnectionType { get; set; } = null!;

        [Input("enableExternalStorageForUnstructuredFiles", required: true)]
        public bool EnableExternalStorageForUnstructuredFiles { get; set; }

        [Input("enableRemoteExecution", required: true)]
        public bool EnableRemoteExecution { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Populate all tables in a single topic.
        /// </summary>
        [Input("enableSingleTopic", required: true)]
        public bool EnableSingleTopic { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aws_msk_wh`: Fivetran generated External ID
        /// 	- Service `panoply`: Fivetran generated External ID
        /// 	- Service `periscope_warehouse`: Fivetran generated External ID
        /// 	- Service `redshift`: Fivetran generated External ID
        /// </summary>
        [Input("externalId", required: true)]
        public string ExternalId { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `databricks`: External location to store Delta tables. Default value: `""`  (null). By default, the external tables will reside in the `/{schema}/{table}` path, and if you specify an external location in the `{externalLocation}/{schema}/{table}` path.
        /// </summary>
        [Input("externalLocation", required: true)]
        public string ExternalLocation { get; set; } = null!;

        [Input("externalStageStorageProvider", required: true)]
        public string ExternalStageStorageProvider { get; set; } = null!;

        [Input("externalStorageIntegration", required: true)]
        public string ExternalStorageIntegration { get; set; } = null!;

        [Input("externalStorageParentFolderUri", required: true)]
        public string ExternalStorageParentFolderUri { get; set; } = null!;

        [Input("fivetranGlueRoleArn", required: true)]
        public string FivetranGlueRoleArn { get; set; } = null!;

        [Input("fivetranMskRoleArn", required: true)]
        public string FivetranMskRoleArn { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `new_s3_datalake`: ARN of the role which you created with different required policy mentioned in our setup guide
        /// </summary>
        [Input("fivetranRoleArn", required: true)]
        public string FivetranRoleArn { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: Server name
        /// 	- Service `aurora_warehouse`: Server name
        /// 	- Service `azure_postgres_warehouse`: Server name
        /// 	- Service `azure_sql_data_warehouse`: Server name
        /// 	- Service `azure_sql_database`: Server name
        /// 	- Service `azure_sql_managed_db_warehouse`: Server name
        /// 	- Service `maria_rds_warehouse`: Server name
        /// 	- Service `maria_warehouse`: Server name
        /// 	- Service `mysql_rds_warehouse`: Server name
        /// 	- Service `mysql_warehouse`: Server name
        /// 	- Service `panoply`: Server name
        /// 	- Service `periscope_warehouse`: Server name
        /// 	- Service `postgres_gcp_warehouse`: Server name
        /// 	- Service `postgres_rds_warehouse`: Server name
        /// 	- Service `postgres_warehouse`: Server name
        /// 	- Service `redshift`: Server name
        /// 	- Service `snowflake`: Server name
        /// 	- Service `sql_server_rds_warehouse`: Server name
        /// 	- Service `sql_server_warehouse`: Server name
        /// </summary>
        [Input("host", required: true)]
        public string Host { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: HTTP path
        /// 	- Service `databricks`: HTTP path
        /// 	- Service `new_s3_datalake`: HTTP path
        /// 	- Service `onelake`: HTTP path
        /// </summary>
        [Input("httpPath", required: true)]
        public string HttpPath { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `snowflake`: Indicates that a private key is encrypted. The default value: `false`. The field can be specified if authentication type is `KEY_PAIR`.
        /// </summary>
        [Input("isPrivateKeyEncrypted", required: true)]
        public bool IsPrivateKeyEncrypted { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `new_s3_datalake`: We use PrivateLink by default if your s3 bucket is in the same region as Fivetran. Turning on this toggle ensures that Fivetran always connects to s3 bucket over PrivateLink. Learn more in our [PrivateLink documentation](https://fivetran.com/docs/connectors/databases/connection-options#awsprivatelinkbeta).
        /// </summary>
        [Input("isPrivateLinkRequired", required: true)]
        public bool IsPrivateLinkRequired { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `redshift`: Is your destination Redshift Serverless
        /// </summary>
        [Input("isRedshiftServerless", required: true)]
        public bool IsRedshiftServerless { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `onelake`: (Immutable) OneLake lakehouse GUID
        /// </summary>
        [Input("lakehouseGuid", required: true)]
        public string LakehouseGuid { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `onelake`: (Immutable) Name of your lakehouse
        /// </summary>
        [Input("lakehouseName", required: true)]
        public string LakehouseName { get; set; } = null!;

        [Input("mskStsRegion", required: true)]
        public string MskStsRegion { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Number of partitions per topic.
        /// </summary>
        [Input("numOfPartitions", required: true)]
        public int NumOfPartitions { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: OAuth 2.0 client ID
        /// 	- Service `databricks`: OAuth 2.0 client ID
        /// 	- Service `new_s3_datalake`: OAuth 2.0 client ID
        /// 	- Service `onelake`: OAuth 2.0 client ID
        /// </summary>
        [Input("oauth2ClientId", required: true)]
        public string Oauth2ClientId { get; set; } = null!;

        [Input("oauth2Secret", required: true)]
        private string? _oauth2Secret;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: OAuth 2.0 secret
        /// 	- Service `databricks`: OAuth 2.0 secret
        /// 	- Service `new_s3_datalake`: OAuth 2.0 secret
        /// 	- Service `onelake`: OAuth 2.0 secret
        /// </summary>
        public string? Oauth2Secret
        {
            get => _oauth2Secret;
            set => _oauth2Secret = value;
        }

        [Input("passphrase", required: true)]
        private string? _passphrase;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `snowflake`: In case private key is encrypted, you are required to enter passphrase that was used to encrypt the private key. The field can be specified if authentication type is `KEY_PAIR`.
        /// </summary>
        public string? Passphrase
        {
            get => _passphrase;
            set => _passphrase = value;
        }

        [Input("password", required: true)]
        private string? _password;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: Database user password
        /// 	- Service `aurora_warehouse`: Database user password
        /// 	- Service `azure_postgres_warehouse`: Database user password
        /// 	- Service `azure_sql_data_warehouse`: Database user password
        /// 	- Service `azure_sql_database`: Database user password
        /// 	- Service `azure_sql_managed_db_warehouse`: Database user password
        /// 	- Service `maria_rds_warehouse`: Database user password
        /// 	- Service `maria_warehouse`: Database user password
        /// 	- Service `mysql_rds_warehouse`: Database user password
        /// 	- Service `mysql_warehouse`: Database user password
        /// 	- Service `panoply`: Database user password
        /// 	- Service `periscope_warehouse`: Database user password
        /// 	- Service `postgres_gcp_warehouse`: Database user password
        /// 	- Service `postgres_rds_warehouse`: Database user password
        /// 	- Service `postgres_warehouse`: Database user password
        /// 	- Service `redshift`: Database user password. Required if authentication type is `PASSWORD`.
        /// 	- Service `snowflake`: Database user password. The field should be specified if authentication type is `PASSWORD`.
        /// 	- Service `sql_server_rds_warehouse`: Database user password
        /// 	- Service `sql_server_warehouse`: Database user password
        /// </summary>
        public string? Password
        {
            get => _password;
            set => _password = value;
        }

        [Input("personalAccessToken", required: true)]
        private string? _personalAccessToken;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Personal access token
        /// 	- Service `databricks`: Personal access token
        /// 	- Service `new_s3_datalake`: Personal access token
        /// 	- Service `onelake`: Personal access token
        /// </summary>
        public string? PersonalAccessToken
        {
            get => _personalAccessToken;
            set => _personalAccessToken = value;
        }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Server port number
        /// 	- Service `aurora_postgres_warehouse`: Server port number
        /// 	- Service `aurora_warehouse`: Server port number
        /// 	- Service `azure_postgres_warehouse`: Server port number
        /// 	- Service `azure_sql_data_warehouse`: Server port number
        /// 	- Service `azure_sql_database`: Server port number
        /// 	- Service `azure_sql_managed_db_warehouse`: Server port number
        /// 	- Service `databricks`: Server port number
        /// 	- Service `maria_rds_warehouse`: Server port number
        /// 	- Service `maria_warehouse`: Server port number
        /// 	- Service `mysql_rds_warehouse`: Server port number
        /// 	- Service `mysql_warehouse`: Server port number
        /// 	- Service `new_s3_datalake`: Server port number
        /// 	- Service `onelake`: Server port number
        /// 	- Service `panoply`: Server port number
        /// 	- Service `periscope_warehouse`: Server port number
        /// 	- Service `postgres_gcp_warehouse`: Server port number
        /// 	- Service `postgres_rds_warehouse`: Server port number
        /// 	- Service `postgres_warehouse`: Server port number
        /// 	- Service `redshift`: Server port number
        /// 	- Service `snowflake`: Server port number
        /// 	- Service `sql_server_rds_warehouse`: Server port number
        /// 	- Service `sql_server_warehouse`: Server port number
        /// </summary>
        [Input("port", required: true)]
        public int Port { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: (Immutable) path/to/data within the container
        /// 	- Service `new_s3_datalake`: (Immutable) Prefix path of the bucket for which you have configured access policy. It is not required if access has been granted to entire Bucket in the access policy
        /// 	- Service `onelake`: (Immutable) path/to/data within your lakehouse inside the Files directory
        /// </summary>
        [Input("prefixPath", required: true)]
        public string PrefixPath { get; set; } = null!;

        [Input("privateKey", required: true)]
        private string? _privateKey;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `snowflake`: Private access key.  The field should be specified if authentication type is `KEY_PAIR`.
        /// </summary>
        public string? PrivateKey
        {
            get => _privateKey;
            set => _privateKey = value;
        }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `big_query`: BigQuery project ID
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: Public Key
        /// 	- Service `aurora_warehouse`: Public Key
        /// 	- Service `azure_postgres_warehouse`: Public Key
        /// 	- Service `azure_sql_data_warehouse`: Public Key
        /// 	- Service `azure_sql_database`: Public Key
        /// 	- Service `azure_sql_managed_db_warehouse`: Public Key
        /// 	- Service `maria_rds_warehouse`: Public Key
        /// 	- Service `maria_warehouse`: Public Key
        /// 	- Service `mysql_rds_warehouse`: Public Key
        /// 	- Service `mysql_warehouse`: Public Key
        /// 	- Service `panoply`: Public Key
        /// 	- Service `periscope_warehouse`: Public Key
        /// 	- Service `postgres_gcp_warehouse`: Public Key
        /// 	- Service `postgres_rds_warehouse`: Public Key
        /// 	- Service `postgres_warehouse`: Public Key
        /// 	- Service `redshift`: Public Key
        /// 	- Service `sql_server_rds_warehouse`: Public Key
        /// 	- Service `sql_server_warehouse`: Public Key
        /// </summary>
        [Input("publicKey", required: true)]
        public string PublicKey { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `new_s3_datalake`: Region of your AWS S3 bucket
        /// </summary>
        [Input("region", required: true)]
        public string Region { get; set; } = null!;

        [Input("registryName", required: true)]
        public string RegistryName { get; set; } = null!;

        [Input("registryStsRegion", required: true)]
        public string RegistryStsRegion { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Replication factor.
        /// </summary>
        [Input("replicationFactor", required: true)]
        public int ReplicationFactor { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `aurora_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `azure_postgres_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `azure_sql_data_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `azure_sql_database`: Field to test Self serve Private Link
        /// 	- Service `azure_sql_managed_db_warehouse`: Field to test Self serve Private Link
        /// 	- Service `databricks`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `maria_rds_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `maria_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `mysql_rds_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `mysql_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `panoply`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `periscope_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `postgres_gcp_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `postgres_rds_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `postgres_warehouse`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `redshift`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `snowflake`: This field is currently being introduced to test the Self-serve Private Link functionality
        /// 	- Service `sql_server_rds_warehouse`: Field to test Self serve Private Link
        /// 	- Service `sql_server_warehouse`: Field to test Self serve Private Link
        /// </summary>
        [Input("resourceId", required: true)]
        public string ResourceId { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `snowflake`: If not specified, Fivetran will use the user's default role
        /// </summary>
        [Input("role", required: true)]
        public string Role { get; set; } = null!;

        [Input("roleArn", required: true)]
        private string? _roleArn;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `redshift`: Role ARN with Redshift permissions. Required if authentication type is `IAM`.
        /// </summary>
        public string? RoleArn
        {
            get => _roleArn;
            set => _roleArn = value;
        }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Security protocol for Confluent Cloud interaction.
        /// </summary>
        [Input("saslMechanism", required: true)]
        public string SaslMechanism { get; set; } = null!;

        [Input("saslPlainKey", required: true)]
        private string? _saslPlainKey;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Confluent Cloud SASL key.
        /// </summary>
        public string? SaslPlainKey
        {
            get => _saslPlainKey;
            set => _saslPlainKey = value;
        }

        [Input("saslPlainSecret", required: true)]
        private string? _saslPlainSecret;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Confluent Cloud SASL secret.
        /// </summary>
        public string? SaslPlainSecret
        {
            get => _saslPlainSecret;
            set => _saslPlainSecret = value;
        }

        [Input("schemaCompatibility", required: true)]
        public string SchemaCompatibility { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Schema Registry
        /// </summary>
        [Input("schemaRegistry", required: true)]
        public string SchemaRegistry { get; set; } = null!;

        [Input("schemaRegistryApiKey", required: true)]
        private string? _schemaRegistryApiKey;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Schema registry API key.
        /// </summary>
        public string? SchemaRegistryApiKey
        {
            get => _schemaRegistryApiKey;
            set => _schemaRegistryApiKey = value;
        }

        [Input("schemaRegistryApiSecret", required: true)]
        private string? _schemaRegistryApiSecret;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Schema registry API secret.
        /// </summary>
        public string? SchemaRegistryApiSecret
        {
            get => _schemaRegistryApiSecret;
            set => _schemaRegistryApiSecret = value;
        }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Schema registry URL.
        /// </summary>
        [Input("schemaRegistryUrl", required: true)]
        public string SchemaRegistryUrl { get; set; } = null!;

        [Input("secretKey", required: true)]
        private string? _secretKey;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `big_query`: Private key of the customer service account. If specified, your service account will be used to process the data instead of the Fivetran-managed service account.
        /// 	- Service `big_query_dts`: Private key of the customer service account. If specified, your service account will be used to process the data instead of the Fivetran-managed service account.
        /// 	- Service `managed_big_query`: Private key of the customer service account. If specified, your service account will be used to process the data instead of the Fivetran-managed service account.
        /// </summary>
        public string? SecretKey
        {
            get => _secretKey;
            set => _secretKey = value;
        }

        [Input("secretValue", required: true)]
        private string? _secretValue;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Secret value for service principal
        /// 	- Service `onelake`: Secret value for service principal
        /// </summary>
        public string? SecretValue
        {
            get => _secretValue;
            set => _secretValue = value;
        }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `confluent_cloud_wh`: Security protocol for Confluent Cloud interaction.
        /// </summary>
        [Input("securityProtocol", required: true)]
        public string SecurityProtocol { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Server Host name
        /// 	- Service `databricks`: Server name
        /// 	- Service `new_s3_datalake`: Server host name
        /// 	- Service `onelake`: Server Host name
        /// </summary>
        [Input("serverHostName", required: true)]
        public string ServerHostName { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Should maintain tables in Databricks 
        /// 	- Service `new_s3_datalake`: Should maintain tables in Databricks 
        /// 	- Service `onelake`: Should maintain tables in Databricks
        /// </summary>
        [Input("shouldMaintainTablesInDatabricks", required: true)]
        public bool ShouldMaintainTablesInDatabricks { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Snapshots older than the retention period are deleted every week. Default value: `ONE_WEEK`.
        /// 	- Service `new_s3_datalake`: Snapshots older than the retention period are deleted every week. Default value: `ONE_WEEK`.
        /// 	- Service `onelake`: Snapshots older than the retention period are deleted every week. Default value: `ONE_WEEK`.
        /// </summary>
        [Input("snapshotRetentionPeriod", required: true)]
        public string SnapshotRetentionPeriod { get; set; } = null!;

        [Input("snowflakeCloud", required: true)]
        public string SnowflakeCloud { get; set; } = null!;

        [Input("snowflakeRegion", required: true)]
        public string SnowflakeRegion { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: (Immutable) Storage account for Azure Data Lake Storage Gen2 name
        /// 	- Service `onelake`: (Immutable) Storage account for Azure Data Lake Storage Gen2 name
        /// </summary>
        [Input("storageAccountName", required: true)]
        public string StorageAccountName { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `new_s3_datalake`: (Immutable) The table format in which you want to sync your tables. Valid values are ICEBERG and DELTA_LAKE
        /// </summary>
        [Input("tableFormat", required: true)]
        public string TableFormat { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `adls`: Tenant id of service principal
        /// 	- Service `onelake`: Tenant ID of service principal
        /// </summary>
        [Input("tenantId", required: true)]
        public string TenantId { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `aurora_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_postgres_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_data_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_database`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_managed_db_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_rds_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_rds_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `panoply`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `periscope_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_gcp_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_rds_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `redshift`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_rds_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_warehouse`: SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// </summary>
        [Input("tunnelHost", required: true)]
        public string TunnelHost { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `aurora_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_postgres_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_data_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_database`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_managed_db_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_rds_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_rds_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `panoply`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `periscope_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_gcp_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_rds_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `redshift`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_rds_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_warehouse`: SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// </summary>
        [Input("tunnelPort", required: true)]
        public int TunnelPort { get; set; }

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `aurora_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_postgres_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_data_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_database`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `azure_sql_managed_db_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_rds_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `maria_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_rds_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `mysql_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `panoply`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `periscope_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_gcp_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_rds_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `postgres_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `redshift`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_rds_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// 	- Service `sql_server_warehouse`: SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
        /// </summary>
        [Input("tunnelUser", required: true)]
        public string TunnelUser { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `aurora_postgres_warehouse`: Database user name
        /// 	- Service `aurora_warehouse`: Database user name
        /// 	- Service `azure_postgres_warehouse`: Database user name
        /// 	- Service `azure_sql_data_warehouse`: Database user name
        /// 	- Service `azure_sql_database`: Database user name
        /// 	- Service `azure_sql_managed_db_warehouse`: Database user name
        /// 	- Service `maria_rds_warehouse`: Database user name
        /// 	- Service `maria_warehouse`: Database user name
        /// 	- Service `mysql_rds_warehouse`: Database user name
        /// 	- Service `mysql_warehouse`: Database user name
        /// 	- Service `panoply`: Database user name
        /// 	- Service `periscope_warehouse`: Database user name
        /// 	- Service `postgres_gcp_warehouse`: Database user name
        /// 	- Service `postgres_rds_warehouse`: Database user name
        /// 	- Service `postgres_warehouse`: Database user name
        /// 	- Service `redshift`: Database user name
        /// 	- Service `snowflake`: Database user name
        /// 	- Service `sql_server_rds_warehouse`: Database user name
        /// 	- Service `sql_server_warehouse`: Database user name
        /// </summary>
        [Input("user", required: true)]
        public string User { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `onelake`: (Immutable) OneLake workspace GUID
        /// </summary>
        [Input("workspaceGuid", required: true)]
        public string WorkspaceGuid { get; set; } = null!;

        /// <summary>
        /// Field usage depends on `service` value: 
        /// 	- Service `onelake`: OneLake workspace name
        /// </summary>
        [Input("workspaceName", required: true)]
        public string WorkspaceName { get; set; } = null!;

        public GetDestinationConfigArgs()
        {
        }
        public static new GetDestinationConfigArgs Empty => new GetDestinationConfigArgs();
    }
}
