// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran.Inputs
{

    public sealed class GetConnectorConfigArgs : global::Pulumi.InvokeArgs
    {
        [Input("absConnectionMethod", required: true)]
        public string AbsConnectionMethod { get; set; } = null!;

        [Input("absConnectionString", required: true)]
        public string AbsConnectionString { get; set; } = null!;

        [Input("absContainerAddress", required: true)]
        public string AbsContainerAddress { get; set; } = null!;

        [Input("absContainerName", required: true)]
        public string AbsContainerName { get; set; } = null!;

        [Input("absHostIp", required: true)]
        public string AbsHostIp { get; set; } = null!;

        [Input("absHostUser", required: true)]
        public string AbsHostUser { get; set; } = null!;

        [Input("absPrefix", required: true)]
        public string AbsPrefix { get; set; } = null!;

        [Input("absPublicKey", required: true)]
        public string AbsPublicKey { get; set; } = null!;

        [Input("accessKey", required: true)]
        public string AccessKey { get; set; } = null!;

        [Input("accessKeyId", required: true)]
        public string AccessKeyId { get; set; } = null!;

        [Input("accessKeySecret", required: true)]
        private string? _accessKeySecret;
        public string? AccessKeySecret
        {
            get => _accessKeySecret;
            set => _accessKeySecret = value;
        }

        [Input("accessToken", required: true)]
        private string? _accessToken;
        public string? AccessToken
        {
            get => _accessToken;
            set => _accessToken = value;
        }

        [Input("accessType", required: true)]
        public string AccessType { get; set; } = null!;

        [Input("account", required: true)]
        public string Account { get; set; } = null!;

        [Input("accountId", required: true)]
        public string AccountId { get; set; } = null!;

        [Input("accountIds", required: true)]
        private List<string>? _accountIds;
        public List<string> AccountIds
        {
            get => _accountIds ?? (_accountIds = new List<string>());
            set => _accountIds = value;
        }

        [Input("accountKey", required: true)]
        private string? _accountKey;
        public string? AccountKey
        {
            get => _accountKey;
            set => _accountKey = value;
        }

        [Input("accountName", required: true)]
        public string AccountName { get; set; } = null!;

        [Input("accountSyncMode", required: true)]
        public string AccountSyncMode { get; set; } = null!;

        [Input("accounts", required: true)]
        private List<string>? _accounts;
        public List<string> Accounts
        {
            get => _accounts ?? (_accounts = new List<string>());
            set => _accounts = value;
        }

        [Input("accountsRedditAds", required: true)]
        private List<Inputs.GetConnectorConfigAccountsRedditAdArgs>? _accountsRedditAds;
        public List<Inputs.GetConnectorConfigAccountsRedditAdArgs> AccountsRedditAds
        {
            get => _accountsRedditAds ?? (_accountsRedditAds = new List<Inputs.GetConnectorConfigAccountsRedditAdArgs>());
            set => _accountsRedditAds = value;
        }

        [Input("accountsSyncMode", required: true)]
        public string AccountsSyncMode { get; set; } = null!;

        [Input("actionBreakdowns", required: true)]
        private List<string>? _actionBreakdowns;
        public List<string> ActionBreakdowns
        {
            get => _actionBreakdowns ?? (_actionBreakdowns = new List<string>());
            set => _actionBreakdowns = value;
        }

        [Input("actionReportTime", required: true)]
        public string ActionReportTime { get; set; } = null!;

        [Input("adAnalytics", required: true)]
        public string AdAnalytics { get; set; } = null!;

        [Input("adUnitView", required: true)]
        public string AdUnitView { get; set; } = null!;

        [Input("adminApiKey", required: true)]
        private string? _adminApiKey;
        public string? AdminApiKey
        {
            get => _adminApiKey;
            set => _adminApiKey = value;
        }

        [Input("adobeAnalyticsConfigurations", required: true)]
        private List<Inputs.GetConnectorConfigAdobeAnalyticsConfigurationArgs>? _adobeAnalyticsConfigurations;
        public List<Inputs.GetConnectorConfigAdobeAnalyticsConfigurationArgs> AdobeAnalyticsConfigurations
        {
            get => _adobeAnalyticsConfigurations ?? (_adobeAnalyticsConfigurations = new List<Inputs.GetConnectorConfigAdobeAnalyticsConfigurationArgs>());
            set => _adobeAnalyticsConfigurations = value;
        }

        [Input("advertisables", required: true)]
        private List<string>? _advertisables;
        public List<string> Advertisables
        {
            get => _advertisables ?? (_advertisables = new List<string>());
            set => _advertisables = value;
        }

        [Input("advertisers", required: true)]
        private List<string>? _advertisers;
        public List<string> Advertisers
        {
            get => _advertisers ?? (_advertisers = new List<string>());
            set => _advertisers = value;
        }

        [Input("advertisersIds", required: true)]
        private List<string>? _advertisersIds;
        public List<string> AdvertisersIds
        {
            get => _advertisersIds ?? (_advertisersIds = new List<string>());
            set => _advertisersIds = value;
        }

        [Input("advertisersSyncMode", required: true)]
        public string AdvertisersSyncMode { get; set; } = null!;

        [Input("agentHost", required: true)]
        public string AgentHost { get; set; } = null!;

        [Input("agentOraHome", required: true)]
        public string AgentOraHome { get; set; } = null!;

        [Input("agentPassword", required: true)]
        private string? _agentPassword;
        public string? AgentPassword
        {
            get => _agentPassword;
            set => _agentPassword = value;
        }

        [Input("agentPort", required: true)]
        public string AgentPort { get; set; } = null!;

        [Input("agentPublicCert", required: true)]
        public string AgentPublicCert { get; set; } = null!;

        [Input("agentUser", required: true)]
        public string AgentUser { get; set; } = null!;

        [Input("aggregation", required: true)]
        public string Aggregation { get; set; } = null!;

        [Input("alwaysEncrypted", required: true)]
        public string AlwaysEncrypted { get; set; } = null!;

        [Input("apiAccessToken", required: true)]
        private string? _apiAccessToken;
        public string? ApiAccessToken
        {
            get => _apiAccessToken;
            set => _apiAccessToken = value;
        }

        [Input("apiId", required: true)]
        public string ApiId { get; set; } = null!;

        [Input("apiKey", required: true)]
        private string? _apiKey;
        public string? ApiKey
        {
            get => _apiKey;
            set => _apiKey = value;
        }

        [Input("apiKeys", required: true)]
        private List<string>? _apiKeys;
        public List<string> ApiKeys
        {
            get => _apiKeys ?? (_apiKeys = new List<string>());
            set => _apiKeys = value;
        }

        [Input("apiQuota", required: true)]
        public string ApiQuota { get; set; } = null!;

        [Input("apiRequestsPerMinute", required: true)]
        public string ApiRequestsPerMinute { get; set; } = null!;

        [Input("apiSecret", required: true)]
        private string? _apiSecret;
        public string? ApiSecret
        {
            get => _apiSecret;
            set => _apiSecret = value;
        }

        [Input("apiSecretKey", required: true)]
        private string? _apiSecretKey;
        public string? ApiSecretKey
        {
            get => _apiSecretKey;
            set => _apiSecretKey = value;
        }

        [Input("apiToken", required: true)]
        private string? _apiToken;
        public string? ApiToken
        {
            get => _apiToken;
            set => _apiToken = value;
        }

        [Input("apiType", required: true)]
        public string ApiType { get; set; } = null!;

        [Input("apiUrl", required: true)]
        public string ApiUrl { get; set; } = null!;

        [Input("apiUsage", required: true)]
        public string ApiUsage { get; set; } = null!;

        [Input("apiVersion", required: true)]
        public string ApiVersion { get; set; } = null!;

        [Input("appId", required: true)]
        private string? _appId;
        public string? AppId
        {
            get => _appId;
            set => _appId = value;
        }

        [Input("appIds", required: true)]
        private List<string>? _appIds;
        public List<string> AppIds
        {
            get => _appIds ?? (_appIds = new List<string>());
            set => _appIds = value;
        }

        [Input("appIdsAppsflyers", required: true)]
        private List<Inputs.GetConnectorConfigAppIdsAppsflyerArgs>? _appIdsAppsflyers;
        public List<Inputs.GetConnectorConfigAppIdsAppsflyerArgs> AppIdsAppsflyers
        {
            get => _appIdsAppsflyers ?? (_appIdsAppsflyers = new List<Inputs.GetConnectorConfigAppIdsAppsflyerArgs>());
            set => _appIdsAppsflyers = value;
        }

        [Input("appSpecificPassword", required: true)]
        private string? _appSpecificPassword;
        public string? AppSpecificPassword
        {
            get => _appSpecificPassword;
            set => _appSpecificPassword = value;
        }

        [Input("appSyncMode", required: true)]
        public string AppSyncMode { get; set; } = null!;

        [Input("appendFileOption", required: true)]
        public string AppendFileOption { get; set; } = null!;

        [Input("applicationKey", required: true)]
        private string? _applicationKey;
        public string? ApplicationKey
        {
            get => _applicationKey;
            set => _applicationKey = value;
        }

        [Input("apps", required: true)]
        private List<string>? _apps;
        public List<string> Apps
        {
            get => _apps ?? (_apps = new List<string>());
            set => _apps = value;
        }

        [Input("archiveLogFormat", required: true)]
        public string ArchiveLogFormat { get; set; } = null!;

        [Input("archiveLogPath", required: true)]
        public string ArchiveLogPath { get; set; } = null!;

        [Input("archivePattern", required: true)]
        public string ArchivePattern { get; set; } = null!;

        [Input("areSoapCredentialsProvided", required: true)]
        public string AreSoapCredentialsProvided { get; set; } = null!;

        [Input("asbIp", required: true)]
        public string AsbIp { get; set; } = null!;

        [Input("asmOption", required: true)]
        public string AsmOption { get; set; } = null!;

        [Input("asmOracleHome", required: true)]
        public string AsmOracleHome { get; set; } = null!;

        [Input("asmPassword", required: true)]
        private string? _asmPassword;
        public string? AsmPassword
        {
            get => _asmPassword;
            set => _asmPassword = value;
        }

        [Input("asmTns", required: true)]
        public string AsmTns { get; set; } = null!;

        [Input("asmUser", required: true)]
        public string AsmUser { get; set; } = null!;

        [Input("attributionWindow", required: true)]
        public string AttributionWindow { get; set; } = null!;

        [Input("attributionWindowSize", required: true)]
        public string AttributionWindowSize { get; set; } = null!;

        [Input("auth", required: true)]
        public string Auth { get; set; } = null!;

        [Input("authMethod", required: true)]
        public string AuthMethod { get; set; } = null!;

        [Input("authMode", required: true)]
        public string AuthMode { get; set; } = null!;

        [Input("authType", required: true)]
        public string AuthType { get; set; } = null!;

        [Input("authorizationMethod", required: true)]
        public string AuthorizationMethod { get; set; } = null!;

        [Input("awsRegionCode", required: true)]
        public string AwsRegionCode { get; set; } = null!;

        [Input("baseCurrency", required: true)]
        public string BaseCurrency { get; set; } = null!;

        [Input("baseDomain", required: true)]
        public string BaseDomain { get; set; } = null!;

        [Input("baseId", required: true)]
        public string BaseId { get; set; } = null!;

        [Input("baseUrl", required: true)]
        public string BaseUrl { get; set; } = null!;

        [Input("bearerToken", required: true)]
        private string? _bearerToken;
        public string? BearerToken
        {
            get => _bearerToken;
            set => _bearerToken = value;
        }

        [Input("blobSasUrl", required: true)]
        private string? _blobSasUrl;
        public string? BlobSasUrl
        {
            get => _blobSasUrl;
            set => _blobSasUrl = value;
        }

        [Input("breakdowns", required: true)]
        private List<string>? _breakdowns;
        public List<string> Breakdowns
        {
            get => _breakdowns ?? (_breakdowns = new List<string>());
            set => _breakdowns = value;
        }

        [Input("bucket", required: true)]
        public string Bucket { get; set; } = null!;

        [Input("bucketName", required: true)]
        public string BucketName { get; set; } = null!;

        [Input("bucketService", required: true)]
        public string BucketService { get; set; } = null!;

        [Input("businessId", required: true)]
        private string? _businessId;
        public string? BusinessId
        {
            get => _businessId;
            set => _businessId = value;
        }

        [Input("businessUnitId", required: true)]
        public string BusinessUnitId { get; set; } = null!;

        [Input("certificate", required: true)]
        public string Certificate { get; set; } = null!;

        [Input("clickAttributionWindow", required: true)]
        public string ClickAttributionWindow { get; set; } = null!;

        [Input("client", required: true)]
        public string Client { get; set; } = null!;

        [Input("clientCert", required: true)]
        private string? _clientCert;
        public string? ClientCert
        {
            get => _clientCert;
            set => _clientCert = value;
        }

        [Input("clientCertKey", required: true)]
        private string? _clientCertKey;
        public string? ClientCertKey
        {
            get => _clientCertKey;
            set => _clientCertKey = value;
        }

        [Input("clientId", required: true)]
        public string ClientId { get; set; } = null!;

        [Input("clientKey", required: true)]
        private string? _clientKey;
        public string? ClientKey
        {
            get => _clientKey;
            set => _clientKey = value;
        }

        [Input("clientName", required: true)]
        public string ClientName { get; set; } = null!;

        [Input("clientSecret", required: true)]
        private string? _clientSecret;
        public string? ClientSecret
        {
            get => _clientSecret;
            set => _clientSecret = value;
        }

        [Input("cloudStorageType", required: true)]
        public string CloudStorageType { get; set; } = null!;

        [Input("columns", required: true)]
        private List<string>? _columns;
        public List<string> Columns
        {
            get => _columns ?? (_columns = new List<string>());
            set => _columns = value;
        }

        [Input("companyId", required: true)]
        public string CompanyId { get; set; } = null!;

        [Input("companyKey", required: true)]
        private string? _companyKey;
        public string? CompanyKey
        {
            get => _companyKey;
            set => _companyKey = value;
        }

        [Input("companyRequestToken", required: true)]
        private string? _companyRequestToken;
        public string? CompanyRequestToken
        {
            get => _companyRequestToken;
            set => _companyRequestToken = value;
        }

        [Input("companyUuid", required: true)]
        public string CompanyUuid { get; set; } = null!;

        [Input("compression", required: true)]
        public string Compression { get; set; } = null!;

        [Input("configMethod", required: true)]
        public string ConfigMethod { get; set; } = null!;

        [Input("configRepositoryUrl", required: true)]
        public string ConfigRepositoryUrl { get; set; } = null!;

        [Input("configType", required: true)]
        public string ConfigType { get; set; } = null!;

        [Input("connectingUser", required: true)]
        public string ConnectingUser { get; set; } = null!;

        [Input("connectingUserEmail", required: true)]
        public string ConnectingUserEmail { get; set; } = null!;

        [Input("connectionMethod", required: true)]
        public string ConnectionMethod { get; set; } = null!;

        [Input("connectionString", required: true)]
        public string ConnectionString { get; set; } = null!;

        [Input("connectionType", required: true)]
        public string ConnectionType { get; set; } = null!;

        [Input("consumerGroup", required: true)]
        public string ConsumerGroup { get; set; } = null!;

        [Input("consumerKey", required: true)]
        private string? _consumerKey;
        public string? ConsumerKey
        {
            get => _consumerKey;
            set => _consumerKey = value;
        }

        [Input("consumerSecret", required: true)]
        private string? _consumerSecret;
        public string? ConsumerSecret
        {
            get => _consumerSecret;
            set => _consumerSecret = value;
        }

        [Input("containerAddress", required: true)]
        public string ContainerAddress { get; set; } = null!;

        [Input("containerName", required: true)]
        public string ContainerName { get; set; } = null!;

        [Input("contentOwnerId", required: true)]
        public string ContentOwnerId { get; set; } = null!;

        [Input("conversationWebhookUrl", required: true)]
        public string ConversationWebhookUrl { get; set; } = null!;

        [Input("conversionDimensions", required: true)]
        private List<string>? _conversionDimensions;
        public List<string> ConversionDimensions
        {
            get => _conversionDimensions ?? (_conversionDimensions = new List<string>());
            set => _conversionDimensions = value;
        }

        [Input("conversionReportTime", required: true)]
        public string ConversionReportTime { get; set; } = null!;

        [Input("conversionWindowSize", required: true)]
        public string ConversionWindowSize { get; set; } = null!;

        [Input("csvDefinition", required: true)]
        public string CsvDefinition { get; set; } = null!;

        [Input("currency", required: true)]
        public string Currency { get; set; } = null!;

        [Input("customEventSyncMode", required: true)]
        public string CustomEventSyncMode { get; set; } = null!;

        [Input("customEvents", required: true)]
        private List<string>? _customEvents;
        public List<string> CustomEvents
        {
            get => _customEvents ?? (_customEvents = new List<string>());
            set => _customEvents = value;
        }

        [Input("customFieldIds", required: true)]
        private List<string>? _customFieldIds;
        public List<string> CustomFieldIds
        {
            get => _customFieldIds ?? (_customFieldIds = new List<string>());
            set => _customFieldIds = value;
        }

        [Input("customFloodlightVariables", required: true)]
        private List<string>? _customFloodlightVariables;
        public List<string> CustomFloodlightVariables
        {
            get => _customFloodlightVariables ?? (_customFloodlightVariables = new List<string>());
            set => _customFloodlightVariables = value;
        }

        [Input("customReports", required: true)]
        private List<Inputs.GetConnectorConfigCustomReportArgs>? _customReports;
        public List<Inputs.GetConnectorConfigCustomReportArgs> CustomReports
        {
            get => _customReports ?? (_customReports = new List<Inputs.GetConnectorConfigCustomReportArgs>());
            set => _customReports = value;
        }

        [Input("customTables", required: true)]
        private List<Inputs.GetConnectorConfigCustomTableArgs>? _customTables;
        public List<Inputs.GetConnectorConfigCustomTableArgs> CustomTables
        {
            get => _customTables ?? (_customTables = new List<Inputs.GetConnectorConfigCustomTableArgs>());
            set => _customTables = value;
        }

        [Input("customerId", required: true)]
        public string CustomerId { get; set; } = null!;

        [Input("customerListId", required: true)]
        public string CustomerListId { get; set; } = null!;

        [Input("dailyApiCallLimit", required: true)]
        public string DailyApiCallLimit { get; set; } = null!;

        [Input("dataAccessMethod", required: true)]
        public string DataAccessMethod { get; set; } = null!;

        [Input("dataCenter", required: true)]
        public string DataCenter { get; set; } = null!;

        [Input("dataSetName", required: true)]
        public string DataSetName { get; set; } = null!;

        [Input("database", required: true)]
        public string Database { get; set; } = null!;

        [Input("datasetId", required: true)]
        public string DatasetId { get; set; } = null!;

        [Input("datasource", required: true)]
        public string Datasource { get; set; } = null!;

        [Input("dateGranularity", required: true)]
        public string DateGranularity { get; set; } = null!;

        [Input("delimiter", required: true)]
        public string Delimiter { get; set; } = null!;

        [Input("dimensionAttributes", required: true)]
        private List<string>? _dimensionAttributes;
        public List<string> DimensionAttributes
        {
            get => _dimensionAttributes ?? (_dimensionAttributes = new List<string>());
            set => _dimensionAttributes = value;
        }

        [Input("dimensions", required: true)]
        private List<string>? _dimensions;
        public List<string> Dimensions
        {
            get => _dimensions ?? (_dimensions = new List<string>());
            set => _dimensions = value;
        }

        [Input("domain", required: true)]
        public string Domain { get; set; } = null!;

        [Input("domainHostName", required: true)]
        public string DomainHostName { get; set; } = null!;

        [Input("domainName", required: true)]
        public string DomainName { get; set; } = null!;

        [Input("domainType", required: true)]
        public string DomainType { get; set; } = null!;

        [Input("elements", required: true)]
        private List<string>? _elements;
        public List<string> Elements
        {
            get => _elements ?? (_elements = new List<string>());
            set => _elements = value;
        }

        [Input("email", required: true)]
        public string Email { get; set; } = null!;

        [Input("emptyHeader", required: true)]
        public string EmptyHeader { get; set; } = null!;

        [Input("enableAllDimensionCombinations", required: true)]
        public string EnableAllDimensionCombinations { get; set; } = null!;

        [Input("enableArchiveLogOnly", required: true)]
        public string EnableArchiveLogOnly { get; set; } = null!;

        [Input("enableEnrichments", required: true)]
        public string EnableEnrichments { get; set; } = null!;

        [Input("enableExports", required: true)]
        public string EnableExports { get; set; } = null!;

        [Input("enableTde", required: true)]
        public string EnableTde { get; set; } = null!;

        [Input("encodedPublicKey", required: true)]
        public string EncodedPublicKey { get; set; } = null!;

        [Input("encryptionKey", required: true)]
        private string? _encryptionKey;
        public string? EncryptionKey
        {
            get => _encryptionKey;
            set => _encryptionKey = value;
        }

        [Input("endpoint", required: true)]
        public string Endpoint { get; set; } = null!;

        [Input("engagementAttributionWindow", required: true)]
        public string EngagementAttributionWindow { get; set; } = null!;

        [Input("enrichedExport", required: true)]
        public string EnrichedExport { get; set; } = null!;

        [Input("entityId", required: true)]
        public string EntityId { get; set; } = null!;

        [Input("environment", required: true)]
        public string Environment { get; set; } = null!;

        [Input("escapeChar", required: true)]
        public string EscapeChar { get; set; } = null!;

        [Input("euRegion", required: true)]
        public string EuRegion { get; set; } = null!;

        [Input("events", required: true)]
        private List<string>? _events;
        public List<string> Events
        {
            get => _events ?? (_events = new List<string>());
            set => _events = value;
        }

        [Input("exportStorageType", required: true)]
        public string ExportStorageType { get; set; } = null!;

        [Input("externalId", required: true)]
        public string ExternalId { get; set; } = null!;

        [Input("fields", required: true)]
        private List<string>? _fields;
        public List<string> Fields
        {
            get => _fields ?? (_fields = new List<string>());
            set => _fields = value;
        }

        [Input("fileType", required: true)]
        public string FileType { get; set; } = null!;

        [Input("filter", required: true)]
        public string Filter { get; set; } = null!;

        [Input("financeAccountSyncMode", required: true)]
        public string FinanceAccountSyncMode { get; set; } = null!;

        [Input("financeAccounts", required: true)]
        private List<string>? _financeAccounts;
        public List<string> FinanceAccounts
        {
            get => _financeAccounts ?? (_financeAccounts = new List<string>());
            set => _financeAccounts = value;
        }

        [Input("folder", required: true)]
        public string Folder { get; set; } = null!;

        [Input("folderId", required: true)]
        public string FolderId { get; set; } = null!;

        [Input("folderPath", required: true)]
        public string FolderPath { get; set; } = null!;

        [Input("forecastId", required: true)]
        public string ForecastId { get; set; } = null!;

        [Input("ftpHost", required: true)]
        public string FtpHost { get; set; } = null!;

        [Input("ftpPassword", required: true)]
        private string? _ftpPassword;
        public string? FtpPassword
        {
            get => _ftpPassword;
            set => _ftpPassword = value;
        }

        [Input("ftpPort", required: true)]
        public string FtpPort { get; set; } = null!;

        [Input("ftpUser", required: true)]
        public string FtpUser { get; set; } = null!;

        [Input("function", required: true)]
        public string Function { get; set; } = null!;

        [Input("functionApp", required: true)]
        public string FunctionApp { get; set; } = null!;

        [Input("functionKey", required: true)]
        public string FunctionKey { get; set; } = null!;

        [Input("functionName", required: true)]
        public string FunctionName { get; set; } = null!;

        [Input("functionTrigger", required: true)]
        private string? _functionTrigger;
        public string? FunctionTrigger
        {
            get => _functionTrigger;
            set => _functionTrigger = value;
        }

        [Input("gcsBucket", required: true)]
        public string GcsBucket { get; set; } = null!;

        [Input("gcsFolder", required: true)]
        public string GcsFolder { get; set; } = null!;

        [Input("groupName", required: true)]
        public string GroupName { get; set; } = null!;

        [Input("hasManagePermissions", required: true)]
        public string HasManagePermissions { get; set; } = null!;

        [Input("homeFolder", required: true)]
        public string HomeFolder { get; set; } = null!;

        [Input("host", required: true)]
        public string Host { get; set; } = null!;

        [Input("hostIp", required: true)]
        public string HostIp { get; set; } = null!;

        [Input("hostUser", required: true)]
        public string HostUser { get; set; } = null!;

        [Input("hosts", required: true)]
        private List<string>? _hosts;
        public List<string> Hosts
        {
            get => _hosts ?? (_hosts = new List<string>());
            set => _hosts = value;
        }

        [Input("identity", required: true)]
        public string Identity { get; set; } = null!;

        [Input("instance", required: true)]
        public string Instance { get; set; } = null!;

        [Input("instanceNumber", required: true)]
        public string InstanceNumber { get; set; } = null!;

        [Input("instanceUrl", required: true)]
        public string InstanceUrl { get; set; } = null!;

        [Input("integrationKey", required: true)]
        public string IntegrationKey { get; set; } = null!;

        [Input("isAccountLevelConnector", required: true)]
        public string IsAccountLevelConnector { get; set; } = null!;

        [Input("isAuth2Enabled", required: true)]
        public string IsAuth2Enabled { get; set; } = null!;

        [Input("isCustomApiCredentials", required: true)]
        public string IsCustomApiCredentials { get; set; } = null!;

        [Input("isFtps", required: true)]
        public string IsFtps { get; set; } = null!;

        [Input("isKeypair", required: true)]
        public string IsKeypair { get; set; } = null!;

        [Input("isMultiEntityFeatureEnabled", required: true)]
        public string IsMultiEntityFeatureEnabled { get; set; } = null!;

        [Input("isNewPackage", required: true)]
        public string IsNewPackage { get; set; } = null!;

        [Input("isPrivateKeyEncrypted", required: true)]
        public string IsPrivateKeyEncrypted { get; set; } = null!;

        [Input("isPrivateLinkRequired", required: true)]
        public string IsPrivateLinkRequired { get; set; } = null!;

        [Input("isPublic", required: true)]
        public string IsPublic { get; set; } = null!;

        [Input("isSailthruConnectEnabled", required: true)]
        public string IsSailthruConnectEnabled { get; set; } = null!;

        [Input("isSecure", required: true)]
        public string IsSecure { get; set; } = null!;

        [Input("isSingleTableMode", required: true)]
        public string IsSingleTableMode { get; set; } = null!;

        [Input("isVendor", required: true)]
        public string IsVendor { get; set; } = null!;

        [Input("jsonDeliveryMode", required: true)]
        public string JsonDeliveryMode { get; set; } = null!;

        [Input("key", required: true)]
        public string Key { get; set; } = null!;

        [Input("keyPassword", required: true)]
        private string? _keyPassword;
        public string? KeyPassword
        {
            get => _keyPassword;
            set => _keyPassword = value;
        }

        [Input("keyStoreType", required: true)]
        public string KeyStoreType { get; set; } = null!;

        [Input("keystore", required: true)]
        private string? _keystore;
        public string? Keystore
        {
            get => _keystore;
            set => _keystore = value;
        }

        [Input("keystorePassword", required: true)]
        private string? _keystorePassword;
        public string? KeystorePassword
        {
            get => _keystorePassword;
            set => _keystorePassword = value;
        }

        [Input("lastSyncedChangesUtc_", required: true)]
        public string LastSyncedChangesUtc_ { get; set; } = null!;

        [Input("latestVersion", required: true)]
        public string LatestVersion { get; set; } = null!;

        [Input("lineSeparator", required: true)]
        public string LineSeparator { get; set; } = null!;

        [Input("listStrategy", required: true)]
        public string ListStrategy { get; set; } = null!;

        [Input("listSyncMode", required: true)]
        public string ListSyncMode { get; set; } = null!;

        [Input("logJournal", required: true)]
        public string LogJournal { get; set; } = null!;

        [Input("logJournalSchema", required: true)]
        public string LogJournalSchema { get; set; } = null!;

        [Input("login", required: true)]
        public string Login { get; set; } = null!;

        [Input("loginPassword", required: true)]
        private string? _loginPassword;
        public string? LoginPassword
        {
            get => _loginPassword;
            set => _loginPassword = value;
        }

        [Input("managerAccounts", required: true)]
        private List<string>? _managerAccounts;
        public List<string> ManagerAccounts
        {
            get => _managerAccounts ?? (_managerAccounts = new List<string>());
            set => _managerAccounts = value;
        }

        [Input("merchantId", required: true)]
        public string MerchantId { get; set; } = null!;

        [Input("messageType", required: true)]
        public string MessageType { get; set; } = null!;

        [Input("metrics", required: true)]
        private List<string>? _metrics;
        public List<string> Metrics
        {
            get => _metrics ?? (_metrics = new List<string>());
            set => _metrics = value;
        }

        [Input("namedRange", required: true)]
        public string NamedRange { get; set; } = null!;

        [Input("namespace", required: true)]
        public string Namespace { get; set; } = null!;

        [Input("networkCode", required: true)]
        public string NetworkCode { get; set; } = null!;

        [Input("nullSequence", required: true)]
        public string NullSequence { get; set; } = null!;

        [Input("oauthToken", required: true)]
        private string? _oauthToken;
        public string? OauthToken
        {
            get => _oauthToken;
            set => _oauthToken = value;
        }

        [Input("oauthTokenSecret", required: true)]
        private string? _oauthTokenSecret;
        public string? OauthTokenSecret
        {
            get => _oauthTokenSecret;
            set => _oauthTokenSecret = value;
        }

        [Input("onError", required: true)]
        public string OnError { get; set; } = null!;

        [Input("onPremise", required: true)]
        public string OnPremise { get; set; } = null!;

        [Input("organization", required: true)]
        public string Organization { get; set; } = null!;

        [Input("organizationId", required: true)]
        public string OrganizationId { get; set; } = null!;

        [Input("organizations", required: true)]
        private List<string>? _organizations;
        public List<string> Organizations
        {
            get => _organizations ?? (_organizations = new List<string>());
            set => _organizations = value;
        }

        [Input("packedModeTables", required: true)]
        private List<string>? _packedModeTables;
        public List<string> PackedModeTables
        {
            get => _packedModeTables ?? (_packedModeTables = new List<string>());
            set => _packedModeTables = value;
        }

        [Input("packingMode", required: true)]
        public string PackingMode { get; set; } = null!;

        [Input("pages", required: true)]
        private List<string>? _pages;
        public List<string> Pages
        {
            get => _pages ?? (_pages = new List<string>());
            set => _pages = value;
        }

        [Input("partners", required: true)]
        private List<string>? _partners;
        public List<string> Partners
        {
            get => _partners ?? (_partners = new List<string>());
            set => _partners = value;
        }

        [Input("passphrase", required: true)]
        private string? _passphrase;
        public string? Passphrase
        {
            get => _passphrase;
            set => _passphrase = value;
        }

        [Input("password", required: true)]
        private string? _password;
        public string? Password
        {
            get => _password;
            set => _password = value;
        }

        [Input("pat", required: true)]
        private string? _pat;
        public string? Pat
        {
            get => _pat;
            set => _pat = value;
        }

        [Input("patName", required: true)]
        public string PatName { get; set; } = null!;

        [Input("patSecret", required: true)]
        private string? _patSecret;
        public string? PatSecret
        {
            get => _patSecret;
            set => _patSecret = value;
        }

        [Input("path", required: true)]
        public string Path { get; set; } = null!;

        [Input("pattern", required: true)]
        public string Pattern { get; set; } = null!;

        [Input("pdbName", required: true)]
        public string PdbName { get; set; } = null!;

        [Input("pemCertificate", required: true)]
        private string? _pemCertificate;
        public string? PemCertificate
        {
            get => _pemCertificate;
            set => _pemCertificate = value;
        }

        [Input("pemPrivateKey", required: true)]
        private string? _pemPrivateKey;
        public string? PemPrivateKey
        {
            get => _pemPrivateKey;
            set => _pemPrivateKey = value;
        }

        [Input("perInteractionDimensions", required: true)]
        private List<string>? _perInteractionDimensions;
        public List<string> PerInteractionDimensions
        {
            get => _perInteractionDimensions ?? (_perInteractionDimensions = new List<string>());
            set => _perInteractionDimensions = value;
        }

        [Input("personalAccessToken", required: true)]
        private string? _personalAccessToken;
        public string? PersonalAccessToken
        {
            get => _personalAccessToken;
            set => _personalAccessToken = value;
        }

        [Input("pgpPassPhrase", required: true)]
        private string? _pgpPassPhrase;
        public string? PgpPassPhrase
        {
            get => _pgpPassPhrase;
            set => _pgpPassPhrase = value;
        }

        [Input("pgpSecretKey", required: true)]
        private string? _pgpSecretKey;
        public string? PgpSecretKey
        {
            get => _pgpSecretKey;
            set => _pgpSecretKey = value;
        }

        [Input("phoneNumber", required: true)]
        public string PhoneNumber { get; set; } = null!;

        [Input("port", required: true)]
        public string Port { get; set; } = null!;

        [Input("postClickAttributionWindowSize", required: true)]
        public string PostClickAttributionWindowSize { get; set; } = null!;

        [Input("prebuiltReport", required: true)]
        public string PrebuiltReport { get; set; } = null!;

        [Input("prefix", required: true)]
        public string Prefix { get; set; } = null!;

        [Input("primaryKeys", required: true)]
        private List<string>? _primaryKeys;
        public List<string> PrimaryKeys
        {
            get => _primaryKeys ?? (_primaryKeys = new List<string>());
            set => _primaryKeys = value;
        }

        [Input("privateKey", required: true)]
        private string? _privateKey;
        public string? PrivateKey
        {
            get => _privateKey;
            set => _privateKey = value;
        }

        [Input("profiles", required: true)]
        private List<string>? _profiles;
        public List<string> Profiles
        {
            get => _profiles ?? (_profiles = new List<string>());
            set => _profiles = value;
        }

        [Input("projectCredentials", required: true)]
        private List<Inputs.GetConnectorConfigProjectCredentialArgs>? _projectCredentials;
        public List<Inputs.GetConnectorConfigProjectCredentialArgs> ProjectCredentials
        {
            get => _projectCredentials ?? (_projectCredentials = new List<Inputs.GetConnectorConfigProjectCredentialArgs>());
            set => _projectCredentials = value;
        }

        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        [Input("projects", required: true)]
        private List<string>? _projects;
        public List<string> Projects
        {
            get => _projects ?? (_projects = new List<string>());
            set => _projects = value;
        }

        [Input("properties", required: true)]
        private List<string>? _properties;
        public List<string> Properties
        {
            get => _properties ?? (_properties = new List<string>());
            set => _properties = value;
        }

        [Input("publicKey", required: true)]
        public string PublicKey { get; set; } = null!;

        [Input("publicationName", required: true)]
        public string PublicationName { get; set; } = null!;

        [Input("queryId", required: true)]
        public string QueryId { get; set; } = null!;

        [Input("queryParamValue", required: true)]
        private string? _queryParamValue;
        public string? QueryParamValue
        {
            get => _queryParamValue;
            set => _queryParamValue = value;
        }

        [Input("refreshTokenExpiresAt", required: true)]
        public string RefreshTokenExpiresAt { get; set; } = null!;

        [Input("region", required: true)]
        public string Region { get; set; } = null!;

        [Input("replicaId", required: true)]
        public string ReplicaId { get; set; } = null!;

        [Input("replicationSlot", required: true)]
        public string ReplicationSlot { get; set; } = null!;

        [Input("reportConfigurationIds", required: true)]
        private List<string>? _reportConfigurationIds;
        public List<string> ReportConfigurationIds
        {
            get => _reportConfigurationIds ?? (_reportConfigurationIds = new List<string>());
            set => _reportConfigurationIds = value;
        }

        [Input("reportFormatType", required: true)]
        public string ReportFormatType { get; set; } = null!;

        [Input("reportSuites", required: true)]
        private List<string>? _reportSuites;
        public List<string> ReportSuites
        {
            get => _reportSuites ?? (_reportSuites = new List<string>());
            set => _reportSuites = value;
        }

        [Input("reportTimezone", required: true)]
        public string ReportTimezone { get; set; } = null!;

        [Input("reportType", required: true)]
        public string ReportType { get; set; } = null!;

        [Input("reportUrl", required: true)]
        public string ReportUrl { get; set; } = null!;

        [Input("reports", required: true)]
        private List<Inputs.GetConnectorConfigReportArgs>? _reports;
        public List<Inputs.GetConnectorConfigReportArgs> Reports
        {
            get => _reports ?? (_reports = new List<Inputs.GetConnectorConfigReportArgs>());
            set => _reports = value;
        }

        [Input("reportsLinkedinAds", required: true)]
        private List<string>? _reportsLinkedinAds;
        public List<string> ReportsLinkedinAds
        {
            get => _reportsLinkedinAds ?? (_reportsLinkedinAds = new List<string>());
            set => _reportsLinkedinAds = value;
        }

        [Input("repositories", required: true)]
        private List<string>? _repositories;
        public List<string> Repositories
        {
            get => _repositories ?? (_repositories = new List<string>());
            set => _repositories = value;
        }

        [Input("resourceToken", required: true)]
        private string? _resourceToken;
        public string? ResourceToken
        {
            get => _resourceToken;
            set => _resourceToken = value;
        }

        [Input("resourceUrl", required: true)]
        public string ResourceUrl { get; set; } = null!;

        [Input("restApiLimit", required: true)]
        public string RestApiLimit { get; set; } = null!;

        [Input("rfcLibraryPath", required: true)]
        public string RfcLibraryPath { get; set; } = null!;

        [Input("role", required: true)]
        public string Role { get; set; } = null!;

        [Input("roleArn", required: true)]
        private string? _roleArn;
        public string? RoleArn
        {
            get => _roleArn;
            set => _roleArn = value;
        }

        [Input("rollbackWindowSize", required: true)]
        public string RollbackWindowSize { get; set; } = null!;

        [Input("s3Bucket", required: true)]
        public string S3Bucket { get; set; } = null!;

        [Input("s3ExportBucket", required: true)]
        public string S3ExportBucket { get; set; } = null!;

        [Input("s3ExportFolder", required: true)]
        public string S3ExportFolder { get; set; } = null!;

        [Input("s3ExportRoleArn", required: true)]
        private string? _s3ExportRoleArn;
        public string? S3ExportRoleArn
        {
            get => _s3ExportRoleArn;
            set => _s3ExportRoleArn = value;
        }

        [Input("s3RoleArn", required: true)]
        private string? _s3RoleArn;
        public string? S3RoleArn
        {
            get => _s3RoleArn;
            set => _s3RoleArn = value;
        }

        [Input("s3bucket", required: true)]
        public string S3bucket { get; set; } = null!;

        [Input("s3externalId", required: true)]
        public string S3externalId { get; set; } = null!;

        [Input("s3folder", required: true)]
        public string S3folder { get; set; } = null!;

        [Input("s3path", required: true)]
        public string S3path { get; set; } = null!;

        [Input("s3roleArn", required: true)]
        private string? _s3roleArn;
        public string? S3roleArn
        {
            get => _s3roleArn;
            set => _s3roleArn = value;
        }

        [Input("salesAccountSyncMode", required: true)]
        public string SalesAccountSyncMode { get; set; } = null!;

        [Input("salesAccounts", required: true)]
        private List<string>? _salesAccounts;
        public List<string> SalesAccounts
        {
            get => _salesAccounts ?? (_salesAccounts = new List<string>());
            set => _salesAccounts = value;
        }

        [Input("salesforceSecurityToken", required: true)]
        private string? _salesforceSecurityToken;
        public string? SalesforceSecurityToken
        {
            get => _salesforceSecurityToken;
            set => _salesforceSecurityToken = value;
        }

        [Input("sandboxAccount", required: true)]
        public string SandboxAccount { get; set; } = null!;

        [Input("sapSchema", required: true)]
        public string SapSchema { get; set; } = null!;

        [Input("sapUser", required: true)]
        public string SapUser { get; set; } = null!;

        [Input("saslMechanism", required: true)]
        public string SaslMechanism { get; set; } = null!;

        [Input("saslPlainKey", required: true)]
        private string? _saslPlainKey;
        public string? SaslPlainKey
        {
            get => _saslPlainKey;
            set => _saslPlainKey = value;
        }

        [Input("saslPlainSecret", required: true)]
        private string? _saslPlainSecret;
        public string? SaslPlainSecret
        {
            get => _saslPlainSecret;
            set => _saslPlainSecret = value;
        }

        [Input("saslScram256Key", required: true)]
        private string? _saslScram256Key;
        public string? SaslScram256Key
        {
            get => _saslScram256Key;
            set => _saslScram256Key = value;
        }

        [Input("saslScram256Secret", required: true)]
        private string? _saslScram256Secret;
        public string? SaslScram256Secret
        {
            get => _saslScram256Secret;
            set => _saslScram256Secret = value;
        }

        [Input("saslScram512Key", required: true)]
        private string? _saslScram512Key;
        public string? SaslScram512Key
        {
            get => _saslScram512Key;
            set => _saslScram512Key = value;
        }

        [Input("saslScram512Secret", required: true)]
        private string? _saslScram512Secret;
        public string? SaslScram512Secret
        {
            get => _saslScram512Secret;
            set => _saslScram512Secret = value;
        }

        [Input("schemaRegistryCredentialsSource", required: true)]
        public string SchemaRegistryCredentialsSource { get; set; } = null!;

        [Input("schemaRegistryKey", required: true)]
        private string? _schemaRegistryKey;
        public string? SchemaRegistryKey
        {
            get => _schemaRegistryKey;
            set => _schemaRegistryKey = value;
        }

        [Input("schemaRegistrySecret", required: true)]
        private string? _schemaRegistrySecret;
        public string? SchemaRegistrySecret
        {
            get => _schemaRegistrySecret;
            set => _schemaRegistrySecret = value;
        }

        [Input("schemaRegistryUrls", required: true)]
        private List<string>? _schemaRegistryUrls;
        public List<string> SchemaRegistryUrls
        {
            get => _schemaRegistryUrls ?? (_schemaRegistryUrls = new List<string>());
            set => _schemaRegistryUrls = value;
        }

        [Input("secret", required: true)]
        private string? _secret;
        public string? Secret
        {
            get => _secret;
            set => _secret = value;
        }

        [Input("secretKey", required: true)]
        private string? _secretKey;
        public string? SecretKey
        {
            get => _secretKey;
            set => _secretKey = value;
        }

        [Input("secrets", required: true)]
        private string? _secrets;
        public string? Secrets
        {
            get => _secrets;
            set => _secrets = value;
        }

        [Input("secretsLists", required: true)]
        private List<Inputs.GetConnectorConfigSecretsListArgs>? _secretsLists;
        public List<Inputs.GetConnectorConfigSecretsListArgs> SecretsLists
        {
            get => _secretsLists ?? (_secretsLists = new List<Inputs.GetConnectorConfigSecretsListArgs>());
            set => _secretsLists = value;
        }

        [Input("securityProtocol", required: true)]
        public string SecurityProtocol { get; set; } = null!;

        [Input("segments", required: true)]
        private List<string>? _segments;
        public List<string> Segments
        {
            get => _segments ?? (_segments = new List<string>());
            set => _segments = value;
        }

        [Input("selectedExports", required: true)]
        private List<string>? _selectedExports;
        public List<string> SelectedExports
        {
            get => _selectedExports ?? (_selectedExports = new List<string>());
            set => _selectedExports = value;
        }

        [Input("senderId", required: true)]
        public string SenderId { get; set; } = null!;

        [Input("senderPassword", required: true)]
        private string? _senderPassword;
        public string? SenderPassword
        {
            get => _senderPassword;
            set => _senderPassword = value;
        }

        [Input("serverAddress", required: true)]
        public string ServerAddress { get; set; } = null!;

        [Input("serverUrl", required: true)]
        public string ServerUrl { get; set; } = null!;

        [Input("servers", required: true)]
        private List<string>? _servers;
        public List<string> Servers
        {
            get => _servers ?? (_servers = new List<string>());
            set => _servers = value;
        }

        [Input("serviceAccount", required: true)]
        public string ServiceAccount { get; set; } = null!;

        [Input("serviceAccountEmail", required: true)]
        public string ServiceAccountEmail { get; set; } = null!;

        [Input("serviceAccountKey", required: true)]
        private string? _serviceAccountKey;
        public string? ServiceAccountKey
        {
            get => _serviceAccountKey;
            set => _serviceAccountKey = value;
        }

        [Input("serviceVersion", required: true)]
        public string ServiceVersion { get; set; } = null!;

        [Input("sftpHost", required: true)]
        public string SftpHost { get; set; } = null!;

        [Input("sftpIsKeyPair", required: true)]
        public string SftpIsKeyPair { get; set; } = null!;

        [Input("sftpPassword", required: true)]
        private string? _sftpPassword;
        public string? SftpPassword
        {
            get => _sftpPassword;
            set => _sftpPassword = value;
        }

        [Input("sftpPort", required: true)]
        public string SftpPort { get; set; } = null!;

        [Input("sftpPublicKey", required: true)]
        public string SftpPublicKey { get; set; } = null!;

        [Input("sftpUser", required: true)]
        public string SftpUser { get; set; } = null!;

        [Input("shareUrl", required: true)]
        public string ShareUrl { get; set; } = null!;

        [Input("sheetId", required: true)]
        public string SheetId { get; set; } = null!;

        [Input("shop", required: true)]
        public string Shop { get; set; } = null!;

        [Input("shortCode", required: true)]
        private string? _shortCode;
        public string? ShortCode
        {
            get => _shortCode;
            set => _shortCode = value;
        }

        [Input("showRecordsWithNoMetrics", required: true)]
        public string ShowRecordsWithNoMetrics { get; set; } = null!;

        [Input("sid", required: true)]
        public string Sid { get; set; } = null!;

        [Input("signerPublicKey", required: true)]
        public string SignerPublicKey { get; set; } = null!;

        [Input("siteAddress", required: true)]
        public string SiteAddress { get; set; } = null!;

        [Input("siteId", required: true)]
        public string SiteId { get; set; } = null!;

        [Input("siteName", required: true)]
        public string SiteName { get; set; } = null!;

        [Input("siteUrls", required: true)]
        private List<string>? _siteUrls;
        public List<string> SiteUrls
        {
            get => _siteUrls ?? (_siteUrls = new List<string>());
            set => _siteUrls = value;
        }

        [Input("skipAfter", required: true)]
        public string SkipAfter { get; set; } = null!;

        [Input("skipBefore", required: true)]
        public string SkipBefore { get; set; } = null!;

        [Input("soapUri", required: true)]
        public string SoapUri { get; set; } = null!;

        [Input("socialDataSyncTimeframe", required: true)]
        public string SocialDataSyncTimeframe { get; set; } = null!;

        [Input("source", required: true)]
        public string Source { get; set; } = null!;

        [Input("storeHash", required: true)]
        public string StoreHash { get; set; } = null!;

        [Input("subDomain", required: true)]
        public string SubDomain { get; set; } = null!;

        [Input("subdomain", required: true)]
        public string Subdomain { get; set; } = null!;

        [Input("subscriberName", required: true)]
        public string SubscriberName { get; set; } = null!;

        [Input("subscription", required: true)]
        public string Subscription { get; set; } = null!;

        [Input("supportConnectedAccountsSync", required: true)]
        public string SupportConnectedAccountsSync { get; set; } = null!;

        [Input("supportNestedColumns", required: true)]
        public string SupportNestedColumns { get; set; } = null!;

        [Input("surveyIds", required: true)]
        public string SurveyIds { get; set; } = null!;

        [Input("swipeAttributionWindow", required: true)]
        public string SwipeAttributionWindow { get; set; } = null!;

        [Input("syncDataLocker", required: true)]
        public string SyncDataLocker { get; set; } = null!;

        [Input("syncFormat", required: true)]
        public string SyncFormat { get; set; } = null!;

        [Input("syncFormulaFields", required: true)]
        public string SyncFormulaFields { get; set; } = null!;

        [Input("syncMetadata", required: true)]
        public string SyncMetadata { get; set; } = null!;

        [Input("syncMethod", required: true)]
        public string SyncMethod { get; set; } = null!;

        [Input("syncMode", required: true)]
        public string SyncMode { get; set; } = null!;

        [Input("syncMultipleAccounts", required: true)]
        public string SyncMultipleAccounts { get; set; } = null!;

        [Input("syncPackMode", required: true)]
        public string SyncPackMode { get; set; } = null!;

        [Input("syncPullApi", required: true)]
        public string SyncPullApi { get; set; } = null!;

        [Input("syncType", required: true)]
        public string SyncType { get; set; } = null!;

        [Input("sysnr", required: true)]
        public string Sysnr { get; set; } = null!;

        [Input("tableName", required: true)]
        public string TableName { get; set; } = null!;

        [Input("tdeCertificate", required: true)]
        private string? _tdeCertificate;
        public string? TdeCertificate
        {
            get => _tdeCertificate;
            set => _tdeCertificate = value;
        }

        [Input("tdeCertificateName", required: true)]
        public string TdeCertificateName { get; set; } = null!;

        [Input("tdePassword", required: true)]
        private string? _tdePassword;
        public string? TdePassword
        {
            get => _tdePassword;
            set => _tdePassword = value;
        }

        [Input("tdePrivateKey", required: true)]
        private string? _tdePrivateKey;
        public string? TdePrivateKey
        {
            get => _tdePrivateKey;
            set => _tdePrivateKey = value;
        }

        [Input("teamId", required: true)]
        public string TeamId { get; set; } = null!;

        [Input("technicalAccountId", required: true)]
        public string TechnicalAccountId { get; set; } = null!;

        [Input("templateLabels", required: true)]
        private List<string>? _templateLabels;
        public List<string> TemplateLabels
        {
            get => _templateLabels ?? (_templateLabels = new List<string>());
            set => _templateLabels = value;
        }

        [Input("tenantId", required: true)]
        private string? _tenantId;
        public string? TenantId
        {
            get => _tenantId;
            set => _tenantId = value;
        }

        [Input("testTableName", required: true)]
        public string TestTableName { get; set; } = null!;

        [Input("timeZone", required: true)]
        public string TimeZone { get; set; } = null!;

        [Input("timeframeMonths", required: true)]
        public string TimeframeMonths { get; set; } = null!;

        [Input("tns", required: true)]
        public string Tns { get; set; } = null!;

        [Input("tokenAuthenticatedContainer", required: true)]
        public string TokenAuthenticatedContainer { get; set; } = null!;

        [Input("tokenAuthenticatedDatabase", required: true)]
        public string TokenAuthenticatedDatabase { get; set; } = null!;

        [Input("tokenId", required: true)]
        private string? _tokenId;
        public string? TokenId
        {
            get => _tokenId;
            set => _tokenId = value;
        }

        [Input("tokenKey", required: true)]
        private string? _tokenKey;
        public string? TokenKey
        {
            get => _tokenKey;
            set => _tokenKey = value;
        }

        [Input("tokenSecret", required: true)]
        private string? _tokenSecret;
        public string? TokenSecret
        {
            get => _tokenSecret;
            set => _tokenSecret = value;
        }

        [Input("tokenSecretKey", required: true)]
        private string? _tokenSecretKey;
        public string? TokenSecretKey
        {
            get => _tokenSecretKey;
            set => _tokenSecretKey = value;
        }

        [Input("topics", required: true)]
        private List<string>? _topics;
        public List<string> Topics
        {
            get => _topics ?? (_topics = new List<string>());
            set => _topics = value;
        }

        [Input("trustStoreType", required: true)]
        public string TrustStoreType { get; set; } = null!;

        [Input("trustedCert", required: true)]
        private string? _trustedCert;
        public string? TrustedCert
        {
            get => _trustedCert;
            set => _trustedCert = value;
        }

        [Input("truststore", required: true)]
        private string? _truststore;
        public string? Truststore
        {
            get => _truststore;
            set => _truststore = value;
        }

        [Input("tunnelHost", required: true)]
        public string TunnelHost { get; set; } = null!;

        [Input("tunnelPort", required: true)]
        public string TunnelPort { get; set; } = null!;

        [Input("tunnelUser", required: true)]
        public string TunnelUser { get; set; } = null!;

        [Input("uniqueId", required: true)]
        public string UniqueId { get; set; } = null!;

        [Input("updateConfigOnEachSync", required: true)]
        public string UpdateConfigOnEachSync { get; set; } = null!;

        [Input("updateMethod", required: true)]
        public string UpdateMethod { get; set; } = null!;

        [Input("uri", required: true)]
        public string Uri { get; set; } = null!;

        [Input("useApiKeys", required: true)]
        public string UseApiKeys { get; set; } = null!;

        [Input("useCustomerBucket", required: true)]
        public string UseCustomerBucket { get; set; } = null!;

        [Input("useOracleRac", required: true)]
        public string UseOracleRac { get; set; } = null!;

        [Input("usePgpEncryptionOptions", required: true)]
        public string UsePgpEncryptionOptions { get; set; } = null!;

        [Input("useServiceAccount", required: true)]
        public string UseServiceAccount { get; set; } = null!;

        [Input("useTemplateLabels", required: true)]
        public string UseTemplateLabels { get; set; } = null!;

        [Input("useWebhooks", required: true)]
        public string UseWebhooks { get; set; } = null!;

        [Input("useWorkspace", required: true)]
        public string UseWorkspace { get; set; } = null!;

        [Input("user", required: true)]
        public string User { get; set; } = null!;

        [Input("userId", required: true)]
        public string UserId { get; set; } = null!;

        [Input("userKey", required: true)]
        public string UserKey { get; set; } = null!;

        [Input("userName", required: true)]
        public string UserName { get; set; } = null!;

        [Input("userProfiles", required: true)]
        private List<string>? _userProfiles;
        public List<string> UserProfiles
        {
            get => _userProfiles ?? (_userProfiles = new List<string>());
            set => _userProfiles = value;
        }

        [Input("username", required: true)]
        public string Username { get; set; } = null!;

        [Input("viewAttributionWindow", required: true)]
        public string ViewAttributionWindow { get; set; } = null!;

        [Input("viewThroughAttributionWindowSize", required: true)]
        public string ViewThroughAttributionWindowSize { get; set; } = null!;

        [Input("webhookEndpoint", required: true)]
        public string WebhookEndpoint { get; set; } = null!;

        [Input("webhookKey", required: true)]
        public string WebhookKey { get; set; } = null!;

        [Input("webhookUrl", required: true)]
        public string WebhookUrl { get; set; } = null!;

        [Input("wordPressSiteIdOrWoocommerceDomainName", required: true)]
        public string WordPressSiteIdOrWoocommerceDomainName { get; set; } = null!;

        [Input("workspaceName", required: true)]
        public string WorkspaceName { get; set; } = null!;

        [Input("workspaceSameAsSource", required: true)]
        public string WorkspaceSameAsSource { get; set; } = null!;

        [Input("workspaceSchema", required: true)]
        public string WorkspaceSchema { get; set; } = null!;

        [Input("wsCertificate", required: true)]
        private string? _wsCertificate;
        public string? WsCertificate
        {
            get => _wsCertificate;
            set => _wsCertificate = value;
        }

        public GetConnectorConfigArgs()
        {
        }
        public static new GetConnectorConfigArgs Empty => new GetConnectorConfigArgs();
    }
}
