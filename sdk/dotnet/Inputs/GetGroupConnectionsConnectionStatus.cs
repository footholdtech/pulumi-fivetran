// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran.Inputs
{

    public sealed class GetGroupConnectionsConnectionStatusArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The boolean specifying whether the connection should be triggered to re-sync all historical data. If you set this parameter to TRUE, the next scheduled sync will be historical. If the value is FALSE or not specified, the connection will not re-sync historical data. NOTE: When the value is TRUE, only the next scheduled sync will be historical, all subsequent ones will be incremental. This parameter is set to FALSE once the historical sync is completed.
        /// </summary>
        [Input("isHistoricalSync", required: true)]
        public bool IsHistoricalSync { get; set; }

        /// <summary>
        /// The current setup state of the connection. The available values are: \n\n - incomplete - the setup config is incomplete, the setup tests never succeeded \n\n - connected - the connection is properly set up \n\n - broken - the connection setup config is broken.
        /// </summary>
        [Input("setupState", required: true)]
        public string SetupState { get; set; } = null!;

        /// <summary>
        /// The current sync state of the connection. The available values are: \n\n - scheduled - the sync is waiting to be run \n\n - syncing - the sync is currently running \n\n - paused - the sync is currently paused \n\n - rescheduled - the sync is waiting until more API calls are available in the source service.
        /// </summary>
        [Input("syncState", required: true)]
        public string SyncState { get; set; } = null!;

        [Input("tasks")]
        private List<Inputs.GetGroupConnectionsConnectionStatusTaskArgs>? _tasks;

        /// <summary>
        /// The collection of tasks for the connection
        /// </summary>
        public List<Inputs.GetGroupConnectionsConnectionStatusTaskArgs> Tasks
        {
            get => _tasks ?? (_tasks = new List<Inputs.GetGroupConnectionsConnectionStatusTaskArgs>());
            set => _tasks = value;
        }

        /// <summary>
        /// The current data update state of the connection. The available values are: \n\n - on_schedule - the sync is running smoothly, no delays \n\n - delayed - the data is delayed for a longer time than expected for the update.
        /// </summary>
        [Input("updateState", required: true)]
        public string UpdateState { get; set; } = null!;

        [Input("warnings")]
        private List<Inputs.GetGroupConnectionsConnectionStatusWarningArgs>? _warnings;

        /// <summary>
        /// The collection of warnings for the connection.
        /// </summary>
        public List<Inputs.GetGroupConnectionsConnectionStatusWarningArgs> Warnings
        {
            get => _warnings ?? (_warnings = new List<Inputs.GetGroupConnectionsConnectionStatusWarningArgs>());
            set => _warnings = value;
        }

        public GetGroupConnectionsConnectionStatusArgs()
        {
        }
        public static new GetGroupConnectionsConnectionStatusArgs Empty => new GetGroupConnectionsConnectionStatusArgs();
    }
}
