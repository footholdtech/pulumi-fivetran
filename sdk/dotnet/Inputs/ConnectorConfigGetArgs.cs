// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran.Inputs
{

    public sealed class ConnectorConfigGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("absConnectionMethod")]
        public Input<string>? AbsConnectionMethod { get; set; }

        [Input("absConnectionString")]
        public Input<string>? AbsConnectionString { get; set; }

        [Input("absContainerAddress")]
        public Input<string>? AbsContainerAddress { get; set; }

        [Input("absContainerName")]
        public Input<string>? AbsContainerName { get; set; }

        [Input("absHostIp")]
        public Input<string>? AbsHostIp { get; set; }

        [Input("absHostUser")]
        public Input<string>? AbsHostUser { get; set; }

        [Input("absPrefix")]
        public Input<string>? AbsPrefix { get; set; }

        [Input("absPublicKey")]
        public Input<string>? AbsPublicKey { get; set; }

        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        [Input("accessKeyId")]
        public Input<string>? AccessKeyId { get; set; }

        [Input("accessKeySecret")]
        private Input<string>? _accessKeySecret;
        public Input<string>? AccessKeySecret
        {
            get => _accessKeySecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessKeySecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("accessToken")]
        private Input<string>? _accessToken;
        public Input<string>? AccessToken
        {
            get => _accessToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("accessType")]
        public Input<string>? AccessType { get; set; }

        [Input("account")]
        public Input<string>? Account { get; set; }

        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("accountIds")]
        private InputList<string>? _accountIds;
        public InputList<string> AccountIds
        {
            get => _accountIds ?? (_accountIds = new InputList<string>());
            set => _accountIds = value;
        }

        [Input("accountKey")]
        private Input<string>? _accountKey;
        public Input<string>? AccountKey
        {
            get => _accountKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accountKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        [Input("accountSyncMode")]
        public Input<string>? AccountSyncMode { get; set; }

        [Input("accounts")]
        private InputList<string>? _accounts;
        public InputList<string> Accounts
        {
            get => _accounts ?? (_accounts = new InputList<string>());
            set => _accounts = value;
        }

        [Input("accountsRedditAds")]
        private InputList<Inputs.ConnectorConfigAccountsRedditAdGetArgs>? _accountsRedditAds;
        public InputList<Inputs.ConnectorConfigAccountsRedditAdGetArgs> AccountsRedditAds
        {
            get => _accountsRedditAds ?? (_accountsRedditAds = new InputList<Inputs.ConnectorConfigAccountsRedditAdGetArgs>());
            set => _accountsRedditAds = value;
        }

        [Input("accountsSyncMode")]
        public Input<string>? AccountsSyncMode { get; set; }

        [Input("actionBreakdowns")]
        private InputList<string>? _actionBreakdowns;
        public InputList<string> ActionBreakdowns
        {
            get => _actionBreakdowns ?? (_actionBreakdowns = new InputList<string>());
            set => _actionBreakdowns = value;
        }

        [Input("actionReportTime")]
        public Input<string>? ActionReportTime { get; set; }

        [Input("adAnalytics")]
        public Input<string>? AdAnalytics { get; set; }

        [Input("adUnitView")]
        public Input<string>? AdUnitView { get; set; }

        [Input("adminApiKey")]
        private Input<string>? _adminApiKey;
        public Input<string>? AdminApiKey
        {
            get => _adminApiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _adminApiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("adobeAnalyticsConfigurations")]
        private InputList<Inputs.ConnectorConfigAdobeAnalyticsConfigurationGetArgs>? _adobeAnalyticsConfigurations;
        public InputList<Inputs.ConnectorConfigAdobeAnalyticsConfigurationGetArgs> AdobeAnalyticsConfigurations
        {
            get => _adobeAnalyticsConfigurations ?? (_adobeAnalyticsConfigurations = new InputList<Inputs.ConnectorConfigAdobeAnalyticsConfigurationGetArgs>());
            set => _adobeAnalyticsConfigurations = value;
        }

        [Input("advertisables")]
        private InputList<string>? _advertisables;
        public InputList<string> Advertisables
        {
            get => _advertisables ?? (_advertisables = new InputList<string>());
            set => _advertisables = value;
        }

        [Input("advertisers")]
        private InputList<string>? _advertisers;
        public InputList<string> Advertisers
        {
            get => _advertisers ?? (_advertisers = new InputList<string>());
            set => _advertisers = value;
        }

        [Input("advertisersIds")]
        private InputList<string>? _advertisersIds;
        public InputList<string> AdvertisersIds
        {
            get => _advertisersIds ?? (_advertisersIds = new InputList<string>());
            set => _advertisersIds = value;
        }

        [Input("advertisersSyncMode")]
        public Input<string>? AdvertisersSyncMode { get; set; }

        [Input("agentHost")]
        public Input<string>? AgentHost { get; set; }

        [Input("agentOraHome")]
        public Input<string>? AgentOraHome { get; set; }

        [Input("agentPassword")]
        private Input<string>? _agentPassword;
        public Input<string>? AgentPassword
        {
            get => _agentPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _agentPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("agentPort")]
        public Input<string>? AgentPort { get; set; }

        [Input("agentPublicCert")]
        public Input<string>? AgentPublicCert { get; set; }

        [Input("agentUser")]
        public Input<string>? AgentUser { get; set; }

        [Input("aggregation")]
        public Input<string>? Aggregation { get; set; }

        [Input("alwaysEncrypted")]
        public Input<string>? AlwaysEncrypted { get; set; }

        [Input("apiAccessToken")]
        private Input<string>? _apiAccessToken;
        public Input<string>? ApiAccessToken
        {
            get => _apiAccessToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiAccessToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("apiId")]
        public Input<string>? ApiId { get; set; }

        [Input("apiKey")]
        private Input<string>? _apiKey;
        public Input<string>? ApiKey
        {
            get => _apiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("apiKeys")]
        private InputList<string>? _apiKeys;
        public InputList<string> ApiKeys
        {
            get => _apiKeys ?? (_apiKeys = new InputList<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableArray.Create<string>());
                _apiKeys = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("apiQuota")]
        public Input<string>? ApiQuota { get; set; }

        [Input("apiRequestsPerMinute")]
        public Input<string>? ApiRequestsPerMinute { get; set; }

        [Input("apiSecret")]
        private Input<string>? _apiSecret;
        public Input<string>? ApiSecret
        {
            get => _apiSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("apiSecretKey")]
        private Input<string>? _apiSecretKey;
        public Input<string>? ApiSecretKey
        {
            get => _apiSecretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiSecretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("apiToken")]
        private Input<string>? _apiToken;
        public Input<string>? ApiToken
        {
            get => _apiToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("apiType")]
        public Input<string>? ApiType { get; set; }

        [Input("apiUrl")]
        public Input<string>? ApiUrl { get; set; }

        [Input("apiUsage")]
        public Input<string>? ApiUsage { get; set; }

        [Input("apiVersion")]
        public Input<string>? ApiVersion { get; set; }

        [Input("appId")]
        private Input<string>? _appId;
        public Input<string>? AppId
        {
            get => _appId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _appId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("appIds")]
        private InputList<string>? _appIds;
        public InputList<string> AppIds
        {
            get => _appIds ?? (_appIds = new InputList<string>());
            set => _appIds = value;
        }

        [Input("appIdsAppsflyers")]
        private InputList<Inputs.ConnectorConfigAppIdsAppsflyerGetArgs>? _appIdsAppsflyers;
        public InputList<Inputs.ConnectorConfigAppIdsAppsflyerGetArgs> AppIdsAppsflyers
        {
            get => _appIdsAppsflyers ?? (_appIdsAppsflyers = new InputList<Inputs.ConnectorConfigAppIdsAppsflyerGetArgs>());
            set => _appIdsAppsflyers = value;
        }

        [Input("appSpecificPassword")]
        private Input<string>? _appSpecificPassword;
        public Input<string>? AppSpecificPassword
        {
            get => _appSpecificPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _appSpecificPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("appSyncMode")]
        public Input<string>? AppSyncMode { get; set; }

        [Input("appendFileOption")]
        public Input<string>? AppendFileOption { get; set; }

        [Input("applicationKey")]
        private Input<string>? _applicationKey;
        public Input<string>? ApplicationKey
        {
            get => _applicationKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _applicationKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("apps")]
        private InputList<string>? _apps;
        public InputList<string> Apps
        {
            get => _apps ?? (_apps = new InputList<string>());
            set => _apps = value;
        }

        [Input("archiveLogFormat")]
        public Input<string>? ArchiveLogFormat { get; set; }

        [Input("archiveLogPath")]
        public Input<string>? ArchiveLogPath { get; set; }

        [Input("archivePattern")]
        public Input<string>? ArchivePattern { get; set; }

        [Input("areSoapCredentialsProvided")]
        public Input<string>? AreSoapCredentialsProvided { get; set; }

        [Input("asbIp")]
        public Input<string>? AsbIp { get; set; }

        [Input("asmOption")]
        public Input<string>? AsmOption { get; set; }

        [Input("asmOracleHome")]
        public Input<string>? AsmOracleHome { get; set; }

        [Input("asmPassword")]
        private Input<string>? _asmPassword;
        public Input<string>? AsmPassword
        {
            get => _asmPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _asmPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("asmTns")]
        public Input<string>? AsmTns { get; set; }

        [Input("asmUser")]
        public Input<string>? AsmUser { get; set; }

        [Input("attributionWindow")]
        public Input<string>? AttributionWindow { get; set; }

        [Input("attributionWindowSize")]
        public Input<string>? AttributionWindowSize { get; set; }

        [Input("auth")]
        public Input<string>? Auth { get; set; }

        [Input("authMethod")]
        public Input<string>? AuthMethod { get; set; }

        [Input("authMode")]
        public Input<string>? AuthMode { get; set; }

        [Input("authType")]
        public Input<string>? AuthType { get; set; }

        [Input("authorizationMethod")]
        public Input<string>? AuthorizationMethod { get; set; }

        [Input("awsRegionCode")]
        public Input<string>? AwsRegionCode { get; set; }

        [Input("baseCurrency")]
        public Input<string>? BaseCurrency { get; set; }

        [Input("baseDomain")]
        public Input<string>? BaseDomain { get; set; }

        [Input("baseId")]
        public Input<string>? BaseId { get; set; }

        [Input("baseUrl")]
        public Input<string>? BaseUrl { get; set; }

        [Input("bearerToken")]
        private Input<string>? _bearerToken;
        public Input<string>? BearerToken
        {
            get => _bearerToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _bearerToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("blobSasUrl")]
        private Input<string>? _blobSasUrl;
        public Input<string>? BlobSasUrl
        {
            get => _blobSasUrl;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _blobSasUrl = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("breakdowns")]
        private InputList<string>? _breakdowns;
        public InputList<string> Breakdowns
        {
            get => _breakdowns ?? (_breakdowns = new InputList<string>());
            set => _breakdowns = value;
        }

        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        [Input("bucketName")]
        public Input<string>? BucketName { get; set; }

        [Input("bucketService")]
        public Input<string>? BucketService { get; set; }

        [Input("businessId")]
        private Input<string>? _businessId;
        public Input<string>? BusinessId
        {
            get => _businessId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _businessId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("businessUnitId")]
        public Input<string>? BusinessUnitId { get; set; }

        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        [Input("clickAttributionWindow")]
        public Input<string>? ClickAttributionWindow { get; set; }

        [Input("client")]
        public Input<string>? Client { get; set; }

        [Input("clientCert")]
        private Input<string>? _clientCert;
        public Input<string>? ClientCert
        {
            get => _clientCert;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientCert = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientCertKey")]
        private Input<string>? _clientCertKey;
        public Input<string>? ClientCertKey
        {
            get => _clientCertKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientCertKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientKey")]
        private Input<string>? _clientKey;
        public Input<string>? ClientKey
        {
            get => _clientKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientName")]
        public Input<string>? ClientName { get; set; }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("cloudStorageType")]
        public Input<string>? CloudStorageType { get; set; }

        [Input("columns")]
        private InputList<string>? _columns;
        public InputList<string> Columns
        {
            get => _columns ?? (_columns = new InputList<string>());
            set => _columns = value;
        }

        [Input("companyId")]
        public Input<string>? CompanyId { get; set; }

        [Input("companyKey")]
        private Input<string>? _companyKey;
        public Input<string>? CompanyKey
        {
            get => _companyKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _companyKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("companyRequestToken")]
        private Input<string>? _companyRequestToken;
        public Input<string>? CompanyRequestToken
        {
            get => _companyRequestToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _companyRequestToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("companyUuid")]
        public Input<string>? CompanyUuid { get; set; }

        [Input("compression")]
        public Input<string>? Compression { get; set; }

        [Input("configMethod")]
        public Input<string>? ConfigMethod { get; set; }

        [Input("configRepositoryUrl")]
        public Input<string>? ConfigRepositoryUrl { get; set; }

        [Input("configType")]
        public Input<string>? ConfigType { get; set; }

        [Input("connectingUser")]
        public Input<string>? ConnectingUser { get; set; }

        [Input("connectingUserEmail")]
        public Input<string>? ConnectingUserEmail { get; set; }

        [Input("connectionMethod")]
        public Input<string>? ConnectionMethod { get; set; }

        [Input("connectionString")]
        public Input<string>? ConnectionString { get; set; }

        [Input("connectionType")]
        public Input<string>? ConnectionType { get; set; }

        [Input("consumerGroup")]
        public Input<string>? ConsumerGroup { get; set; }

        [Input("consumerKey")]
        private Input<string>? _consumerKey;
        public Input<string>? ConsumerKey
        {
            get => _consumerKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _consumerKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("consumerSecret")]
        private Input<string>? _consumerSecret;
        public Input<string>? ConsumerSecret
        {
            get => _consumerSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _consumerSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("containerAddress")]
        public Input<string>? ContainerAddress { get; set; }

        [Input("containerName")]
        public Input<string>? ContainerName { get; set; }

        [Input("contentOwnerId")]
        public Input<string>? ContentOwnerId { get; set; }

        [Input("conversationWebhookUrl")]
        public Input<string>? ConversationWebhookUrl { get; set; }

        [Input("conversionDimensions")]
        private InputList<string>? _conversionDimensions;
        public InputList<string> ConversionDimensions
        {
            get => _conversionDimensions ?? (_conversionDimensions = new InputList<string>());
            set => _conversionDimensions = value;
        }

        [Input("conversionReportTime")]
        public Input<string>? ConversionReportTime { get; set; }

        [Input("conversionWindowSize")]
        public Input<string>? ConversionWindowSize { get; set; }

        [Input("csvDefinition")]
        public Input<string>? CsvDefinition { get; set; }

        [Input("currency")]
        public Input<string>? Currency { get; set; }

        [Input("customEventSyncMode")]
        public Input<string>? CustomEventSyncMode { get; set; }

        [Input("customEvents")]
        private InputList<string>? _customEvents;
        public InputList<string> CustomEvents
        {
            get => _customEvents ?? (_customEvents = new InputList<string>());
            set => _customEvents = value;
        }

        [Input("customFieldIds")]
        private InputList<string>? _customFieldIds;
        public InputList<string> CustomFieldIds
        {
            get => _customFieldIds ?? (_customFieldIds = new InputList<string>());
            set => _customFieldIds = value;
        }

        [Input("customFloodlightVariables")]
        private InputList<string>? _customFloodlightVariables;
        public InputList<string> CustomFloodlightVariables
        {
            get => _customFloodlightVariables ?? (_customFloodlightVariables = new InputList<string>());
            set => _customFloodlightVariables = value;
        }

        [Input("customReports")]
        private InputList<Inputs.ConnectorConfigCustomReportGetArgs>? _customReports;
        public InputList<Inputs.ConnectorConfigCustomReportGetArgs> CustomReports
        {
            get => _customReports ?? (_customReports = new InputList<Inputs.ConnectorConfigCustomReportGetArgs>());
            set => _customReports = value;
        }

        [Input("customTables")]
        private InputList<Inputs.ConnectorConfigCustomTableGetArgs>? _customTables;
        public InputList<Inputs.ConnectorConfigCustomTableGetArgs> CustomTables
        {
            get => _customTables ?? (_customTables = new InputList<Inputs.ConnectorConfigCustomTableGetArgs>());
            set => _customTables = value;
        }

        [Input("customerId")]
        public Input<string>? CustomerId { get; set; }

        [Input("customerListId")]
        public Input<string>? CustomerListId { get; set; }

        [Input("dailyApiCallLimit")]
        public Input<string>? DailyApiCallLimit { get; set; }

        [Input("dataAccessMethod")]
        public Input<string>? DataAccessMethod { get; set; }

        [Input("dataCenter")]
        public Input<string>? DataCenter { get; set; }

        [Input("dataSetName")]
        public Input<string>? DataSetName { get; set; }

        [Input("database")]
        public Input<string>? Database { get; set; }

        [Input("datasetId")]
        public Input<string>? DatasetId { get; set; }

        [Input("datasource")]
        public Input<string>? Datasource { get; set; }

        [Input("dateGranularity")]
        public Input<string>? DateGranularity { get; set; }

        [Input("delimiter")]
        public Input<string>? Delimiter { get; set; }

        [Input("dimensionAttributes")]
        private InputList<string>? _dimensionAttributes;
        public InputList<string> DimensionAttributes
        {
            get => _dimensionAttributes ?? (_dimensionAttributes = new InputList<string>());
            set => _dimensionAttributes = value;
        }

        [Input("dimensions")]
        private InputList<string>? _dimensions;
        public InputList<string> Dimensions
        {
            get => _dimensions ?? (_dimensions = new InputList<string>());
            set => _dimensions = value;
        }

        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("domainHostName")]
        public Input<string>? DomainHostName { get; set; }

        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        [Input("domainType")]
        public Input<string>? DomainType { get; set; }

        [Input("elements")]
        private InputList<string>? _elements;
        public InputList<string> Elements
        {
            get => _elements ?? (_elements = new InputList<string>());
            set => _elements = value;
        }

        [Input("email")]
        public Input<string>? Email { get; set; }

        [Input("emptyHeader")]
        public Input<string>? EmptyHeader { get; set; }

        [Input("enableAllDimensionCombinations")]
        public Input<string>? EnableAllDimensionCombinations { get; set; }

        [Input("enableArchiveLogOnly")]
        public Input<string>? EnableArchiveLogOnly { get; set; }

        [Input("enableEnrichments")]
        public Input<string>? EnableEnrichments { get; set; }

        [Input("enableExports")]
        public Input<string>? EnableExports { get; set; }

        [Input("enableTde")]
        public Input<string>? EnableTde { get; set; }

        [Input("encodedPublicKey")]
        public Input<string>? EncodedPublicKey { get; set; }

        [Input("encryptionKey")]
        private Input<string>? _encryptionKey;
        public Input<string>? EncryptionKey
        {
            get => _encryptionKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _encryptionKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        [Input("engagementAttributionWindow")]
        public Input<string>? EngagementAttributionWindow { get; set; }

        [Input("enrichedExport")]
        public Input<string>? EnrichedExport { get; set; }

        [Input("entityId")]
        public Input<string>? EntityId { get; set; }

        [Input("environment")]
        public Input<string>? Environment { get; set; }

        [Input("escapeChar")]
        public Input<string>? EscapeChar { get; set; }

        [Input("euRegion")]
        public Input<string>? EuRegion { get; set; }

        [Input("events")]
        private InputList<string>? _events;
        public InputList<string> Events
        {
            get => _events ?? (_events = new InputList<string>());
            set => _events = value;
        }

        [Input("exportStorageType")]
        public Input<string>? ExportStorageType { get; set; }

        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        [Input("fields")]
        private InputList<string>? _fields;
        public InputList<string> Fields
        {
            get => _fields ?? (_fields = new InputList<string>());
            set => _fields = value;
        }

        [Input("fileType")]
        public Input<string>? FileType { get; set; }

        [Input("filter")]
        public Input<string>? Filter { get; set; }

        [Input("financeAccountSyncMode")]
        public Input<string>? FinanceAccountSyncMode { get; set; }

        [Input("financeAccounts")]
        private InputList<string>? _financeAccounts;
        public InputList<string> FinanceAccounts
        {
            get => _financeAccounts ?? (_financeAccounts = new InputList<string>());
            set => _financeAccounts = value;
        }

        [Input("folder")]
        public Input<string>? Folder { get; set; }

        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("folderPath")]
        public Input<string>? FolderPath { get; set; }

        [Input("forecastId")]
        public Input<string>? ForecastId { get; set; }

        [Input("ftpHost")]
        public Input<string>? FtpHost { get; set; }

        [Input("ftpPassword")]
        private Input<string>? _ftpPassword;
        public Input<string>? FtpPassword
        {
            get => _ftpPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _ftpPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("ftpPort")]
        public Input<string>? FtpPort { get; set; }

        [Input("ftpUser")]
        public Input<string>? FtpUser { get; set; }

        [Input("function")]
        public Input<string>? Function { get; set; }

        [Input("functionApp")]
        public Input<string>? FunctionApp { get; set; }

        [Input("functionKey")]
        public Input<string>? FunctionKey { get; set; }

        [Input("functionName")]
        public Input<string>? FunctionName { get; set; }

        [Input("functionTrigger")]
        private Input<string>? _functionTrigger;
        public Input<string>? FunctionTrigger
        {
            get => _functionTrigger;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _functionTrigger = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("gcsBucket")]
        public Input<string>? GcsBucket { get; set; }

        [Input("gcsFolder")]
        public Input<string>? GcsFolder { get; set; }

        [Input("groupName")]
        public Input<string>? GroupName { get; set; }

        [Input("hasManagePermissions")]
        public Input<string>? HasManagePermissions { get; set; }

        [Input("homeFolder")]
        public Input<string>? HomeFolder { get; set; }

        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("hostIp")]
        public Input<string>? HostIp { get; set; }

        [Input("hostUser")]
        public Input<string>? HostUser { get; set; }

        [Input("hosts")]
        private InputList<string>? _hosts;
        public InputList<string> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<string>());
            set => _hosts = value;
        }

        [Input("identity")]
        public Input<string>? Identity { get; set; }

        [Input("instance")]
        public Input<string>? Instance { get; set; }

        [Input("instanceNumber")]
        public Input<string>? InstanceNumber { get; set; }

        [Input("instanceUrl")]
        public Input<string>? InstanceUrl { get; set; }

        [Input("integrationKey")]
        public Input<string>? IntegrationKey { get; set; }

        [Input("isAccountLevelConnector")]
        public Input<string>? IsAccountLevelConnector { get; set; }

        [Input("isAuth2Enabled")]
        public Input<string>? IsAuth2Enabled { get; set; }

        [Input("isCustomApiCredentials")]
        public Input<string>? IsCustomApiCredentials { get; set; }

        [Input("isFtps")]
        public Input<string>? IsFtps { get; set; }

        [Input("isKeypair")]
        public Input<string>? IsKeypair { get; set; }

        [Input("isMultiEntityFeatureEnabled")]
        public Input<string>? IsMultiEntityFeatureEnabled { get; set; }

        [Input("isNewPackage")]
        public Input<string>? IsNewPackage { get; set; }

        [Input("isPrivateKeyEncrypted")]
        public Input<string>? IsPrivateKeyEncrypted { get; set; }

        [Input("isPrivateLinkRequired")]
        public Input<string>? IsPrivateLinkRequired { get; set; }

        [Input("isPublic")]
        public Input<string>? IsPublic { get; set; }

        [Input("isSailthruConnectEnabled")]
        public Input<string>? IsSailthruConnectEnabled { get; set; }

        [Input("isSecure")]
        public Input<string>? IsSecure { get; set; }

        [Input("isSingleTableMode")]
        public Input<string>? IsSingleTableMode { get; set; }

        [Input("isVendor")]
        public Input<string>? IsVendor { get; set; }

        [Input("jsonDeliveryMode")]
        public Input<string>? JsonDeliveryMode { get; set; }

        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("keyPassword")]
        private Input<string>? _keyPassword;
        public Input<string>? KeyPassword
        {
            get => _keyPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keyPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("keyStoreType")]
        public Input<string>? KeyStoreType { get; set; }

        [Input("keystore")]
        private Input<string>? _keystore;
        public Input<string>? Keystore
        {
            get => _keystore;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keystore = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("keystorePassword")]
        private Input<string>? _keystorePassword;
        public Input<string>? KeystorePassword
        {
            get => _keystorePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keystorePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("lastSyncedChangesUtc_")]
        public Input<string>? LastSyncedChangesUtc_ { get; set; }

        [Input("latestVersion")]
        public Input<string>? LatestVersion { get; set; }

        [Input("lineSeparator")]
        public Input<string>? LineSeparator { get; set; }

        [Input("listStrategy")]
        public Input<string>? ListStrategy { get; set; }

        [Input("listSyncMode")]
        public Input<string>? ListSyncMode { get; set; }

        [Input("logJournal")]
        public Input<string>? LogJournal { get; set; }

        [Input("logJournalSchema")]
        public Input<string>? LogJournalSchema { get; set; }

        [Input("login")]
        public Input<string>? Login { get; set; }

        [Input("loginPassword")]
        private Input<string>? _loginPassword;
        public Input<string>? LoginPassword
        {
            get => _loginPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _loginPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("managerAccounts")]
        private InputList<string>? _managerAccounts;
        public InputList<string> ManagerAccounts
        {
            get => _managerAccounts ?? (_managerAccounts = new InputList<string>());
            set => _managerAccounts = value;
        }

        [Input("merchantId")]
        public Input<string>? MerchantId { get; set; }

        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        [Input("metrics")]
        private InputList<string>? _metrics;
        public InputList<string> Metrics
        {
            get => _metrics ?? (_metrics = new InputList<string>());
            set => _metrics = value;
        }

        [Input("namedRange")]
        public Input<string>? NamedRange { get; set; }

        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("networkCode")]
        public Input<string>? NetworkCode { get; set; }

        [Input("nullSequence")]
        public Input<string>? NullSequence { get; set; }

        [Input("oauthToken")]
        private Input<string>? _oauthToken;
        public Input<string>? OauthToken
        {
            get => _oauthToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _oauthToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("oauthTokenSecret")]
        private Input<string>? _oauthTokenSecret;
        public Input<string>? OauthTokenSecret
        {
            get => _oauthTokenSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _oauthTokenSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("onError")]
        public Input<string>? OnError { get; set; }

        [Input("onPremise")]
        public Input<string>? OnPremise { get; set; }

        [Input("organization")]
        public Input<string>? Organization { get; set; }

        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        [Input("organizations")]
        private InputList<string>? _organizations;
        public InputList<string> Organizations
        {
            get => _organizations ?? (_organizations = new InputList<string>());
            set => _organizations = value;
        }

        [Input("packedModeTables")]
        private InputList<string>? _packedModeTables;
        public InputList<string> PackedModeTables
        {
            get => _packedModeTables ?? (_packedModeTables = new InputList<string>());
            set => _packedModeTables = value;
        }

        [Input("packingMode")]
        public Input<string>? PackingMode { get; set; }

        [Input("pages")]
        private InputList<string>? _pages;
        public InputList<string> Pages
        {
            get => _pages ?? (_pages = new InputList<string>());
            set => _pages = value;
        }

        [Input("partners")]
        private InputList<string>? _partners;
        public InputList<string> Partners
        {
            get => _partners ?? (_partners = new InputList<string>());
            set => _partners = value;
        }

        [Input("passphrase")]
        private Input<string>? _passphrase;
        public Input<string>? Passphrase
        {
            get => _passphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("pat")]
        private Input<string>? _pat;
        public Input<string>? Pat
        {
            get => _pat;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _pat = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("patName")]
        public Input<string>? PatName { get; set; }

        [Input("patSecret")]
        private Input<string>? _patSecret;
        public Input<string>? PatSecret
        {
            get => _patSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _patSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("pattern")]
        public Input<string>? Pattern { get; set; }

        [Input("pdbName")]
        public Input<string>? PdbName { get; set; }

        [Input("pemCertificate")]
        private Input<string>? _pemCertificate;
        public Input<string>? PemCertificate
        {
            get => _pemCertificate;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _pemCertificate = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("pemPrivateKey")]
        private Input<string>? _pemPrivateKey;
        public Input<string>? PemPrivateKey
        {
            get => _pemPrivateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _pemPrivateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("perInteractionDimensions")]
        private InputList<string>? _perInteractionDimensions;
        public InputList<string> PerInteractionDimensions
        {
            get => _perInteractionDimensions ?? (_perInteractionDimensions = new InputList<string>());
            set => _perInteractionDimensions = value;
        }

        [Input("personalAccessToken")]
        private Input<string>? _personalAccessToken;
        public Input<string>? PersonalAccessToken
        {
            get => _personalAccessToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _personalAccessToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("pgpPassPhrase")]
        private Input<string>? _pgpPassPhrase;
        public Input<string>? PgpPassPhrase
        {
            get => _pgpPassPhrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _pgpPassPhrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("pgpSecretKey")]
        private Input<string>? _pgpSecretKey;
        public Input<string>? PgpSecretKey
        {
            get => _pgpSecretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _pgpSecretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("phoneNumber")]
        public Input<string>? PhoneNumber { get; set; }

        [Input("port")]
        public Input<string>? Port { get; set; }

        [Input("postClickAttributionWindowSize")]
        public Input<string>? PostClickAttributionWindowSize { get; set; }

        [Input("prebuiltReport")]
        public Input<string>? PrebuiltReport { get; set; }

        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        [Input("primaryKeys")]
        private InputList<string>? _primaryKeys;
        public InputList<string> PrimaryKeys
        {
            get => _primaryKeys ?? (_primaryKeys = new InputList<string>());
            set => _primaryKeys = value;
        }

        [Input("privateKey")]
        private Input<string>? _privateKey;
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("profiles")]
        private InputList<string>? _profiles;
        public InputList<string> Profiles
        {
            get => _profiles ?? (_profiles = new InputList<string>());
            set => _profiles = value;
        }

        [Input("projectCredentials")]
        private InputList<Inputs.ConnectorConfigProjectCredentialGetArgs>? _projectCredentials;
        public InputList<Inputs.ConnectorConfigProjectCredentialGetArgs> ProjectCredentials
        {
            get => _projectCredentials ?? (_projectCredentials = new InputList<Inputs.ConnectorConfigProjectCredentialGetArgs>());
            set => _projectCredentials = value;
        }

        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("projects")]
        private InputList<string>? _projects;
        public InputList<string> Projects
        {
            get => _projects ?? (_projects = new InputList<string>());
            set => _projects = value;
        }

        [Input("properties")]
        private InputList<string>? _properties;
        public InputList<string> Properties
        {
            get => _properties ?? (_properties = new InputList<string>());
            set => _properties = value;
        }

        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        [Input("publicationName")]
        public Input<string>? PublicationName { get; set; }

        [Input("queryId")]
        public Input<string>? QueryId { get; set; }

        [Input("queryParamValue")]
        private Input<string>? _queryParamValue;
        public Input<string>? QueryParamValue
        {
            get => _queryParamValue;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _queryParamValue = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("refreshTokenExpiresAt")]
        public Input<string>? RefreshTokenExpiresAt { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("replicaId")]
        public Input<string>? ReplicaId { get; set; }

        [Input("replicationSlot")]
        public Input<string>? ReplicationSlot { get; set; }

        [Input("reportConfigurationIds")]
        private InputList<string>? _reportConfigurationIds;
        public InputList<string> ReportConfigurationIds
        {
            get => _reportConfigurationIds ?? (_reportConfigurationIds = new InputList<string>());
            set => _reportConfigurationIds = value;
        }

        [Input("reportFormatType")]
        public Input<string>? ReportFormatType { get; set; }

        [Input("reportSuites")]
        private InputList<string>? _reportSuites;
        public InputList<string> ReportSuites
        {
            get => _reportSuites ?? (_reportSuites = new InputList<string>());
            set => _reportSuites = value;
        }

        [Input("reportTimezone")]
        public Input<string>? ReportTimezone { get; set; }

        [Input("reportType")]
        public Input<string>? ReportType { get; set; }

        [Input("reportUrl")]
        public Input<string>? ReportUrl { get; set; }

        [Input("reports")]
        private InputList<Inputs.ConnectorConfigReportGetArgs>? _reports;
        public InputList<Inputs.ConnectorConfigReportGetArgs> Reports
        {
            get => _reports ?? (_reports = new InputList<Inputs.ConnectorConfigReportGetArgs>());
            set => _reports = value;
        }

        [Input("reportsLinkedinAds")]
        private InputList<string>? _reportsLinkedinAds;
        public InputList<string> ReportsLinkedinAds
        {
            get => _reportsLinkedinAds ?? (_reportsLinkedinAds = new InputList<string>());
            set => _reportsLinkedinAds = value;
        }

        [Input("repositories")]
        private InputList<string>? _repositories;
        public InputList<string> Repositories
        {
            get => _repositories ?? (_repositories = new InputList<string>());
            set => _repositories = value;
        }

        [Input("resourceToken")]
        private Input<string>? _resourceToken;
        public Input<string>? ResourceToken
        {
            get => _resourceToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _resourceToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("resourceUrl")]
        public Input<string>? ResourceUrl { get; set; }

        [Input("restApiLimit")]
        public Input<string>? RestApiLimit { get; set; }

        [Input("rfcLibraryPath")]
        public Input<string>? RfcLibraryPath { get; set; }

        [Input("role")]
        public Input<string>? Role { get; set; }

        [Input("roleArn")]
        private Input<string>? _roleArn;
        public Input<string>? RoleArn
        {
            get => _roleArn;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _roleArn = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("rollbackWindowSize")]
        public Input<string>? RollbackWindowSize { get; set; }

        [Input("s3Bucket")]
        public Input<string>? S3Bucket { get; set; }

        [Input("s3ExportBucket")]
        public Input<string>? S3ExportBucket { get; set; }

        [Input("s3ExportFolder")]
        public Input<string>? S3ExportFolder { get; set; }

        [Input("s3ExportRoleArn")]
        private Input<string>? _s3ExportRoleArn;
        public Input<string>? S3ExportRoleArn
        {
            get => _s3ExportRoleArn;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _s3ExportRoleArn = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("s3RoleArn")]
        private Input<string>? _s3RoleArn;
        public Input<string>? S3RoleArn
        {
            get => _s3RoleArn;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _s3RoleArn = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("s3bucket")]
        public Input<string>? S3bucket { get; set; }

        [Input("s3externalId")]
        public Input<string>? S3externalId { get; set; }

        [Input("s3folder")]
        public Input<string>? S3folder { get; set; }

        [Input("s3path")]
        public Input<string>? S3path { get; set; }

        [Input("s3roleArn")]
        private Input<string>? _s3roleArn;
        public Input<string>? S3roleArn
        {
            get => _s3roleArn;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _s3roleArn = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("salesAccountSyncMode")]
        public Input<string>? SalesAccountSyncMode { get; set; }

        [Input("salesAccounts")]
        private InputList<string>? _salesAccounts;
        public InputList<string> SalesAccounts
        {
            get => _salesAccounts ?? (_salesAccounts = new InputList<string>());
            set => _salesAccounts = value;
        }

        [Input("salesforceSecurityToken")]
        private Input<string>? _salesforceSecurityToken;
        public Input<string>? SalesforceSecurityToken
        {
            get => _salesforceSecurityToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _salesforceSecurityToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("sandboxAccount")]
        public Input<string>? SandboxAccount { get; set; }

        [Input("sapSchema")]
        public Input<string>? SapSchema { get; set; }

        [Input("sapUser")]
        public Input<string>? SapUser { get; set; }

        [Input("saslMechanism")]
        public Input<string>? SaslMechanism { get; set; }

        [Input("saslPlainKey")]
        private Input<string>? _saslPlainKey;
        public Input<string>? SaslPlainKey
        {
            get => _saslPlainKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _saslPlainKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("saslPlainSecret")]
        private Input<string>? _saslPlainSecret;
        public Input<string>? SaslPlainSecret
        {
            get => _saslPlainSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _saslPlainSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("saslScram256Key")]
        private Input<string>? _saslScram256Key;
        public Input<string>? SaslScram256Key
        {
            get => _saslScram256Key;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _saslScram256Key = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("saslScram256Secret")]
        private Input<string>? _saslScram256Secret;
        public Input<string>? SaslScram256Secret
        {
            get => _saslScram256Secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _saslScram256Secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("saslScram512Key")]
        private Input<string>? _saslScram512Key;
        public Input<string>? SaslScram512Key
        {
            get => _saslScram512Key;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _saslScram512Key = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("saslScram512Secret")]
        private Input<string>? _saslScram512Secret;
        public Input<string>? SaslScram512Secret
        {
            get => _saslScram512Secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _saslScram512Secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("schemaRegistryCredentialsSource")]
        public Input<string>? SchemaRegistryCredentialsSource { get; set; }

        [Input("schemaRegistryKey")]
        private Input<string>? _schemaRegistryKey;
        public Input<string>? SchemaRegistryKey
        {
            get => _schemaRegistryKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _schemaRegistryKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("schemaRegistrySecret")]
        private Input<string>? _schemaRegistrySecret;
        public Input<string>? SchemaRegistrySecret
        {
            get => _schemaRegistrySecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _schemaRegistrySecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("schemaRegistryUrls")]
        private InputList<string>? _schemaRegistryUrls;
        public InputList<string> SchemaRegistryUrls
        {
            get => _schemaRegistryUrls ?? (_schemaRegistryUrls = new InputList<string>());
            set => _schemaRegistryUrls = value;
        }

        [Input("secret")]
        private Input<string>? _secret;
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("secretKey")]
        private Input<string>? _secretKey;
        public Input<string>? SecretKey
        {
            get => _secretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("secrets")]
        private Input<string>? _secrets;
        public Input<string>? Secrets
        {
            get => _secrets;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secrets = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("secretsLists")]
        private InputList<Inputs.ConnectorConfigSecretsListGetArgs>? _secretsLists;
        public InputList<Inputs.ConnectorConfigSecretsListGetArgs> SecretsLists
        {
            get => _secretsLists ?? (_secretsLists = new InputList<Inputs.ConnectorConfigSecretsListGetArgs>());
            set => _secretsLists = value;
        }

        [Input("securityProtocol")]
        public Input<string>? SecurityProtocol { get; set; }

        [Input("segments")]
        private InputList<string>? _segments;
        public InputList<string> Segments
        {
            get => _segments ?? (_segments = new InputList<string>());
            set => _segments = value;
        }

        [Input("selectedExports")]
        private InputList<string>? _selectedExports;
        public InputList<string> SelectedExports
        {
            get => _selectedExports ?? (_selectedExports = new InputList<string>());
            set => _selectedExports = value;
        }

        [Input("senderId")]
        public Input<string>? SenderId { get; set; }

        [Input("senderPassword")]
        private Input<string>? _senderPassword;
        public Input<string>? SenderPassword
        {
            get => _senderPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _senderPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("serverAddress")]
        public Input<string>? ServerAddress { get; set; }

        [Input("serverUrl")]
        public Input<string>? ServerUrl { get; set; }

        [Input("servers")]
        private InputList<string>? _servers;
        public InputList<string> Servers
        {
            get => _servers ?? (_servers = new InputList<string>());
            set => _servers = value;
        }

        [Input("serviceAccount")]
        public Input<string>? ServiceAccount { get; set; }

        [Input("serviceAccountEmail")]
        public Input<string>? ServiceAccountEmail { get; set; }

        [Input("serviceAccountKey")]
        private Input<string>? _serviceAccountKey;
        public Input<string>? ServiceAccountKey
        {
            get => _serviceAccountKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _serviceAccountKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("serviceVersion")]
        public Input<string>? ServiceVersion { get; set; }

        [Input("sftpHost")]
        public Input<string>? SftpHost { get; set; }

        [Input("sftpIsKeyPair")]
        public Input<string>? SftpIsKeyPair { get; set; }

        [Input("sftpPassword")]
        private Input<string>? _sftpPassword;
        public Input<string>? SftpPassword
        {
            get => _sftpPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sftpPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("sftpPort")]
        public Input<string>? SftpPort { get; set; }

        [Input("sftpPublicKey")]
        public Input<string>? SftpPublicKey { get; set; }

        [Input("sftpUser")]
        public Input<string>? SftpUser { get; set; }

        [Input("shareUrl")]
        public Input<string>? ShareUrl { get; set; }

        [Input("sheetId")]
        public Input<string>? SheetId { get; set; }

        [Input("shop")]
        public Input<string>? Shop { get; set; }

        [Input("shortCode")]
        private Input<string>? _shortCode;
        public Input<string>? ShortCode
        {
            get => _shortCode;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _shortCode = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("showRecordsWithNoMetrics")]
        public Input<string>? ShowRecordsWithNoMetrics { get; set; }

        [Input("sid")]
        public Input<string>? Sid { get; set; }

        [Input("signerPublicKey")]
        public Input<string>? SignerPublicKey { get; set; }

        [Input("siteAddress")]
        public Input<string>? SiteAddress { get; set; }

        [Input("siteId")]
        public Input<string>? SiteId { get; set; }

        [Input("siteName")]
        public Input<string>? SiteName { get; set; }

        [Input("siteUrls")]
        private InputList<string>? _siteUrls;
        public InputList<string> SiteUrls
        {
            get => _siteUrls ?? (_siteUrls = new InputList<string>());
            set => _siteUrls = value;
        }

        [Input("skipAfter")]
        public Input<string>? SkipAfter { get; set; }

        [Input("skipBefore")]
        public Input<string>? SkipBefore { get; set; }

        [Input("soapUri")]
        public Input<string>? SoapUri { get; set; }

        [Input("socialDataSyncTimeframe")]
        public Input<string>? SocialDataSyncTimeframe { get; set; }

        [Input("source")]
        public Input<string>? Source { get; set; }

        [Input("storeHash")]
        public Input<string>? StoreHash { get; set; }

        [Input("subDomain")]
        public Input<string>? SubDomain { get; set; }

        [Input("subdomain")]
        public Input<string>? Subdomain { get; set; }

        [Input("subscriberName")]
        public Input<string>? SubscriberName { get; set; }

        [Input("subscription")]
        public Input<string>? Subscription { get; set; }

        [Input("supportConnectedAccountsSync")]
        public Input<string>? SupportConnectedAccountsSync { get; set; }

        [Input("supportNestedColumns")]
        public Input<string>? SupportNestedColumns { get; set; }

        [Input("surveyIds")]
        public Input<string>? SurveyIds { get; set; }

        [Input("swipeAttributionWindow")]
        public Input<string>? SwipeAttributionWindow { get; set; }

        [Input("syncDataLocker")]
        public Input<string>? SyncDataLocker { get; set; }

        [Input("syncFormat")]
        public Input<string>? SyncFormat { get; set; }

        [Input("syncFormulaFields")]
        public Input<string>? SyncFormulaFields { get; set; }

        [Input("syncMetadata")]
        public Input<string>? SyncMetadata { get; set; }

        [Input("syncMethod")]
        public Input<string>? SyncMethod { get; set; }

        [Input("syncMode")]
        public Input<string>? SyncMode { get; set; }

        [Input("syncMultipleAccounts")]
        public Input<string>? SyncMultipleAccounts { get; set; }

        [Input("syncPackMode")]
        public Input<string>? SyncPackMode { get; set; }

        [Input("syncPullApi")]
        public Input<string>? SyncPullApi { get; set; }

        [Input("syncType")]
        public Input<string>? SyncType { get; set; }

        [Input("sysnr")]
        public Input<string>? Sysnr { get; set; }

        [Input("tableName")]
        public Input<string>? TableName { get; set; }

        [Input("tdeCertificate")]
        private Input<string>? _tdeCertificate;
        public Input<string>? TdeCertificate
        {
            get => _tdeCertificate;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tdeCertificate = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tdeCertificateName")]
        public Input<string>? TdeCertificateName { get; set; }

        [Input("tdePassword")]
        private Input<string>? _tdePassword;
        public Input<string>? TdePassword
        {
            get => _tdePassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tdePassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tdePrivateKey")]
        private Input<string>? _tdePrivateKey;
        public Input<string>? TdePrivateKey
        {
            get => _tdePrivateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tdePrivateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        [Input("technicalAccountId")]
        public Input<string>? TechnicalAccountId { get; set; }

        [Input("templateLabels")]
        private InputList<string>? _templateLabels;
        public InputList<string> TemplateLabels
        {
            get => _templateLabels ?? (_templateLabels = new InputList<string>());
            set => _templateLabels = value;
        }

        [Input("tenantId")]
        private Input<string>? _tenantId;
        public Input<string>? TenantId
        {
            get => _tenantId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tenantId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("testTableName")]
        public Input<string>? TestTableName { get; set; }

        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        [Input("timeframeMonths")]
        public Input<string>? TimeframeMonths { get; set; }

        [Input("tns")]
        public Input<string>? Tns { get; set; }

        [Input("tokenAuthenticatedContainer")]
        public Input<string>? TokenAuthenticatedContainer { get; set; }

        [Input("tokenAuthenticatedDatabase")]
        public Input<string>? TokenAuthenticatedDatabase { get; set; }

        [Input("tokenId")]
        private Input<string>? _tokenId;
        public Input<string>? TokenId
        {
            get => _tokenId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tokenId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tokenKey")]
        private Input<string>? _tokenKey;
        public Input<string>? TokenKey
        {
            get => _tokenKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tokenKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tokenSecret")]
        private Input<string>? _tokenSecret;
        public Input<string>? TokenSecret
        {
            get => _tokenSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tokenSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tokenSecretKey")]
        private Input<string>? _tokenSecretKey;
        public Input<string>? TokenSecretKey
        {
            get => _tokenSecretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tokenSecretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("topics")]
        private InputList<string>? _topics;
        public InputList<string> Topics
        {
            get => _topics ?? (_topics = new InputList<string>());
            set => _topics = value;
        }

        [Input("trustStoreType")]
        public Input<string>? TrustStoreType { get; set; }

        [Input("trustedCert")]
        private Input<string>? _trustedCert;
        public Input<string>? TrustedCert
        {
            get => _trustedCert;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _trustedCert = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("truststore")]
        private Input<string>? _truststore;
        public Input<string>? Truststore
        {
            get => _truststore;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _truststore = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tunnelHost")]
        public Input<string>? TunnelHost { get; set; }

        [Input("tunnelPort")]
        public Input<string>? TunnelPort { get; set; }

        [Input("tunnelUser")]
        public Input<string>? TunnelUser { get; set; }

        [Input("uniqueId")]
        public Input<string>? UniqueId { get; set; }

        [Input("updateConfigOnEachSync")]
        public Input<string>? UpdateConfigOnEachSync { get; set; }

        [Input("updateMethod")]
        public Input<string>? UpdateMethod { get; set; }

        [Input("uri")]
        public Input<string>? Uri { get; set; }

        [Input("useApiKeys")]
        public Input<string>? UseApiKeys { get; set; }

        [Input("useCustomerBucket")]
        public Input<string>? UseCustomerBucket { get; set; }

        [Input("useOracleRac")]
        public Input<string>? UseOracleRac { get; set; }

        [Input("usePgpEncryptionOptions")]
        public Input<string>? UsePgpEncryptionOptions { get; set; }

        [Input("useServiceAccount")]
        public Input<string>? UseServiceAccount { get; set; }

        [Input("useTemplateLabels")]
        public Input<string>? UseTemplateLabels { get; set; }

        [Input("useWebhooks")]
        public Input<string>? UseWebhooks { get; set; }

        [Input("useWorkspace")]
        public Input<string>? UseWorkspace { get; set; }

        [Input("user")]
        public Input<string>? User { get; set; }

        [Input("userId")]
        public Input<string>? UserId { get; set; }

        [Input("userKey")]
        public Input<string>? UserKey { get; set; }

        [Input("userName")]
        public Input<string>? UserName { get; set; }

        [Input("userProfiles")]
        private InputList<string>? _userProfiles;
        public InputList<string> UserProfiles
        {
            get => _userProfiles ?? (_userProfiles = new InputList<string>());
            set => _userProfiles = value;
        }

        [Input("username")]
        public Input<string>? Username { get; set; }

        [Input("viewAttributionWindow")]
        public Input<string>? ViewAttributionWindow { get; set; }

        [Input("viewThroughAttributionWindowSize")]
        public Input<string>? ViewThroughAttributionWindowSize { get; set; }

        [Input("webhookEndpoint")]
        public Input<string>? WebhookEndpoint { get; set; }

        [Input("webhookKey")]
        public Input<string>? WebhookKey { get; set; }

        [Input("webhookUrl")]
        public Input<string>? WebhookUrl { get; set; }

        [Input("wordPressSiteIdOrWoocommerceDomainName")]
        public Input<string>? WordPressSiteIdOrWoocommerceDomainName { get; set; }

        [Input("workspaceName")]
        public Input<string>? WorkspaceName { get; set; }

        [Input("workspaceSameAsSource")]
        public Input<string>? WorkspaceSameAsSource { get; set; }

        [Input("workspaceSchema")]
        public Input<string>? WorkspaceSchema { get; set; }

        [Input("wsCertificate")]
        private Input<string>? _wsCertificate;
        public Input<string>? WsCertificate
        {
            get => _wsCertificate;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _wsCertificate = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ConnectorConfigGetArgs()
        {
        }
        public static new ConnectorConfigGetArgs Empty => new ConnectorConfigGetArgs();
    }
}
