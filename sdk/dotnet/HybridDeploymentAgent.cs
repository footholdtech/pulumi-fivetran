// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran
{
    /// <summary>
    /// This resource allows you to create, update, and delete hybrid deployment agents.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fivetran = Footholdtech.Fivetran;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var hybridDeploymentAgent = new Fivetran.HybridDeploymentAgent("hybrid_deployment_agent", new()
    ///     {
    ///         DisplayName = "display_name",
    ///         GroupId = "group_id",
    ///         AuthType = "AUTO",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [FivetranResourceType("fivetran:index/hybridDeploymentAgent:HybridDeploymentAgent")]
    public partial class HybridDeploymentAgent : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Base64-encoded content of the auth.json file.
        /// </summary>
        [Output("authJson")]
        public Output<string> AuthJson { get; private set; } = null!;

        /// <summary>
        /// Type of authentification. Possible values `AUTO`,`MANUAL`
        /// </summary>
        [Output("authType")]
        public Output<string> AuthType { get; private set; } = null!;

        /// <summary>
        /// Determines whether re-authentication needs to be performed.
        /// </summary>
        [Output("authenticationCounter")]
        public Output<int> AuthenticationCounter { get; private set; } = null!;

        /// <summary>
        /// Base64-encoded content of the config.json file.
        /// </summary>
        [Output("configJson")]
        public Output<string> ConfigJson { get; private set; } = null!;

        /// <summary>
        /// The unique name for the hybrid deployment agent.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Base64-encoded content of the compose file for the chosen containerization type.
        /// </summary>
        [Output("dockerComposeYaml")]
        public Output<string> DockerComposeYaml { get; private set; } = null!;

        /// <summary>
        /// Environment type. Possible values `DOCKER`,`PODMAN`,`KUBERNETES`,`SNOWPARK`
        /// </summary>
        [Output("envType")]
        public Output<string> EnvType { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the Group within the Fivetran system.
        /// </summary>
        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;

        /// <summary>
        /// The timestamp of the time the hybrid deployment agent was created in your account.
        /// </summary>
        [Output("registeredAt")]
        public Output<string> RegisteredAt { get; private set; } = null!;

        /// <summary>
        /// Base64 encoded content of token.
        /// </summary>
        [Output("token")]
        public Output<string> Token { get; private set; } = null!;


        /// <summary>
        /// Create a HybridDeploymentAgent resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HybridDeploymentAgent(string name, HybridDeploymentAgentArgs args, CustomResourceOptions? options = null)
            : base("fivetran:index/hybridDeploymentAgent:HybridDeploymentAgent", name, args ?? new HybridDeploymentAgentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HybridDeploymentAgent(string name, Input<string> id, HybridDeploymentAgentState? state = null, CustomResourceOptions? options = null)
            : base("fivetran:index/hybridDeploymentAgent:HybridDeploymentAgent", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/footholdtech/pulumi-fivetran",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HybridDeploymentAgent resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HybridDeploymentAgent Get(string name, Input<string> id, HybridDeploymentAgentState? state = null, CustomResourceOptions? options = null)
        {
            return new HybridDeploymentAgent(name, id, state, options);
        }
    }

    public sealed class HybridDeploymentAgentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Type of authentification. Possible values `AUTO`,`MANUAL`
        /// </summary>
        [Input("authType", required: true)]
        public Input<string> AuthType { get; set; } = null!;

        /// <summary>
        /// Determines whether re-authentication needs to be performed.
        /// </summary>
        [Input("authenticationCounter")]
        public Input<int>? AuthenticationCounter { get; set; }

        /// <summary>
        /// The unique name for the hybrid deployment agent.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Environment type. Possible values `DOCKER`,`PODMAN`,`KUBERNETES`,`SNOWPARK`
        /// </summary>
        [Input("envType", required: true)]
        public Input<string> EnvType { get; set; } = null!;

        /// <summary>
        /// The unique identifier for the Group within the Fivetran system.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        public HybridDeploymentAgentArgs()
        {
        }
        public static new HybridDeploymentAgentArgs Empty => new HybridDeploymentAgentArgs();
    }

    public sealed class HybridDeploymentAgentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Base64-encoded content of the auth.json file.
        /// </summary>
        [Input("authJson")]
        public Input<string>? AuthJson { get; set; }

        /// <summary>
        /// Type of authentification. Possible values `AUTO`,`MANUAL`
        /// </summary>
        [Input("authType")]
        public Input<string>? AuthType { get; set; }

        /// <summary>
        /// Determines whether re-authentication needs to be performed.
        /// </summary>
        [Input("authenticationCounter")]
        public Input<int>? AuthenticationCounter { get; set; }

        /// <summary>
        /// Base64-encoded content of the config.json file.
        /// </summary>
        [Input("configJson")]
        public Input<string>? ConfigJson { get; set; }

        /// <summary>
        /// The unique name for the hybrid deployment agent.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Base64-encoded content of the compose file for the chosen containerization type.
        /// </summary>
        [Input("dockerComposeYaml")]
        public Input<string>? DockerComposeYaml { get; set; }

        /// <summary>
        /// Environment type. Possible values `DOCKER`,`PODMAN`,`KUBERNETES`,`SNOWPARK`
        /// </summary>
        [Input("envType")]
        public Input<string>? EnvType { get; set; }

        /// <summary>
        /// The unique identifier for the Group within the Fivetran system.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// The timestamp of the time the hybrid deployment agent was created in your account.
        /// </summary>
        [Input("registeredAt")]
        public Input<string>? RegisteredAt { get; set; }

        /// <summary>
        /// Base64 encoded content of token.
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        public HybridDeploymentAgentState()
        {
        }
        public static new HybridDeploymentAgentState Empty => new HybridDeploymentAgentState();
    }
}
