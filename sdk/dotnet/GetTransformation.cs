// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran
{
    public static class GetTransformation
    {
        /// <summary>
        /// Returns transformation details if a valid identifier was provided
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fivetran = Pulumi.Fivetran;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Fivetran.GetTransformation.Invoke(new()
        ///     {
        ///         Id = "id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTransformationResult> InvokeAsync(GetTransformationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTransformationResult>("fivetran:index/getTransformation:getTransformation", args ?? new GetTransformationArgs(), options.WithDefaults());

        /// <summary>
        /// Returns transformation details if a valid identifier was provided
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fivetran = Pulumi.Fivetran;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Fivetran.GetTransformation.Invoke(new()
        ///     {
        ///         Id = "id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTransformationResult> Invoke(GetTransformationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTransformationResult>("fivetran:index/getTransformation:getTransformation", args ?? new GetTransformationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Returns transformation details if a valid identifier was provided
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fivetran = Pulumi.Fivetran;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Fivetran.GetTransformation.Invoke(new()
        ///     {
        ///         Id = "id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTransformationResult> Invoke(GetTransformationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTransformationResult>("fivetran:index/getTransformation:getTransformation", args ?? new GetTransformationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTransformationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for the Transformation within the Fivetran system.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("schedule")]
        public Inputs.GetTransformationScheduleArgs? Schedule { get; set; }

        [Input("transformationConfig")]
        public Inputs.GetTransformationTransformationConfigArgs? TransformationConfig { get; set; }

        public GetTransformationArgs()
        {
        }
        public static new GetTransformationArgs Empty => new GetTransformationArgs();
    }

    public sealed class GetTransformationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for the Transformation within the Fivetran system.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("schedule")]
        public Input<Inputs.GetTransformationScheduleInputArgs>? Schedule { get; set; }

        [Input("transformationConfig")]
        public Input<Inputs.GetTransformationTransformationConfigInputArgs>? TransformationConfig { get; set; }

        public GetTransformationInvokeArgs()
        {
        }
        public static new GetTransformationInvokeArgs Empty => new GetTransformationInvokeArgs();
    }


    [OutputType]
    public sealed class GetTransformationResult
    {
        /// <summary>
        /// The timestamp of when the transformation was created in your account.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The unique identifier for the User within the Fivetran system who created the transformation.
        /// </summary>
        public readonly string CreatedById;
        /// <summary>
        /// The unique identifier for the Transformation within the Fivetran system.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Identifiers of related models.
        /// </summary>
        public readonly ImmutableArray<string> OutputModelNames;
        /// <summary>
        /// The field indicating whether the transformation will be set into the paused state. By default, the value is false.
        /// </summary>
        public readonly bool Paused;
        public readonly Outputs.GetTransformationScheduleResult? Schedule;
        /// <summary>
        /// Status of transformation Project (NOT_READY, READY, ERROR).
        /// </summary>
        public readonly string Status;
        public readonly Outputs.GetTransformationTransformationConfigResult? TransformationConfig;
        /// <summary>
        /// Transformation type. The following values are supported: DBT_CORE, QUICKSTART.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetTransformationResult(
            string createdAt,

            string createdById,

            string id,

            ImmutableArray<string> outputModelNames,

            bool paused,

            Outputs.GetTransformationScheduleResult? schedule,

            string status,

            Outputs.GetTransformationTransformationConfigResult? transformationConfig,

            string type)
        {
            CreatedAt = createdAt;
            CreatedById = createdById;
            Id = id;
            OutputModelNames = outputModelNames;
            Paused = paused;
            Schedule = schedule;
            Status = status;
            TransformationConfig = transformationConfig;
            Type = type;
        }
    }
}
