// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran
{
    /// <summary>
    /// Resource is in ALPHA state.
    /// 
    /// This resource allows you to add and manage dbt Git Projects Configs.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fivetran = Footholdtech.Fivetran;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var gitProjectConfig = new Fivetran.DbtGitProjectConfig("git_project_config", new()
    ///     {
    ///         ProjectId = "project_id",
    ///         GitRemoteUrl = "your_git_remote_url",
    ///         GitBranch = "main",
    ///         FolderPath = "/dbt/project/folder/path",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// 1. To import an existing `fivetran_dbt_git_project_config` resource into your Terraform state, you need to get **Dbt Project ID** via API call `GET https://api.fivetran.com/v1/dbt/projects` to retrieve available projects.
    /// 
    /// 2. Fetch project details for particular `project-id` using `GET https://api.fivetran.com/v1/dbt/projects/{project-id}` to ensure that this is the project you want to import.
    /// 
    /// 3. Define an empty resource in your `.tf` configuration:
    /// 
    /// hcl
    /// 
    /// resource "fivetran_dbt_git_project_config" "my_imported_fivetran_dbt_git_project_config" {
    /// 
    /// }
    /// 
    /// 4. Run the `pulumi import` command:
    /// 
    /// ```sh
    /// $ pulumi import fivetran:index/dbtGitProjectConfig:DbtGitProjectConfig my_imported_fivetran_dbt_git_project_config {Dbt Project ID}
    /// ```
    /// 
    /// 4. Use the `terraform state show` command to get the values from the state:
    /// 
    /// terraform state show 'fivetran_dbt_git_project_config.my_imported_fivetran_dbt_git_project_config'
    /// 
    /// 5. Copy the values and paste them to your `.tf` configuration.
    /// </summary>
    [FivetranResourceType("fivetran:index/dbtGitProjectConfig:DbtGitProjectConfig")]
    public partial class DbtGitProjectConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Should resource wait for project to finish initialization. Default value: false.
        /// </summary>
        [Output("ensureReadiness")]
        public Output<bool> EnsureReadiness { get; private set; } = null!;

        /// <summary>
        /// Folder in Git repo with your dbt project.
        /// </summary>
        [Output("folderPath")]
        public Output<string?> FolderPath { get; private set; } = null!;

        /// <summary>
        /// Git branch.
        /// </summary>
        [Output("gitBranch")]
        public Output<string?> GitBranch { get; private set; } = null!;

        /// <summary>
        /// Git remote URL with your dbt project.
        /// </summary>
        [Output("gitRemoteUrl")]
        public Output<string?> GitRemoteUrl { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the dbt Project within the Fivetran system.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;


        /// <summary>
        /// Create a DbtGitProjectConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DbtGitProjectConfig(string name, DbtGitProjectConfigArgs args, CustomResourceOptions? options = null)
            : base("fivetran:index/dbtGitProjectConfig:DbtGitProjectConfig", name, args ?? new DbtGitProjectConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DbtGitProjectConfig(string name, Input<string> id, DbtGitProjectConfigState? state = null, CustomResourceOptions? options = null)
            : base("fivetran:index/dbtGitProjectConfig:DbtGitProjectConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/footholdtech/pulumi-fivetran",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DbtGitProjectConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DbtGitProjectConfig Get(string name, Input<string> id, DbtGitProjectConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new DbtGitProjectConfig(name, id, state, options);
        }
    }

    public sealed class DbtGitProjectConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Should resource wait for project to finish initialization. Default value: false.
        /// </summary>
        [Input("ensureReadiness")]
        public Input<bool>? EnsureReadiness { get; set; }

        /// <summary>
        /// Folder in Git repo with your dbt project.
        /// </summary>
        [Input("folderPath")]
        public Input<string>? FolderPath { get; set; }

        /// <summary>
        /// Git branch.
        /// </summary>
        [Input("gitBranch")]
        public Input<string>? GitBranch { get; set; }

        /// <summary>
        /// Git remote URL with your dbt project.
        /// </summary>
        [Input("gitRemoteUrl")]
        public Input<string>? GitRemoteUrl { get; set; }

        /// <summary>
        /// The unique identifier for the dbt Project within the Fivetran system.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public DbtGitProjectConfigArgs()
        {
        }
        public static new DbtGitProjectConfigArgs Empty => new DbtGitProjectConfigArgs();
    }

    public sealed class DbtGitProjectConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Should resource wait for project to finish initialization. Default value: false.
        /// </summary>
        [Input("ensureReadiness")]
        public Input<bool>? EnsureReadiness { get; set; }

        /// <summary>
        /// Folder in Git repo with your dbt project.
        /// </summary>
        [Input("folderPath")]
        public Input<string>? FolderPath { get; set; }

        /// <summary>
        /// Git branch.
        /// </summary>
        [Input("gitBranch")]
        public Input<string>? GitBranch { get; set; }

        /// <summary>
        /// Git remote URL with your dbt project.
        /// </summary>
        [Input("gitRemoteUrl")]
        public Input<string>? GitRemoteUrl { get; set; }

        /// <summary>
        /// The unique identifier for the dbt Project within the Fivetran system.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public DbtGitProjectConfigState()
        {
        }
        public static new DbtGitProjectConfigState Empty => new DbtGitProjectConfigState();
    }
}
