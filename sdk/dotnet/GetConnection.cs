// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran
{
    public static class GetConnection
    {
        /// <summary>
        /// This data source returns a connection object.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fivetran = Pulumi.Fivetran;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var connection = Fivetran.GetConnection.Invoke(new()
        ///     {
        ///         Id = "anonymous_mystery",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetConnectionResult> InvokeAsync(GetConnectionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConnectionResult>("fivetran:index/getConnection:getConnection", args ?? new GetConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// This data source returns a connection object.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fivetran = Pulumi.Fivetran;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var connection = Fivetran.GetConnection.Invoke(new()
        ///     {
        ///         Id = "anonymous_mystery",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetConnectionResult> Invoke(GetConnectionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectionResult>("fivetran:index/getConnection:getConnection", args ?? new GetConnectionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source returns a connection object.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fivetran = Pulumi.Fivetran;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var connection = Fivetran.GetConnection.Invoke(new()
        ///     {
        ///         Id = "anonymous_mystery",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetConnectionResult> Invoke(GetConnectionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectionResult>("fivetran:index/getConnection:getConnection", args ?? new GetConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectionArgs : global::Pulumi.InvokeArgs
    {
        [Input("destinationSchema")]
        public Inputs.GetConnectionDestinationSchemaArgs? DestinationSchema { get; set; }

        /// <summary>
        /// The unique identifier for the connection within the Fivetran system.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("status")]
        public Inputs.GetConnectionStatusArgs? Status { get; set; }

        public GetConnectionArgs()
        {
        }
        public static new GetConnectionArgs Empty => new GetConnectionArgs();
    }

    public sealed class GetConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("destinationSchema")]
        public Input<Inputs.GetConnectionDestinationSchemaInputArgs>? DestinationSchema { get; set; }

        /// <summary>
        /// The unique identifier for the connection within the Fivetran system.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("status")]
        public Input<Inputs.GetConnectionStatusInputArgs>? Status { get; set; }

        public GetConnectionInvokeArgs()
        {
        }
        public static new GetConnectionInvokeArgs Empty => new GetConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectionResult
    {
        /// <summary>
        /// The unique identifier of the user who has created the connection in your account.
        /// </summary>
        public readonly string ConnectedBy;
        /// <summary>
        /// The timestamp of the time the connection was created in your account.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The optional parameter that defines the sync start time when the sync frequency is already set or being set by the current request to 1440. It can be specified in one hour increments starting from 00:00 to 23:00. If not specified, we will use [the baseline sync start time](https://fivetran.com/docs/getting-started/syncoverview#syncfrequencyandscheduling). This parameter has no effect on the [0 to 60 minutes offset](https://fivetran.com/docs/getting-started/syncoverview#syncstarttimesandoffsets) used to determine the actual sync start time.
        /// </summary>
        public readonly string DailySyncTime;
        /// <summary>
        /// The level of data delay notification threshold. Possible values: LOW, NORMAL, HIGH, CUSTOM. The default value NORMAL. CUSTOM is only available for customers using the Enterprise plan or above.
        /// </summary>
        public readonly string DataDelaySensitivity;
        /// <summary>
        /// Custom sync delay notification threshold in minutes. The default value is 0. This parameter is only used when data*delay*sensitivity set to CUSTOM.
        /// </summary>
        public readonly int DataDelayThreshold;
        public readonly Outputs.GetConnectionDestinationSchemaResult? DestinationSchema;
        /// <summary>
        /// The timestamp of the time the connection sync failed last time.
        /// </summary>
        public readonly string FailedAt;
        /// <summary>
        /// The unique identifier for the Group (Destination) within the Fivetran system.
        /// </summary>
        public readonly string GroupId;
        /// <summary>
        /// The hybrid deployment agent ID that refers to the controller created for the group the connection belongs to. If the value is specified, the system will try to associate the connection with an existing agent.
        /// </summary>
        public readonly string HybridDeploymentAgentId;
        /// <summary>
        /// The unique identifier for the connection within the Fivetran system.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name used both as the connection's name within the Fivetran system and as the source schema's name within your destination.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Possible values: Directly, SshTunnel, ProxyAgent.
        /// </summary>
        public readonly string NetworkingMethod;
        /// <summary>
        /// Specifies whether the connection should be paused after the free trial period has ended.
        /// </summary>
        public readonly bool PauseAfterTrial;
        /// <summary>
        /// Specifies whether the connection is paused.
        /// </summary>
        public readonly bool Paused;
        /// <summary>
        /// The private link ID.
        /// </summary>
        public readonly string PrivateLinkId;
        /// <summary>
        /// The proxy agent ID.
        /// </summary>
        public readonly string ProxyAgentId;
        /// <summary>
        /// The connection schedule configuration type. Supported values: auto, manual.
        /// </summary>
        public readonly string ScheduleType;
        /// <summary>
        /// The connector type id within the Fivetran system.
        /// </summary>
        public readonly string Service;
        /// <summary>
        /// The connector type version within the Fivetran system.
        /// </summary>
        public readonly string ServiceVersion;
        public readonly Outputs.GetConnectionStatusResult? Status;
        /// <summary>
        /// The timestamp of the time the connection sync succeeded last time.
        /// </summary>
        public readonly string SucceededAt;
        /// <summary>
        /// The connection sync frequency in minutes.
        /// </summary>
        public readonly int SyncFrequency;

        [OutputConstructor]
        private GetConnectionResult(
            string connectedBy,

            string createdAt,

            string dailySyncTime,

            string dataDelaySensitivity,

            int dataDelayThreshold,

            Outputs.GetConnectionDestinationSchemaResult? destinationSchema,

            string failedAt,

            string groupId,

            string hybridDeploymentAgentId,

            string id,

            string name,

            string networkingMethod,

            bool pauseAfterTrial,

            bool paused,

            string privateLinkId,

            string proxyAgentId,

            string scheduleType,

            string service,

            string serviceVersion,

            Outputs.GetConnectionStatusResult? status,

            string succeededAt,

            int syncFrequency)
        {
            ConnectedBy = connectedBy;
            CreatedAt = createdAt;
            DailySyncTime = dailySyncTime;
            DataDelaySensitivity = dataDelaySensitivity;
            DataDelayThreshold = dataDelayThreshold;
            DestinationSchema = destinationSchema;
            FailedAt = failedAt;
            GroupId = groupId;
            HybridDeploymentAgentId = hybridDeploymentAgentId;
            Id = id;
            Name = name;
            NetworkingMethod = networkingMethod;
            PauseAfterTrial = pauseAfterTrial;
            Paused = paused;
            PrivateLinkId = privateLinkId;
            ProxyAgentId = proxyAgentId;
            ScheduleType = scheduleType;
            Service = service;
            ServiceVersion = serviceVersion;
            Status = status;
            SucceededAt = succeededAt;
            SyncFrequency = syncFrequency;
        }
    }
}
