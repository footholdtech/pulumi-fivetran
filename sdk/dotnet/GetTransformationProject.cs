// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran
{
    public static class GetTransformationProject
    {
        /// <summary>
        /// Returns transformation project details if a valid identifier was provided
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fivetran = Pulumi.Fivetran;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Fivetran.GetTransformationProject.Invoke(new()
        ///     {
        ///         Id = "id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTransformationProjectResult> InvokeAsync(GetTransformationProjectArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTransformationProjectResult>("fivetran:index/getTransformationProject:getTransformationProject", args ?? new GetTransformationProjectArgs(), options.WithDefaults());

        /// <summary>
        /// Returns transformation project details if a valid identifier was provided
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fivetran = Pulumi.Fivetran;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Fivetran.GetTransformationProject.Invoke(new()
        ///     {
        ///         Id = "id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTransformationProjectResult> Invoke(GetTransformationProjectInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTransformationProjectResult>("fivetran:index/getTransformationProject:getTransformationProject", args ?? new GetTransformationProjectInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Returns transformation project details if a valid identifier was provided
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fivetran = Pulumi.Fivetran;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Fivetran.GetTransformationProject.Invoke(new()
        ///     {
        ///         Id = "id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTransformationProjectResult> Invoke(GetTransformationProjectInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTransformationProjectResult>("fivetran:index/getTransformationProject:getTransformationProject", args ?? new GetTransformationProjectInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTransformationProjectArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for the transformation Project within the Fivetran system.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("projectConfig")]
        public Inputs.GetTransformationProjectProjectConfigArgs? ProjectConfig { get; set; }

        public GetTransformationProjectArgs()
        {
        }
        public static new GetTransformationProjectArgs Empty => new GetTransformationProjectArgs();
    }

    public sealed class GetTransformationProjectInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for the transformation Project within the Fivetran system.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("projectConfig")]
        public Input<Inputs.GetTransformationProjectProjectConfigInputArgs>? ProjectConfig { get; set; }

        public GetTransformationProjectInvokeArgs()
        {
        }
        public static new GetTransformationProjectInvokeArgs Empty => new GetTransformationProjectInvokeArgs();
    }


    [OutputType]
    public sealed class GetTransformationProjectResult
    {
        /// <summary>
        /// The timestamp of the transformation Project creation.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The unique identifier for the User within the Fivetran system who created the dbt Project.
        /// </summary>
        public readonly string CreatedById;
        /// <summary>
        /// List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
        /// </summary>
        public readonly ImmutableArray<string> Errors;
        /// <summary>
        /// The unique identifier for the group within the Fivetran system.
        /// </summary>
        public readonly string GroupId;
        /// <summary>
        /// The unique identifier for the transformation Project within the Fivetran system.
        /// </summary>
        public readonly string Id;
        public readonly Outputs.GetTransformationProjectProjectConfigResult? ProjectConfig;
        /// <summary>
        /// Status of transformation Project (NOT_READY, READY, ERROR).
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Transformation project type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetTransformationProjectResult(
            string createdAt,

            string createdById,

            ImmutableArray<string> errors,

            string groupId,

            string id,

            Outputs.GetTransformationProjectProjectConfigResult? projectConfig,

            string status,

            string type)
        {
            CreatedAt = createdAt;
            CreatedById = createdById;
            Errors = errors;
            GroupId = groupId;
            Id = id;
            ProjectConfig = projectConfig;
            Status = status;
            Type = type;
        }
    }
}
