// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran
{
    /// <summary>
    /// Resource is in ALPHA state.
    /// 
    /// This resource allows you to add, manage and delete dbt Projects in your account.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fivetran = Footholdtech.Fivetran;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var project = new Fivetran.DbtProject("project", new()
    ///     {
    ///         DbtVersion = "1.4.1",
    ///         DefaultSchema = "default_schema",
    ///         EnvironmentVars = new[]
    ///         {
    ///             "environment_var=value",
    ///         },
    ///         GroupId = "group_id",
    ///         ProjectConfig = new Fivetran.Inputs.DbtProjectProjectConfigArgs
    ///         {
    ///             FolderPath = "/dbt/project/folder/path",
    ///             GitBranch = "main",
    ///             GitRemoteUrl = "your_git_remote_url",
    ///         },
    ///         TargetName = "target_name",
    ///         Threads = 8,
    ///         Type = "GIT",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// 1. To import an existing `fivetran_dbt_project` resource into your Terraform state, you need to get **Dbt Project ID** via API call `GET https://api.fivetran.com/v1/dbt/projects` to retrieve available projects. 2. Fetch project details for particular `project-id` using `GET https://api.fivetran.com/v1/dbt/projects/{project-id}` to ensure that this is the project you want to import. 3. Define an empty resource in your `.tf` configurationhcl resource "fivetran_dbt_project" "my_imported_fivetran_dbt_project" { }
    /// 
    /// ```sh
    ///  $ pulumi import fivetran:index/dbtProject:DbtProject
    /// 
    /// Run the `terraform import` command
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import fivetran:index/dbtProject:DbtProject my_imported_fivetran_dbt_project {Dbt Project ID}
    /// ```
    /// 
    ///  4. Use the `terraform state show` command to get the values from the stateterraform state show 'fivetran_dbt_project.my_imported_fivetran_dbt_project' 5. Copy the values and paste them to your `.tf` configuration.
    /// </summary>
    [FivetranResourceType("fivetran:index/dbtProject:DbtProject")]
    public partial class DbtProject : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The timestamp of the dbt Project creation.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the User within the Fivetran system who created the dbt Project.
        /// </summary>
        [Output("createdById")]
        public Output<string> CreatedById { get; private set; } = null!;

        /// <summary>
        /// The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
        /// </summary>
        [Output("dbtVersion")]
        public Output<string> DbtVersion { get; private set; } = null!;

        /// <summary>
        /// Default schema in destination. This production schema will contain your transformed data.
        /// </summary>
        [Output("defaultSchema")]
        public Output<string> DefaultSchema { get; private set; } = null!;

        /// <summary>
        /// Should resource wait for project to finish initialization. Default value: true.
        /// </summary>
        [Output("ensureReadiness")]
        public Output<bool?> EnsureReadiness { get; private set; } = null!;

        [Output("environmentVars")]
        public Output<ImmutableArray<string>> EnvironmentVars { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the group within the Fivetran system.
        /// </summary>
        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;

        /// <summary>
        /// The collection of dbt Models.
        /// </summary>
        [Output("models")]
        public Output<ImmutableArray<Outputs.DbtProjectModel>> Models { get; private set; } = null!;

        /// <summary>
        /// Type specific dbt Project configuration parameters.
        /// </summary>
        [Output("projectConfig")]
        public Output<Outputs.DbtProjectProjectConfig> ProjectConfig { get; private set; } = null!;

        /// <summary>
        /// Public key to grant Fivetran SSH access to git repository.
        /// </summary>
        [Output("publicKey")]
        public Output<string> PublicKey { get; private set; } = null!;

        /// <summary>
        /// Status of dbt Project (NOT_READY, READY, ERROR).
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Target name to set or override the value from the deployment.yaml
        /// </summary>
        [Output("targetName")]
        public Output<string?> TargetName { get; private set; } = null!;

        /// <summary>
        /// The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
        /// </summary>
        [Output("threads")]
        public Output<int?> Threads { get; private set; } = null!;

        /// <summary>
        /// Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a DbtProject resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DbtProject(string name, DbtProjectArgs args, CustomResourceOptions? options = null)
            : base("fivetran:index/dbtProject:DbtProject", name, args ?? new DbtProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DbtProject(string name, Input<string> id, DbtProjectState? state = null, CustomResourceOptions? options = null)
            : base("fivetran:index/dbtProject:DbtProject", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/footholdtech/pulumi-fivetran",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DbtProject resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DbtProject Get(string name, Input<string> id, DbtProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new DbtProject(name, id, state, options);
        }
    }

    public sealed class DbtProjectArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
        /// </summary>
        [Input("dbtVersion", required: true)]
        public Input<string> DbtVersion { get; set; } = null!;

        /// <summary>
        /// Default schema in destination. This production schema will contain your transformed data.
        /// </summary>
        [Input("defaultSchema", required: true)]
        public Input<string> DefaultSchema { get; set; } = null!;

        /// <summary>
        /// Should resource wait for project to finish initialization. Default value: true.
        /// </summary>
        [Input("ensureReadiness")]
        public Input<bool>? EnsureReadiness { get; set; }

        [Input("environmentVars")]
        private InputList<string>? _environmentVars;
        public InputList<string> EnvironmentVars
        {
            get => _environmentVars ?? (_environmentVars = new InputList<string>());
            set => _environmentVars = value;
        }

        /// <summary>
        /// The unique identifier for the group within the Fivetran system.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        [Input("models")]
        private InputList<Inputs.DbtProjectModelArgs>? _models;

        /// <summary>
        /// The collection of dbt Models.
        /// </summary>
        public InputList<Inputs.DbtProjectModelArgs> Models
        {
            get => _models ?? (_models = new InputList<Inputs.DbtProjectModelArgs>());
            set => _models = value;
        }

        /// <summary>
        /// Type specific dbt Project configuration parameters.
        /// </summary>
        [Input("projectConfig", required: true)]
        public Input<Inputs.DbtProjectProjectConfigArgs> ProjectConfig { get; set; } = null!;

        /// <summary>
        /// Target name to set or override the value from the deployment.yaml
        /// </summary>
        [Input("targetName")]
        public Input<string>? TargetName { get; set; }

        /// <summary>
        /// The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
        /// </summary>
        [Input("threads")]
        public Input<int>? Threads { get; set; }

        /// <summary>
        /// Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public DbtProjectArgs()
        {
        }
        public static new DbtProjectArgs Empty => new DbtProjectArgs();
    }

    public sealed class DbtProjectState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The timestamp of the dbt Project creation.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The unique identifier for the User within the Fivetran system who created the dbt Project.
        /// </summary>
        [Input("createdById")]
        public Input<string>? CreatedById { get; set; }

        /// <summary>
        /// The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
        /// </summary>
        [Input("dbtVersion")]
        public Input<string>? DbtVersion { get; set; }

        /// <summary>
        /// Default schema in destination. This production schema will contain your transformed data.
        /// </summary>
        [Input("defaultSchema")]
        public Input<string>? DefaultSchema { get; set; }

        /// <summary>
        /// Should resource wait for project to finish initialization. Default value: true.
        /// </summary>
        [Input("ensureReadiness")]
        public Input<bool>? EnsureReadiness { get; set; }

        [Input("environmentVars")]
        private InputList<string>? _environmentVars;
        public InputList<string> EnvironmentVars
        {
            get => _environmentVars ?? (_environmentVars = new InputList<string>());
            set => _environmentVars = value;
        }

        /// <summary>
        /// The unique identifier for the group within the Fivetran system.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        [Input("models")]
        private InputList<Inputs.DbtProjectModelGetArgs>? _models;

        /// <summary>
        /// The collection of dbt Models.
        /// </summary>
        public InputList<Inputs.DbtProjectModelGetArgs> Models
        {
            get => _models ?? (_models = new InputList<Inputs.DbtProjectModelGetArgs>());
            set => _models = value;
        }

        /// <summary>
        /// Type specific dbt Project configuration parameters.
        /// </summary>
        [Input("projectConfig")]
        public Input<Inputs.DbtProjectProjectConfigGetArgs>? ProjectConfig { get; set; }

        /// <summary>
        /// Public key to grant Fivetran SSH access to git repository.
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        /// <summary>
        /// Status of dbt Project (NOT_READY, READY, ERROR).
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Target name to set or override the value from the deployment.yaml
        /// </summary>
        [Input("targetName")]
        public Input<string>? TargetName { get; set; }

        /// <summary>
        /// The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
        /// </summary>
        [Input("threads")]
        public Input<int>? Threads { get; set; }

        /// <summary>
        /// Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public DbtProjectState()
        {
        }
        public static new DbtProjectState Empty => new DbtProjectState();
    }
}
