// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran
{
    /// <summary>
    /// ## Import
    /// 
    /// 1. To import an existing `fivetran_transformation_project` resource into your Terraform state, you need to get **Transformation Project ID** via API call `GET https://api.fivetran.com/v1/transformation-projects` to retrieve available projects.
    /// 
    /// 2. Fetch project details for particular `project-id` using `GET https://api.fivetran.com/v1/transformation-projects/{project-id}` to ensure that this is the project you want to import.
    /// 
    /// 3. Define an empty resource in your `.tf` configuration:
    /// 
    /// hcl
    /// 
    /// resource "fivetran_transformation_project" "my_imported_fivetran_transformation_project" {
    /// 
    /// }
    /// 
    /// 4. Run the `pulumi import` command:
    /// 
    /// ```sh
    /// $ pulumi import fivetran:index/transformationProject:TransformationProject my_imported_fivetran_transformation_project {Transformation Project ID}
    /// ```
    /// 
    /// 4. Use the `terraform state show` command to get the values from the state:
    /// 
    /// terraform state show 'fivetran_transformation_project.my_imported_fivetran_transformation_project'
    /// 
    /// 5. Copy the values and paste them to your `.tf` configuration.
    /// </summary>
    [FivetranResourceType("fivetran:index/transformationProject:TransformationProject")]
    public partial class TransformationProject : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The timestamp of the transformation Project creation.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the User within the Fivetran system who created the dbt Project.
        /// </summary>
        [Output("createdById")]
        public Output<string> CreatedById { get; private set; } = null!;

        /// <summary>
        /// List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
        /// </summary>
        [Output("errors")]
        public Output<ImmutableArray<string>> Errors { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the group within the Fivetran system.
        /// </summary>
        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;

        [Output("projectConfig")]
        public Output<Outputs.TransformationProjectProjectConfig?> ProjectConfig { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the setup tests should be run automatically. The default value is TRUE.
        /// </summary>
        [Output("runTests")]
        public Output<bool> RunTests { get; private set; } = null!;

        /// <summary>
        /// Status of transformation Project (NOT_READY, READY, ERROR).
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Transformation project type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a TransformationProject resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TransformationProject(string name, TransformationProjectArgs args, CustomResourceOptions? options = null)
            : base("fivetran:index/transformationProject:TransformationProject", name, args ?? new TransformationProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TransformationProject(string name, Input<string> id, TransformationProjectState? state = null, CustomResourceOptions? options = null)
            : base("fivetran:index/transformationProject:TransformationProject", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/footholdtech/pulumi-fivetran",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TransformationProject resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TransformationProject Get(string name, Input<string> id, TransformationProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new TransformationProject(name, id, state, options);
        }
    }

    public sealed class TransformationProjectArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique identifier for the group within the Fivetran system.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        [Input("projectConfig")]
        public Input<Inputs.TransformationProjectProjectConfigArgs>? ProjectConfig { get; set; }

        /// <summary>
        /// Specifies whether the setup tests should be run automatically. The default value is TRUE.
        /// </summary>
        [Input("runTests")]
        public Input<bool>? RunTests { get; set; }

        /// <summary>
        /// Transformation project type.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public TransformationProjectArgs()
        {
        }
        public static new TransformationProjectArgs Empty => new TransformationProjectArgs();
    }

    public sealed class TransformationProjectState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The timestamp of the transformation Project creation.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The unique identifier for the User within the Fivetran system who created the dbt Project.
        /// </summary>
        [Input("createdById")]
        public Input<string>? CreatedById { get; set; }

        [Input("errors")]
        private InputList<string>? _errors;

        /// <summary>
        /// List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
        /// </summary>
        public InputList<string> Errors
        {
            get => _errors ?? (_errors = new InputList<string>());
            set => _errors = value;
        }

        /// <summary>
        /// The unique identifier for the group within the Fivetran system.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        [Input("projectConfig")]
        public Input<Inputs.TransformationProjectProjectConfigGetArgs>? ProjectConfig { get; set; }

        /// <summary>
        /// Specifies whether the setup tests should be run automatically. The default value is TRUE.
        /// </summary>
        [Input("runTests")]
        public Input<bool>? RunTests { get; set; }

        /// <summary>
        /// Status of transformation Project (NOT_READY, READY, ERROR).
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Transformation project type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public TransformationProjectState()
        {
        }
        public static new TransformationProjectState Empty => new TransformationProjectState();
    }
}
