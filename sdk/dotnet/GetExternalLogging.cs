// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Footholdtech.Fivetran
{
    public static class GetExternalLogging
    {
        /// <summary>
        /// This data source returns a logging service object.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fivetran = Pulumi.Fivetran;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var extlog = Fivetran.GetExternalLogging.Invoke(new()
        ///     {
        ///         Id = "anonymous_mystery",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetExternalLoggingResult> InvokeAsync(GetExternalLoggingArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetExternalLoggingResult>("fivetran:index/getExternalLogging:getExternalLogging", args ?? new GetExternalLoggingArgs(), options.WithDefaults());

        /// <summary>
        /// This data source returns a logging service object.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fivetran = Pulumi.Fivetran;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var extlog = Fivetran.GetExternalLogging.Invoke(new()
        ///     {
        ///         Id = "anonymous_mystery",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetExternalLoggingResult> Invoke(GetExternalLoggingInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetExternalLoggingResult>("fivetran:index/getExternalLogging:getExternalLogging", args ?? new GetExternalLoggingInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetExternalLoggingArgs : global::Pulumi.InvokeArgs
    {
        [Input("configs")]
        private List<Inputs.GetExternalLoggingConfigArgs>? _configs;
        public List<Inputs.GetExternalLoggingConfigArgs> Configs
        {
            get => _configs ?? (_configs = new List<Inputs.GetExternalLoggingConfigArgs>());
            set => _configs = value;
        }

        /// <summary>
        /// The unique identifier for the log service within the Fivetran system.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// Specifies whether the setup tests should be run automatically. The default value is TRUE.
        /// </summary>
        [Input("runSetupTests")]
        public bool? RunSetupTests { get; set; }

        public GetExternalLoggingArgs()
        {
        }
        public static new GetExternalLoggingArgs Empty => new GetExternalLoggingArgs();
    }

    public sealed class GetExternalLoggingInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("configs")]
        private InputList<Inputs.GetExternalLoggingConfigInputArgs>? _configs;
        public InputList<Inputs.GetExternalLoggingConfigInputArgs> Configs
        {
            get => _configs ?? (_configs = new InputList<Inputs.GetExternalLoggingConfigInputArgs>());
            set => _configs = value;
        }

        /// <summary>
        /// The unique identifier for the log service within the Fivetran system.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// Specifies whether the setup tests should be run automatically. The default value is TRUE.
        /// </summary>
        [Input("runSetupTests")]
        public Input<bool>? RunSetupTests { get; set; }

        public GetExternalLoggingInvokeArgs()
        {
        }
        public static new GetExternalLoggingInvokeArgs Empty => new GetExternalLoggingInvokeArgs();
    }


    [OutputType]
    public sealed class GetExternalLoggingResult
    {
        public readonly ImmutableArray<Outputs.GetExternalLoggingConfigResult> Configs;
        /// <summary>
        /// The boolean value specifying whether the log service is enabled.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The unique identifier for the log service within the Fivetran system.
        /// </summary>
        public readonly string GroupId;
        /// <summary>
        /// The unique identifier for the log service within the Fivetran system.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specifies whether the setup tests should be run automatically. The default value is TRUE.
        /// </summary>
        public readonly bool? RunSetupTests;
        /// <summary>
        /// The name for the log service type within the Fivetran system. We support the following log services: azure*monitor*log, cloudwatch, datadog*log, new*relic_log, splunkLog, stackdriver.
        /// </summary>
        public readonly string Service;

        [OutputConstructor]
        private GetExternalLoggingResult(
            ImmutableArray<Outputs.GetExternalLoggingConfigResult> configs,

            bool enabled,

            string groupId,

            string id,

            bool? runSetupTests,

            string service)
        {
            Configs = configs;
            Enabled = enabled;
            GroupId = groupId;
            Id = id;
            RunSetupTests = runSetupTests;
            Service = service;
        }
    }
}
