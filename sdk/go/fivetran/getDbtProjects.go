// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source returns a list of all dbt Projects within your Fivetran account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fivetran.GetDbtProjects(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDbtProjects(ctx *pulumi.Context, args *GetDbtProjectsArgs, opts ...pulumi.InvokeOption) (*GetDbtProjectsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDbtProjectsResult
	err := ctx.Invoke("fivetran:index/getDbtProjects:getDbtProjects", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDbtProjects.
type GetDbtProjectsArgs struct {
	Projects []GetDbtProjectsProject `pulumi:"projects"`
}

// A collection of values returned by getDbtProjects.
type GetDbtProjectsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id       string                  `pulumi:"id"`
	Projects []GetDbtProjectsProject `pulumi:"projects"`
}

func GetDbtProjectsOutput(ctx *pulumi.Context, args GetDbtProjectsOutputArgs, opts ...pulumi.InvokeOption) GetDbtProjectsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDbtProjectsResult, error) {
			args := v.(GetDbtProjectsArgs)
			r, err := GetDbtProjects(ctx, &args, opts...)
			var s GetDbtProjectsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDbtProjectsResultOutput)
}

// A collection of arguments for invoking getDbtProjects.
type GetDbtProjectsOutputArgs struct {
	Projects GetDbtProjectsProjectArrayInput `pulumi:"projects"`
}

func (GetDbtProjectsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDbtProjectsArgs)(nil)).Elem()
}

// A collection of values returned by getDbtProjects.
type GetDbtProjectsResultOutput struct{ *pulumi.OutputState }

func (GetDbtProjectsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDbtProjectsResult)(nil)).Elem()
}

func (o GetDbtProjectsResultOutput) ToGetDbtProjectsResultOutput() GetDbtProjectsResultOutput {
	return o
}

func (o GetDbtProjectsResultOutput) ToGetDbtProjectsResultOutputWithContext(ctx context.Context) GetDbtProjectsResultOutput {
	return o
}

func (o GetDbtProjectsResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetDbtProjectsResult] {
	return pulumix.Output[GetDbtProjectsResult]{
		OutputState: o.OutputState,
	}
}

// The provider-assigned unique ID for this managed resource.
func (o GetDbtProjectsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDbtProjectsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDbtProjectsResultOutput) Projects() GetDbtProjectsProjectArrayOutput {
	return o.ApplyT(func(v GetDbtProjectsResult) []GetDbtProjectsProject { return v.Projects }).(GetDbtProjectsProjectArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDbtProjectsResultOutput{})
}
