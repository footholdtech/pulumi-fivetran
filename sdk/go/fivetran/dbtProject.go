// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"errors"
	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Resource is in ALPHA state.
//
// This resource allows you to add, manage and delete dbt Projects in your account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fivetran.NewDbtProject(ctx, "project", &fivetran.DbtProjectArgs{
//				DbtVersion:    pulumi.String("1.4.1"),
//				DefaultSchema: pulumi.String("default_schema"),
//				EnvironmentVars: pulumi.StringArray{
//					pulumi.String("environment_var=value"),
//				},
//				GroupId: pulumi.String("group_id"),
//				ProjectConfig: &fivetran.DbtProjectProjectConfigArgs{
//					FolderPath:   pulumi.String("/dbt/project/folder/path"),
//					GitBranch:    pulumi.String("main"),
//					GitRemoteUrl: pulumi.String("your_git_remote_url"),
//				},
//				TargetName: pulumi.String("target_name"),
//				Threads:    pulumi.Int(8),
//				Type:       pulumi.String("GIT"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// 1. To import an existing `fivetran_dbt_project` resource into your Terraform state, you need to get **Dbt Project ID** via API call `GET https://api.fivetran.com/v1/dbt/projects` to retrieve available projects. 2. Fetch project details for particular `project-id` using `GET https://api.fivetran.com/v1/dbt/projects/{project-id}` to ensure that this is the project you want to import. 3. Define an empty resource in your `.tf` configurationhcl resource "fivetran_dbt_project" "my_imported_fivetran_dbt_project" { }
//
// ```sh
//
//	$ pulumi import fivetran:index/dbtProject:DbtProject
//
// Run the `terraform import` command
// ```
//
// ```sh
//
//	$ pulumi import fivetran:index/dbtProject:DbtProject my_imported_fivetran_dbt_project {Dbt Project ID}
//
// ```
//
//  4. Use the `terraform state show` command to get the values from the stateterraform state show 'fivetran_dbt_project.my_imported_fivetran_dbt_project' 5. Copy the values and paste them to your `.tf` configuration.
type DbtProject struct {
	pulumi.CustomResourceState

	// The timestamp of the dbt Project creation.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The unique identifier for the User within the Fivetran system who created the dbt Project.
	CreatedById pulumi.StringOutput `pulumi:"createdById"`
	// The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
	DbtVersion pulumi.StringOutput `pulumi:"dbtVersion"`
	// Default schema in destination. This production schema will contain your transformed data.
	DefaultSchema pulumi.StringOutput `pulumi:"defaultSchema"`
	// Should resource wait for project to finish initialization. Default value: true.
	EnsureReadiness pulumi.BoolPtrOutput     `pulumi:"ensureReadiness"`
	EnvironmentVars pulumi.StringArrayOutput `pulumi:"environmentVars"`
	// The unique identifier for the group within the Fivetran system.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The collection of dbt Models.
	Models DbtProjectModelArrayOutput `pulumi:"models"`
	// Type specific dbt Project configuration parameters.
	ProjectConfig DbtProjectProjectConfigOutput `pulumi:"projectConfig"`
	// Public key to grant Fivetran SSH access to git repository.
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// Status of dbt Project (NOT_READY, READY, ERROR).
	Status pulumi.StringOutput `pulumi:"status"`
	// Target name to set or override the value from the deployment.yaml
	TargetName pulumi.StringPtrOutput `pulumi:"targetName"`
	// The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
	Threads pulumi.IntPtrOutput `pulumi:"threads"`
	// Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDbtProject registers a new resource with the given unique name, arguments, and options.
func NewDbtProject(ctx *pulumi.Context,
	name string, args *DbtProjectArgs, opts ...pulumi.ResourceOption) (*DbtProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbtVersion == nil {
		return nil, errors.New("invalid value for required argument 'DbtVersion'")
	}
	if args.DefaultSchema == nil {
		return nil, errors.New("invalid value for required argument 'DefaultSchema'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.ProjectConfig == nil {
		return nil, errors.New("invalid value for required argument 'ProjectConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbtProject
	err := ctx.RegisterResource("fivetran:index/dbtProject:DbtProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbtProject gets an existing DbtProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbtProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbtProjectState, opts ...pulumi.ResourceOption) (*DbtProject, error) {
	var resource DbtProject
	err := ctx.ReadResource("fivetran:index/dbtProject:DbtProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbtProject resources.
type dbtProjectState struct {
	// The timestamp of the dbt Project creation.
	CreatedAt *string `pulumi:"createdAt"`
	// The unique identifier for the User within the Fivetran system who created the dbt Project.
	CreatedById *string `pulumi:"createdById"`
	// The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
	DbtVersion *string `pulumi:"dbtVersion"`
	// Default schema in destination. This production schema will contain your transformed data.
	DefaultSchema *string `pulumi:"defaultSchema"`
	// Should resource wait for project to finish initialization. Default value: true.
	EnsureReadiness *bool    `pulumi:"ensureReadiness"`
	EnvironmentVars []string `pulumi:"environmentVars"`
	// The unique identifier for the group within the Fivetran system.
	GroupId *string `pulumi:"groupId"`
	// The collection of dbt Models.
	Models []DbtProjectModel `pulumi:"models"`
	// Type specific dbt Project configuration parameters.
	ProjectConfig *DbtProjectProjectConfig `pulumi:"projectConfig"`
	// Public key to grant Fivetran SSH access to git repository.
	PublicKey *string `pulumi:"publicKey"`
	// Status of dbt Project (NOT_READY, READY, ERROR).
	Status *string `pulumi:"status"`
	// Target name to set or override the value from the deployment.yaml
	TargetName *string `pulumi:"targetName"`
	// The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
	Threads *int `pulumi:"threads"`
	// Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
	Type *string `pulumi:"type"`
}

type DbtProjectState struct {
	// The timestamp of the dbt Project creation.
	CreatedAt pulumi.StringPtrInput
	// The unique identifier for the User within the Fivetran system who created the dbt Project.
	CreatedById pulumi.StringPtrInput
	// The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
	DbtVersion pulumi.StringPtrInput
	// Default schema in destination. This production schema will contain your transformed data.
	DefaultSchema pulumi.StringPtrInput
	// Should resource wait for project to finish initialization. Default value: true.
	EnsureReadiness pulumi.BoolPtrInput
	EnvironmentVars pulumi.StringArrayInput
	// The unique identifier for the group within the Fivetran system.
	GroupId pulumi.StringPtrInput
	// The collection of dbt Models.
	Models DbtProjectModelArrayInput
	// Type specific dbt Project configuration parameters.
	ProjectConfig DbtProjectProjectConfigPtrInput
	// Public key to grant Fivetran SSH access to git repository.
	PublicKey pulumi.StringPtrInput
	// Status of dbt Project (NOT_READY, READY, ERROR).
	Status pulumi.StringPtrInput
	// Target name to set or override the value from the deployment.yaml
	TargetName pulumi.StringPtrInput
	// The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
	Threads pulumi.IntPtrInput
	// Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
	Type pulumi.StringPtrInput
}

func (DbtProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbtProjectState)(nil)).Elem()
}

type dbtProjectArgs struct {
	// The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
	DbtVersion string `pulumi:"dbtVersion"`
	// Default schema in destination. This production schema will contain your transformed data.
	DefaultSchema string `pulumi:"defaultSchema"`
	// Should resource wait for project to finish initialization. Default value: true.
	EnsureReadiness *bool    `pulumi:"ensureReadiness"`
	EnvironmentVars []string `pulumi:"environmentVars"`
	// The unique identifier for the group within the Fivetran system.
	GroupId string `pulumi:"groupId"`
	// The collection of dbt Models.
	Models []DbtProjectModel `pulumi:"models"`
	// Type specific dbt Project configuration parameters.
	ProjectConfig DbtProjectProjectConfig `pulumi:"projectConfig"`
	// Target name to set or override the value from the deployment.yaml
	TargetName *string `pulumi:"targetName"`
	// The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
	Threads *int `pulumi:"threads"`
	// Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a DbtProject resource.
type DbtProjectArgs struct {
	// The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
	DbtVersion pulumi.StringInput
	// Default schema in destination. This production schema will contain your transformed data.
	DefaultSchema pulumi.StringInput
	// Should resource wait for project to finish initialization. Default value: true.
	EnsureReadiness pulumi.BoolPtrInput
	EnvironmentVars pulumi.StringArrayInput
	// The unique identifier for the group within the Fivetran system.
	GroupId pulumi.StringInput
	// The collection of dbt Models.
	Models DbtProjectModelArrayInput
	// Type specific dbt Project configuration parameters.
	ProjectConfig DbtProjectProjectConfigInput
	// Target name to set or override the value from the deployment.yaml
	TargetName pulumi.StringPtrInput
	// The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
	Threads pulumi.IntPtrInput
	// Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
	Type pulumi.StringPtrInput
}

func (DbtProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbtProjectArgs)(nil)).Elem()
}

type DbtProjectInput interface {
	pulumi.Input

	ToDbtProjectOutput() DbtProjectOutput
	ToDbtProjectOutputWithContext(ctx context.Context) DbtProjectOutput
}

func (*DbtProject) ElementType() reflect.Type {
	return reflect.TypeOf((**DbtProject)(nil)).Elem()
}

func (i *DbtProject) ToDbtProjectOutput() DbtProjectOutput {
	return i.ToDbtProjectOutputWithContext(context.Background())
}

func (i *DbtProject) ToDbtProjectOutputWithContext(ctx context.Context) DbtProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbtProjectOutput)
}

func (i *DbtProject) ToOutput(ctx context.Context) pulumix.Output[*DbtProject] {
	return pulumix.Output[*DbtProject]{
		OutputState: i.ToDbtProjectOutputWithContext(ctx).OutputState,
	}
}

// DbtProjectArrayInput is an input type that accepts DbtProjectArray and DbtProjectArrayOutput values.
// You can construct a concrete instance of `DbtProjectArrayInput` via:
//
//	DbtProjectArray{ DbtProjectArgs{...} }
type DbtProjectArrayInput interface {
	pulumi.Input

	ToDbtProjectArrayOutput() DbtProjectArrayOutput
	ToDbtProjectArrayOutputWithContext(context.Context) DbtProjectArrayOutput
}

type DbtProjectArray []DbtProjectInput

func (DbtProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbtProject)(nil)).Elem()
}

func (i DbtProjectArray) ToDbtProjectArrayOutput() DbtProjectArrayOutput {
	return i.ToDbtProjectArrayOutputWithContext(context.Background())
}

func (i DbtProjectArray) ToDbtProjectArrayOutputWithContext(ctx context.Context) DbtProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbtProjectArrayOutput)
}

func (i DbtProjectArray) ToOutput(ctx context.Context) pulumix.Output[[]*DbtProject] {
	return pulumix.Output[[]*DbtProject]{
		OutputState: i.ToDbtProjectArrayOutputWithContext(ctx).OutputState,
	}
}

// DbtProjectMapInput is an input type that accepts DbtProjectMap and DbtProjectMapOutput values.
// You can construct a concrete instance of `DbtProjectMapInput` via:
//
//	DbtProjectMap{ "key": DbtProjectArgs{...} }
type DbtProjectMapInput interface {
	pulumi.Input

	ToDbtProjectMapOutput() DbtProjectMapOutput
	ToDbtProjectMapOutputWithContext(context.Context) DbtProjectMapOutput
}

type DbtProjectMap map[string]DbtProjectInput

func (DbtProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbtProject)(nil)).Elem()
}

func (i DbtProjectMap) ToDbtProjectMapOutput() DbtProjectMapOutput {
	return i.ToDbtProjectMapOutputWithContext(context.Background())
}

func (i DbtProjectMap) ToDbtProjectMapOutputWithContext(ctx context.Context) DbtProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbtProjectMapOutput)
}

func (i DbtProjectMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DbtProject] {
	return pulumix.Output[map[string]*DbtProject]{
		OutputState: i.ToDbtProjectMapOutputWithContext(ctx).OutputState,
	}
}

type DbtProjectOutput struct{ *pulumi.OutputState }

func (DbtProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbtProject)(nil)).Elem()
}

func (o DbtProjectOutput) ToDbtProjectOutput() DbtProjectOutput {
	return o
}

func (o DbtProjectOutput) ToDbtProjectOutputWithContext(ctx context.Context) DbtProjectOutput {
	return o
}

func (o DbtProjectOutput) ToOutput(ctx context.Context) pulumix.Output[*DbtProject] {
	return pulumix.Output[*DbtProject]{
		OutputState: o.OutputState,
	}
}

// The timestamp of the dbt Project creation.
func (o DbtProjectOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DbtProject) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The unique identifier for the User within the Fivetran system who created the dbt Project.
func (o DbtProjectOutput) CreatedById() pulumi.StringOutput {
	return o.ApplyT(func(v *DbtProject) pulumi.StringOutput { return v.CreatedById }).(pulumi.StringOutput)
}

// The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
func (o DbtProjectOutput) DbtVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DbtProject) pulumi.StringOutput { return v.DbtVersion }).(pulumi.StringOutput)
}

// Default schema in destination. This production schema will contain your transformed data.
func (o DbtProjectOutput) DefaultSchema() pulumi.StringOutput {
	return o.ApplyT(func(v *DbtProject) pulumi.StringOutput { return v.DefaultSchema }).(pulumi.StringOutput)
}

// Should resource wait for project to finish initialization. Default value: true.
func (o DbtProjectOutput) EnsureReadiness() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DbtProject) pulumi.BoolPtrOutput { return v.EnsureReadiness }).(pulumi.BoolPtrOutput)
}

func (o DbtProjectOutput) EnvironmentVars() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DbtProject) pulumi.StringArrayOutput { return v.EnvironmentVars }).(pulumi.StringArrayOutput)
}

// The unique identifier for the group within the Fivetran system.
func (o DbtProjectOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbtProject) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The collection of dbt Models.
func (o DbtProjectOutput) Models() DbtProjectModelArrayOutput {
	return o.ApplyT(func(v *DbtProject) DbtProjectModelArrayOutput { return v.Models }).(DbtProjectModelArrayOutput)
}

// Type specific dbt Project configuration parameters.
func (o DbtProjectOutput) ProjectConfig() DbtProjectProjectConfigOutput {
	return o.ApplyT(func(v *DbtProject) DbtProjectProjectConfigOutput { return v.ProjectConfig }).(DbtProjectProjectConfigOutput)
}

// Public key to grant Fivetran SSH access to git repository.
func (o DbtProjectOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *DbtProject) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// Status of dbt Project (NOT_READY, READY, ERROR).
func (o DbtProjectOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DbtProject) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Target name to set or override the value from the deployment.yaml
func (o DbtProjectOutput) TargetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbtProject) pulumi.StringPtrOutput { return v.TargetName }).(pulumi.StringPtrOutput)
}

// The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
func (o DbtProjectOutput) Threads() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DbtProject) pulumi.IntPtrOutput { return v.Threads }).(pulumi.IntPtrOutput)
}

// Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
func (o DbtProjectOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DbtProject) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type DbtProjectArrayOutput struct{ *pulumi.OutputState }

func (DbtProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbtProject)(nil)).Elem()
}

func (o DbtProjectArrayOutput) ToDbtProjectArrayOutput() DbtProjectArrayOutput {
	return o
}

func (o DbtProjectArrayOutput) ToDbtProjectArrayOutputWithContext(ctx context.Context) DbtProjectArrayOutput {
	return o
}

func (o DbtProjectArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DbtProject] {
	return pulumix.Output[[]*DbtProject]{
		OutputState: o.OutputState,
	}
}

func (o DbtProjectArrayOutput) Index(i pulumi.IntInput) DbtProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbtProject {
		return vs[0].([]*DbtProject)[vs[1].(int)]
	}).(DbtProjectOutput)
}

type DbtProjectMapOutput struct{ *pulumi.OutputState }

func (DbtProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbtProject)(nil)).Elem()
}

func (o DbtProjectMapOutput) ToDbtProjectMapOutput() DbtProjectMapOutput {
	return o
}

func (o DbtProjectMapOutput) ToDbtProjectMapOutputWithContext(ctx context.Context) DbtProjectMapOutput {
	return o
}

func (o DbtProjectMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DbtProject] {
	return pulumix.Output[map[string]*DbtProject]{
		OutputState: o.OutputState,
	}
}

func (o DbtProjectMapOutput) MapIndex(k pulumi.StringInput) DbtProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbtProject {
		return vs[0].(map[string]*DbtProject)[vs[1].(string)]
	}).(DbtProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbtProjectInput)(nil)).Elem(), &DbtProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbtProjectArrayInput)(nil)).Elem(), DbtProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbtProjectMapInput)(nil)).Elem(), DbtProjectMap{})
	pulumi.RegisterOutputType(DbtProjectOutput{})
	pulumi.RegisterOutputType(DbtProjectArrayOutput{})
	pulumi.RegisterOutputType(DbtProjectMapOutput{})
}
