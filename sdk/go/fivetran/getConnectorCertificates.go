// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source returns a list of SSH fingerprints approved for specified connector.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fivetran.LookupConnectorFingerprints(ctx, &fivetran.LookupConnectorFingerprintsArgs{
//				Id: "connector_id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupConnectorCertificates(ctx *pulumi.Context, args *LookupConnectorCertificatesArgs, opts ...pulumi.InvokeOption) (*LookupConnectorCertificatesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConnectorCertificatesResult
	err := ctx.Invoke("fivetran:index/getConnectorCertificates:getConnectorCertificates", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnectorCertificates.
type LookupConnectorCertificatesArgs struct {
	Certificates []GetConnectorCertificatesCertificate `pulumi:"certificates"`
	// The unique identifier for the resource. Equal to target connection id.
	Id string `pulumi:"id"`
}

// A collection of values returned by getConnectorCertificates.
type LookupConnectorCertificatesResult struct {
	Certificates []GetConnectorCertificatesCertificate `pulumi:"certificates"`
	// The unique identifier for the target connection within the Fivetran system.
	ConnectorId string `pulumi:"connectorId"`
	// The unique identifier for the resource. Equal to target connection id.
	Id string `pulumi:"id"`
}

func LookupConnectorCertificatesOutput(ctx *pulumi.Context, args LookupConnectorCertificatesOutputArgs, opts ...pulumi.InvokeOption) LookupConnectorCertificatesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupConnectorCertificatesResultOutput, error) {
			args := v.(LookupConnectorCertificatesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("fivetran:index/getConnectorCertificates:getConnectorCertificates", args, LookupConnectorCertificatesResultOutput{}, options).(LookupConnectorCertificatesResultOutput), nil
		}).(LookupConnectorCertificatesResultOutput)
}

// A collection of arguments for invoking getConnectorCertificates.
type LookupConnectorCertificatesOutputArgs struct {
	Certificates GetConnectorCertificatesCertificateArrayInput `pulumi:"certificates"`
	// The unique identifier for the resource. Equal to target connection id.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupConnectorCertificatesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectorCertificatesArgs)(nil)).Elem()
}

// A collection of values returned by getConnectorCertificates.
type LookupConnectorCertificatesResultOutput struct{ *pulumi.OutputState }

func (LookupConnectorCertificatesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectorCertificatesResult)(nil)).Elem()
}

func (o LookupConnectorCertificatesResultOutput) ToLookupConnectorCertificatesResultOutput() LookupConnectorCertificatesResultOutput {
	return o
}

func (o LookupConnectorCertificatesResultOutput) ToLookupConnectorCertificatesResultOutputWithContext(ctx context.Context) LookupConnectorCertificatesResultOutput {
	return o
}

func (o LookupConnectorCertificatesResultOutput) Certificates() GetConnectorCertificatesCertificateArrayOutput {
	return o.ApplyT(func(v LookupConnectorCertificatesResult) []GetConnectorCertificatesCertificate { return v.Certificates }).(GetConnectorCertificatesCertificateArrayOutput)
}

// The unique identifier for the target connection within the Fivetran system.
func (o LookupConnectorCertificatesResultOutput) ConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorCertificatesResult) string { return v.ConnectorId }).(pulumi.StringOutput)
}

// The unique identifier for the resource. Equal to target connection id.
func (o LookupConnectorCertificatesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectorCertificatesResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConnectorCertificatesResultOutput{})
}
