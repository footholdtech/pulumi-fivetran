// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"errors"
	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource allows you to manage list of approved SSH fingerprints for a particular destination.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fivetran.NewDestinationFingerprints(ctx, "myDestinationApprovedFingerprints", &fivetran.DestinationFingerprintsArgs{
//				DestinationId: pulumi.Any(fivetran_destination.My_destination.Id),
//				Fingerprints: fivetran.DestinationFingerprintsFingerprintArray{
//					&fivetran.DestinationFingerprintsFingerprintArgs{
//						Hash:      pulumi.String("jhgfJfgrI6yy..."),
//						PublicKey: pulumi.String("ssh-rsa CCCCB3NzaC1yc2ECCASFWFWDFRWT5WAS ... fivetran user key"),
//					},
//					&fivetran.DestinationFingerprintsFingerprintArgs{
//						Hash:      pulumi.String("eUtPirI6yytWe..."),
//						PublicKey: pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6 ... fivetran user key"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// 1. To import an existing `fivetran_destination_fingerprints` resource into your Terraform state, you need to get **Destination Group ID** on the destination page in your Fivetran dashboard. 2. To retrieve existing groups, use the [fivetran_groups data source](/docs/data-sources/groups). 3. Define an empty resource in your `.tf` configurationhcl resource "fivetran_destination_fingerprints" "my_imported_destination_fingerprints" { }
//
// ```sh
//
//	$ pulumi import fivetran:index/destinationFingerprints:DestinationFingerprints
//
// Run the `terraform import` command
// ```
//
// ```sh
//
//	$ pulumi import fivetran:index/destinationFingerprints:DestinationFingerprints my_imported_destination_fingerprints {your Destination Group ID}
//
// ```
//
// 5.
//
// Use the `terraform state show` command to get the values from the stateterraform state show 'fivetran_destination_fingerprints.my_imported_destination_fingerprints' 6. Copy the values and paste them to your `.tf` configuration.
type DestinationFingerprints struct {
	pulumi.CustomResourceState

	// The unique identifier for the target destination within the Fivetran system.
	DestinationId pulumi.StringOutput                           `pulumi:"destinationId"`
	Fingerprints  DestinationFingerprintsFingerprintArrayOutput `pulumi:"fingerprints"`
}

// NewDestinationFingerprints registers a new resource with the given unique name, arguments, and options.
func NewDestinationFingerprints(ctx *pulumi.Context,
	name string, args *DestinationFingerprintsArgs, opts ...pulumi.ResourceOption) (*DestinationFingerprints, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationId == nil {
		return nil, errors.New("invalid value for required argument 'DestinationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationFingerprints
	err := ctx.RegisterResource("fivetran:index/destinationFingerprints:DestinationFingerprints", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationFingerprints gets an existing DestinationFingerprints resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationFingerprints(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationFingerprintsState, opts ...pulumi.ResourceOption) (*DestinationFingerprints, error) {
	var resource DestinationFingerprints
	err := ctx.ReadResource("fivetran:index/destinationFingerprints:DestinationFingerprints", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationFingerprints resources.
type destinationFingerprintsState struct {
	// The unique identifier for the target destination within the Fivetran system.
	DestinationId *string                              `pulumi:"destinationId"`
	Fingerprints  []DestinationFingerprintsFingerprint `pulumi:"fingerprints"`
}

type DestinationFingerprintsState struct {
	// The unique identifier for the target destination within the Fivetran system.
	DestinationId pulumi.StringPtrInput
	Fingerprints  DestinationFingerprintsFingerprintArrayInput
}

func (DestinationFingerprintsState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationFingerprintsState)(nil)).Elem()
}

type destinationFingerprintsArgs struct {
	// The unique identifier for the target destination within the Fivetran system.
	DestinationId string                               `pulumi:"destinationId"`
	Fingerprints  []DestinationFingerprintsFingerprint `pulumi:"fingerprints"`
}

// The set of arguments for constructing a DestinationFingerprints resource.
type DestinationFingerprintsArgs struct {
	// The unique identifier for the target destination within the Fivetran system.
	DestinationId pulumi.StringInput
	Fingerprints  DestinationFingerprintsFingerprintArrayInput
}

func (DestinationFingerprintsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationFingerprintsArgs)(nil)).Elem()
}

type DestinationFingerprintsInput interface {
	pulumi.Input

	ToDestinationFingerprintsOutput() DestinationFingerprintsOutput
	ToDestinationFingerprintsOutputWithContext(ctx context.Context) DestinationFingerprintsOutput
}

func (*DestinationFingerprints) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationFingerprints)(nil)).Elem()
}

func (i *DestinationFingerprints) ToDestinationFingerprintsOutput() DestinationFingerprintsOutput {
	return i.ToDestinationFingerprintsOutputWithContext(context.Background())
}

func (i *DestinationFingerprints) ToDestinationFingerprintsOutputWithContext(ctx context.Context) DestinationFingerprintsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationFingerprintsOutput)
}

func (i *DestinationFingerprints) ToOutput(ctx context.Context) pulumix.Output[*DestinationFingerprints] {
	return pulumix.Output[*DestinationFingerprints]{
		OutputState: i.ToDestinationFingerprintsOutputWithContext(ctx).OutputState,
	}
}

// DestinationFingerprintsArrayInput is an input type that accepts DestinationFingerprintsArray and DestinationFingerprintsArrayOutput values.
// You can construct a concrete instance of `DestinationFingerprintsArrayInput` via:
//
//	DestinationFingerprintsArray{ DestinationFingerprintsArgs{...} }
type DestinationFingerprintsArrayInput interface {
	pulumi.Input

	ToDestinationFingerprintsArrayOutput() DestinationFingerprintsArrayOutput
	ToDestinationFingerprintsArrayOutputWithContext(context.Context) DestinationFingerprintsArrayOutput
}

type DestinationFingerprintsArray []DestinationFingerprintsInput

func (DestinationFingerprintsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationFingerprints)(nil)).Elem()
}

func (i DestinationFingerprintsArray) ToDestinationFingerprintsArrayOutput() DestinationFingerprintsArrayOutput {
	return i.ToDestinationFingerprintsArrayOutputWithContext(context.Background())
}

func (i DestinationFingerprintsArray) ToDestinationFingerprintsArrayOutputWithContext(ctx context.Context) DestinationFingerprintsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationFingerprintsArrayOutput)
}

func (i DestinationFingerprintsArray) ToOutput(ctx context.Context) pulumix.Output[[]*DestinationFingerprints] {
	return pulumix.Output[[]*DestinationFingerprints]{
		OutputState: i.ToDestinationFingerprintsArrayOutputWithContext(ctx).OutputState,
	}
}

// DestinationFingerprintsMapInput is an input type that accepts DestinationFingerprintsMap and DestinationFingerprintsMapOutput values.
// You can construct a concrete instance of `DestinationFingerprintsMapInput` via:
//
//	DestinationFingerprintsMap{ "key": DestinationFingerprintsArgs{...} }
type DestinationFingerprintsMapInput interface {
	pulumi.Input

	ToDestinationFingerprintsMapOutput() DestinationFingerprintsMapOutput
	ToDestinationFingerprintsMapOutputWithContext(context.Context) DestinationFingerprintsMapOutput
}

type DestinationFingerprintsMap map[string]DestinationFingerprintsInput

func (DestinationFingerprintsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationFingerprints)(nil)).Elem()
}

func (i DestinationFingerprintsMap) ToDestinationFingerprintsMapOutput() DestinationFingerprintsMapOutput {
	return i.ToDestinationFingerprintsMapOutputWithContext(context.Background())
}

func (i DestinationFingerprintsMap) ToDestinationFingerprintsMapOutputWithContext(ctx context.Context) DestinationFingerprintsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationFingerprintsMapOutput)
}

func (i DestinationFingerprintsMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DestinationFingerprints] {
	return pulumix.Output[map[string]*DestinationFingerprints]{
		OutputState: i.ToDestinationFingerprintsMapOutputWithContext(ctx).OutputState,
	}
}

type DestinationFingerprintsOutput struct{ *pulumi.OutputState }

func (DestinationFingerprintsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationFingerprints)(nil)).Elem()
}

func (o DestinationFingerprintsOutput) ToDestinationFingerprintsOutput() DestinationFingerprintsOutput {
	return o
}

func (o DestinationFingerprintsOutput) ToDestinationFingerprintsOutputWithContext(ctx context.Context) DestinationFingerprintsOutput {
	return o
}

func (o DestinationFingerprintsOutput) ToOutput(ctx context.Context) pulumix.Output[*DestinationFingerprints] {
	return pulumix.Output[*DestinationFingerprints]{
		OutputState: o.OutputState,
	}
}

// The unique identifier for the target destination within the Fivetran system.
func (o DestinationFingerprintsOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationFingerprints) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

func (o DestinationFingerprintsOutput) Fingerprints() DestinationFingerprintsFingerprintArrayOutput {
	return o.ApplyT(func(v *DestinationFingerprints) DestinationFingerprintsFingerprintArrayOutput { return v.Fingerprints }).(DestinationFingerprintsFingerprintArrayOutput)
}

type DestinationFingerprintsArrayOutput struct{ *pulumi.OutputState }

func (DestinationFingerprintsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationFingerprints)(nil)).Elem()
}

func (o DestinationFingerprintsArrayOutput) ToDestinationFingerprintsArrayOutput() DestinationFingerprintsArrayOutput {
	return o
}

func (o DestinationFingerprintsArrayOutput) ToDestinationFingerprintsArrayOutputWithContext(ctx context.Context) DestinationFingerprintsArrayOutput {
	return o
}

func (o DestinationFingerprintsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DestinationFingerprints] {
	return pulumix.Output[[]*DestinationFingerprints]{
		OutputState: o.OutputState,
	}
}

func (o DestinationFingerprintsArrayOutput) Index(i pulumi.IntInput) DestinationFingerprintsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationFingerprints {
		return vs[0].([]*DestinationFingerprints)[vs[1].(int)]
	}).(DestinationFingerprintsOutput)
}

type DestinationFingerprintsMapOutput struct{ *pulumi.OutputState }

func (DestinationFingerprintsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationFingerprints)(nil)).Elem()
}

func (o DestinationFingerprintsMapOutput) ToDestinationFingerprintsMapOutput() DestinationFingerprintsMapOutput {
	return o
}

func (o DestinationFingerprintsMapOutput) ToDestinationFingerprintsMapOutputWithContext(ctx context.Context) DestinationFingerprintsMapOutput {
	return o
}

func (o DestinationFingerprintsMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DestinationFingerprints] {
	return pulumix.Output[map[string]*DestinationFingerprints]{
		OutputState: o.OutputState,
	}
}

func (o DestinationFingerprintsMapOutput) MapIndex(k pulumi.StringInput) DestinationFingerprintsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationFingerprints {
		return vs[0].(map[string]*DestinationFingerprints)[vs[1].(string)]
	}).(DestinationFingerprintsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationFingerprintsInput)(nil)).Elem(), &DestinationFingerprints{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationFingerprintsArrayInput)(nil)).Elem(), DestinationFingerprintsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationFingerprintsMapInput)(nil)).Elem(), DestinationFingerprintsMap{})
	pulumi.RegisterOutputType(DestinationFingerprintsOutput{})
	pulumi.RegisterOutputType(DestinationFingerprintsArrayOutput{})
	pulumi.RegisterOutputType(DestinationFingerprintsMapOutput{})
}
