// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupDestinationCertificates(ctx *pulumi.Context, args *LookupDestinationCertificatesArgs, opts ...pulumi.InvokeOption) (*LookupDestinationCertificatesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDestinationCertificatesResult
	err := ctx.Invoke("fivetran:index/getDestinationCertificates:getDestinationCertificates", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDestinationCertificates.
type LookupDestinationCertificatesArgs struct {
	Certificates []GetDestinationCertificatesCertificate `pulumi:"certificates"`
	// The unique identifier for the resource. Equal to target destination id.
	Id string `pulumi:"id"`
}

// A collection of values returned by getDestinationCertificates.
type LookupDestinationCertificatesResult struct {
	Certificates []GetDestinationCertificatesCertificate `pulumi:"certificates"`
	// The unique identifier for the target destination within the Fivetran system.
	DestinationId string `pulumi:"destinationId"`
	// The unique identifier for the resource. Equal to target destination id.
	Id string `pulumi:"id"`
}

func LookupDestinationCertificatesOutput(ctx *pulumi.Context, args LookupDestinationCertificatesOutputArgs, opts ...pulumi.InvokeOption) LookupDestinationCertificatesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDestinationCertificatesResultOutput, error) {
			args := v.(LookupDestinationCertificatesArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupDestinationCertificatesResult
			secret, err := ctx.InvokePackageRaw("fivetran:index/getDestinationCertificates:getDestinationCertificates", args, &rv, "", opts...)
			if err != nil {
				return LookupDestinationCertificatesResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupDestinationCertificatesResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupDestinationCertificatesResultOutput), nil
			}
			return output, nil
		}).(LookupDestinationCertificatesResultOutput)
}

// A collection of arguments for invoking getDestinationCertificates.
type LookupDestinationCertificatesOutputArgs struct {
	Certificates GetDestinationCertificatesCertificateArrayInput `pulumi:"certificates"`
	// The unique identifier for the resource. Equal to target destination id.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupDestinationCertificatesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDestinationCertificatesArgs)(nil)).Elem()
}

// A collection of values returned by getDestinationCertificates.
type LookupDestinationCertificatesResultOutput struct{ *pulumi.OutputState }

func (LookupDestinationCertificatesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDestinationCertificatesResult)(nil)).Elem()
}

func (o LookupDestinationCertificatesResultOutput) ToLookupDestinationCertificatesResultOutput() LookupDestinationCertificatesResultOutput {
	return o
}

func (o LookupDestinationCertificatesResultOutput) ToLookupDestinationCertificatesResultOutputWithContext(ctx context.Context) LookupDestinationCertificatesResultOutput {
	return o
}

func (o LookupDestinationCertificatesResultOutput) Certificates() GetDestinationCertificatesCertificateArrayOutput {
	return o.ApplyT(func(v LookupDestinationCertificatesResult) []GetDestinationCertificatesCertificate {
		return v.Certificates
	}).(GetDestinationCertificatesCertificateArrayOutput)
}

// The unique identifier for the target destination within the Fivetran system.
func (o LookupDestinationCertificatesResultOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDestinationCertificatesResult) string { return v.DestinationId }).(pulumi.StringOutput)
}

// The unique identifier for the resource. Equal to target destination id.
func (o LookupDestinationCertificatesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDestinationCertificatesResult) string { return v.Id }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDestinationCertificatesResultOutput{})
}
