// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"errors"
	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// 1. To import an existing `fivetran_transformation_project` resource into your Terraform state, you need to get **Transformation Project ID** via API call `GET https://api.fivetran.com/v1/transformation-projects` to retrieve available projects.
//
// 2. Fetch project details for particular `project-id` using `GET https://api.fivetran.com/v1/transformation-projects/{project-id}` to ensure that this is the project you want to import.
//
// 3. Define an empty resource in your `.tf` configuration:
//
// hcl
//
// resource "fivetran_transformation_project" "my_imported_fivetran_transformation_project" {
//
// }
//
// 4. Run the `pulumi import` command:
//
// ```sh
// $ pulumi import fivetran:index/transformationProject:TransformationProject my_imported_fivetran_transformation_project {Transformation Project ID}
// ```
//
// 4. Use the `terraform state show` command to get the values from the state:
//
// terraform state show 'fivetran_transformation_project.my_imported_fivetran_transformation_project'
//
// 5. Copy the values and paste them to your `.tf` configuration.
type TransformationProject struct {
	pulumi.CustomResourceState

	// The timestamp of the transformation Project creation.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The unique identifier for the User within the Fivetran system who created the dbt Project.
	CreatedById pulumi.StringOutput `pulumi:"createdById"`
	// List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
	Errors pulumi.StringArrayOutput `pulumi:"errors"`
	// The unique identifier for the group within the Fivetran system.
	GroupId       pulumi.StringOutput                         `pulumi:"groupId"`
	ProjectConfig TransformationProjectProjectConfigPtrOutput `pulumi:"projectConfig"`
	// Specifies whether the setup tests should be run automatically. The default value is TRUE.
	RunTests pulumi.BoolOutput `pulumi:"runTests"`
	// Status of transformation Project (NOT_READY, READY, ERROR).
	Status pulumi.StringOutput `pulumi:"status"`
	// Transformation project type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewTransformationProject registers a new resource with the given unique name, arguments, and options.
func NewTransformationProject(ctx *pulumi.Context,
	name string, args *TransformationProjectArgs, opts ...pulumi.ResourceOption) (*TransformationProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TransformationProject
	err := ctx.RegisterResource("fivetran:index/transformationProject:TransformationProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransformationProject gets an existing TransformationProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransformationProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransformationProjectState, opts ...pulumi.ResourceOption) (*TransformationProject, error) {
	var resource TransformationProject
	err := ctx.ReadResource("fivetran:index/transformationProject:TransformationProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TransformationProject resources.
type transformationProjectState struct {
	// The timestamp of the transformation Project creation.
	CreatedAt *string `pulumi:"createdAt"`
	// The unique identifier for the User within the Fivetran system who created the dbt Project.
	CreatedById *string `pulumi:"createdById"`
	// List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
	Errors []string `pulumi:"errors"`
	// The unique identifier for the group within the Fivetran system.
	GroupId       *string                             `pulumi:"groupId"`
	ProjectConfig *TransformationProjectProjectConfig `pulumi:"projectConfig"`
	// Specifies whether the setup tests should be run automatically. The default value is TRUE.
	RunTests *bool `pulumi:"runTests"`
	// Status of transformation Project (NOT_READY, READY, ERROR).
	Status *string `pulumi:"status"`
	// Transformation project type.
	Type *string `pulumi:"type"`
}

type TransformationProjectState struct {
	// The timestamp of the transformation Project creation.
	CreatedAt pulumi.StringPtrInput
	// The unique identifier for the User within the Fivetran system who created the dbt Project.
	CreatedById pulumi.StringPtrInput
	// List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
	Errors pulumi.StringArrayInput
	// The unique identifier for the group within the Fivetran system.
	GroupId       pulumi.StringPtrInput
	ProjectConfig TransformationProjectProjectConfigPtrInput
	// Specifies whether the setup tests should be run automatically. The default value is TRUE.
	RunTests pulumi.BoolPtrInput
	// Status of transformation Project (NOT_READY, READY, ERROR).
	Status pulumi.StringPtrInput
	// Transformation project type.
	Type pulumi.StringPtrInput
}

func (TransformationProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*transformationProjectState)(nil)).Elem()
}

type transformationProjectArgs struct {
	// The unique identifier for the group within the Fivetran system.
	GroupId       string                              `pulumi:"groupId"`
	ProjectConfig *TransformationProjectProjectConfig `pulumi:"projectConfig"`
	// Specifies whether the setup tests should be run automatically. The default value is TRUE.
	RunTests *bool `pulumi:"runTests"`
	// Transformation project type.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a TransformationProject resource.
type TransformationProjectArgs struct {
	// The unique identifier for the group within the Fivetran system.
	GroupId       pulumi.StringInput
	ProjectConfig TransformationProjectProjectConfigPtrInput
	// Specifies whether the setup tests should be run automatically. The default value is TRUE.
	RunTests pulumi.BoolPtrInput
	// Transformation project type.
	Type pulumi.StringInput
}

func (TransformationProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transformationProjectArgs)(nil)).Elem()
}

type TransformationProjectInput interface {
	pulumi.Input

	ToTransformationProjectOutput() TransformationProjectOutput
	ToTransformationProjectOutputWithContext(ctx context.Context) TransformationProjectOutput
}

func (*TransformationProject) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformationProject)(nil)).Elem()
}

func (i *TransformationProject) ToTransformationProjectOutput() TransformationProjectOutput {
	return i.ToTransformationProjectOutputWithContext(context.Background())
}

func (i *TransformationProject) ToTransformationProjectOutputWithContext(ctx context.Context) TransformationProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformationProjectOutput)
}

// TransformationProjectArrayInput is an input type that accepts TransformationProjectArray and TransformationProjectArrayOutput values.
// You can construct a concrete instance of `TransformationProjectArrayInput` via:
//
//	TransformationProjectArray{ TransformationProjectArgs{...} }
type TransformationProjectArrayInput interface {
	pulumi.Input

	ToTransformationProjectArrayOutput() TransformationProjectArrayOutput
	ToTransformationProjectArrayOutputWithContext(context.Context) TransformationProjectArrayOutput
}

type TransformationProjectArray []TransformationProjectInput

func (TransformationProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransformationProject)(nil)).Elem()
}

func (i TransformationProjectArray) ToTransformationProjectArrayOutput() TransformationProjectArrayOutput {
	return i.ToTransformationProjectArrayOutputWithContext(context.Background())
}

func (i TransformationProjectArray) ToTransformationProjectArrayOutputWithContext(ctx context.Context) TransformationProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformationProjectArrayOutput)
}

// TransformationProjectMapInput is an input type that accepts TransformationProjectMap and TransformationProjectMapOutput values.
// You can construct a concrete instance of `TransformationProjectMapInput` via:
//
//	TransformationProjectMap{ "key": TransformationProjectArgs{...} }
type TransformationProjectMapInput interface {
	pulumi.Input

	ToTransformationProjectMapOutput() TransformationProjectMapOutput
	ToTransformationProjectMapOutputWithContext(context.Context) TransformationProjectMapOutput
}

type TransformationProjectMap map[string]TransformationProjectInput

func (TransformationProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransformationProject)(nil)).Elem()
}

func (i TransformationProjectMap) ToTransformationProjectMapOutput() TransformationProjectMapOutput {
	return i.ToTransformationProjectMapOutputWithContext(context.Background())
}

func (i TransformationProjectMap) ToTransformationProjectMapOutputWithContext(ctx context.Context) TransformationProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformationProjectMapOutput)
}

type TransformationProjectOutput struct{ *pulumi.OutputState }

func (TransformationProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformationProject)(nil)).Elem()
}

func (o TransformationProjectOutput) ToTransformationProjectOutput() TransformationProjectOutput {
	return o
}

func (o TransformationProjectOutput) ToTransformationProjectOutputWithContext(ctx context.Context) TransformationProjectOutput {
	return o
}

// The timestamp of the transformation Project creation.
func (o TransformationProjectOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TransformationProject) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The unique identifier for the User within the Fivetran system who created the dbt Project.
func (o TransformationProjectOutput) CreatedById() pulumi.StringOutput {
	return o.ApplyT(func(v *TransformationProject) pulumi.StringOutput { return v.CreatedById }).(pulumi.StringOutput)
}

// List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
func (o TransformationProjectOutput) Errors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TransformationProject) pulumi.StringArrayOutput { return v.Errors }).(pulumi.StringArrayOutput)
}

// The unique identifier for the group within the Fivetran system.
func (o TransformationProjectOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransformationProject) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

func (o TransformationProjectOutput) ProjectConfig() TransformationProjectProjectConfigPtrOutput {
	return o.ApplyT(func(v *TransformationProject) TransformationProjectProjectConfigPtrOutput { return v.ProjectConfig }).(TransformationProjectProjectConfigPtrOutput)
}

// Specifies whether the setup tests should be run automatically. The default value is TRUE.
func (o TransformationProjectOutput) RunTests() pulumi.BoolOutput {
	return o.ApplyT(func(v *TransformationProject) pulumi.BoolOutput { return v.RunTests }).(pulumi.BoolOutput)
}

// Status of transformation Project (NOT_READY, READY, ERROR).
func (o TransformationProjectOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *TransformationProject) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Transformation project type.
func (o TransformationProjectOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *TransformationProject) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type TransformationProjectArrayOutput struct{ *pulumi.OutputState }

func (TransformationProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransformationProject)(nil)).Elem()
}

func (o TransformationProjectArrayOutput) ToTransformationProjectArrayOutput() TransformationProjectArrayOutput {
	return o
}

func (o TransformationProjectArrayOutput) ToTransformationProjectArrayOutputWithContext(ctx context.Context) TransformationProjectArrayOutput {
	return o
}

func (o TransformationProjectArrayOutput) Index(i pulumi.IntInput) TransformationProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TransformationProject {
		return vs[0].([]*TransformationProject)[vs[1].(int)]
	}).(TransformationProjectOutput)
}

type TransformationProjectMapOutput struct{ *pulumi.OutputState }

func (TransformationProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransformationProject)(nil)).Elem()
}

func (o TransformationProjectMapOutput) ToTransformationProjectMapOutput() TransformationProjectMapOutput {
	return o
}

func (o TransformationProjectMapOutput) ToTransformationProjectMapOutputWithContext(ctx context.Context) TransformationProjectMapOutput {
	return o
}

func (o TransformationProjectMapOutput) MapIndex(k pulumi.StringInput) TransformationProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TransformationProject {
		return vs[0].(map[string]*TransformationProject)[vs[1].(string)]
	}).(TransformationProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransformationProjectInput)(nil)).Elem(), &TransformationProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformationProjectArrayInput)(nil)).Elem(), TransformationProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformationProjectMapInput)(nil)).Elem(), TransformationProjectMap{})
	pulumi.RegisterOutputType(TransformationProjectOutput{})
	pulumi.RegisterOutputType(TransformationProjectArrayOutput{})
	pulumi.RegisterOutputType(TransformationProjectMapOutput{})
}
