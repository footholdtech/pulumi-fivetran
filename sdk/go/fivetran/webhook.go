// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"errors"
	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to create, update, and delete webhooks.
//
// ## Import
//
// 1. To import an existing `fivetran_webhook` resource into your Terraform state, you need to get `webhook_id`.
//
// You can retrieve all webhooks using the [fivetran_webhooks data source](/docs/data-sources/webhooks).
//
// 2. Define an empty resource in your `.tf` configuration:
//
// hcl
//
// resource "fivetran_webhook" "my_imported_fivetran_webhook" {
//
// }
//
// 3. Run the `pulumi import` command:
//
// ```sh
// $ pulumi import fivetran:index/webhook:Webhook my_imported_fivetran_webhook {webhook_id}
// ```
//
// 4. Use the `terraform state show` command to get the values from the state:
//
// terraform state show 'fivetran_webhook.my_imported_fivetran_webhook'
//
// 5. Copy the values and paste them to your `.tf` configuration.
type Webhook struct {
	pulumi.CustomResourceState

	// Boolean, if set to true, webhooks are immediately sent in response to events
	Active pulumi.BoolOutput `pulumi:"active"`
	// The webhook creation timestamp
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The ID of the user who created the webhook.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// The array of event types
	Events pulumi.StringArrayOutput `pulumi:"events"`
	// The group ID
	GroupId pulumi.StringPtrOutput `pulumi:"groupId"`
	// Specifies whether the setup tests should be run
	RunTests pulumi.BoolPtrOutput `pulumi:"runTests"`
	// The secret string used for payload signing and masked in the response.
	Secret pulumi.StringOutput `pulumi:"secret"`
	// The webhook type (group, account)
	Type pulumi.StringOutput `pulumi:"type"`
	// Your webhooks URL endpoint for your application
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewWebhook registers a new resource with the given unique name, arguments, and options.
func NewWebhook(ctx *pulumi.Context,
	name string, args *WebhookArgs, opts ...pulumi.ResourceOption) (*Webhook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Active == nil {
		return nil, errors.New("invalid value for required argument 'Active'")
	}
	if args.Events == nil {
		return nil, errors.New("invalid value for required argument 'Events'")
	}
	if args.Secret == nil {
		return nil, errors.New("invalid value for required argument 'Secret'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.Secret != nil {
		args.Secret = pulumi.ToSecret(args.Secret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Webhook
	err := ctx.RegisterResource("fivetran:index/webhook:Webhook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebhook gets an existing Webhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebhookState, opts ...pulumi.ResourceOption) (*Webhook, error) {
	var resource Webhook
	err := ctx.ReadResource("fivetran:index/webhook:Webhook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Webhook resources.
type webhookState struct {
	// Boolean, if set to true, webhooks are immediately sent in response to events
	Active *bool `pulumi:"active"`
	// The webhook creation timestamp
	CreatedAt *string `pulumi:"createdAt"`
	// The ID of the user who created the webhook.
	CreatedBy *string `pulumi:"createdBy"`
	// The array of event types
	Events []string `pulumi:"events"`
	// The group ID
	GroupId *string `pulumi:"groupId"`
	// Specifies whether the setup tests should be run
	RunTests *bool `pulumi:"runTests"`
	// The secret string used for payload signing and masked in the response.
	Secret *string `pulumi:"secret"`
	// The webhook type (group, account)
	Type *string `pulumi:"type"`
	// Your webhooks URL endpoint for your application
	Url *string `pulumi:"url"`
}

type WebhookState struct {
	// Boolean, if set to true, webhooks are immediately sent in response to events
	Active pulumi.BoolPtrInput
	// The webhook creation timestamp
	CreatedAt pulumi.StringPtrInput
	// The ID of the user who created the webhook.
	CreatedBy pulumi.StringPtrInput
	// The array of event types
	Events pulumi.StringArrayInput
	// The group ID
	GroupId pulumi.StringPtrInput
	// Specifies whether the setup tests should be run
	RunTests pulumi.BoolPtrInput
	// The secret string used for payload signing and masked in the response.
	Secret pulumi.StringPtrInput
	// The webhook type (group, account)
	Type pulumi.StringPtrInput
	// Your webhooks URL endpoint for your application
	Url pulumi.StringPtrInput
}

func (WebhookState) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookState)(nil)).Elem()
}

type webhookArgs struct {
	// Boolean, if set to true, webhooks are immediately sent in response to events
	Active bool `pulumi:"active"`
	// The array of event types
	Events []string `pulumi:"events"`
	// The group ID
	GroupId *string `pulumi:"groupId"`
	// Specifies whether the setup tests should be run
	RunTests *bool `pulumi:"runTests"`
	// The secret string used for payload signing and masked in the response.
	Secret string `pulumi:"secret"`
	// The webhook type (group, account)
	Type string `pulumi:"type"`
	// Your webhooks URL endpoint for your application
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a Webhook resource.
type WebhookArgs struct {
	// Boolean, if set to true, webhooks are immediately sent in response to events
	Active pulumi.BoolInput
	// The array of event types
	Events pulumi.StringArrayInput
	// The group ID
	GroupId pulumi.StringPtrInput
	// Specifies whether the setup tests should be run
	RunTests pulumi.BoolPtrInput
	// The secret string used for payload signing and masked in the response.
	Secret pulumi.StringInput
	// The webhook type (group, account)
	Type pulumi.StringInput
	// Your webhooks URL endpoint for your application
	Url pulumi.StringInput
}

func (WebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookArgs)(nil)).Elem()
}

type WebhookInput interface {
	pulumi.Input

	ToWebhookOutput() WebhookOutput
	ToWebhookOutputWithContext(ctx context.Context) WebhookOutput
}

func (*Webhook) ElementType() reflect.Type {
	return reflect.TypeOf((**Webhook)(nil)).Elem()
}

func (i *Webhook) ToWebhookOutput() WebhookOutput {
	return i.ToWebhookOutputWithContext(context.Background())
}

func (i *Webhook) ToWebhookOutputWithContext(ctx context.Context) WebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookOutput)
}

// WebhookArrayInput is an input type that accepts WebhookArray and WebhookArrayOutput values.
// You can construct a concrete instance of `WebhookArrayInput` via:
//
//	WebhookArray{ WebhookArgs{...} }
type WebhookArrayInput interface {
	pulumi.Input

	ToWebhookArrayOutput() WebhookArrayOutput
	ToWebhookArrayOutputWithContext(context.Context) WebhookArrayOutput
}

type WebhookArray []WebhookInput

func (WebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Webhook)(nil)).Elem()
}

func (i WebhookArray) ToWebhookArrayOutput() WebhookArrayOutput {
	return i.ToWebhookArrayOutputWithContext(context.Background())
}

func (i WebhookArray) ToWebhookArrayOutputWithContext(ctx context.Context) WebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookArrayOutput)
}

// WebhookMapInput is an input type that accepts WebhookMap and WebhookMapOutput values.
// You can construct a concrete instance of `WebhookMapInput` via:
//
//	WebhookMap{ "key": WebhookArgs{...} }
type WebhookMapInput interface {
	pulumi.Input

	ToWebhookMapOutput() WebhookMapOutput
	ToWebhookMapOutputWithContext(context.Context) WebhookMapOutput
}

type WebhookMap map[string]WebhookInput

func (WebhookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Webhook)(nil)).Elem()
}

func (i WebhookMap) ToWebhookMapOutput() WebhookMapOutput {
	return i.ToWebhookMapOutputWithContext(context.Background())
}

func (i WebhookMap) ToWebhookMapOutputWithContext(ctx context.Context) WebhookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookMapOutput)
}

type WebhookOutput struct{ *pulumi.OutputState }

func (WebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Webhook)(nil)).Elem()
}

func (o WebhookOutput) ToWebhookOutput() WebhookOutput {
	return o
}

func (o WebhookOutput) ToWebhookOutputWithContext(ctx context.Context) WebhookOutput {
	return o
}

// Boolean, if set to true, webhooks are immediately sent in response to events
func (o WebhookOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *Webhook) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// The webhook creation timestamp
func (o WebhookOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the user who created the webhook.
func (o WebhookOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// The array of event types
func (o WebhookOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringArrayOutput { return v.Events }).(pulumi.StringArrayOutput)
}

// The group ID
func (o WebhookOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringPtrOutput { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Specifies whether the setup tests should be run
func (o WebhookOutput) RunTests() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Webhook) pulumi.BoolPtrOutput { return v.RunTests }).(pulumi.BoolPtrOutput)
}

// The secret string used for payload signing and masked in the response.
func (o WebhookOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringOutput { return v.Secret }).(pulumi.StringOutput)
}

// The webhook type (group, account)
func (o WebhookOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Your webhooks URL endpoint for your application
func (o WebhookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type WebhookArrayOutput struct{ *pulumi.OutputState }

func (WebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Webhook)(nil)).Elem()
}

func (o WebhookArrayOutput) ToWebhookArrayOutput() WebhookArrayOutput {
	return o
}

func (o WebhookArrayOutput) ToWebhookArrayOutputWithContext(ctx context.Context) WebhookArrayOutput {
	return o
}

func (o WebhookArrayOutput) Index(i pulumi.IntInput) WebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Webhook {
		return vs[0].([]*Webhook)[vs[1].(int)]
	}).(WebhookOutput)
}

type WebhookMapOutput struct{ *pulumi.OutputState }

func (WebhookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Webhook)(nil)).Elem()
}

func (o WebhookMapOutput) ToWebhookMapOutput() WebhookMapOutput {
	return o
}

func (o WebhookMapOutput) ToWebhookMapOutputWithContext(ctx context.Context) WebhookMapOutput {
	return o
}

func (o WebhookMapOutput) MapIndex(k pulumi.StringInput) WebhookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Webhook {
		return vs[0].(map[string]*Webhook)[vs[1].(string)]
	}).(WebhookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookInput)(nil)).Elem(), &Webhook{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookArrayInput)(nil)).Elem(), WebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookMapInput)(nil)).Elem(), WebhookMap{})
	pulumi.RegisterOutputType(WebhookOutput{})
	pulumi.RegisterOutputType(WebhookArrayOutput{})
	pulumi.RegisterOutputType(WebhookMapOutput{})
}
