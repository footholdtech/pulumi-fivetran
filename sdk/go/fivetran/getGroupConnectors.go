// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source returns a list of information about all connectors within a group in your Fivetran account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fivetran.GetGroupConnectors(ctx, &fivetran.GetGroupConnectorsArgs{
//				Id:     "anonymous_mystery",
//				Schema: pulumi.StringRef("connector_schema_name"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetGroupConnectors(ctx *pulumi.Context, args *GetGroupConnectorsArgs, opts ...pulumi.InvokeOption) (*GetGroupConnectorsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetGroupConnectorsResult
	err := ctx.Invoke("fivetran:index/getGroupConnectors:getGroupConnectors", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGroupConnectors.
type GetGroupConnectorsArgs struct {
	Connectors []GetGroupConnectorsConnector `pulumi:"connectors"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// Optional filter. When defined, the data source will only contain information for the connector with the specified schema name.
	Schema *string `pulumi:"schema"`
}

// A collection of values returned by getGroupConnectors.
type GetGroupConnectorsResult struct {
	Connectors []GetGroupConnectorsConnector `pulumi:"connectors"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// Optional filter. When defined, the data source will only contain information for the connector with the specified schema name.
	Schema *string `pulumi:"schema"`
}

func GetGroupConnectorsOutput(ctx *pulumi.Context, args GetGroupConnectorsOutputArgs, opts ...pulumi.InvokeOption) GetGroupConnectorsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetGroupConnectorsResultOutput, error) {
			args := v.(GetGroupConnectorsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("fivetran:index/getGroupConnectors:getGroupConnectors", args, GetGroupConnectorsResultOutput{}, options).(GetGroupConnectorsResultOutput), nil
		}).(GetGroupConnectorsResultOutput)
}

// A collection of arguments for invoking getGroupConnectors.
type GetGroupConnectorsOutputArgs struct {
	Connectors GetGroupConnectorsConnectorArrayInput `pulumi:"connectors"`
	// The ID of this resource.
	Id pulumi.StringInput `pulumi:"id"`
	// Optional filter. When defined, the data source will only contain information for the connector with the specified schema name.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
}

func (GetGroupConnectorsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupConnectorsArgs)(nil)).Elem()
}

// A collection of values returned by getGroupConnectors.
type GetGroupConnectorsResultOutput struct{ *pulumi.OutputState }

func (GetGroupConnectorsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupConnectorsResult)(nil)).Elem()
}

func (o GetGroupConnectorsResultOutput) ToGetGroupConnectorsResultOutput() GetGroupConnectorsResultOutput {
	return o
}

func (o GetGroupConnectorsResultOutput) ToGetGroupConnectorsResultOutputWithContext(ctx context.Context) GetGroupConnectorsResultOutput {
	return o
}

func (o GetGroupConnectorsResultOutput) Connectors() GetGroupConnectorsConnectorArrayOutput {
	return o.ApplyT(func(v GetGroupConnectorsResult) []GetGroupConnectorsConnector { return v.Connectors }).(GetGroupConnectorsConnectorArrayOutput)
}

// The ID of this resource.
func (o GetGroupConnectorsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupConnectorsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Optional filter. When defined, the data source will only contain information for the connector with the specified schema name.
func (o GetGroupConnectorsResultOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGroupConnectorsResult) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGroupConnectorsResultOutput{})
}
