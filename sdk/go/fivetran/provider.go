// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the fivetran package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	ApiKey    pulumi.StringPtrOutput `pulumi:"apiKey"`
	ApiSecret pulumi.StringPtrOutput `pulumi:"apiSecret"`
	ApiUrl    pulumi.StringPtrOutput `pulumi:"apiUrl"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.ApiKey == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "FIVETRAN_APIKEY"); d != nil {
			args.ApiKey = pulumi.StringPtr(d.(string))
		}
	}
	if args.ApiSecret == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "FIVETRAN_APISECRET"); d != nil {
			args.ApiSecret = pulumi.StringPtr(d.(string))
		}
	}
	if args.ApiUrl == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "FIVETRAN_APIURL"); d != nil {
			args.ApiUrl = pulumi.StringPtr(d.(string))
		}
	}
	if args.ApiSecret != nil {
		args.ApiSecret = pulumi.ToSecret(args.ApiSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:fivetran", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	ApiKey    *string `pulumi:"apiKey"`
	ApiSecret *string `pulumi:"apiSecret"`
	ApiUrl    *string `pulumi:"apiUrl"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	ApiKey    pulumi.StringPtrInput
	ApiSecret pulumi.StringPtrInput
	ApiUrl    pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

// This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
func (r *Provider) TerraformConfig(ctx *pulumi.Context) (ProviderTerraformConfigResultOutput, error) {
	out, err := ctx.Call("pulumi:providers:fivetran/terraformConfig", nil, ProviderTerraformConfigResultOutput{}, r)
	if err != nil {
		return ProviderTerraformConfigResultOutput{}, err
	}
	return out.(ProviderTerraformConfigResultOutput), nil
}

type ProviderTerraformConfigResult struct {
	Result map[string]interface{} `pulumi:"result"`
}

type ProviderTerraformConfigResultOutput struct{ *pulumi.OutputState }

func (ProviderTerraformConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderTerraformConfigResult)(nil)).Elem()
}

func (o ProviderTerraformConfigResultOutput) Result() pulumi.MapOutput {
	return o.ApplyT(func(v ProviderTerraformConfigResult) map[string]interface{} { return v.Result }).(pulumi.MapOutput)
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func (o ProviderOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ApiKey }).(pulumi.StringPtrOutput)
}

func (o ProviderOutput) ApiSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ApiSecret }).(pulumi.StringPtrOutput)
}

func (o ProviderOutput) ApiUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ApiUrl }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderTerraformConfigResultOutput{})
}
