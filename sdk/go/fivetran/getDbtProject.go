// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source returns a dbt Project object.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fivetran.LookupDbtProject(ctx, &fivetran.LookupDbtProjectArgs{
//				Id: "project_id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDbtProject(ctx *pulumi.Context, args *LookupDbtProjectArgs, opts ...pulumi.InvokeOption) (*LookupDbtProjectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDbtProjectResult
	err := ctx.Invoke("fivetran:index/getDbtProject:getDbtProject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDbtProject.
type LookupDbtProjectArgs struct {
	// The unique identifier for the dbt Project within the Fivetran system.
	Id string `pulumi:"id"`
	// The collection of dbt Models.
	Models []GetDbtProjectModel `pulumi:"models"`
}

// A collection of values returned by getDbtProject.
type LookupDbtProjectResult struct {
	// The timestamp of the dbt Project creation.
	CreatedAt string `pulumi:"createdAt"`
	// The unique identifier for the User within the Fivetran system who created the dbt Project.
	CreatedById string `pulumi:"createdById"`
	// The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
	DbtVersion string `pulumi:"dbtVersion"`
	// Default schema in destination. This production schema will contain your transformed data.
	DefaultSchema   string   `pulumi:"defaultSchema"`
	EnvironmentVars []string `pulumi:"environmentVars"`
	// The unique identifier for the group within the Fivetran system.
	GroupId string `pulumi:"groupId"`
	// The unique identifier for the dbt Project within the Fivetran system.
	Id string `pulumi:"id"`
	// The collection of dbt Models.
	Models []GetDbtProjectModel `pulumi:"models"`
	// Type specific dbt Project configuration parameters.
	ProjectConfigs []GetDbtProjectProjectConfig `pulumi:"projectConfigs"`
	// Public key to grant Fivetran SSH access to git repository.
	PublicKey string `pulumi:"publicKey"`
	// Status of dbt Project (NOT_READY, READY, ERROR).
	Status string `pulumi:"status"`
	// Target name to set or override the value from the deployment.yaml
	TargetName string `pulumi:"targetName"`
	// The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
	Threads int `pulumi:"threads"`
	// Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
	Type string `pulumi:"type"`
}

func LookupDbtProjectOutput(ctx *pulumi.Context, args LookupDbtProjectOutputArgs, opts ...pulumi.InvokeOption) LookupDbtProjectResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDbtProjectResult, error) {
			args := v.(LookupDbtProjectArgs)
			r, err := LookupDbtProject(ctx, &args, opts...)
			var s LookupDbtProjectResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDbtProjectResultOutput)
}

// A collection of arguments for invoking getDbtProject.
type LookupDbtProjectOutputArgs struct {
	// The unique identifier for the dbt Project within the Fivetran system.
	Id pulumi.StringInput `pulumi:"id"`
	// The collection of dbt Models.
	Models GetDbtProjectModelArrayInput `pulumi:"models"`
}

func (LookupDbtProjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDbtProjectArgs)(nil)).Elem()
}

// A collection of values returned by getDbtProject.
type LookupDbtProjectResultOutput struct{ *pulumi.OutputState }

func (LookupDbtProjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDbtProjectResult)(nil)).Elem()
}

func (o LookupDbtProjectResultOutput) ToLookupDbtProjectResultOutput() LookupDbtProjectResultOutput {
	return o
}

func (o LookupDbtProjectResultOutput) ToLookupDbtProjectResultOutputWithContext(ctx context.Context) LookupDbtProjectResultOutput {
	return o
}

func (o LookupDbtProjectResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupDbtProjectResult] {
	return pulumix.Output[LookupDbtProjectResult]{
		OutputState: o.OutputState,
	}
}

// The timestamp of the dbt Project creation.
func (o LookupDbtProjectResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbtProjectResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The unique identifier for the User within the Fivetran system who created the dbt Project.
func (o LookupDbtProjectResultOutput) CreatedById() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbtProjectResult) string { return v.CreatedById }).(pulumi.StringOutput)
}

// The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
func (o LookupDbtProjectResultOutput) DbtVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbtProjectResult) string { return v.DbtVersion }).(pulumi.StringOutput)
}

// Default schema in destination. This production schema will contain your transformed data.
func (o LookupDbtProjectResultOutput) DefaultSchema() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbtProjectResult) string { return v.DefaultSchema }).(pulumi.StringOutput)
}

func (o LookupDbtProjectResultOutput) EnvironmentVars() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDbtProjectResult) []string { return v.EnvironmentVars }).(pulumi.StringArrayOutput)
}

// The unique identifier for the group within the Fivetran system.
func (o LookupDbtProjectResultOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbtProjectResult) string { return v.GroupId }).(pulumi.StringOutput)
}

// The unique identifier for the dbt Project within the Fivetran system.
func (o LookupDbtProjectResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbtProjectResult) string { return v.Id }).(pulumi.StringOutput)
}

// The collection of dbt Models.
func (o LookupDbtProjectResultOutput) Models() GetDbtProjectModelArrayOutput {
	return o.ApplyT(func(v LookupDbtProjectResult) []GetDbtProjectModel { return v.Models }).(GetDbtProjectModelArrayOutput)
}

// Type specific dbt Project configuration parameters.
func (o LookupDbtProjectResultOutput) ProjectConfigs() GetDbtProjectProjectConfigArrayOutput {
	return o.ApplyT(func(v LookupDbtProjectResult) []GetDbtProjectProjectConfig { return v.ProjectConfigs }).(GetDbtProjectProjectConfigArrayOutput)
}

// Public key to grant Fivetran SSH access to git repository.
func (o LookupDbtProjectResultOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbtProjectResult) string { return v.PublicKey }).(pulumi.StringOutput)
}

// Status of dbt Project (NOT_READY, READY, ERROR).
func (o LookupDbtProjectResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbtProjectResult) string { return v.Status }).(pulumi.StringOutput)
}

// Target name to set or override the value from the deployment.yaml
func (o LookupDbtProjectResultOutput) TargetName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbtProjectResult) string { return v.TargetName }).(pulumi.StringOutput)
}

// The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
func (o LookupDbtProjectResultOutput) Threads() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDbtProjectResult) int { return v.Threads }).(pulumi.IntOutput)
}

// Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
func (o LookupDbtProjectResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDbtProjectResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDbtProjectResultOutput{})
}
