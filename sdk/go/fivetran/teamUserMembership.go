// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"errors"
	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to create, update, and delete user membership for teams
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fivetran.NewTeamUserMembership(ctx, "test_team_user_membership", &fivetran.TeamUserMembershipArgs{
//				TeamId: pulumi.String("test_team"),
//				Users: fivetran.TeamUserMembershipUserArray{
//					&fivetran.TeamUserMembershipUserArgs{
//						UserId: pulumi.String("test_user"),
//						Role:   pulumi.String("Connector Administrator"),
//					},
//					&fivetran.TeamUserMembershipUserArgs{
//						UserId: pulumi.String("test_user"),
//						Role:   pulumi.String("Connector Administrator"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// 1. To import an existing `fivetran_team_user_membership` resource into your Terraform state, you need to get `team_id` and `user_id`
//
// You can retrieve all teams using the [fivetran_teams data source](/docs/data-sources/teams).
//
// 2. Define an empty resource in your `.tf` configuration:
//
// hcl
//
// resource "fivetran_team_user_membership" "my_imported_fivetran_team_user_membership" {
//
// }
//
// 3. Run the `pulumi import` command:
//
// ```sh
// $ pulumi import fivetran:index/teamUserMembership:TeamUserMembership my_imported_fivetran_team_user_membership {team_id}
// ```
//
// 4. Use the `terraform state show` command to get the values from the state:
//
// terraform state show 'fivetran_team_user_membership.my_imported_fivetran_team_user_membership'
//
// 5. Copy the values and paste them to your `.tf` configuration.
type TeamUserMembership struct {
	pulumi.CustomResourceState

	// The unique identifier for the team within your account.
	TeamId pulumi.StringOutput               `pulumi:"teamId"`
	Users  TeamUserMembershipUserArrayOutput `pulumi:"users"`
}

// NewTeamUserMembership registers a new resource with the given unique name, arguments, and options.
func NewTeamUserMembership(ctx *pulumi.Context,
	name string, args *TeamUserMembershipArgs, opts ...pulumi.ResourceOption) (*TeamUserMembership, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TeamUserMembership
	err := ctx.RegisterResource("fivetran:index/teamUserMembership:TeamUserMembership", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamUserMembership gets an existing TeamUserMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamUserMembership(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamUserMembershipState, opts ...pulumi.ResourceOption) (*TeamUserMembership, error) {
	var resource TeamUserMembership
	err := ctx.ReadResource("fivetran:index/teamUserMembership:TeamUserMembership", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamUserMembership resources.
type teamUserMembershipState struct {
	// The unique identifier for the team within your account.
	TeamId *string                  `pulumi:"teamId"`
	Users  []TeamUserMembershipUser `pulumi:"users"`
}

type TeamUserMembershipState struct {
	// The unique identifier for the team within your account.
	TeamId pulumi.StringPtrInput
	Users  TeamUserMembershipUserArrayInput
}

func (TeamUserMembershipState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamUserMembershipState)(nil)).Elem()
}

type teamUserMembershipArgs struct {
	// The unique identifier for the team within your account.
	TeamId string                   `pulumi:"teamId"`
	Users  []TeamUserMembershipUser `pulumi:"users"`
}

// The set of arguments for constructing a TeamUserMembership resource.
type TeamUserMembershipArgs struct {
	// The unique identifier for the team within your account.
	TeamId pulumi.StringInput
	Users  TeamUserMembershipUserArrayInput
}

func (TeamUserMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamUserMembershipArgs)(nil)).Elem()
}

type TeamUserMembershipInput interface {
	pulumi.Input

	ToTeamUserMembershipOutput() TeamUserMembershipOutput
	ToTeamUserMembershipOutputWithContext(ctx context.Context) TeamUserMembershipOutput
}

func (*TeamUserMembership) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamUserMembership)(nil)).Elem()
}

func (i *TeamUserMembership) ToTeamUserMembershipOutput() TeamUserMembershipOutput {
	return i.ToTeamUserMembershipOutputWithContext(context.Background())
}

func (i *TeamUserMembership) ToTeamUserMembershipOutputWithContext(ctx context.Context) TeamUserMembershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamUserMembershipOutput)
}

// TeamUserMembershipArrayInput is an input type that accepts TeamUserMembershipArray and TeamUserMembershipArrayOutput values.
// You can construct a concrete instance of `TeamUserMembershipArrayInput` via:
//
//	TeamUserMembershipArray{ TeamUserMembershipArgs{...} }
type TeamUserMembershipArrayInput interface {
	pulumi.Input

	ToTeamUserMembershipArrayOutput() TeamUserMembershipArrayOutput
	ToTeamUserMembershipArrayOutputWithContext(context.Context) TeamUserMembershipArrayOutput
}

type TeamUserMembershipArray []TeamUserMembershipInput

func (TeamUserMembershipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamUserMembership)(nil)).Elem()
}

func (i TeamUserMembershipArray) ToTeamUserMembershipArrayOutput() TeamUserMembershipArrayOutput {
	return i.ToTeamUserMembershipArrayOutputWithContext(context.Background())
}

func (i TeamUserMembershipArray) ToTeamUserMembershipArrayOutputWithContext(ctx context.Context) TeamUserMembershipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamUserMembershipArrayOutput)
}

// TeamUserMembershipMapInput is an input type that accepts TeamUserMembershipMap and TeamUserMembershipMapOutput values.
// You can construct a concrete instance of `TeamUserMembershipMapInput` via:
//
//	TeamUserMembershipMap{ "key": TeamUserMembershipArgs{...} }
type TeamUserMembershipMapInput interface {
	pulumi.Input

	ToTeamUserMembershipMapOutput() TeamUserMembershipMapOutput
	ToTeamUserMembershipMapOutputWithContext(context.Context) TeamUserMembershipMapOutput
}

type TeamUserMembershipMap map[string]TeamUserMembershipInput

func (TeamUserMembershipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamUserMembership)(nil)).Elem()
}

func (i TeamUserMembershipMap) ToTeamUserMembershipMapOutput() TeamUserMembershipMapOutput {
	return i.ToTeamUserMembershipMapOutputWithContext(context.Background())
}

func (i TeamUserMembershipMap) ToTeamUserMembershipMapOutputWithContext(ctx context.Context) TeamUserMembershipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamUserMembershipMapOutput)
}

type TeamUserMembershipOutput struct{ *pulumi.OutputState }

func (TeamUserMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamUserMembership)(nil)).Elem()
}

func (o TeamUserMembershipOutput) ToTeamUserMembershipOutput() TeamUserMembershipOutput {
	return o
}

func (o TeamUserMembershipOutput) ToTeamUserMembershipOutputWithContext(ctx context.Context) TeamUserMembershipOutput {
	return o
}

// The unique identifier for the team within your account.
func (o TeamUserMembershipOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamUserMembership) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

func (o TeamUserMembershipOutput) Users() TeamUserMembershipUserArrayOutput {
	return o.ApplyT(func(v *TeamUserMembership) TeamUserMembershipUserArrayOutput { return v.Users }).(TeamUserMembershipUserArrayOutput)
}

type TeamUserMembershipArrayOutput struct{ *pulumi.OutputState }

func (TeamUserMembershipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamUserMembership)(nil)).Elem()
}

func (o TeamUserMembershipArrayOutput) ToTeamUserMembershipArrayOutput() TeamUserMembershipArrayOutput {
	return o
}

func (o TeamUserMembershipArrayOutput) ToTeamUserMembershipArrayOutputWithContext(ctx context.Context) TeamUserMembershipArrayOutput {
	return o
}

func (o TeamUserMembershipArrayOutput) Index(i pulumi.IntInput) TeamUserMembershipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TeamUserMembership {
		return vs[0].([]*TeamUserMembership)[vs[1].(int)]
	}).(TeamUserMembershipOutput)
}

type TeamUserMembershipMapOutput struct{ *pulumi.OutputState }

func (TeamUserMembershipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamUserMembership)(nil)).Elem()
}

func (o TeamUserMembershipMapOutput) ToTeamUserMembershipMapOutput() TeamUserMembershipMapOutput {
	return o
}

func (o TeamUserMembershipMapOutput) ToTeamUserMembershipMapOutputWithContext(ctx context.Context) TeamUserMembershipMapOutput {
	return o
}

func (o TeamUserMembershipMapOutput) MapIndex(k pulumi.StringInput) TeamUserMembershipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TeamUserMembership {
		return vs[0].(map[string]*TeamUserMembership)[vs[1].(string)]
	}).(TeamUserMembershipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamUserMembershipInput)(nil)).Elem(), &TeamUserMembership{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamUserMembershipArrayInput)(nil)).Elem(), TeamUserMembershipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamUserMembershipMapInput)(nil)).Elem(), TeamUserMembershipMap{})
	pulumi.RegisterOutputType(TeamUserMembershipOutput{})
	pulumi.RegisterOutputType(TeamUserMembershipArrayOutput{})
	pulumi.RegisterOutputType(TeamUserMembershipMapOutput{})
}
