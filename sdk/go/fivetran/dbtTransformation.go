// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"errors"
	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource is in ALPHA state.
//
// This resource allows you to add, manage and delete dbt Transformations for existing dbt Model.
// To retrieve available dbt Models use this [Retrieve dbt Project models](https://fivetran.com/docs/rest-api/dbt-transformation-management#retrievedbtprojectmodels) endpoint.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fivetran.NewDbtTransformation(ctx, "transformation", &fivetran.DbtTransformationArgs{
//				DbtModelName: pulumi.String("dbt_model_name"),
//				DbtProjectId: pulumi.String("dbt_project_id"),
//				Paused:       pulumi.Bool(false),
//				RunTests:     pulumi.Bool(false),
//				Schedule: &fivetran.DbtTransformationScheduleArgs{
//					DaysOfWeeks: pulumi.StringArray{
//						pulumi.String("MONDAY"),
//						pulumi.String("SATURDAY"),
//					},
//					ScheduleType: pulumi.String("TIME_OF_DAY"),
//					TimeOfDay:    pulumi.String("12:00"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// 1. To import an existing `fivetran_dbt_transformation` resource into your Terraform state, you need to get **Transformation ID** on the transformation page in your Fivetran dashboard. 2. Define an empty resource in your `.tf` configurationhcl resource "fivetran_dbt_transformation" "my_imported_fivetran_dbt_transformation" { }
//
// ```sh
//
//	$ pulumi import fivetran:index/dbtTransformation:DbtTransformation
//
// Run the `terraform import` command
// ```
//
// ```sh
//
//	$ pulumi import fivetran:index/dbtTransformation:DbtTransformation my_imported_fivetran_dbt_transformation {Transformation ID}
//
// ```
//
//  4. Use the `terraform state show` command to get the values from the stateterraform state show 'fivetran_dbt_transformation.my_imported_fivetran_dbt_transformation' 5. Copy the values and paste them to your `.tf` configuration.
type DbtTransformation struct {
	pulumi.CustomResourceState

	// Identifiers of related connectors.
	ConnectorIds pulumi.StringArrayOutput `pulumi:"connectorIds"`
	// The timestamp of the dbt Transformation creation.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The unique identifier for the dbt Model within the Fivetran system.
	DbtModelId pulumi.StringOutput `pulumi:"dbtModelId"`
	// Target dbt Model name.
	DbtModelName pulumi.StringOutput `pulumi:"dbtModelName"`
	// The unique identifier for the dbt Project within the Fivetran system.
	DbtProjectId pulumi.StringOutput `pulumi:"dbtProjectId"`
	// Identifiers of related models.
	ModelIds pulumi.StringArrayOutput `pulumi:"modelIds"`
	// The dbt Model name.
	OutputModelName pulumi.StringOutput `pulumi:"outputModelName"`
	// The field indicating whether the transformation will be created in paused state. By default, the value is false.
	Paused pulumi.BoolOutput `pulumi:"paused"`
	// The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
	RunTests pulumi.BoolOutput `pulumi:"runTests"`
	// dbt Transformation schedule parameters.
	Schedule DbtTransformationScheduleOutput `pulumi:"schedule"`
}

// NewDbtTransformation registers a new resource with the given unique name, arguments, and options.
func NewDbtTransformation(ctx *pulumi.Context,
	name string, args *DbtTransformationArgs, opts ...pulumi.ResourceOption) (*DbtTransformation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbtModelName == nil {
		return nil, errors.New("invalid value for required argument 'DbtModelName'")
	}
	if args.DbtProjectId == nil {
		return nil, errors.New("invalid value for required argument 'DbtProjectId'")
	}
	if args.Paused == nil {
		return nil, errors.New("invalid value for required argument 'Paused'")
	}
	if args.RunTests == nil {
		return nil, errors.New("invalid value for required argument 'RunTests'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbtTransformation
	err := ctx.RegisterResource("fivetran:index/dbtTransformation:DbtTransformation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbtTransformation gets an existing DbtTransformation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbtTransformation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbtTransformationState, opts ...pulumi.ResourceOption) (*DbtTransformation, error) {
	var resource DbtTransformation
	err := ctx.ReadResource("fivetran:index/dbtTransformation:DbtTransformation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbtTransformation resources.
type dbtTransformationState struct {
	// Identifiers of related connectors.
	ConnectorIds []string `pulumi:"connectorIds"`
	// The timestamp of the dbt Transformation creation.
	CreatedAt *string `pulumi:"createdAt"`
	// The unique identifier for the dbt Model within the Fivetran system.
	DbtModelId *string `pulumi:"dbtModelId"`
	// Target dbt Model name.
	DbtModelName *string `pulumi:"dbtModelName"`
	// The unique identifier for the dbt Project within the Fivetran system.
	DbtProjectId *string `pulumi:"dbtProjectId"`
	// Identifiers of related models.
	ModelIds []string `pulumi:"modelIds"`
	// The dbt Model name.
	OutputModelName *string `pulumi:"outputModelName"`
	// The field indicating whether the transformation will be created in paused state. By default, the value is false.
	Paused *bool `pulumi:"paused"`
	// The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
	RunTests *bool `pulumi:"runTests"`
	// dbt Transformation schedule parameters.
	Schedule *DbtTransformationSchedule `pulumi:"schedule"`
}

type DbtTransformationState struct {
	// Identifiers of related connectors.
	ConnectorIds pulumi.StringArrayInput
	// The timestamp of the dbt Transformation creation.
	CreatedAt pulumi.StringPtrInput
	// The unique identifier for the dbt Model within the Fivetran system.
	DbtModelId pulumi.StringPtrInput
	// Target dbt Model name.
	DbtModelName pulumi.StringPtrInput
	// The unique identifier for the dbt Project within the Fivetran system.
	DbtProjectId pulumi.StringPtrInput
	// Identifiers of related models.
	ModelIds pulumi.StringArrayInput
	// The dbt Model name.
	OutputModelName pulumi.StringPtrInput
	// The field indicating whether the transformation will be created in paused state. By default, the value is false.
	Paused pulumi.BoolPtrInput
	// The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
	RunTests pulumi.BoolPtrInput
	// dbt Transformation schedule parameters.
	Schedule DbtTransformationSchedulePtrInput
}

func (DbtTransformationState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbtTransformationState)(nil)).Elem()
}

type dbtTransformationArgs struct {
	// Target dbt Model name.
	DbtModelName string `pulumi:"dbtModelName"`
	// The unique identifier for the dbt Project within the Fivetran system.
	DbtProjectId string `pulumi:"dbtProjectId"`
	// The field indicating whether the transformation will be created in paused state. By default, the value is false.
	Paused bool `pulumi:"paused"`
	// The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
	RunTests bool `pulumi:"runTests"`
	// dbt Transformation schedule parameters.
	Schedule DbtTransformationSchedule `pulumi:"schedule"`
}

// The set of arguments for constructing a DbtTransformation resource.
type DbtTransformationArgs struct {
	// Target dbt Model name.
	DbtModelName pulumi.StringInput
	// The unique identifier for the dbt Project within the Fivetran system.
	DbtProjectId pulumi.StringInput
	// The field indicating whether the transformation will be created in paused state. By default, the value is false.
	Paused pulumi.BoolInput
	// The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
	RunTests pulumi.BoolInput
	// dbt Transformation schedule parameters.
	Schedule DbtTransformationScheduleInput
}

func (DbtTransformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbtTransformationArgs)(nil)).Elem()
}

type DbtTransformationInput interface {
	pulumi.Input

	ToDbtTransformationOutput() DbtTransformationOutput
	ToDbtTransformationOutputWithContext(ctx context.Context) DbtTransformationOutput
}

func (*DbtTransformation) ElementType() reflect.Type {
	return reflect.TypeOf((**DbtTransformation)(nil)).Elem()
}

func (i *DbtTransformation) ToDbtTransformationOutput() DbtTransformationOutput {
	return i.ToDbtTransformationOutputWithContext(context.Background())
}

func (i *DbtTransformation) ToDbtTransformationOutputWithContext(ctx context.Context) DbtTransformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbtTransformationOutput)
}

// DbtTransformationArrayInput is an input type that accepts DbtTransformationArray and DbtTransformationArrayOutput values.
// You can construct a concrete instance of `DbtTransformationArrayInput` via:
//
//	DbtTransformationArray{ DbtTransformationArgs{...} }
type DbtTransformationArrayInput interface {
	pulumi.Input

	ToDbtTransformationArrayOutput() DbtTransformationArrayOutput
	ToDbtTransformationArrayOutputWithContext(context.Context) DbtTransformationArrayOutput
}

type DbtTransformationArray []DbtTransformationInput

func (DbtTransformationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbtTransformation)(nil)).Elem()
}

func (i DbtTransformationArray) ToDbtTransformationArrayOutput() DbtTransformationArrayOutput {
	return i.ToDbtTransformationArrayOutputWithContext(context.Background())
}

func (i DbtTransformationArray) ToDbtTransformationArrayOutputWithContext(ctx context.Context) DbtTransformationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbtTransformationArrayOutput)
}

// DbtTransformationMapInput is an input type that accepts DbtTransformationMap and DbtTransformationMapOutput values.
// You can construct a concrete instance of `DbtTransformationMapInput` via:
//
//	DbtTransformationMap{ "key": DbtTransformationArgs{...} }
type DbtTransformationMapInput interface {
	pulumi.Input

	ToDbtTransformationMapOutput() DbtTransformationMapOutput
	ToDbtTransformationMapOutputWithContext(context.Context) DbtTransformationMapOutput
}

type DbtTransformationMap map[string]DbtTransformationInput

func (DbtTransformationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbtTransformation)(nil)).Elem()
}

func (i DbtTransformationMap) ToDbtTransformationMapOutput() DbtTransformationMapOutput {
	return i.ToDbtTransformationMapOutputWithContext(context.Background())
}

func (i DbtTransformationMap) ToDbtTransformationMapOutputWithContext(ctx context.Context) DbtTransformationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbtTransformationMapOutput)
}

type DbtTransformationOutput struct{ *pulumi.OutputState }

func (DbtTransformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbtTransformation)(nil)).Elem()
}

func (o DbtTransformationOutput) ToDbtTransformationOutput() DbtTransformationOutput {
	return o
}

func (o DbtTransformationOutput) ToDbtTransformationOutputWithContext(ctx context.Context) DbtTransformationOutput {
	return o
}

// Identifiers of related connectors.
func (o DbtTransformationOutput) ConnectorIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DbtTransformation) pulumi.StringArrayOutput { return v.ConnectorIds }).(pulumi.StringArrayOutput)
}

// The timestamp of the dbt Transformation creation.
func (o DbtTransformationOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DbtTransformation) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The unique identifier for the dbt Model within the Fivetran system.
func (o DbtTransformationOutput) DbtModelId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbtTransformation) pulumi.StringOutput { return v.DbtModelId }).(pulumi.StringOutput)
}

// Target dbt Model name.
func (o DbtTransformationOutput) DbtModelName() pulumi.StringOutput {
	return o.ApplyT(func(v *DbtTransformation) pulumi.StringOutput { return v.DbtModelName }).(pulumi.StringOutput)
}

// The unique identifier for the dbt Project within the Fivetran system.
func (o DbtTransformationOutput) DbtProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbtTransformation) pulumi.StringOutput { return v.DbtProjectId }).(pulumi.StringOutput)
}

// Identifiers of related models.
func (o DbtTransformationOutput) ModelIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DbtTransformation) pulumi.StringArrayOutput { return v.ModelIds }).(pulumi.StringArrayOutput)
}

// The dbt Model name.
func (o DbtTransformationOutput) OutputModelName() pulumi.StringOutput {
	return o.ApplyT(func(v *DbtTransformation) pulumi.StringOutput { return v.OutputModelName }).(pulumi.StringOutput)
}

// The field indicating whether the transformation will be created in paused state. By default, the value is false.
func (o DbtTransformationOutput) Paused() pulumi.BoolOutput {
	return o.ApplyT(func(v *DbtTransformation) pulumi.BoolOutput { return v.Paused }).(pulumi.BoolOutput)
}

// The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
func (o DbtTransformationOutput) RunTests() pulumi.BoolOutput {
	return o.ApplyT(func(v *DbtTransformation) pulumi.BoolOutput { return v.RunTests }).(pulumi.BoolOutput)
}

// dbt Transformation schedule parameters.
func (o DbtTransformationOutput) Schedule() DbtTransformationScheduleOutput {
	return o.ApplyT(func(v *DbtTransformation) DbtTransformationScheduleOutput { return v.Schedule }).(DbtTransformationScheduleOutput)
}

type DbtTransformationArrayOutput struct{ *pulumi.OutputState }

func (DbtTransformationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbtTransformation)(nil)).Elem()
}

func (o DbtTransformationArrayOutput) ToDbtTransformationArrayOutput() DbtTransformationArrayOutput {
	return o
}

func (o DbtTransformationArrayOutput) ToDbtTransformationArrayOutputWithContext(ctx context.Context) DbtTransformationArrayOutput {
	return o
}

func (o DbtTransformationArrayOutput) Index(i pulumi.IntInput) DbtTransformationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbtTransformation {
		return vs[0].([]*DbtTransformation)[vs[1].(int)]
	}).(DbtTransformationOutput)
}

type DbtTransformationMapOutput struct{ *pulumi.OutputState }

func (DbtTransformationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbtTransformation)(nil)).Elem()
}

func (o DbtTransformationMapOutput) ToDbtTransformationMapOutput() DbtTransformationMapOutput {
	return o
}

func (o DbtTransformationMapOutput) ToDbtTransformationMapOutputWithContext(ctx context.Context) DbtTransformationMapOutput {
	return o
}

func (o DbtTransformationMapOutput) MapIndex(k pulumi.StringInput) DbtTransformationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbtTransformation {
		return vs[0].(map[string]*DbtTransformation)[vs[1].(string)]
	}).(DbtTransformationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbtTransformationInput)(nil)).Elem(), &DbtTransformation{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbtTransformationArrayInput)(nil)).Elem(), DbtTransformationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbtTransformationMapInput)(nil)).Elem(), DbtTransformationMap{})
	pulumi.RegisterOutputType(DbtTransformationOutput{})
	pulumi.RegisterOutputType(DbtTransformationArrayOutput{})
	pulumi.RegisterOutputType(DbtTransformationMapOutput{})
}
