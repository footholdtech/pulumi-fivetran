// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"errors"
	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource allows you to create, update, and delete group membership for teams
//
// ## Import
//
// 1. To import an existing `fivetran_team_group_membership` resource into your Terraform state, you need to get `team_id` and `group_id` You can retrieve all teams using the [fivetran_teams data source](/docs/data-sources/teams). 2. Define an empty resource in your `.tf` configurationhcl resource "fivetran_team_group_membership" "my_imported_fivetran_team_group_membership" { }
//
// ```sh
//
//	$ pulumi import fivetran:index/teamGroupMembership:TeamGroupMembership
//
// Run the `terraform import` command
// ```
//
// ```sh
//
//	$ pulumi import fivetran:index/teamGroupMembership:TeamGroupMembership my_imported_fivetran_team_group_membership {team_id}
//
// ```
//
//  4. Use the `terraform state show` command to get the values from the stateterraform state show 'fivetran_team_group_membership.my_imported_fivetran_team_group_membership' 5. Copy the values and paste them to your `.tf` configuration.
type TeamGroupMembership struct {
	pulumi.CustomResourceState

	Groups TeamGroupMembershipGroupArrayOutput `pulumi:"groups"`
	// The unique identifier for the team within your account.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewTeamGroupMembership registers a new resource with the given unique name, arguments, and options.
func NewTeamGroupMembership(ctx *pulumi.Context,
	name string, args *TeamGroupMembershipArgs, opts ...pulumi.ResourceOption) (*TeamGroupMembership, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TeamGroupMembership
	err := ctx.RegisterResource("fivetran:index/teamGroupMembership:TeamGroupMembership", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamGroupMembership gets an existing TeamGroupMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamGroupMembership(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamGroupMembershipState, opts ...pulumi.ResourceOption) (*TeamGroupMembership, error) {
	var resource TeamGroupMembership
	err := ctx.ReadResource("fivetran:index/teamGroupMembership:TeamGroupMembership", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamGroupMembership resources.
type teamGroupMembershipState struct {
	Groups []TeamGroupMembershipGroup `pulumi:"groups"`
	// The unique identifier for the team within your account.
	TeamId *string `pulumi:"teamId"`
}

type TeamGroupMembershipState struct {
	Groups TeamGroupMembershipGroupArrayInput
	// The unique identifier for the team within your account.
	TeamId pulumi.StringPtrInput
}

func (TeamGroupMembershipState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamGroupMembershipState)(nil)).Elem()
}

type teamGroupMembershipArgs struct {
	Groups []TeamGroupMembershipGroup `pulumi:"groups"`
	// The unique identifier for the team within your account.
	TeamId string `pulumi:"teamId"`
}

// The set of arguments for constructing a TeamGroupMembership resource.
type TeamGroupMembershipArgs struct {
	Groups TeamGroupMembershipGroupArrayInput
	// The unique identifier for the team within your account.
	TeamId pulumi.StringInput
}

func (TeamGroupMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamGroupMembershipArgs)(nil)).Elem()
}

type TeamGroupMembershipInput interface {
	pulumi.Input

	ToTeamGroupMembershipOutput() TeamGroupMembershipOutput
	ToTeamGroupMembershipOutputWithContext(ctx context.Context) TeamGroupMembershipOutput
}

func (*TeamGroupMembership) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamGroupMembership)(nil)).Elem()
}

func (i *TeamGroupMembership) ToTeamGroupMembershipOutput() TeamGroupMembershipOutput {
	return i.ToTeamGroupMembershipOutputWithContext(context.Background())
}

func (i *TeamGroupMembership) ToTeamGroupMembershipOutputWithContext(ctx context.Context) TeamGroupMembershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamGroupMembershipOutput)
}

func (i *TeamGroupMembership) ToOutput(ctx context.Context) pulumix.Output[*TeamGroupMembership] {
	return pulumix.Output[*TeamGroupMembership]{
		OutputState: i.ToTeamGroupMembershipOutputWithContext(ctx).OutputState,
	}
}

// TeamGroupMembershipArrayInput is an input type that accepts TeamGroupMembershipArray and TeamGroupMembershipArrayOutput values.
// You can construct a concrete instance of `TeamGroupMembershipArrayInput` via:
//
//	TeamGroupMembershipArray{ TeamGroupMembershipArgs{...} }
type TeamGroupMembershipArrayInput interface {
	pulumi.Input

	ToTeamGroupMembershipArrayOutput() TeamGroupMembershipArrayOutput
	ToTeamGroupMembershipArrayOutputWithContext(context.Context) TeamGroupMembershipArrayOutput
}

type TeamGroupMembershipArray []TeamGroupMembershipInput

func (TeamGroupMembershipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamGroupMembership)(nil)).Elem()
}

func (i TeamGroupMembershipArray) ToTeamGroupMembershipArrayOutput() TeamGroupMembershipArrayOutput {
	return i.ToTeamGroupMembershipArrayOutputWithContext(context.Background())
}

func (i TeamGroupMembershipArray) ToTeamGroupMembershipArrayOutputWithContext(ctx context.Context) TeamGroupMembershipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamGroupMembershipArrayOutput)
}

func (i TeamGroupMembershipArray) ToOutput(ctx context.Context) pulumix.Output[[]*TeamGroupMembership] {
	return pulumix.Output[[]*TeamGroupMembership]{
		OutputState: i.ToTeamGroupMembershipArrayOutputWithContext(ctx).OutputState,
	}
}

// TeamGroupMembershipMapInput is an input type that accepts TeamGroupMembershipMap and TeamGroupMembershipMapOutput values.
// You can construct a concrete instance of `TeamGroupMembershipMapInput` via:
//
//	TeamGroupMembershipMap{ "key": TeamGroupMembershipArgs{...} }
type TeamGroupMembershipMapInput interface {
	pulumi.Input

	ToTeamGroupMembershipMapOutput() TeamGroupMembershipMapOutput
	ToTeamGroupMembershipMapOutputWithContext(context.Context) TeamGroupMembershipMapOutput
}

type TeamGroupMembershipMap map[string]TeamGroupMembershipInput

func (TeamGroupMembershipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamGroupMembership)(nil)).Elem()
}

func (i TeamGroupMembershipMap) ToTeamGroupMembershipMapOutput() TeamGroupMembershipMapOutput {
	return i.ToTeamGroupMembershipMapOutputWithContext(context.Background())
}

func (i TeamGroupMembershipMap) ToTeamGroupMembershipMapOutputWithContext(ctx context.Context) TeamGroupMembershipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamGroupMembershipMapOutput)
}

func (i TeamGroupMembershipMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*TeamGroupMembership] {
	return pulumix.Output[map[string]*TeamGroupMembership]{
		OutputState: i.ToTeamGroupMembershipMapOutputWithContext(ctx).OutputState,
	}
}

type TeamGroupMembershipOutput struct{ *pulumi.OutputState }

func (TeamGroupMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamGroupMembership)(nil)).Elem()
}

func (o TeamGroupMembershipOutput) ToTeamGroupMembershipOutput() TeamGroupMembershipOutput {
	return o
}

func (o TeamGroupMembershipOutput) ToTeamGroupMembershipOutputWithContext(ctx context.Context) TeamGroupMembershipOutput {
	return o
}

func (o TeamGroupMembershipOutput) ToOutput(ctx context.Context) pulumix.Output[*TeamGroupMembership] {
	return pulumix.Output[*TeamGroupMembership]{
		OutputState: o.OutputState,
	}
}

func (o TeamGroupMembershipOutput) Groups() TeamGroupMembershipGroupArrayOutput {
	return o.ApplyT(func(v *TeamGroupMembership) TeamGroupMembershipGroupArrayOutput { return v.Groups }).(TeamGroupMembershipGroupArrayOutput)
}

// The unique identifier for the team within your account.
func (o TeamGroupMembershipOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamGroupMembership) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type TeamGroupMembershipArrayOutput struct{ *pulumi.OutputState }

func (TeamGroupMembershipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamGroupMembership)(nil)).Elem()
}

func (o TeamGroupMembershipArrayOutput) ToTeamGroupMembershipArrayOutput() TeamGroupMembershipArrayOutput {
	return o
}

func (o TeamGroupMembershipArrayOutput) ToTeamGroupMembershipArrayOutputWithContext(ctx context.Context) TeamGroupMembershipArrayOutput {
	return o
}

func (o TeamGroupMembershipArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*TeamGroupMembership] {
	return pulumix.Output[[]*TeamGroupMembership]{
		OutputState: o.OutputState,
	}
}

func (o TeamGroupMembershipArrayOutput) Index(i pulumi.IntInput) TeamGroupMembershipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TeamGroupMembership {
		return vs[0].([]*TeamGroupMembership)[vs[1].(int)]
	}).(TeamGroupMembershipOutput)
}

type TeamGroupMembershipMapOutput struct{ *pulumi.OutputState }

func (TeamGroupMembershipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamGroupMembership)(nil)).Elem()
}

func (o TeamGroupMembershipMapOutput) ToTeamGroupMembershipMapOutput() TeamGroupMembershipMapOutput {
	return o
}

func (o TeamGroupMembershipMapOutput) ToTeamGroupMembershipMapOutputWithContext(ctx context.Context) TeamGroupMembershipMapOutput {
	return o
}

func (o TeamGroupMembershipMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*TeamGroupMembership] {
	return pulumix.Output[map[string]*TeamGroupMembership]{
		OutputState: o.OutputState,
	}
}

func (o TeamGroupMembershipMapOutput) MapIndex(k pulumi.StringInput) TeamGroupMembershipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TeamGroupMembership {
		return vs[0].(map[string]*TeamGroupMembership)[vs[1].(string)]
	}).(TeamGroupMembershipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamGroupMembershipInput)(nil)).Elem(), &TeamGroupMembership{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamGroupMembershipArrayInput)(nil)).Elem(), TeamGroupMembershipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamGroupMembershipMapInput)(nil)).Elem(), TeamGroupMembershipMap{})
	pulumi.RegisterOutputType(TeamGroupMembershipOutput{})
	pulumi.RegisterOutputType(TeamGroupMembershipArrayOutput{})
	pulumi.RegisterOutputType(TeamGroupMembershipMapOutput{})
}
