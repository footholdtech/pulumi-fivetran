// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns transformation project details if a valid identifier was provided
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fivetran.LookupTransformationProject(ctx, &fivetran.LookupTransformationProjectArgs{
//				Id: "id",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTransformationProject(ctx *pulumi.Context, args *LookupTransformationProjectArgs, opts ...pulumi.InvokeOption) (*LookupTransformationProjectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTransformationProjectResult
	err := ctx.Invoke("fivetran:index/getTransformationProject:getTransformationProject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTransformationProject.
type LookupTransformationProjectArgs struct {
	// The unique identifier for the transformation Project within the Fivetran system.
	Id            string                                 `pulumi:"id"`
	ProjectConfig *GetTransformationProjectProjectConfig `pulumi:"projectConfig"`
}

// A collection of values returned by getTransformationProject.
type LookupTransformationProjectResult struct {
	// The timestamp of the transformation Project creation.
	CreatedAt string `pulumi:"createdAt"`
	// The unique identifier for the User within the Fivetran system who created the dbt Project.
	CreatedById string `pulumi:"createdById"`
	// List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
	Errors []string `pulumi:"errors"`
	// The unique identifier for the group within the Fivetran system.
	GroupId string `pulumi:"groupId"`
	// The unique identifier for the transformation Project within the Fivetran system.
	Id            string                                 `pulumi:"id"`
	ProjectConfig *GetTransformationProjectProjectConfig `pulumi:"projectConfig"`
	// Status of transformation Project (NOT_READY, READY, ERROR).
	Status string `pulumi:"status"`
	// Transformation project type.
	Type string `pulumi:"type"`
}

func LookupTransformationProjectOutput(ctx *pulumi.Context, args LookupTransformationProjectOutputArgs, opts ...pulumi.InvokeOption) LookupTransformationProjectResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTransformationProjectResultOutput, error) {
			args := v.(LookupTransformationProjectArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("fivetran:index/getTransformationProject:getTransformationProject", args, LookupTransformationProjectResultOutput{}, options).(LookupTransformationProjectResultOutput), nil
		}).(LookupTransformationProjectResultOutput)
}

// A collection of arguments for invoking getTransformationProject.
type LookupTransformationProjectOutputArgs struct {
	// The unique identifier for the transformation Project within the Fivetran system.
	Id            pulumi.StringInput                            `pulumi:"id"`
	ProjectConfig GetTransformationProjectProjectConfigPtrInput `pulumi:"projectConfig"`
}

func (LookupTransformationProjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTransformationProjectArgs)(nil)).Elem()
}

// A collection of values returned by getTransformationProject.
type LookupTransformationProjectResultOutput struct{ *pulumi.OutputState }

func (LookupTransformationProjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTransformationProjectResult)(nil)).Elem()
}

func (o LookupTransformationProjectResultOutput) ToLookupTransformationProjectResultOutput() LookupTransformationProjectResultOutput {
	return o
}

func (o LookupTransformationProjectResultOutput) ToLookupTransformationProjectResultOutputWithContext(ctx context.Context) LookupTransformationProjectResultOutput {
	return o
}

// The timestamp of the transformation Project creation.
func (o LookupTransformationProjectResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransformationProjectResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The unique identifier for the User within the Fivetran system who created the dbt Project.
func (o LookupTransformationProjectResultOutput) CreatedById() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransformationProjectResult) string { return v.CreatedById }).(pulumi.StringOutput)
}

// List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
func (o LookupTransformationProjectResultOutput) Errors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTransformationProjectResult) []string { return v.Errors }).(pulumi.StringArrayOutput)
}

// The unique identifier for the group within the Fivetran system.
func (o LookupTransformationProjectResultOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransformationProjectResult) string { return v.GroupId }).(pulumi.StringOutput)
}

// The unique identifier for the transformation Project within the Fivetran system.
func (o LookupTransformationProjectResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransformationProjectResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupTransformationProjectResultOutput) ProjectConfig() GetTransformationProjectProjectConfigPtrOutput {
	return o.ApplyT(func(v LookupTransformationProjectResult) *GetTransformationProjectProjectConfig {
		return v.ProjectConfig
	}).(GetTransformationProjectProjectConfigPtrOutput)
}

// Status of transformation Project (NOT_READY, READY, ERROR).
func (o LookupTransformationProjectResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransformationProjectResult) string { return v.Status }).(pulumi.StringOutput)
}

// Transformation project type.
func (o LookupTransformationProjectResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransformationProjectResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTransformationProjectResultOutput{})
}
