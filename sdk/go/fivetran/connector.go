// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"errors"
	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// ### How to authorize connector
type Connector struct {
	pulumi.CustomResourceState

	Auth   ConnectorAuthPtrOutput   `pulumi:"auth"`
	Config ConnectorConfigPtrOutput `pulumi:"config"`
	// The unique identifier of the user who has created the connector in your account.
	ConnectedBy pulumi.StringOutput `pulumi:"connectedBy"`
	// The timestamp of the time the connector was created in your account.
	CreatedAt         pulumi.StringOutput                 `pulumi:"createdAt"`
	DestinationSchema ConnectorDestinationSchemaPtrOutput `pulumi:"destinationSchema"`
	// The unique identifier for the Group (Destination) within the Fivetran system.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The local processing agent ID that refers to the controller created for the group the connection belongs to. If the
	// value is specified, the system will try to associate the connection with an existing agent.
	LocalProcessingAgentId pulumi.StringPtrOutput `pulumi:"localProcessingAgentId"`
	// The name used both as the connector's name within the Fivetran system and as the source schema's name within your
	// destination.
	Name pulumi.StringOutput `pulumi:"name"`
	// Possible values: Directly, SshTunnel, ProxyAgent.
	NetworkingMethod pulumi.StringOutput `pulumi:"networkingMethod"`
	// The proxy agent ID.
	ProxyAgentId pulumi.StringPtrOutput `pulumi:"proxyAgentId"`
	// Specifies whether the setup tests should be run automatically. The default value is FALSE.
	RunSetupTests pulumi.BoolOutput `pulumi:"runSetupTests"`
	// The connector type id within the Fivetran system.
	Service  pulumi.StringOutput        `pulumi:"service"`
	Timeouts ConnectorTimeoutsPtrOutput `pulumi:"timeouts"`
	// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
	// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
	// certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
	TrustCertificates pulumi.BoolOutput `pulumi:"trustCertificates"`
	// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
	// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
	// fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
	TrustFingerprints pulumi.BoolOutput `pulumi:"trustFingerprints"`
}

// NewConnector registers a new resource with the given unique name, arguments, and options.
func NewConnector(ctx *pulumi.Context,
	name string, args *ConnectorArgs, opts ...pulumi.ResourceOption) (*Connector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Connector
	err := ctx.RegisterResource("fivetran:index/connector:Connector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnector gets an existing Connector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorState, opts ...pulumi.ResourceOption) (*Connector, error) {
	var resource Connector
	err := ctx.ReadResource("fivetran:index/connector:Connector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connector resources.
type connectorState struct {
	Auth   *ConnectorAuth   `pulumi:"auth"`
	Config *ConnectorConfig `pulumi:"config"`
	// The unique identifier of the user who has created the connector in your account.
	ConnectedBy *string `pulumi:"connectedBy"`
	// The timestamp of the time the connector was created in your account.
	CreatedAt         *string                     `pulumi:"createdAt"`
	DestinationSchema *ConnectorDestinationSchema `pulumi:"destinationSchema"`
	// The unique identifier for the Group (Destination) within the Fivetran system.
	GroupId *string `pulumi:"groupId"`
	// The local processing agent ID that refers to the controller created for the group the connection belongs to. If the
	// value is specified, the system will try to associate the connection with an existing agent.
	LocalProcessingAgentId *string `pulumi:"localProcessingAgentId"`
	// The name used both as the connector's name within the Fivetran system and as the source schema's name within your
	// destination.
	Name *string `pulumi:"name"`
	// Possible values: Directly, SshTunnel, ProxyAgent.
	NetworkingMethod *string `pulumi:"networkingMethod"`
	// The proxy agent ID.
	ProxyAgentId *string `pulumi:"proxyAgentId"`
	// Specifies whether the setup tests should be run automatically. The default value is FALSE.
	RunSetupTests *bool `pulumi:"runSetupTests"`
	// The connector type id within the Fivetran system.
	Service  *string            `pulumi:"service"`
	Timeouts *ConnectorTimeouts `pulumi:"timeouts"`
	// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
	// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
	// certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
	TrustCertificates *bool `pulumi:"trustCertificates"`
	// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
	// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
	// fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
	TrustFingerprints *bool `pulumi:"trustFingerprints"`
}

type ConnectorState struct {
	Auth   ConnectorAuthPtrInput
	Config ConnectorConfigPtrInput
	// The unique identifier of the user who has created the connector in your account.
	ConnectedBy pulumi.StringPtrInput
	// The timestamp of the time the connector was created in your account.
	CreatedAt         pulumi.StringPtrInput
	DestinationSchema ConnectorDestinationSchemaPtrInput
	// The unique identifier for the Group (Destination) within the Fivetran system.
	GroupId pulumi.StringPtrInput
	// The local processing agent ID that refers to the controller created for the group the connection belongs to. If the
	// value is specified, the system will try to associate the connection with an existing agent.
	LocalProcessingAgentId pulumi.StringPtrInput
	// The name used both as the connector's name within the Fivetran system and as the source schema's name within your
	// destination.
	Name pulumi.StringPtrInput
	// Possible values: Directly, SshTunnel, ProxyAgent.
	NetworkingMethod pulumi.StringPtrInput
	// The proxy agent ID.
	ProxyAgentId pulumi.StringPtrInput
	// Specifies whether the setup tests should be run automatically. The default value is FALSE.
	RunSetupTests pulumi.BoolPtrInput
	// The connector type id within the Fivetran system.
	Service  pulumi.StringPtrInput
	Timeouts ConnectorTimeoutsPtrInput
	// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
	// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
	// certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
	TrustCertificates pulumi.BoolPtrInput
	// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
	// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
	// fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
	TrustFingerprints pulumi.BoolPtrInput
}

func (ConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorState)(nil)).Elem()
}

type connectorArgs struct {
	Auth              *ConnectorAuth              `pulumi:"auth"`
	Config            *ConnectorConfig            `pulumi:"config"`
	DestinationSchema *ConnectorDestinationSchema `pulumi:"destinationSchema"`
	// The unique identifier for the Group (Destination) within the Fivetran system.
	GroupId string `pulumi:"groupId"`
	// The local processing agent ID that refers to the controller created for the group the connection belongs to. If the
	// value is specified, the system will try to associate the connection with an existing agent.
	LocalProcessingAgentId *string `pulumi:"localProcessingAgentId"`
	// Possible values: Directly, SshTunnel, ProxyAgent.
	NetworkingMethod *string `pulumi:"networkingMethod"`
	// The proxy agent ID.
	ProxyAgentId *string `pulumi:"proxyAgentId"`
	// Specifies whether the setup tests should be run automatically. The default value is FALSE.
	RunSetupTests *bool `pulumi:"runSetupTests"`
	// The connector type id within the Fivetran system.
	Service  string             `pulumi:"service"`
	Timeouts *ConnectorTimeouts `pulumi:"timeouts"`
	// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
	// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
	// certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
	TrustCertificates *bool `pulumi:"trustCertificates"`
	// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
	// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
	// fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
	TrustFingerprints *bool `pulumi:"trustFingerprints"`
}

// The set of arguments for constructing a Connector resource.
type ConnectorArgs struct {
	Auth              ConnectorAuthPtrInput
	Config            ConnectorConfigPtrInput
	DestinationSchema ConnectorDestinationSchemaPtrInput
	// The unique identifier for the Group (Destination) within the Fivetran system.
	GroupId pulumi.StringInput
	// The local processing agent ID that refers to the controller created for the group the connection belongs to. If the
	// value is specified, the system will try to associate the connection with an existing agent.
	LocalProcessingAgentId pulumi.StringPtrInput
	// Possible values: Directly, SshTunnel, ProxyAgent.
	NetworkingMethod pulumi.StringPtrInput
	// The proxy agent ID.
	ProxyAgentId pulumi.StringPtrInput
	// Specifies whether the setup tests should be run automatically. The default value is FALSE.
	RunSetupTests pulumi.BoolPtrInput
	// The connector type id within the Fivetran system.
	Service  pulumi.StringInput
	Timeouts ConnectorTimeoutsPtrInput
	// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
	// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
	// certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
	TrustCertificates pulumi.BoolPtrInput
	// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
	// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
	// fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
	TrustFingerprints pulumi.BoolPtrInput
}

func (ConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorArgs)(nil)).Elem()
}

type ConnectorInput interface {
	pulumi.Input

	ToConnectorOutput() ConnectorOutput
	ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput
}

func (*Connector) ElementType() reflect.Type {
	return reflect.TypeOf((**Connector)(nil)).Elem()
}

func (i *Connector) ToConnectorOutput() ConnectorOutput {
	return i.ToConnectorOutputWithContext(context.Background())
}

func (i *Connector) ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorOutput)
}

// ConnectorArrayInput is an input type that accepts ConnectorArray and ConnectorArrayOutput values.
// You can construct a concrete instance of `ConnectorArrayInput` via:
//
//	ConnectorArray{ ConnectorArgs{...} }
type ConnectorArrayInput interface {
	pulumi.Input

	ToConnectorArrayOutput() ConnectorArrayOutput
	ToConnectorArrayOutputWithContext(context.Context) ConnectorArrayOutput
}

type ConnectorArray []ConnectorInput

func (ConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connector)(nil)).Elem()
}

func (i ConnectorArray) ToConnectorArrayOutput() ConnectorArrayOutput {
	return i.ToConnectorArrayOutputWithContext(context.Background())
}

func (i ConnectorArray) ToConnectorArrayOutputWithContext(ctx context.Context) ConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorArrayOutput)
}

// ConnectorMapInput is an input type that accepts ConnectorMap and ConnectorMapOutput values.
// You can construct a concrete instance of `ConnectorMapInput` via:
//
//	ConnectorMap{ "key": ConnectorArgs{...} }
type ConnectorMapInput interface {
	pulumi.Input

	ToConnectorMapOutput() ConnectorMapOutput
	ToConnectorMapOutputWithContext(context.Context) ConnectorMapOutput
}

type ConnectorMap map[string]ConnectorInput

func (ConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connector)(nil)).Elem()
}

func (i ConnectorMap) ToConnectorMapOutput() ConnectorMapOutput {
	return i.ToConnectorMapOutputWithContext(context.Background())
}

func (i ConnectorMap) ToConnectorMapOutputWithContext(ctx context.Context) ConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorMapOutput)
}

type ConnectorOutput struct{ *pulumi.OutputState }

func (ConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connector)(nil)).Elem()
}

func (o ConnectorOutput) ToConnectorOutput() ConnectorOutput {
	return o
}

func (o ConnectorOutput) ToConnectorOutputWithContext(ctx context.Context) ConnectorOutput {
	return o
}

func (o ConnectorOutput) Auth() ConnectorAuthPtrOutput {
	return o.ApplyT(func(v *Connector) ConnectorAuthPtrOutput { return v.Auth }).(ConnectorAuthPtrOutput)
}

func (o ConnectorOutput) Config() ConnectorConfigPtrOutput {
	return o.ApplyT(func(v *Connector) ConnectorConfigPtrOutput { return v.Config }).(ConnectorConfigPtrOutput)
}

// The unique identifier of the user who has created the connector in your account.
func (o ConnectorOutput) ConnectedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.ConnectedBy }).(pulumi.StringOutput)
}

// The timestamp of the time the connector was created in your account.
func (o ConnectorOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o ConnectorOutput) DestinationSchema() ConnectorDestinationSchemaPtrOutput {
	return o.ApplyT(func(v *Connector) ConnectorDestinationSchemaPtrOutput { return v.DestinationSchema }).(ConnectorDestinationSchemaPtrOutput)
}

// The unique identifier for the Group (Destination) within the Fivetran system.
func (o ConnectorOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The local processing agent ID that refers to the controller created for the group the connection belongs to. If the
// value is specified, the system will try to associate the connection with an existing agent.
func (o ConnectorOutput) LocalProcessingAgentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringPtrOutput { return v.LocalProcessingAgentId }).(pulumi.StringPtrOutput)
}

// The name used both as the connector's name within the Fivetran system and as the source schema's name within your
// destination.
func (o ConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Possible values: Directly, SshTunnel, ProxyAgent.
func (o ConnectorOutput) NetworkingMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.NetworkingMethod }).(pulumi.StringOutput)
}

// The proxy agent ID.
func (o ConnectorOutput) ProxyAgentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringPtrOutput { return v.ProxyAgentId }).(pulumi.StringPtrOutput)
}

// Specifies whether the setup tests should be run automatically. The default value is FALSE.
func (o ConnectorOutput) RunSetupTests() pulumi.BoolOutput {
	return o.ApplyT(func(v *Connector) pulumi.BoolOutput { return v.RunSetupTests }).(pulumi.BoolOutput)
}

// The connector type id within the Fivetran system.
func (o ConnectorOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *Connector) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

func (o ConnectorOutput) Timeouts() ConnectorTimeoutsPtrOutput {
	return o.ApplyT(func(v *Connector) ConnectorTimeoutsPtrOutput { return v.Timeouts }).(ConnectorTimeoutsPtrOutput)
}

// Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
// certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
func (o ConnectorOutput) TrustCertificates() pulumi.BoolOutput {
	return o.ApplyT(func(v *Connector) pulumi.BoolOutput { return v.TrustCertificates }).(pulumi.BoolOutput)
}

// Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
// trusted automatically, it has to be approved with [Certificates Management API Approve a destination
// fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
func (o ConnectorOutput) TrustFingerprints() pulumi.BoolOutput {
	return o.ApplyT(func(v *Connector) pulumi.BoolOutput { return v.TrustFingerprints }).(pulumi.BoolOutput)
}

type ConnectorArrayOutput struct{ *pulumi.OutputState }

func (ConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connector)(nil)).Elem()
}

func (o ConnectorArrayOutput) ToConnectorArrayOutput() ConnectorArrayOutput {
	return o
}

func (o ConnectorArrayOutput) ToConnectorArrayOutputWithContext(ctx context.Context) ConnectorArrayOutput {
	return o
}

func (o ConnectorArrayOutput) Index(i pulumi.IntInput) ConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Connector {
		return vs[0].([]*Connector)[vs[1].(int)]
	}).(ConnectorOutput)
}

type ConnectorMapOutput struct{ *pulumi.OutputState }

func (ConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connector)(nil)).Elem()
}

func (o ConnectorMapOutput) ToConnectorMapOutput() ConnectorMapOutput {
	return o
}

func (o ConnectorMapOutput) ToConnectorMapOutputWithContext(ctx context.Context) ConnectorMapOutput {
	return o
}

func (o ConnectorMapOutput) MapIndex(k pulumi.StringInput) ConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Connector {
		return vs[0].(map[string]*Connector)[vs[1].(string)]
	}).(ConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorInput)(nil)).Elem(), &Connector{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorArrayInput)(nil)).Elem(), ConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorMapInput)(nil)).Elem(), ConnectorMap{})
	pulumi.RegisterOutputType(ConnectorOutput{})
	pulumi.RegisterOutputType(ConnectorArrayOutput{})
	pulumi.RegisterOutputType(ConnectorMapOutput{})
}
