// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"errors"
	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## ---
//
// page_title: "Resource: ConnectorSchemaConfig"
// ---
//
// # Resource: ConnectorSchemaConfig
//
// This resource allows you to manage the Standard Configuration settings of a connector:
//   - Define the schema change handling settings
//   - Enable and disable schemas, tables, and columns
//
// The resource is in **ALPHA** state. The resource schema and behavior are subject to change without prior notice.
//
// Known issues:
//   - Definition of `syncMode` for table causes infinite drifting changes in plan
//
// ## Usage guide
//
// Note that all configuration settings are aligned to the `schemaChangeHandling` settings,  except the settings explicitly specified in `schema`.
// In `schema`, you only override the default settings defined by the chosen `schemaChangeHandling` option. The default value for the `enabled` attribute is `true` so it can be omitted when you want to enable schemas, tables, or columns.
// The allowed `schemaChangeHandling` options are as follows:
// - `ALLOW_ALL`- all schemas, tables and columns are ENABLED by default. You only need  to explicitly specify DISABLED items or hashed tables
// - `BLOCK_ALL` - all schemas, tables and columns are DISABLED by default, the configuration only specifies ENABLED items
// - `ALLOW_COLUMNS` - all schemas and tables are DISABLED by default, but all columns are ENABLED by default, the configuration specifies ENABLED schemas and tables, and DISABLED columns
//
// Note that system-enabled tables and columns (such as primary and foreign key columns, and [system tables and columns](https://fivetran.com/docs/getting-started/system-columns-and-tables)) are synced regardless of the `schemaChangeHandling` settings and configuration. You can only disable non-locked columns in the system-enabled tables. If the configuration specifies any system tables or locked system table columns as disabled ( `enabled = "false"`), the provider just ignores these statements.
//
// ## Usage examples
//
// ## Import
//
// 1. To import an existing `fivetran_connector_schema_config` resource into your Terraform state, you need to get **Fivetran Connector ID** on the **Setup** tab of the connector page in your Fivetran dashboard. 2. Retrieve all connectors in a particular group using the [fivetran_group_connectors data source](/docs/data-sources/group_connectors). To retrieve existing groups, use the [fivetran_groups data source](/docs/data-sources/groups). 3. Define an empty resource in your `.tf` configurationhcl resource "fivetran_connector_schema_config" "my_imported_connector_schema_config" { }
//
// ```sh
//
//	$ pulumi import fivetran:index/connectorSchemaConfig:ConnectorSchemaConfig
//
// Run the `terraform import` command
// ```
//
// ```sh
//
//	$ pulumi import fivetran:index/connectorSchemaConfig:ConnectorSchemaConfig my_imported_connector_schema_config {your Fivetran Connector ID}
//
// ```
//
// 5.
//
// Use the `terraform state show` command to get the values from the stateterraform state show 'fivetran_connector_schema_config.my_imported_connector_schema_config' 6. Copy the values and paste them to your `.tf` configuration.
type ConnectorSchemaConfig struct {
	pulumi.CustomResourceState

	// The unique identifier for the connector within the Fivetran system.
	ConnectorId          pulumi.StringOutput                    `pulumi:"connectorId"`
	SchemaChangeHandling pulumi.StringOutput                    `pulumi:"schemaChangeHandling"`
	Schemas              ConnectorSchemaConfigSchemaArrayOutput `pulumi:"schemas"`
}

// NewConnectorSchemaConfig registers a new resource with the given unique name, arguments, and options.
func NewConnectorSchemaConfig(ctx *pulumi.Context,
	name string, args *ConnectorSchemaConfigArgs, opts ...pulumi.ResourceOption) (*ConnectorSchemaConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorId'")
	}
	if args.SchemaChangeHandling == nil {
		return nil, errors.New("invalid value for required argument 'SchemaChangeHandling'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectorSchemaConfig
	err := ctx.RegisterResource("fivetran:index/connectorSchemaConfig:ConnectorSchemaConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorSchemaConfig gets an existing ConnectorSchemaConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorSchemaConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorSchemaConfigState, opts ...pulumi.ResourceOption) (*ConnectorSchemaConfig, error) {
	var resource ConnectorSchemaConfig
	err := ctx.ReadResource("fivetran:index/connectorSchemaConfig:ConnectorSchemaConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorSchemaConfig resources.
type connectorSchemaConfigState struct {
	// The unique identifier for the connector within the Fivetran system.
	ConnectorId          *string                       `pulumi:"connectorId"`
	SchemaChangeHandling *string                       `pulumi:"schemaChangeHandling"`
	Schemas              []ConnectorSchemaConfigSchema `pulumi:"schemas"`
}

type ConnectorSchemaConfigState struct {
	// The unique identifier for the connector within the Fivetran system.
	ConnectorId          pulumi.StringPtrInput
	SchemaChangeHandling pulumi.StringPtrInput
	Schemas              ConnectorSchemaConfigSchemaArrayInput
}

func (ConnectorSchemaConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorSchemaConfigState)(nil)).Elem()
}

type connectorSchemaConfigArgs struct {
	// The unique identifier for the connector within the Fivetran system.
	ConnectorId          string                        `pulumi:"connectorId"`
	SchemaChangeHandling string                        `pulumi:"schemaChangeHandling"`
	Schemas              []ConnectorSchemaConfigSchema `pulumi:"schemas"`
}

// The set of arguments for constructing a ConnectorSchemaConfig resource.
type ConnectorSchemaConfigArgs struct {
	// The unique identifier for the connector within the Fivetran system.
	ConnectorId          pulumi.StringInput
	SchemaChangeHandling pulumi.StringInput
	Schemas              ConnectorSchemaConfigSchemaArrayInput
}

func (ConnectorSchemaConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorSchemaConfigArgs)(nil)).Elem()
}

type ConnectorSchemaConfigInput interface {
	pulumi.Input

	ToConnectorSchemaConfigOutput() ConnectorSchemaConfigOutput
	ToConnectorSchemaConfigOutputWithContext(ctx context.Context) ConnectorSchemaConfigOutput
}

func (*ConnectorSchemaConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorSchemaConfig)(nil)).Elem()
}

func (i *ConnectorSchemaConfig) ToConnectorSchemaConfigOutput() ConnectorSchemaConfigOutput {
	return i.ToConnectorSchemaConfigOutputWithContext(context.Background())
}

func (i *ConnectorSchemaConfig) ToConnectorSchemaConfigOutputWithContext(ctx context.Context) ConnectorSchemaConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorSchemaConfigOutput)
}

func (i *ConnectorSchemaConfig) ToOutput(ctx context.Context) pulumix.Output[*ConnectorSchemaConfig] {
	return pulumix.Output[*ConnectorSchemaConfig]{
		OutputState: i.ToConnectorSchemaConfigOutputWithContext(ctx).OutputState,
	}
}

// ConnectorSchemaConfigArrayInput is an input type that accepts ConnectorSchemaConfigArray and ConnectorSchemaConfigArrayOutput values.
// You can construct a concrete instance of `ConnectorSchemaConfigArrayInput` via:
//
//	ConnectorSchemaConfigArray{ ConnectorSchemaConfigArgs{...} }
type ConnectorSchemaConfigArrayInput interface {
	pulumi.Input

	ToConnectorSchemaConfigArrayOutput() ConnectorSchemaConfigArrayOutput
	ToConnectorSchemaConfigArrayOutputWithContext(context.Context) ConnectorSchemaConfigArrayOutput
}

type ConnectorSchemaConfigArray []ConnectorSchemaConfigInput

func (ConnectorSchemaConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorSchemaConfig)(nil)).Elem()
}

func (i ConnectorSchemaConfigArray) ToConnectorSchemaConfigArrayOutput() ConnectorSchemaConfigArrayOutput {
	return i.ToConnectorSchemaConfigArrayOutputWithContext(context.Background())
}

func (i ConnectorSchemaConfigArray) ToConnectorSchemaConfigArrayOutputWithContext(ctx context.Context) ConnectorSchemaConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorSchemaConfigArrayOutput)
}

func (i ConnectorSchemaConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]*ConnectorSchemaConfig] {
	return pulumix.Output[[]*ConnectorSchemaConfig]{
		OutputState: i.ToConnectorSchemaConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// ConnectorSchemaConfigMapInput is an input type that accepts ConnectorSchemaConfigMap and ConnectorSchemaConfigMapOutput values.
// You can construct a concrete instance of `ConnectorSchemaConfigMapInput` via:
//
//	ConnectorSchemaConfigMap{ "key": ConnectorSchemaConfigArgs{...} }
type ConnectorSchemaConfigMapInput interface {
	pulumi.Input

	ToConnectorSchemaConfigMapOutput() ConnectorSchemaConfigMapOutput
	ToConnectorSchemaConfigMapOutputWithContext(context.Context) ConnectorSchemaConfigMapOutput
}

type ConnectorSchemaConfigMap map[string]ConnectorSchemaConfigInput

func (ConnectorSchemaConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorSchemaConfig)(nil)).Elem()
}

func (i ConnectorSchemaConfigMap) ToConnectorSchemaConfigMapOutput() ConnectorSchemaConfigMapOutput {
	return i.ToConnectorSchemaConfigMapOutputWithContext(context.Background())
}

func (i ConnectorSchemaConfigMap) ToConnectorSchemaConfigMapOutputWithContext(ctx context.Context) ConnectorSchemaConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorSchemaConfigMapOutput)
}

func (i ConnectorSchemaConfigMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ConnectorSchemaConfig] {
	return pulumix.Output[map[string]*ConnectorSchemaConfig]{
		OutputState: i.ToConnectorSchemaConfigMapOutputWithContext(ctx).OutputState,
	}
}

type ConnectorSchemaConfigOutput struct{ *pulumi.OutputState }

func (ConnectorSchemaConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorSchemaConfig)(nil)).Elem()
}

func (o ConnectorSchemaConfigOutput) ToConnectorSchemaConfigOutput() ConnectorSchemaConfigOutput {
	return o
}

func (o ConnectorSchemaConfigOutput) ToConnectorSchemaConfigOutputWithContext(ctx context.Context) ConnectorSchemaConfigOutput {
	return o
}

func (o ConnectorSchemaConfigOutput) ToOutput(ctx context.Context) pulumix.Output[*ConnectorSchemaConfig] {
	return pulumix.Output[*ConnectorSchemaConfig]{
		OutputState: o.OutputState,
	}
}

// The unique identifier for the connector within the Fivetran system.
func (o ConnectorSchemaConfigOutput) ConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorSchemaConfig) pulumi.StringOutput { return v.ConnectorId }).(pulumi.StringOutput)
}

func (o ConnectorSchemaConfigOutput) SchemaChangeHandling() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorSchemaConfig) pulumi.StringOutput { return v.SchemaChangeHandling }).(pulumi.StringOutput)
}

func (o ConnectorSchemaConfigOutput) Schemas() ConnectorSchemaConfigSchemaArrayOutput {
	return o.ApplyT(func(v *ConnectorSchemaConfig) ConnectorSchemaConfigSchemaArrayOutput { return v.Schemas }).(ConnectorSchemaConfigSchemaArrayOutput)
}

type ConnectorSchemaConfigArrayOutput struct{ *pulumi.OutputState }

func (ConnectorSchemaConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorSchemaConfig)(nil)).Elem()
}

func (o ConnectorSchemaConfigArrayOutput) ToConnectorSchemaConfigArrayOutput() ConnectorSchemaConfigArrayOutput {
	return o
}

func (o ConnectorSchemaConfigArrayOutput) ToConnectorSchemaConfigArrayOutputWithContext(ctx context.Context) ConnectorSchemaConfigArrayOutput {
	return o
}

func (o ConnectorSchemaConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ConnectorSchemaConfig] {
	return pulumix.Output[[]*ConnectorSchemaConfig]{
		OutputState: o.OutputState,
	}
}

func (o ConnectorSchemaConfigArrayOutput) Index(i pulumi.IntInput) ConnectorSchemaConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorSchemaConfig {
		return vs[0].([]*ConnectorSchemaConfig)[vs[1].(int)]
	}).(ConnectorSchemaConfigOutput)
}

type ConnectorSchemaConfigMapOutput struct{ *pulumi.OutputState }

func (ConnectorSchemaConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorSchemaConfig)(nil)).Elem()
}

func (o ConnectorSchemaConfigMapOutput) ToConnectorSchemaConfigMapOutput() ConnectorSchemaConfigMapOutput {
	return o
}

func (o ConnectorSchemaConfigMapOutput) ToConnectorSchemaConfigMapOutputWithContext(ctx context.Context) ConnectorSchemaConfigMapOutput {
	return o
}

func (o ConnectorSchemaConfigMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ConnectorSchemaConfig] {
	return pulumix.Output[map[string]*ConnectorSchemaConfig]{
		OutputState: o.OutputState,
	}
}

func (o ConnectorSchemaConfigMapOutput) MapIndex(k pulumi.StringInput) ConnectorSchemaConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorSchemaConfig {
		return vs[0].(map[string]*ConnectorSchemaConfig)[vs[1].(string)]
	}).(ConnectorSchemaConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorSchemaConfigInput)(nil)).Elem(), &ConnectorSchemaConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorSchemaConfigArrayInput)(nil)).Elem(), ConnectorSchemaConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorSchemaConfigMapInput)(nil)).Elem(), ConnectorSchemaConfigMap{})
	pulumi.RegisterOutputType(ConnectorSchemaConfigOutput{})
	pulumi.RegisterOutputType(ConnectorSchemaConfigArrayOutput{})
	pulumi.RegisterOutputType(ConnectorSchemaConfigMapOutput{})
}
