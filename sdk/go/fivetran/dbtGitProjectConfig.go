// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"errors"
	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource is in ALPHA state.
//
// This resource allows you to add and manage dbt Git Projects Configs.
//
// ## Import
//
// 1. To import an existing `fivetran_dbt_git_project_config` resource into your Terraform state, you need to get **Dbt Project ID** via API call `GET https://api.fivetran.com/v1/dbt/projects` to retrieve available projects.
//
// 2. Fetch project details for particular `project-id` using `GET https://api.fivetran.com/v1/dbt/projects/{project-id}` to ensure that this is the project you want to import.
//
// 3. Define an empty resource in your `.tf` configuration:
//
// hcl
//
// resource "fivetran_dbt_git_project_config" "my_imported_fivetran_dbt_git_project_config" {
//
// }
//
// 4. Run the `pulumi import` command:
//
// ```sh
// $ pulumi import fivetran:index/dbtGitProjectConfig:DbtGitProjectConfig my_imported_fivetran_dbt_git_project_config {Dbt Project ID}
// ```
//
// 4. Use the `terraform state show` command to get the values from the state:
//
// terraform state show 'fivetran_dbt_git_project_config.my_imported_fivetran_dbt_git_project_config'
//
// 5. Copy the values and paste them to your `.tf` configuration.
type DbtGitProjectConfig struct {
	pulumi.CustomResourceState

	// Should resource wait for project to finish initialization. Default value: false.
	EnsureReadiness pulumi.BoolOutput `pulumi:"ensureReadiness"`
	// Folder in Git repo with your dbt project.
	FolderPath pulumi.StringPtrOutput `pulumi:"folderPath"`
	// Git branch.
	GitBranch pulumi.StringPtrOutput `pulumi:"gitBranch"`
	// Git remote URL with your dbt project.
	GitRemoteUrl pulumi.StringPtrOutput `pulumi:"gitRemoteUrl"`
	// The unique identifier for the dbt Project within the Fivetran system.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
}

// NewDbtGitProjectConfig registers a new resource with the given unique name, arguments, and options.
func NewDbtGitProjectConfig(ctx *pulumi.Context,
	name string, args *DbtGitProjectConfigArgs, opts ...pulumi.ResourceOption) (*DbtGitProjectConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbtGitProjectConfig
	err := ctx.RegisterResource("fivetran:index/dbtGitProjectConfig:DbtGitProjectConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbtGitProjectConfig gets an existing DbtGitProjectConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbtGitProjectConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbtGitProjectConfigState, opts ...pulumi.ResourceOption) (*DbtGitProjectConfig, error) {
	var resource DbtGitProjectConfig
	err := ctx.ReadResource("fivetran:index/dbtGitProjectConfig:DbtGitProjectConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbtGitProjectConfig resources.
type dbtGitProjectConfigState struct {
	// Should resource wait for project to finish initialization. Default value: false.
	EnsureReadiness *bool `pulumi:"ensureReadiness"`
	// Folder in Git repo with your dbt project.
	FolderPath *string `pulumi:"folderPath"`
	// Git branch.
	GitBranch *string `pulumi:"gitBranch"`
	// Git remote URL with your dbt project.
	GitRemoteUrl *string `pulumi:"gitRemoteUrl"`
	// The unique identifier for the dbt Project within the Fivetran system.
	ProjectId *string `pulumi:"projectId"`
}

type DbtGitProjectConfigState struct {
	// Should resource wait for project to finish initialization. Default value: false.
	EnsureReadiness pulumi.BoolPtrInput
	// Folder in Git repo with your dbt project.
	FolderPath pulumi.StringPtrInput
	// Git branch.
	GitBranch pulumi.StringPtrInput
	// Git remote URL with your dbt project.
	GitRemoteUrl pulumi.StringPtrInput
	// The unique identifier for the dbt Project within the Fivetran system.
	ProjectId pulumi.StringPtrInput
}

func (DbtGitProjectConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbtGitProjectConfigState)(nil)).Elem()
}

type dbtGitProjectConfigArgs struct {
	// Should resource wait for project to finish initialization. Default value: false.
	EnsureReadiness *bool `pulumi:"ensureReadiness"`
	// Folder in Git repo with your dbt project.
	FolderPath *string `pulumi:"folderPath"`
	// Git branch.
	GitBranch *string `pulumi:"gitBranch"`
	// Git remote URL with your dbt project.
	GitRemoteUrl *string `pulumi:"gitRemoteUrl"`
	// The unique identifier for the dbt Project within the Fivetran system.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a DbtGitProjectConfig resource.
type DbtGitProjectConfigArgs struct {
	// Should resource wait for project to finish initialization. Default value: false.
	EnsureReadiness pulumi.BoolPtrInput
	// Folder in Git repo with your dbt project.
	FolderPath pulumi.StringPtrInput
	// Git branch.
	GitBranch pulumi.StringPtrInput
	// Git remote URL with your dbt project.
	GitRemoteUrl pulumi.StringPtrInput
	// The unique identifier for the dbt Project within the Fivetran system.
	ProjectId pulumi.StringInput
}

func (DbtGitProjectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbtGitProjectConfigArgs)(nil)).Elem()
}

type DbtGitProjectConfigInput interface {
	pulumi.Input

	ToDbtGitProjectConfigOutput() DbtGitProjectConfigOutput
	ToDbtGitProjectConfigOutputWithContext(ctx context.Context) DbtGitProjectConfigOutput
}

func (*DbtGitProjectConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**DbtGitProjectConfig)(nil)).Elem()
}

func (i *DbtGitProjectConfig) ToDbtGitProjectConfigOutput() DbtGitProjectConfigOutput {
	return i.ToDbtGitProjectConfigOutputWithContext(context.Background())
}

func (i *DbtGitProjectConfig) ToDbtGitProjectConfigOutputWithContext(ctx context.Context) DbtGitProjectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbtGitProjectConfigOutput)
}

// DbtGitProjectConfigArrayInput is an input type that accepts DbtGitProjectConfigArray and DbtGitProjectConfigArrayOutput values.
// You can construct a concrete instance of `DbtGitProjectConfigArrayInput` via:
//
//	DbtGitProjectConfigArray{ DbtGitProjectConfigArgs{...} }
type DbtGitProjectConfigArrayInput interface {
	pulumi.Input

	ToDbtGitProjectConfigArrayOutput() DbtGitProjectConfigArrayOutput
	ToDbtGitProjectConfigArrayOutputWithContext(context.Context) DbtGitProjectConfigArrayOutput
}

type DbtGitProjectConfigArray []DbtGitProjectConfigInput

func (DbtGitProjectConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbtGitProjectConfig)(nil)).Elem()
}

func (i DbtGitProjectConfigArray) ToDbtGitProjectConfigArrayOutput() DbtGitProjectConfigArrayOutput {
	return i.ToDbtGitProjectConfigArrayOutputWithContext(context.Background())
}

func (i DbtGitProjectConfigArray) ToDbtGitProjectConfigArrayOutputWithContext(ctx context.Context) DbtGitProjectConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbtGitProjectConfigArrayOutput)
}

// DbtGitProjectConfigMapInput is an input type that accepts DbtGitProjectConfigMap and DbtGitProjectConfigMapOutput values.
// You can construct a concrete instance of `DbtGitProjectConfigMapInput` via:
//
//	DbtGitProjectConfigMap{ "key": DbtGitProjectConfigArgs{...} }
type DbtGitProjectConfigMapInput interface {
	pulumi.Input

	ToDbtGitProjectConfigMapOutput() DbtGitProjectConfigMapOutput
	ToDbtGitProjectConfigMapOutputWithContext(context.Context) DbtGitProjectConfigMapOutput
}

type DbtGitProjectConfigMap map[string]DbtGitProjectConfigInput

func (DbtGitProjectConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbtGitProjectConfig)(nil)).Elem()
}

func (i DbtGitProjectConfigMap) ToDbtGitProjectConfigMapOutput() DbtGitProjectConfigMapOutput {
	return i.ToDbtGitProjectConfigMapOutputWithContext(context.Background())
}

func (i DbtGitProjectConfigMap) ToDbtGitProjectConfigMapOutputWithContext(ctx context.Context) DbtGitProjectConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbtGitProjectConfigMapOutput)
}

type DbtGitProjectConfigOutput struct{ *pulumi.OutputState }

func (DbtGitProjectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbtGitProjectConfig)(nil)).Elem()
}

func (o DbtGitProjectConfigOutput) ToDbtGitProjectConfigOutput() DbtGitProjectConfigOutput {
	return o
}

func (o DbtGitProjectConfigOutput) ToDbtGitProjectConfigOutputWithContext(ctx context.Context) DbtGitProjectConfigOutput {
	return o
}

// Should resource wait for project to finish initialization. Default value: false.
func (o DbtGitProjectConfigOutput) EnsureReadiness() pulumi.BoolOutput {
	return o.ApplyT(func(v *DbtGitProjectConfig) pulumi.BoolOutput { return v.EnsureReadiness }).(pulumi.BoolOutput)
}

// Folder in Git repo with your dbt project.
func (o DbtGitProjectConfigOutput) FolderPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbtGitProjectConfig) pulumi.StringPtrOutput { return v.FolderPath }).(pulumi.StringPtrOutput)
}

// Git branch.
func (o DbtGitProjectConfigOutput) GitBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbtGitProjectConfig) pulumi.StringPtrOutput { return v.GitBranch }).(pulumi.StringPtrOutput)
}

// Git remote URL with your dbt project.
func (o DbtGitProjectConfigOutput) GitRemoteUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbtGitProjectConfig) pulumi.StringPtrOutput { return v.GitRemoteUrl }).(pulumi.StringPtrOutput)
}

// The unique identifier for the dbt Project within the Fivetran system.
func (o DbtGitProjectConfigOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbtGitProjectConfig) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

type DbtGitProjectConfigArrayOutput struct{ *pulumi.OutputState }

func (DbtGitProjectConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbtGitProjectConfig)(nil)).Elem()
}

func (o DbtGitProjectConfigArrayOutput) ToDbtGitProjectConfigArrayOutput() DbtGitProjectConfigArrayOutput {
	return o
}

func (o DbtGitProjectConfigArrayOutput) ToDbtGitProjectConfigArrayOutputWithContext(ctx context.Context) DbtGitProjectConfigArrayOutput {
	return o
}

func (o DbtGitProjectConfigArrayOutput) Index(i pulumi.IntInput) DbtGitProjectConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbtGitProjectConfig {
		return vs[0].([]*DbtGitProjectConfig)[vs[1].(int)]
	}).(DbtGitProjectConfigOutput)
}

type DbtGitProjectConfigMapOutput struct{ *pulumi.OutputState }

func (DbtGitProjectConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbtGitProjectConfig)(nil)).Elem()
}

func (o DbtGitProjectConfigMapOutput) ToDbtGitProjectConfigMapOutput() DbtGitProjectConfigMapOutput {
	return o
}

func (o DbtGitProjectConfigMapOutput) ToDbtGitProjectConfigMapOutputWithContext(ctx context.Context) DbtGitProjectConfigMapOutput {
	return o
}

func (o DbtGitProjectConfigMapOutput) MapIndex(k pulumi.StringInput) DbtGitProjectConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbtGitProjectConfig {
		return vs[0].(map[string]*DbtGitProjectConfig)[vs[1].(string)]
	}).(DbtGitProjectConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbtGitProjectConfigInput)(nil)).Elem(), &DbtGitProjectConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbtGitProjectConfigArrayInput)(nil)).Elem(), DbtGitProjectConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbtGitProjectConfigMapInput)(nil)).Elem(), DbtGitProjectConfigMap{})
	pulumi.RegisterOutputType(DbtGitProjectConfigOutput{})
	pulumi.RegisterOutputType(DbtGitProjectConfigArrayOutput{})
	pulumi.RegisterOutputType(DbtGitProjectConfigMapOutput{})
}
