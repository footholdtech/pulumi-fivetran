// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"errors"
	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to create, update, and delete hybrid deployment agents.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fivetran.NewHybridDeploymentAgent(ctx, "hybrid_deployment_agent", &fivetran.HybridDeploymentAgentArgs{
//				DisplayName: pulumi.String("display_name"),
//				GroupId:     pulumi.String("group_id"),
//				AuthType:    pulumi.String("AUTO"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type HybridDeploymentAgent struct {
	pulumi.CustomResourceState

	// Base64-encoded content of the auth.json file.
	AuthJson pulumi.StringOutput `pulumi:"authJson"`
	// Type of authentification. Possible values `AUTO`,`MANUAL`
	AuthType pulumi.StringOutput `pulumi:"authType"`
	// Determines whether re-authentication needs to be performed.
	AuthenticationCounter pulumi.IntOutput `pulumi:"authenticationCounter"`
	// Base64-encoded content of the config.json file.
	ConfigJson pulumi.StringOutput `pulumi:"configJson"`
	// The unique name for the hybrid deployment agent.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Base64-encoded content of the compose file for the chosen containerization type.
	DockerComposeYaml pulumi.StringOutput `pulumi:"dockerComposeYaml"`
	// Environment type. Possible values `DOCKER`,`PODMAN`,`KUBERNETES`,`SNOWPARK`
	EnvType pulumi.StringOutput `pulumi:"envType"`
	// The unique identifier for the Group within the Fivetran system.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The timestamp of the time the hybrid deployment agent was created in your account.
	RegisteredAt pulumi.StringOutput `pulumi:"registeredAt"`
	// Base64 encoded content of token.
	Token pulumi.StringOutput `pulumi:"token"`
}

// NewHybridDeploymentAgent registers a new resource with the given unique name, arguments, and options.
func NewHybridDeploymentAgent(ctx *pulumi.Context,
	name string, args *HybridDeploymentAgentArgs, opts ...pulumi.ResourceOption) (*HybridDeploymentAgent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthType == nil {
		return nil, errors.New("invalid value for required argument 'AuthType'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.EnvType == nil {
		return nil, errors.New("invalid value for required argument 'EnvType'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HybridDeploymentAgent
	err := ctx.RegisterResource("fivetran:index/hybridDeploymentAgent:HybridDeploymentAgent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHybridDeploymentAgent gets an existing HybridDeploymentAgent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHybridDeploymentAgent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HybridDeploymentAgentState, opts ...pulumi.ResourceOption) (*HybridDeploymentAgent, error) {
	var resource HybridDeploymentAgent
	err := ctx.ReadResource("fivetran:index/hybridDeploymentAgent:HybridDeploymentAgent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HybridDeploymentAgent resources.
type hybridDeploymentAgentState struct {
	// Base64-encoded content of the auth.json file.
	AuthJson *string `pulumi:"authJson"`
	// Type of authentification. Possible values `AUTO`,`MANUAL`
	AuthType *string `pulumi:"authType"`
	// Determines whether re-authentication needs to be performed.
	AuthenticationCounter *int `pulumi:"authenticationCounter"`
	// Base64-encoded content of the config.json file.
	ConfigJson *string `pulumi:"configJson"`
	// The unique name for the hybrid deployment agent.
	DisplayName *string `pulumi:"displayName"`
	// Base64-encoded content of the compose file for the chosen containerization type.
	DockerComposeYaml *string `pulumi:"dockerComposeYaml"`
	// Environment type. Possible values `DOCKER`,`PODMAN`,`KUBERNETES`,`SNOWPARK`
	EnvType *string `pulumi:"envType"`
	// The unique identifier for the Group within the Fivetran system.
	GroupId *string `pulumi:"groupId"`
	// The timestamp of the time the hybrid deployment agent was created in your account.
	RegisteredAt *string `pulumi:"registeredAt"`
	// Base64 encoded content of token.
	Token *string `pulumi:"token"`
}

type HybridDeploymentAgentState struct {
	// Base64-encoded content of the auth.json file.
	AuthJson pulumi.StringPtrInput
	// Type of authentification. Possible values `AUTO`,`MANUAL`
	AuthType pulumi.StringPtrInput
	// Determines whether re-authentication needs to be performed.
	AuthenticationCounter pulumi.IntPtrInput
	// Base64-encoded content of the config.json file.
	ConfigJson pulumi.StringPtrInput
	// The unique name for the hybrid deployment agent.
	DisplayName pulumi.StringPtrInput
	// Base64-encoded content of the compose file for the chosen containerization type.
	DockerComposeYaml pulumi.StringPtrInput
	// Environment type. Possible values `DOCKER`,`PODMAN`,`KUBERNETES`,`SNOWPARK`
	EnvType pulumi.StringPtrInput
	// The unique identifier for the Group within the Fivetran system.
	GroupId pulumi.StringPtrInput
	// The timestamp of the time the hybrid deployment agent was created in your account.
	RegisteredAt pulumi.StringPtrInput
	// Base64 encoded content of token.
	Token pulumi.StringPtrInput
}

func (HybridDeploymentAgentState) ElementType() reflect.Type {
	return reflect.TypeOf((*hybridDeploymentAgentState)(nil)).Elem()
}

type hybridDeploymentAgentArgs struct {
	// Type of authentification. Possible values `AUTO`,`MANUAL`
	AuthType string `pulumi:"authType"`
	// Determines whether re-authentication needs to be performed.
	AuthenticationCounter *int `pulumi:"authenticationCounter"`
	// The unique name for the hybrid deployment agent.
	DisplayName string `pulumi:"displayName"`
	// Environment type. Possible values `DOCKER`,`PODMAN`,`KUBERNETES`,`SNOWPARK`
	EnvType string `pulumi:"envType"`
	// The unique identifier for the Group within the Fivetran system.
	GroupId string `pulumi:"groupId"`
}

// The set of arguments for constructing a HybridDeploymentAgent resource.
type HybridDeploymentAgentArgs struct {
	// Type of authentification. Possible values `AUTO`,`MANUAL`
	AuthType pulumi.StringInput
	// Determines whether re-authentication needs to be performed.
	AuthenticationCounter pulumi.IntPtrInput
	// The unique name for the hybrid deployment agent.
	DisplayName pulumi.StringInput
	// Environment type. Possible values `DOCKER`,`PODMAN`,`KUBERNETES`,`SNOWPARK`
	EnvType pulumi.StringInput
	// The unique identifier for the Group within the Fivetran system.
	GroupId pulumi.StringInput
}

func (HybridDeploymentAgentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hybridDeploymentAgentArgs)(nil)).Elem()
}

type HybridDeploymentAgentInput interface {
	pulumi.Input

	ToHybridDeploymentAgentOutput() HybridDeploymentAgentOutput
	ToHybridDeploymentAgentOutputWithContext(ctx context.Context) HybridDeploymentAgentOutput
}

func (*HybridDeploymentAgent) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridDeploymentAgent)(nil)).Elem()
}

func (i *HybridDeploymentAgent) ToHybridDeploymentAgentOutput() HybridDeploymentAgentOutput {
	return i.ToHybridDeploymentAgentOutputWithContext(context.Background())
}

func (i *HybridDeploymentAgent) ToHybridDeploymentAgentOutputWithContext(ctx context.Context) HybridDeploymentAgentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridDeploymentAgentOutput)
}

// HybridDeploymentAgentArrayInput is an input type that accepts HybridDeploymentAgentArray and HybridDeploymentAgentArrayOutput values.
// You can construct a concrete instance of `HybridDeploymentAgentArrayInput` via:
//
//	HybridDeploymentAgentArray{ HybridDeploymentAgentArgs{...} }
type HybridDeploymentAgentArrayInput interface {
	pulumi.Input

	ToHybridDeploymentAgentArrayOutput() HybridDeploymentAgentArrayOutput
	ToHybridDeploymentAgentArrayOutputWithContext(context.Context) HybridDeploymentAgentArrayOutput
}

type HybridDeploymentAgentArray []HybridDeploymentAgentInput

func (HybridDeploymentAgentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HybridDeploymentAgent)(nil)).Elem()
}

func (i HybridDeploymentAgentArray) ToHybridDeploymentAgentArrayOutput() HybridDeploymentAgentArrayOutput {
	return i.ToHybridDeploymentAgentArrayOutputWithContext(context.Background())
}

func (i HybridDeploymentAgentArray) ToHybridDeploymentAgentArrayOutputWithContext(ctx context.Context) HybridDeploymentAgentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridDeploymentAgentArrayOutput)
}

// HybridDeploymentAgentMapInput is an input type that accepts HybridDeploymentAgentMap and HybridDeploymentAgentMapOutput values.
// You can construct a concrete instance of `HybridDeploymentAgentMapInput` via:
//
//	HybridDeploymentAgentMap{ "key": HybridDeploymentAgentArgs{...} }
type HybridDeploymentAgentMapInput interface {
	pulumi.Input

	ToHybridDeploymentAgentMapOutput() HybridDeploymentAgentMapOutput
	ToHybridDeploymentAgentMapOutputWithContext(context.Context) HybridDeploymentAgentMapOutput
}

type HybridDeploymentAgentMap map[string]HybridDeploymentAgentInput

func (HybridDeploymentAgentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HybridDeploymentAgent)(nil)).Elem()
}

func (i HybridDeploymentAgentMap) ToHybridDeploymentAgentMapOutput() HybridDeploymentAgentMapOutput {
	return i.ToHybridDeploymentAgentMapOutputWithContext(context.Background())
}

func (i HybridDeploymentAgentMap) ToHybridDeploymentAgentMapOutputWithContext(ctx context.Context) HybridDeploymentAgentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HybridDeploymentAgentMapOutput)
}

type HybridDeploymentAgentOutput struct{ *pulumi.OutputState }

func (HybridDeploymentAgentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HybridDeploymentAgent)(nil)).Elem()
}

func (o HybridDeploymentAgentOutput) ToHybridDeploymentAgentOutput() HybridDeploymentAgentOutput {
	return o
}

func (o HybridDeploymentAgentOutput) ToHybridDeploymentAgentOutputWithContext(ctx context.Context) HybridDeploymentAgentOutput {
	return o
}

// Base64-encoded content of the auth.json file.
func (o HybridDeploymentAgentOutput) AuthJson() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridDeploymentAgent) pulumi.StringOutput { return v.AuthJson }).(pulumi.StringOutput)
}

// Type of authentification. Possible values `AUTO`,`MANUAL`
func (o HybridDeploymentAgentOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridDeploymentAgent) pulumi.StringOutput { return v.AuthType }).(pulumi.StringOutput)
}

// Determines whether re-authentication needs to be performed.
func (o HybridDeploymentAgentOutput) AuthenticationCounter() pulumi.IntOutput {
	return o.ApplyT(func(v *HybridDeploymentAgent) pulumi.IntOutput { return v.AuthenticationCounter }).(pulumi.IntOutput)
}

// Base64-encoded content of the config.json file.
func (o HybridDeploymentAgentOutput) ConfigJson() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridDeploymentAgent) pulumi.StringOutput { return v.ConfigJson }).(pulumi.StringOutput)
}

// The unique name for the hybrid deployment agent.
func (o HybridDeploymentAgentOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridDeploymentAgent) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Base64-encoded content of the compose file for the chosen containerization type.
func (o HybridDeploymentAgentOutput) DockerComposeYaml() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridDeploymentAgent) pulumi.StringOutput { return v.DockerComposeYaml }).(pulumi.StringOutput)
}

// Environment type. Possible values `DOCKER`,`PODMAN`,`KUBERNETES`,`SNOWPARK`
func (o HybridDeploymentAgentOutput) EnvType() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridDeploymentAgent) pulumi.StringOutput { return v.EnvType }).(pulumi.StringOutput)
}

// The unique identifier for the Group within the Fivetran system.
func (o HybridDeploymentAgentOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridDeploymentAgent) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The timestamp of the time the hybrid deployment agent was created in your account.
func (o HybridDeploymentAgentOutput) RegisteredAt() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridDeploymentAgent) pulumi.StringOutput { return v.RegisteredAt }).(pulumi.StringOutput)
}

// Base64 encoded content of token.
func (o HybridDeploymentAgentOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *HybridDeploymentAgent) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

type HybridDeploymentAgentArrayOutput struct{ *pulumi.OutputState }

func (HybridDeploymentAgentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HybridDeploymentAgent)(nil)).Elem()
}

func (o HybridDeploymentAgentArrayOutput) ToHybridDeploymentAgentArrayOutput() HybridDeploymentAgentArrayOutput {
	return o
}

func (o HybridDeploymentAgentArrayOutput) ToHybridDeploymentAgentArrayOutputWithContext(ctx context.Context) HybridDeploymentAgentArrayOutput {
	return o
}

func (o HybridDeploymentAgentArrayOutput) Index(i pulumi.IntInput) HybridDeploymentAgentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HybridDeploymentAgent {
		return vs[0].([]*HybridDeploymentAgent)[vs[1].(int)]
	}).(HybridDeploymentAgentOutput)
}

type HybridDeploymentAgentMapOutput struct{ *pulumi.OutputState }

func (HybridDeploymentAgentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HybridDeploymentAgent)(nil)).Elem()
}

func (o HybridDeploymentAgentMapOutput) ToHybridDeploymentAgentMapOutput() HybridDeploymentAgentMapOutput {
	return o
}

func (o HybridDeploymentAgentMapOutput) ToHybridDeploymentAgentMapOutputWithContext(ctx context.Context) HybridDeploymentAgentMapOutput {
	return o
}

func (o HybridDeploymentAgentMapOutput) MapIndex(k pulumi.StringInput) HybridDeploymentAgentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HybridDeploymentAgent {
		return vs[0].(map[string]*HybridDeploymentAgent)[vs[1].(string)]
	}).(HybridDeploymentAgentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HybridDeploymentAgentInput)(nil)).Elem(), &HybridDeploymentAgent{})
	pulumi.RegisterInputType(reflect.TypeOf((*HybridDeploymentAgentArrayInput)(nil)).Elem(), HybridDeploymentAgentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HybridDeploymentAgentMapInput)(nil)).Elem(), HybridDeploymentAgentMap{})
	pulumi.RegisterOutputType(HybridDeploymentAgentOutput{})
	pulumi.RegisterOutputType(HybridDeploymentAgentArrayOutput{})
	pulumi.RegisterOutputType(HybridDeploymentAgentMapOutput{})
}
