// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"errors"
	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to manage list of approved SSH fingerprints for a particular connector.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fivetran.NewConnectorFingerprints(ctx, "myConnectorApprovedFingerprints", &fivetran.ConnectorFingerprintsArgs{
//				ConnectorId: pulumi.Any(fivetran_connector.My_connector.Id),
//				Fingerprints: fivetran.ConnectorFingerprintsFingerprintArray{
//					&fivetran.ConnectorFingerprintsFingerprintArgs{
//						Hash:      pulumi.String("jhgfJfgrI6yy..."),
//						PublicKey: pulumi.String("ssh-rsa CCCCB3NzaC1yc2ECCASFWFWDFRWT5WAS ... fivetran user key"),
//					},
//					&fivetran.ConnectorFingerprintsFingerprintArgs{
//						Hash:      pulumi.String("eUtPirI6yytWe..."),
//						PublicKey: pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6 ... fivetran user key"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// 1. To import an existing `fivetran_connector_fingerprints` resource into your Terraform state, you need to get **Fivetran Connector ID** on the **Setup** tab of the connector page in your Fivetran dashboard.
//
// 2. Retrieve all connectors in a particular group using the [fivetran_group_connectors data source](/docs/data-sources/group_connectors). To retrieve existing groups, use the [fivetran_groups data source](/docs/data-sources/groups).
//
// 3. Define an empty resource in your `.tf` configuration:
//
// hcl
//
// resource "fivetran_connector_fingerprints" "my_imported_connector_fingerprints" {
//
// }
//
// 4. Run the `pulumi import` command:
//
// ```sh
// $ pulumi import fivetran:index/connectorFingerprints:ConnectorFingerprints my_imported_connector_fingerprints {your Fivetran Connector ID}
// ```
//
// 5.  Use the `terraform state show` command to get the values from the state:
//
// terraform state show 'fivetran_connector_fingerprints.my_imported_connector_fingerprints'
//
// 6. Copy the values and paste them to your `.tf` configuration.
type ConnectorFingerprints struct {
	pulumi.CustomResourceState

	// The unique identifier for the target connector within the Fivetran system.
	ConnectorId  pulumi.StringOutput                         `pulumi:"connectorId"`
	Fingerprints ConnectorFingerprintsFingerprintArrayOutput `pulumi:"fingerprints"`
}

// NewConnectorFingerprints registers a new resource with the given unique name, arguments, and options.
func NewConnectorFingerprints(ctx *pulumi.Context,
	name string, args *ConnectorFingerprintsArgs, opts ...pulumi.ResourceOption) (*ConnectorFingerprints, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectorFingerprints
	err := ctx.RegisterResource("fivetran:index/connectorFingerprints:ConnectorFingerprints", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorFingerprints gets an existing ConnectorFingerprints resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorFingerprints(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorFingerprintsState, opts ...pulumi.ResourceOption) (*ConnectorFingerprints, error) {
	var resource ConnectorFingerprints
	err := ctx.ReadResource("fivetran:index/connectorFingerprints:ConnectorFingerprints", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorFingerprints resources.
type connectorFingerprintsState struct {
	// The unique identifier for the target connector within the Fivetran system.
	ConnectorId  *string                            `pulumi:"connectorId"`
	Fingerprints []ConnectorFingerprintsFingerprint `pulumi:"fingerprints"`
}

type ConnectorFingerprintsState struct {
	// The unique identifier for the target connector within the Fivetran system.
	ConnectorId  pulumi.StringPtrInput
	Fingerprints ConnectorFingerprintsFingerprintArrayInput
}

func (ConnectorFingerprintsState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorFingerprintsState)(nil)).Elem()
}

type connectorFingerprintsArgs struct {
	// The unique identifier for the target connector within the Fivetran system.
	ConnectorId  string                             `pulumi:"connectorId"`
	Fingerprints []ConnectorFingerprintsFingerprint `pulumi:"fingerprints"`
}

// The set of arguments for constructing a ConnectorFingerprints resource.
type ConnectorFingerprintsArgs struct {
	// The unique identifier for the target connector within the Fivetran system.
	ConnectorId  pulumi.StringInput
	Fingerprints ConnectorFingerprintsFingerprintArrayInput
}

func (ConnectorFingerprintsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorFingerprintsArgs)(nil)).Elem()
}

type ConnectorFingerprintsInput interface {
	pulumi.Input

	ToConnectorFingerprintsOutput() ConnectorFingerprintsOutput
	ToConnectorFingerprintsOutputWithContext(ctx context.Context) ConnectorFingerprintsOutput
}

func (*ConnectorFingerprints) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorFingerprints)(nil)).Elem()
}

func (i *ConnectorFingerprints) ToConnectorFingerprintsOutput() ConnectorFingerprintsOutput {
	return i.ToConnectorFingerprintsOutputWithContext(context.Background())
}

func (i *ConnectorFingerprints) ToConnectorFingerprintsOutputWithContext(ctx context.Context) ConnectorFingerprintsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorFingerprintsOutput)
}

// ConnectorFingerprintsArrayInput is an input type that accepts ConnectorFingerprintsArray and ConnectorFingerprintsArrayOutput values.
// You can construct a concrete instance of `ConnectorFingerprintsArrayInput` via:
//
//	ConnectorFingerprintsArray{ ConnectorFingerprintsArgs{...} }
type ConnectorFingerprintsArrayInput interface {
	pulumi.Input

	ToConnectorFingerprintsArrayOutput() ConnectorFingerprintsArrayOutput
	ToConnectorFingerprintsArrayOutputWithContext(context.Context) ConnectorFingerprintsArrayOutput
}

type ConnectorFingerprintsArray []ConnectorFingerprintsInput

func (ConnectorFingerprintsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorFingerprints)(nil)).Elem()
}

func (i ConnectorFingerprintsArray) ToConnectorFingerprintsArrayOutput() ConnectorFingerprintsArrayOutput {
	return i.ToConnectorFingerprintsArrayOutputWithContext(context.Background())
}

func (i ConnectorFingerprintsArray) ToConnectorFingerprintsArrayOutputWithContext(ctx context.Context) ConnectorFingerprintsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorFingerprintsArrayOutput)
}

// ConnectorFingerprintsMapInput is an input type that accepts ConnectorFingerprintsMap and ConnectorFingerprintsMapOutput values.
// You can construct a concrete instance of `ConnectorFingerprintsMapInput` via:
//
//	ConnectorFingerprintsMap{ "key": ConnectorFingerprintsArgs{...} }
type ConnectorFingerprintsMapInput interface {
	pulumi.Input

	ToConnectorFingerprintsMapOutput() ConnectorFingerprintsMapOutput
	ToConnectorFingerprintsMapOutputWithContext(context.Context) ConnectorFingerprintsMapOutput
}

type ConnectorFingerprintsMap map[string]ConnectorFingerprintsInput

func (ConnectorFingerprintsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorFingerprints)(nil)).Elem()
}

func (i ConnectorFingerprintsMap) ToConnectorFingerprintsMapOutput() ConnectorFingerprintsMapOutput {
	return i.ToConnectorFingerprintsMapOutputWithContext(context.Background())
}

func (i ConnectorFingerprintsMap) ToConnectorFingerprintsMapOutputWithContext(ctx context.Context) ConnectorFingerprintsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorFingerprintsMapOutput)
}

type ConnectorFingerprintsOutput struct{ *pulumi.OutputState }

func (ConnectorFingerprintsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorFingerprints)(nil)).Elem()
}

func (o ConnectorFingerprintsOutput) ToConnectorFingerprintsOutput() ConnectorFingerprintsOutput {
	return o
}

func (o ConnectorFingerprintsOutput) ToConnectorFingerprintsOutputWithContext(ctx context.Context) ConnectorFingerprintsOutput {
	return o
}

// The unique identifier for the target connector within the Fivetran system.
func (o ConnectorFingerprintsOutput) ConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorFingerprints) pulumi.StringOutput { return v.ConnectorId }).(pulumi.StringOutput)
}

func (o ConnectorFingerprintsOutput) Fingerprints() ConnectorFingerprintsFingerprintArrayOutput {
	return o.ApplyT(func(v *ConnectorFingerprints) ConnectorFingerprintsFingerprintArrayOutput { return v.Fingerprints }).(ConnectorFingerprintsFingerprintArrayOutput)
}

type ConnectorFingerprintsArrayOutput struct{ *pulumi.OutputState }

func (ConnectorFingerprintsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorFingerprints)(nil)).Elem()
}

func (o ConnectorFingerprintsArrayOutput) ToConnectorFingerprintsArrayOutput() ConnectorFingerprintsArrayOutput {
	return o
}

func (o ConnectorFingerprintsArrayOutput) ToConnectorFingerprintsArrayOutputWithContext(ctx context.Context) ConnectorFingerprintsArrayOutput {
	return o
}

func (o ConnectorFingerprintsArrayOutput) Index(i pulumi.IntInput) ConnectorFingerprintsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorFingerprints {
		return vs[0].([]*ConnectorFingerprints)[vs[1].(int)]
	}).(ConnectorFingerprintsOutput)
}

type ConnectorFingerprintsMapOutput struct{ *pulumi.OutputState }

func (ConnectorFingerprintsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorFingerprints)(nil)).Elem()
}

func (o ConnectorFingerprintsMapOutput) ToConnectorFingerprintsMapOutput() ConnectorFingerprintsMapOutput {
	return o
}

func (o ConnectorFingerprintsMapOutput) ToConnectorFingerprintsMapOutputWithContext(ctx context.Context) ConnectorFingerprintsMapOutput {
	return o
}

func (o ConnectorFingerprintsMapOutput) MapIndex(k pulumi.StringInput) ConnectorFingerprintsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorFingerprints {
		return vs[0].(map[string]*ConnectorFingerprints)[vs[1].(string)]
	}).(ConnectorFingerprintsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorFingerprintsInput)(nil)).Elem(), &ConnectorFingerprints{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorFingerprintsArrayInput)(nil)).Elem(), ConnectorFingerprintsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorFingerprintsMapInput)(nil)).Elem(), ConnectorFingerprintsMap{})
	pulumi.RegisterOutputType(ConnectorFingerprintsOutput{})
	pulumi.RegisterOutputType(ConnectorFingerprintsArrayOutput{})
	pulumi.RegisterOutputType(ConnectorFingerprintsMapOutput{})
}
