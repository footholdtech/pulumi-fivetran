// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"errors"
	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to create, update, and delete connector membership for user
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fivetran.NewUserConnectorMembership(ctx, "testUserConnectorMembership", &fivetran.UserConnectorMembershipArgs{
//				UserId: pulumi.String("test_user"),
//				Connectors: fivetran.UserConnectorMembershipConnectorArray{
//					&fivetran.UserConnectorMembershipConnectorArgs{
//						ConnectorId: pulumi.String("test_connector"),
//						Role:        pulumi.String("Connector Administrator"),
//						CreatedAt:   pulumi.String("2020-05-25T15:26:47.306509Z"),
//					},
//					&fivetran.UserConnectorMembershipConnectorArgs{
//						ConnectorId: pulumi.String("test_connector"),
//						Role:        pulumi.String("Connector Administrator"),
//						CreatedAt:   pulumi.String("2020-05-25T15:26:47.306509Z"),
//					},
//				},
//			}, pulumi.Provider(fivetran_provider))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// 1. To import an existing `fivetran_user_connector_membership` resource into your Terraform state, you need to get `user_id` and `connector_id`
//
// You can retrieve all users using the [fivetran_users data source](/docs/data-sources/users).
//
// 2. Define an empty resource in your `.tf` configuration:
//
// hcl
//
// resource "fivetran_user_connector_membership" "my_imported_fivetran_user_connector_membership" {
//
// }
//
// 3. Run the `pulumi import` command:
//
// ```sh
// $ pulumi import fivetran:index/userConnectorMembership:UserConnectorMembership my_imported_fivetran_user_connector_membership {user_id}
// ```
//
// 4. Use the `terraform state show` command to get the values from the state:
//
// terraform state show 'fivetran_user_connector_membership.my_imported_fivetran_user_connector_membership'
//
// 5. Copy the values and paste them to your `.tf` configuration.
type UserConnectorMembership struct {
	pulumi.CustomResourceState

	Connectors UserConnectorMembershipConnectorArrayOutput `pulumi:"connectors"`
	// The unique identifier for the user within your account.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewUserConnectorMembership registers a new resource with the given unique name, arguments, and options.
func NewUserConnectorMembership(ctx *pulumi.Context,
	name string, args *UserConnectorMembershipArgs, opts ...pulumi.ResourceOption) (*UserConnectorMembership, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserConnectorMembership
	err := ctx.RegisterResource("fivetran:index/userConnectorMembership:UserConnectorMembership", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserConnectorMembership gets an existing UserConnectorMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserConnectorMembership(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserConnectorMembershipState, opts ...pulumi.ResourceOption) (*UserConnectorMembership, error) {
	var resource UserConnectorMembership
	err := ctx.ReadResource("fivetran:index/userConnectorMembership:UserConnectorMembership", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserConnectorMembership resources.
type userConnectorMembershipState struct {
	Connectors []UserConnectorMembershipConnector `pulumi:"connectors"`
	// The unique identifier for the user within your account.
	UserId *string `pulumi:"userId"`
}

type UserConnectorMembershipState struct {
	Connectors UserConnectorMembershipConnectorArrayInput
	// The unique identifier for the user within your account.
	UserId pulumi.StringPtrInput
}

func (UserConnectorMembershipState) ElementType() reflect.Type {
	return reflect.TypeOf((*userConnectorMembershipState)(nil)).Elem()
}

type userConnectorMembershipArgs struct {
	Connectors []UserConnectorMembershipConnector `pulumi:"connectors"`
	// The unique identifier for the user within your account.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a UserConnectorMembership resource.
type UserConnectorMembershipArgs struct {
	Connectors UserConnectorMembershipConnectorArrayInput
	// The unique identifier for the user within your account.
	UserId pulumi.StringInput
}

func (UserConnectorMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userConnectorMembershipArgs)(nil)).Elem()
}

type UserConnectorMembershipInput interface {
	pulumi.Input

	ToUserConnectorMembershipOutput() UserConnectorMembershipOutput
	ToUserConnectorMembershipOutputWithContext(ctx context.Context) UserConnectorMembershipOutput
}

func (*UserConnectorMembership) ElementType() reflect.Type {
	return reflect.TypeOf((**UserConnectorMembership)(nil)).Elem()
}

func (i *UserConnectorMembership) ToUserConnectorMembershipOutput() UserConnectorMembershipOutput {
	return i.ToUserConnectorMembershipOutputWithContext(context.Background())
}

func (i *UserConnectorMembership) ToUserConnectorMembershipOutputWithContext(ctx context.Context) UserConnectorMembershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserConnectorMembershipOutput)
}

// UserConnectorMembershipArrayInput is an input type that accepts UserConnectorMembershipArray and UserConnectorMembershipArrayOutput values.
// You can construct a concrete instance of `UserConnectorMembershipArrayInput` via:
//
//	UserConnectorMembershipArray{ UserConnectorMembershipArgs{...} }
type UserConnectorMembershipArrayInput interface {
	pulumi.Input

	ToUserConnectorMembershipArrayOutput() UserConnectorMembershipArrayOutput
	ToUserConnectorMembershipArrayOutputWithContext(context.Context) UserConnectorMembershipArrayOutput
}

type UserConnectorMembershipArray []UserConnectorMembershipInput

func (UserConnectorMembershipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserConnectorMembership)(nil)).Elem()
}

func (i UserConnectorMembershipArray) ToUserConnectorMembershipArrayOutput() UserConnectorMembershipArrayOutput {
	return i.ToUserConnectorMembershipArrayOutputWithContext(context.Background())
}

func (i UserConnectorMembershipArray) ToUserConnectorMembershipArrayOutputWithContext(ctx context.Context) UserConnectorMembershipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserConnectorMembershipArrayOutput)
}

// UserConnectorMembershipMapInput is an input type that accepts UserConnectorMembershipMap and UserConnectorMembershipMapOutput values.
// You can construct a concrete instance of `UserConnectorMembershipMapInput` via:
//
//	UserConnectorMembershipMap{ "key": UserConnectorMembershipArgs{...} }
type UserConnectorMembershipMapInput interface {
	pulumi.Input

	ToUserConnectorMembershipMapOutput() UserConnectorMembershipMapOutput
	ToUserConnectorMembershipMapOutputWithContext(context.Context) UserConnectorMembershipMapOutput
}

type UserConnectorMembershipMap map[string]UserConnectorMembershipInput

func (UserConnectorMembershipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserConnectorMembership)(nil)).Elem()
}

func (i UserConnectorMembershipMap) ToUserConnectorMembershipMapOutput() UserConnectorMembershipMapOutput {
	return i.ToUserConnectorMembershipMapOutputWithContext(context.Background())
}

func (i UserConnectorMembershipMap) ToUserConnectorMembershipMapOutputWithContext(ctx context.Context) UserConnectorMembershipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserConnectorMembershipMapOutput)
}

type UserConnectorMembershipOutput struct{ *pulumi.OutputState }

func (UserConnectorMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserConnectorMembership)(nil)).Elem()
}

func (o UserConnectorMembershipOutput) ToUserConnectorMembershipOutput() UserConnectorMembershipOutput {
	return o
}

func (o UserConnectorMembershipOutput) ToUserConnectorMembershipOutputWithContext(ctx context.Context) UserConnectorMembershipOutput {
	return o
}

func (o UserConnectorMembershipOutput) Connectors() UserConnectorMembershipConnectorArrayOutput {
	return o.ApplyT(func(v *UserConnectorMembership) UserConnectorMembershipConnectorArrayOutput { return v.Connectors }).(UserConnectorMembershipConnectorArrayOutput)
}

// The unique identifier for the user within your account.
func (o UserConnectorMembershipOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserConnectorMembership) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type UserConnectorMembershipArrayOutput struct{ *pulumi.OutputState }

func (UserConnectorMembershipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserConnectorMembership)(nil)).Elem()
}

func (o UserConnectorMembershipArrayOutput) ToUserConnectorMembershipArrayOutput() UserConnectorMembershipArrayOutput {
	return o
}

func (o UserConnectorMembershipArrayOutput) ToUserConnectorMembershipArrayOutputWithContext(ctx context.Context) UserConnectorMembershipArrayOutput {
	return o
}

func (o UserConnectorMembershipArrayOutput) Index(i pulumi.IntInput) UserConnectorMembershipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserConnectorMembership {
		return vs[0].([]*UserConnectorMembership)[vs[1].(int)]
	}).(UserConnectorMembershipOutput)
}

type UserConnectorMembershipMapOutput struct{ *pulumi.OutputState }

func (UserConnectorMembershipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserConnectorMembership)(nil)).Elem()
}

func (o UserConnectorMembershipMapOutput) ToUserConnectorMembershipMapOutput() UserConnectorMembershipMapOutput {
	return o
}

func (o UserConnectorMembershipMapOutput) ToUserConnectorMembershipMapOutputWithContext(ctx context.Context) UserConnectorMembershipMapOutput {
	return o
}

func (o UserConnectorMembershipMapOutput) MapIndex(k pulumi.StringInput) UserConnectorMembershipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserConnectorMembership {
		return vs[0].(map[string]*UserConnectorMembership)[vs[1].(string)]
	}).(UserConnectorMembershipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserConnectorMembershipInput)(nil)).Elem(), &UserConnectorMembership{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserConnectorMembershipArrayInput)(nil)).Elem(), UserConnectorMembershipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserConnectorMembershipMapInput)(nil)).Elem(), UserConnectorMembershipMap{})
	pulumi.RegisterOutputType(UserConnectorMembershipOutput{})
	pulumi.RegisterOutputType(UserConnectorMembershipArrayOutput{})
	pulumi.RegisterOutputType(UserConnectorMembershipMapOutput{})
}
