// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fivetran

import (
	"context"
	"reflect"

	"errors"
	"github.com/footholdtech/pulumi-fivetran/sdk/go/fivetran/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type DestinationCertificates struct {
	pulumi.CustomResourceState

	Certificates DestinationCertificatesCertificateArrayOutput `pulumi:"certificates"`
	// The unique identifier for the target destination within the Fivetran system.
	DestinationId pulumi.StringOutput `pulumi:"destinationId"`
}

// NewDestinationCertificates registers a new resource with the given unique name, arguments, and options.
func NewDestinationCertificates(ctx *pulumi.Context,
	name string, args *DestinationCertificatesArgs, opts ...pulumi.ResourceOption) (*DestinationCertificates, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationId == nil {
		return nil, errors.New("invalid value for required argument 'DestinationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DestinationCertificates
	err := ctx.RegisterResource("fivetran:index/destinationCertificates:DestinationCertificates", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationCertificates gets an existing DestinationCertificates resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationCertificates(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationCertificatesState, opts ...pulumi.ResourceOption) (*DestinationCertificates, error) {
	var resource DestinationCertificates
	err := ctx.ReadResource("fivetran:index/destinationCertificates:DestinationCertificates", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationCertificates resources.
type destinationCertificatesState struct {
	Certificates []DestinationCertificatesCertificate `pulumi:"certificates"`
	// The unique identifier for the target destination within the Fivetran system.
	DestinationId *string `pulumi:"destinationId"`
}

type DestinationCertificatesState struct {
	Certificates DestinationCertificatesCertificateArrayInput
	// The unique identifier for the target destination within the Fivetran system.
	DestinationId pulumi.StringPtrInput
}

func (DestinationCertificatesState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationCertificatesState)(nil)).Elem()
}

type destinationCertificatesArgs struct {
	Certificates []DestinationCertificatesCertificate `pulumi:"certificates"`
	// The unique identifier for the target destination within the Fivetran system.
	DestinationId string `pulumi:"destinationId"`
}

// The set of arguments for constructing a DestinationCertificates resource.
type DestinationCertificatesArgs struct {
	Certificates DestinationCertificatesCertificateArrayInput
	// The unique identifier for the target destination within the Fivetran system.
	DestinationId pulumi.StringInput
}

func (DestinationCertificatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationCertificatesArgs)(nil)).Elem()
}

type DestinationCertificatesInput interface {
	pulumi.Input

	ToDestinationCertificatesOutput() DestinationCertificatesOutput
	ToDestinationCertificatesOutputWithContext(ctx context.Context) DestinationCertificatesOutput
}

func (*DestinationCertificates) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationCertificates)(nil)).Elem()
}

func (i *DestinationCertificates) ToDestinationCertificatesOutput() DestinationCertificatesOutput {
	return i.ToDestinationCertificatesOutputWithContext(context.Background())
}

func (i *DestinationCertificates) ToDestinationCertificatesOutputWithContext(ctx context.Context) DestinationCertificatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationCertificatesOutput)
}

func (i *DestinationCertificates) ToOutput(ctx context.Context) pulumix.Output[*DestinationCertificates] {
	return pulumix.Output[*DestinationCertificates]{
		OutputState: i.ToDestinationCertificatesOutputWithContext(ctx).OutputState,
	}
}

// DestinationCertificatesArrayInput is an input type that accepts DestinationCertificatesArray and DestinationCertificatesArrayOutput values.
// You can construct a concrete instance of `DestinationCertificatesArrayInput` via:
//
//	DestinationCertificatesArray{ DestinationCertificatesArgs{...} }
type DestinationCertificatesArrayInput interface {
	pulumi.Input

	ToDestinationCertificatesArrayOutput() DestinationCertificatesArrayOutput
	ToDestinationCertificatesArrayOutputWithContext(context.Context) DestinationCertificatesArrayOutput
}

type DestinationCertificatesArray []DestinationCertificatesInput

func (DestinationCertificatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationCertificates)(nil)).Elem()
}

func (i DestinationCertificatesArray) ToDestinationCertificatesArrayOutput() DestinationCertificatesArrayOutput {
	return i.ToDestinationCertificatesArrayOutputWithContext(context.Background())
}

func (i DestinationCertificatesArray) ToDestinationCertificatesArrayOutputWithContext(ctx context.Context) DestinationCertificatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationCertificatesArrayOutput)
}

func (i DestinationCertificatesArray) ToOutput(ctx context.Context) pulumix.Output[[]*DestinationCertificates] {
	return pulumix.Output[[]*DestinationCertificates]{
		OutputState: i.ToDestinationCertificatesArrayOutputWithContext(ctx).OutputState,
	}
}

// DestinationCertificatesMapInput is an input type that accepts DestinationCertificatesMap and DestinationCertificatesMapOutput values.
// You can construct a concrete instance of `DestinationCertificatesMapInput` via:
//
//	DestinationCertificatesMap{ "key": DestinationCertificatesArgs{...} }
type DestinationCertificatesMapInput interface {
	pulumi.Input

	ToDestinationCertificatesMapOutput() DestinationCertificatesMapOutput
	ToDestinationCertificatesMapOutputWithContext(context.Context) DestinationCertificatesMapOutput
}

type DestinationCertificatesMap map[string]DestinationCertificatesInput

func (DestinationCertificatesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationCertificates)(nil)).Elem()
}

func (i DestinationCertificatesMap) ToDestinationCertificatesMapOutput() DestinationCertificatesMapOutput {
	return i.ToDestinationCertificatesMapOutputWithContext(context.Background())
}

func (i DestinationCertificatesMap) ToDestinationCertificatesMapOutputWithContext(ctx context.Context) DestinationCertificatesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationCertificatesMapOutput)
}

func (i DestinationCertificatesMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DestinationCertificates] {
	return pulumix.Output[map[string]*DestinationCertificates]{
		OutputState: i.ToDestinationCertificatesMapOutputWithContext(ctx).OutputState,
	}
}

type DestinationCertificatesOutput struct{ *pulumi.OutputState }

func (DestinationCertificatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationCertificates)(nil)).Elem()
}

func (o DestinationCertificatesOutput) ToDestinationCertificatesOutput() DestinationCertificatesOutput {
	return o
}

func (o DestinationCertificatesOutput) ToDestinationCertificatesOutputWithContext(ctx context.Context) DestinationCertificatesOutput {
	return o
}

func (o DestinationCertificatesOutput) ToOutput(ctx context.Context) pulumix.Output[*DestinationCertificates] {
	return pulumix.Output[*DestinationCertificates]{
		OutputState: o.OutputState,
	}
}

func (o DestinationCertificatesOutput) Certificates() DestinationCertificatesCertificateArrayOutput {
	return o.ApplyT(func(v *DestinationCertificates) DestinationCertificatesCertificateArrayOutput { return v.Certificates }).(DestinationCertificatesCertificateArrayOutput)
}

// The unique identifier for the target destination within the Fivetran system.
func (o DestinationCertificatesOutput) DestinationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DestinationCertificates) pulumi.StringOutput { return v.DestinationId }).(pulumi.StringOutput)
}

type DestinationCertificatesArrayOutput struct{ *pulumi.OutputState }

func (DestinationCertificatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationCertificates)(nil)).Elem()
}

func (o DestinationCertificatesArrayOutput) ToDestinationCertificatesArrayOutput() DestinationCertificatesArrayOutput {
	return o
}

func (o DestinationCertificatesArrayOutput) ToDestinationCertificatesArrayOutputWithContext(ctx context.Context) DestinationCertificatesArrayOutput {
	return o
}

func (o DestinationCertificatesArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DestinationCertificates] {
	return pulumix.Output[[]*DestinationCertificates]{
		OutputState: o.OutputState,
	}
}

func (o DestinationCertificatesArrayOutput) Index(i pulumi.IntInput) DestinationCertificatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationCertificates {
		return vs[0].([]*DestinationCertificates)[vs[1].(int)]
	}).(DestinationCertificatesOutput)
}

type DestinationCertificatesMapOutput struct{ *pulumi.OutputState }

func (DestinationCertificatesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationCertificates)(nil)).Elem()
}

func (o DestinationCertificatesMapOutput) ToDestinationCertificatesMapOutput() DestinationCertificatesMapOutput {
	return o
}

func (o DestinationCertificatesMapOutput) ToDestinationCertificatesMapOutputWithContext(ctx context.Context) DestinationCertificatesMapOutput {
	return o
}

func (o DestinationCertificatesMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DestinationCertificates] {
	return pulumix.Output[map[string]*DestinationCertificates]{
		OutputState: o.OutputState,
	}
}

func (o DestinationCertificatesMapOutput) MapIndex(k pulumi.StringInput) DestinationCertificatesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationCertificates {
		return vs[0].(map[string]*DestinationCertificates)[vs[1].(string)]
	}).(DestinationCertificatesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationCertificatesInput)(nil)).Elem(), &DestinationCertificates{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationCertificatesArrayInput)(nil)).Elem(), DestinationCertificatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationCertificatesMapInput)(nil)).Elem(), DestinationCertificatesMap{})
	pulumi.RegisterOutputType(DestinationCertificatesOutput{})
	pulumi.RegisterOutputType(DestinationCertificatesArrayOutput{})
	pulumi.RegisterOutputType(DestinationCertificatesMapOutput{})
}
