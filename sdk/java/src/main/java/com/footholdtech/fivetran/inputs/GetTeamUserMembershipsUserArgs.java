// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetTeamUserMembershipsUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetTeamUserMembershipsUserArgs Empty = new GetTeamUserMembershipsUserArgs();

    /**
     * The team&#39;s role that links the team and the user
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return The team&#39;s role that links the team and the user
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    /**
     * The user unique identifier
     * 
     */
    @Import(name="userId", required=true)
    private Output<String> userId;

    /**
     * @return The user unique identifier
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    private GetTeamUserMembershipsUserArgs() {}

    private GetTeamUserMembershipsUserArgs(GetTeamUserMembershipsUserArgs $) {
        this.role = $.role;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTeamUserMembershipsUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTeamUserMembershipsUserArgs $;

        public Builder() {
            $ = new GetTeamUserMembershipsUserArgs();
        }

        public Builder(GetTeamUserMembershipsUserArgs defaults) {
            $ = new GetTeamUserMembershipsUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param role The team&#39;s role that links the team and the user
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The team&#39;s role that links the team and the user
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param userId The user unique identifier
         * 
         * @return builder
         * 
         */
        public Builder userId(Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The user unique identifier
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public GetTeamUserMembershipsUserArgs build() {
            $.role = Objects.requireNonNull($.role, "expected parameter 'role' to be non-null");
            $.userId = Objects.requireNonNull($.userId, "expected parameter 'userId' to be non-null");
            return $;
        }
    }

}
