// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetConnectorConfigAdobeAnalyticsConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetConnectorConfigAdobeAnalyticsConfigurationArgs Empty = new GetConnectorConfigAdobeAnalyticsConfigurationArgs();

    @Import(name="calculatedMetrics", required=true)
    private Output<List<String>> calculatedMetrics;

    public Output<List<String>> calculatedMetrics() {
        return this.calculatedMetrics;
    }

    @Import(name="elements", required=true)
    private Output<List<String>> elements;

    public Output<List<String>> elements() {
        return this.elements;
    }

    @Import(name="metrics", required=true)
    private Output<List<String>> metrics;

    public Output<List<String>> metrics() {
        return this.metrics;
    }

    @Import(name="reportSuites", required=true)
    private Output<List<String>> reportSuites;

    public Output<List<String>> reportSuites() {
        return this.reportSuites;
    }

    @Import(name="segments", required=true)
    private Output<List<String>> segments;

    public Output<List<String>> segments() {
        return this.segments;
    }

    @Import(name="syncMode", required=true)
    private Output<String> syncMode;

    public Output<String> syncMode() {
        return this.syncMode;
    }

    @Import(name="table", required=true)
    private Output<String> table;

    public Output<String> table() {
        return this.table;
    }

    private GetConnectorConfigAdobeAnalyticsConfigurationArgs() {}

    private GetConnectorConfigAdobeAnalyticsConfigurationArgs(GetConnectorConfigAdobeAnalyticsConfigurationArgs $) {
        this.calculatedMetrics = $.calculatedMetrics;
        this.elements = $.elements;
        this.metrics = $.metrics;
        this.reportSuites = $.reportSuites;
        this.segments = $.segments;
        this.syncMode = $.syncMode;
        this.table = $.table;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetConnectorConfigAdobeAnalyticsConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetConnectorConfigAdobeAnalyticsConfigurationArgs $;

        public Builder() {
            $ = new GetConnectorConfigAdobeAnalyticsConfigurationArgs();
        }

        public Builder(GetConnectorConfigAdobeAnalyticsConfigurationArgs defaults) {
            $ = new GetConnectorConfigAdobeAnalyticsConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder calculatedMetrics(Output<List<String>> calculatedMetrics) {
            $.calculatedMetrics = calculatedMetrics;
            return this;
        }

        public Builder calculatedMetrics(List<String> calculatedMetrics) {
            return calculatedMetrics(Output.of(calculatedMetrics));
        }

        public Builder calculatedMetrics(String... calculatedMetrics) {
            return calculatedMetrics(List.of(calculatedMetrics));
        }

        public Builder elements(Output<List<String>> elements) {
            $.elements = elements;
            return this;
        }

        public Builder elements(List<String> elements) {
            return elements(Output.of(elements));
        }

        public Builder elements(String... elements) {
            return elements(List.of(elements));
        }

        public Builder metrics(Output<List<String>> metrics) {
            $.metrics = metrics;
            return this;
        }

        public Builder metrics(List<String> metrics) {
            return metrics(Output.of(metrics));
        }

        public Builder metrics(String... metrics) {
            return metrics(List.of(metrics));
        }

        public Builder reportSuites(Output<List<String>> reportSuites) {
            $.reportSuites = reportSuites;
            return this;
        }

        public Builder reportSuites(List<String> reportSuites) {
            return reportSuites(Output.of(reportSuites));
        }

        public Builder reportSuites(String... reportSuites) {
            return reportSuites(List.of(reportSuites));
        }

        public Builder segments(Output<List<String>> segments) {
            $.segments = segments;
            return this;
        }

        public Builder segments(List<String> segments) {
            return segments(Output.of(segments));
        }

        public Builder segments(String... segments) {
            return segments(List.of(segments));
        }

        public Builder syncMode(Output<String> syncMode) {
            $.syncMode = syncMode;
            return this;
        }

        public Builder syncMode(String syncMode) {
            return syncMode(Output.of(syncMode));
        }

        public Builder table(Output<String> table) {
            $.table = table;
            return this;
        }

        public Builder table(String table) {
            return table(Output.of(table));
        }

        public GetConnectorConfigAdobeAnalyticsConfigurationArgs build() {
            $.calculatedMetrics = Objects.requireNonNull($.calculatedMetrics, "expected parameter 'calculatedMetrics' to be non-null");
            $.elements = Objects.requireNonNull($.elements, "expected parameter 'elements' to be non-null");
            $.metrics = Objects.requireNonNull($.metrics, "expected parameter 'metrics' to be non-null");
            $.reportSuites = Objects.requireNonNull($.reportSuites, "expected parameter 'reportSuites' to be non-null");
            $.segments = Objects.requireNonNull($.segments, "expected parameter 'segments' to be non-null");
            $.syncMode = Objects.requireNonNull($.syncMode, "expected parameter 'syncMode' to be non-null");
            $.table = Objects.requireNonNull($.table, "expected parameter 'table' to be non-null");
            return $;
        }
    }

}
