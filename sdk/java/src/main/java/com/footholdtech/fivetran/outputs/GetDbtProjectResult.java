// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.outputs;

import com.footholdtech.fivetran.outputs.GetDbtProjectModel;
import com.footholdtech.fivetran.outputs.GetDbtProjectProjectConfig;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDbtProjectResult {
    /**
     * @return The timestamp of the dbt Project creation.
     * 
     */
    private String createdAt;
    /**
     * @return The unique identifier for the User within the Fivetran system who created the dbt Project.
     * 
     */
    private String createdById;
    /**
     * @return The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
     * 
     */
    private String dbtVersion;
    /**
     * @return Default schema in destination. This production schema will contain your transformed data.
     * 
     */
    private String defaultSchema;
    private List<String> environmentVars;
    /**
     * @return The unique identifier for the group within the Fivetran system.
     * 
     */
    private String groupId;
    /**
     * @return The unique identifier for the dbt Project within the Fivetran system.
     * 
     */
    private String id;
    /**
     * @return The collection of dbt Models.
     * 
     */
    private List<GetDbtProjectModel> models;
    /**
     * @return Type specific dbt Project configuration parameters.
     * 
     */
    private List<GetDbtProjectProjectConfig> projectConfigs;
    /**
     * @return Public key to grant Fivetran SSH access to git repository.
     * 
     */
    private String publicKey;
    /**
     * @return Status of dbt Project (NOT_READY, READY, ERROR).
     * 
     */
    private String status;
    /**
     * @return Target name to set or override the value from the deployment.yaml
     * 
     */
    private String targetName;
    /**
     * @return The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
     * 
     */
    private Integer threads;
    /**
     * @return Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
     * 
     */
    private String type;

    private GetDbtProjectResult() {}
    /**
     * @return The timestamp of the dbt Project creation.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return The unique identifier for the User within the Fivetran system who created the dbt Project.
     * 
     */
    public String createdById() {
        return this.createdById;
    }
    /**
     * @return The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
     * 
     */
    public String dbtVersion() {
        return this.dbtVersion;
    }
    /**
     * @return Default schema in destination. This production schema will contain your transformed data.
     * 
     */
    public String defaultSchema() {
        return this.defaultSchema;
    }
    public List<String> environmentVars() {
        return this.environmentVars;
    }
    /**
     * @return The unique identifier for the group within the Fivetran system.
     * 
     */
    public String groupId() {
        return this.groupId;
    }
    /**
     * @return The unique identifier for the dbt Project within the Fivetran system.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The collection of dbt Models.
     * 
     */
    public List<GetDbtProjectModel> models() {
        return this.models;
    }
    /**
     * @return Type specific dbt Project configuration parameters.
     * 
     */
    public List<GetDbtProjectProjectConfig> projectConfigs() {
        return this.projectConfigs;
    }
    /**
     * @return Public key to grant Fivetran SSH access to git repository.
     * 
     */
    public String publicKey() {
        return this.publicKey;
    }
    /**
     * @return Status of dbt Project (NOT_READY, READY, ERROR).
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Target name to set or override the value from the deployment.yaml
     * 
     */
    public String targetName() {
        return this.targetName;
    }
    /**
     * @return The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
     * 
     */
    public Integer threads() {
        return this.threads;
    }
    /**
     * @return Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbtProjectResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdAt;
        private String createdById;
        private String dbtVersion;
        private String defaultSchema;
        private List<String> environmentVars;
        private String groupId;
        private String id;
        private List<GetDbtProjectModel> models;
        private List<GetDbtProjectProjectConfig> projectConfigs;
        private String publicKey;
        private String status;
        private String targetName;
        private Integer threads;
        private String type;
        public Builder() {}
        public Builder(GetDbtProjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdAt = defaults.createdAt;
    	      this.createdById = defaults.createdById;
    	      this.dbtVersion = defaults.dbtVersion;
    	      this.defaultSchema = defaults.defaultSchema;
    	      this.environmentVars = defaults.environmentVars;
    	      this.groupId = defaults.groupId;
    	      this.id = defaults.id;
    	      this.models = defaults.models;
    	      this.projectConfigs = defaults.projectConfigs;
    	      this.publicKey = defaults.publicKey;
    	      this.status = defaults.status;
    	      this.targetName = defaults.targetName;
    	      this.threads = defaults.threads;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }
        @CustomType.Setter
        public Builder createdById(String createdById) {
            this.createdById = Objects.requireNonNull(createdById);
            return this;
        }
        @CustomType.Setter
        public Builder dbtVersion(String dbtVersion) {
            this.dbtVersion = Objects.requireNonNull(dbtVersion);
            return this;
        }
        @CustomType.Setter
        public Builder defaultSchema(String defaultSchema) {
            this.defaultSchema = Objects.requireNonNull(defaultSchema);
            return this;
        }
        @CustomType.Setter
        public Builder environmentVars(List<String> environmentVars) {
            this.environmentVars = Objects.requireNonNull(environmentVars);
            return this;
        }
        public Builder environmentVars(String... environmentVars) {
            return environmentVars(List.of(environmentVars));
        }
        @CustomType.Setter
        public Builder groupId(String groupId) {
            this.groupId = Objects.requireNonNull(groupId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder models(List<GetDbtProjectModel> models) {
            this.models = Objects.requireNonNull(models);
            return this;
        }
        public Builder models(GetDbtProjectModel... models) {
            return models(List.of(models));
        }
        @CustomType.Setter
        public Builder projectConfigs(List<GetDbtProjectProjectConfig> projectConfigs) {
            this.projectConfigs = Objects.requireNonNull(projectConfigs);
            return this;
        }
        public Builder projectConfigs(GetDbtProjectProjectConfig... projectConfigs) {
            return projectConfigs(List.of(projectConfigs));
        }
        @CustomType.Setter
        public Builder publicKey(String publicKey) {
            this.publicKey = Objects.requireNonNull(publicKey);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        @CustomType.Setter
        public Builder targetName(String targetName) {
            this.targetName = Objects.requireNonNull(targetName);
            return this;
        }
        @CustomType.Setter
        public Builder threads(Integer threads) {
            this.threads = Objects.requireNonNull(threads);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetDbtProjectResult build() {
            final var o = new GetDbtProjectResult();
            o.createdAt = createdAt;
            o.createdById = createdById;
            o.dbtVersion = dbtVersion;
            o.defaultSchema = defaultSchema;
            o.environmentVars = environmentVars;
            o.groupId = groupId;
            o.id = id;
            o.models = models;
            o.projectConfigs = projectConfigs;
            o.publicKey = publicKey;
            o.status = status;
            o.targetName = targetName;
            o.threads = threads;
            o.type = type;
            return o;
        }
    }
}
