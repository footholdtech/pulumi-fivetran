// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorConfigCustomTableArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorConfigCustomTableArgs Empty = new ConnectorConfigCustomTableArgs();

    @Import(name="actionBreakdowns")
    private @Nullable Output<List<String>> actionBreakdowns;

    public Optional<Output<List<String>>> actionBreakdowns() {
        return Optional.ofNullable(this.actionBreakdowns);
    }

    @Import(name="actionReportTime")
    private @Nullable Output<String> actionReportTime;

    public Optional<Output<String>> actionReportTime() {
        return Optional.ofNullable(this.actionReportTime);
    }

    @Import(name="aggregation")
    private @Nullable Output<String> aggregation;

    public Optional<Output<String>> aggregation() {
        return Optional.ofNullable(this.aggregation);
    }

    @Import(name="breakdowns")
    private @Nullable Output<List<String>> breakdowns;

    public Optional<Output<List<String>>> breakdowns() {
        return Optional.ofNullable(this.breakdowns);
    }

    @Import(name="clickAttributionWindow")
    private @Nullable Output<String> clickAttributionWindow;

    public Optional<Output<String>> clickAttributionWindow() {
        return Optional.ofNullable(this.clickAttributionWindow);
    }

    @Import(name="configType")
    private @Nullable Output<String> configType;

    public Optional<Output<String>> configType() {
        return Optional.ofNullable(this.configType);
    }

    @Import(name="fields")
    private @Nullable Output<List<String>> fields;

    public Optional<Output<List<String>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    @Import(name="level")
    private @Nullable Output<String> level;

    public Optional<Output<String>> level() {
        return Optional.ofNullable(this.level);
    }

    @Import(name="prebuiltReportName")
    private @Nullable Output<String> prebuiltReportName;

    public Optional<Output<String>> prebuiltReportName() {
        return Optional.ofNullable(this.prebuiltReportName);
    }

    @Import(name="tableName")
    private @Nullable Output<String> tableName;

    public Optional<Output<String>> tableName() {
        return Optional.ofNullable(this.tableName);
    }

    @Import(name="useUnifiedAttributionSetting")
    private @Nullable Output<String> useUnifiedAttributionSetting;

    public Optional<Output<String>> useUnifiedAttributionSetting() {
        return Optional.ofNullable(this.useUnifiedAttributionSetting);
    }

    @Import(name="viewAttributionWindow")
    private @Nullable Output<String> viewAttributionWindow;

    public Optional<Output<String>> viewAttributionWindow() {
        return Optional.ofNullable(this.viewAttributionWindow);
    }

    private ConnectorConfigCustomTableArgs() {}

    private ConnectorConfigCustomTableArgs(ConnectorConfigCustomTableArgs $) {
        this.actionBreakdowns = $.actionBreakdowns;
        this.actionReportTime = $.actionReportTime;
        this.aggregation = $.aggregation;
        this.breakdowns = $.breakdowns;
        this.clickAttributionWindow = $.clickAttributionWindow;
        this.configType = $.configType;
        this.fields = $.fields;
        this.level = $.level;
        this.prebuiltReportName = $.prebuiltReportName;
        this.tableName = $.tableName;
        this.useUnifiedAttributionSetting = $.useUnifiedAttributionSetting;
        this.viewAttributionWindow = $.viewAttributionWindow;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorConfigCustomTableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorConfigCustomTableArgs $;

        public Builder() {
            $ = new ConnectorConfigCustomTableArgs();
        }

        public Builder(ConnectorConfigCustomTableArgs defaults) {
            $ = new ConnectorConfigCustomTableArgs(Objects.requireNonNull(defaults));
        }

        public Builder actionBreakdowns(@Nullable Output<List<String>> actionBreakdowns) {
            $.actionBreakdowns = actionBreakdowns;
            return this;
        }

        public Builder actionBreakdowns(List<String> actionBreakdowns) {
            return actionBreakdowns(Output.of(actionBreakdowns));
        }

        public Builder actionBreakdowns(String... actionBreakdowns) {
            return actionBreakdowns(List.of(actionBreakdowns));
        }

        public Builder actionReportTime(@Nullable Output<String> actionReportTime) {
            $.actionReportTime = actionReportTime;
            return this;
        }

        public Builder actionReportTime(String actionReportTime) {
            return actionReportTime(Output.of(actionReportTime));
        }

        public Builder aggregation(@Nullable Output<String> aggregation) {
            $.aggregation = aggregation;
            return this;
        }

        public Builder aggregation(String aggregation) {
            return aggregation(Output.of(aggregation));
        }

        public Builder breakdowns(@Nullable Output<List<String>> breakdowns) {
            $.breakdowns = breakdowns;
            return this;
        }

        public Builder breakdowns(List<String> breakdowns) {
            return breakdowns(Output.of(breakdowns));
        }

        public Builder breakdowns(String... breakdowns) {
            return breakdowns(List.of(breakdowns));
        }

        public Builder clickAttributionWindow(@Nullable Output<String> clickAttributionWindow) {
            $.clickAttributionWindow = clickAttributionWindow;
            return this;
        }

        public Builder clickAttributionWindow(String clickAttributionWindow) {
            return clickAttributionWindow(Output.of(clickAttributionWindow));
        }

        public Builder configType(@Nullable Output<String> configType) {
            $.configType = configType;
            return this;
        }

        public Builder configType(String configType) {
            return configType(Output.of(configType));
        }

        public Builder fields(@Nullable Output<List<String>> fields) {
            $.fields = fields;
            return this;
        }

        public Builder fields(List<String> fields) {
            return fields(Output.of(fields));
        }

        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        public Builder level(@Nullable Output<String> level) {
            $.level = level;
            return this;
        }

        public Builder level(String level) {
            return level(Output.of(level));
        }

        public Builder prebuiltReportName(@Nullable Output<String> prebuiltReportName) {
            $.prebuiltReportName = prebuiltReportName;
            return this;
        }

        public Builder prebuiltReportName(String prebuiltReportName) {
            return prebuiltReportName(Output.of(prebuiltReportName));
        }

        public Builder tableName(@Nullable Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public Builder useUnifiedAttributionSetting(@Nullable Output<String> useUnifiedAttributionSetting) {
            $.useUnifiedAttributionSetting = useUnifiedAttributionSetting;
            return this;
        }

        public Builder useUnifiedAttributionSetting(String useUnifiedAttributionSetting) {
            return useUnifiedAttributionSetting(Output.of(useUnifiedAttributionSetting));
        }

        public Builder viewAttributionWindow(@Nullable Output<String> viewAttributionWindow) {
            $.viewAttributionWindow = viewAttributionWindow;
            return this;
        }

        public Builder viewAttributionWindow(String viewAttributionWindow) {
            return viewAttributionWindow(Output.of(viewAttributionWindow));
        }

        public ConnectorConfigCustomTableArgs build() {
            return $;
        }
    }

}
