// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetConnectorConfigReportArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetConnectorConfigReportArgs Empty = new GetConnectorConfigReportArgs();

    @Import(name="aggregation", required=true)
    private Output<String> aggregation;

    public Output<String> aggregation() {
        return this.aggregation;
    }

    @Import(name="attributes", required=true)
    private Output<List<String>> attributes;

    public Output<List<String>> attributes() {
        return this.attributes;
    }

    @Import(name="configType", required=true)
    private Output<String> configType;

    public Output<String> configType() {
        return this.configType;
    }

    @Import(name="dimensions", required=true)
    private Output<List<String>> dimensions;

    public Output<List<String>> dimensions() {
        return this.dimensions;
    }

    @Import(name="fields", required=true)
    private Output<List<String>> fields;

    public Output<List<String>> fields() {
        return this.fields;
    }

    @Import(name="filter", required=true)
    private Output<String> filter;

    public Output<String> filter() {
        return this.filter;
    }

    @Import(name="filterFieldName", required=true)
    private Output<String> filterFieldName;

    public Output<String> filterFieldName() {
        return this.filterFieldName;
    }

    @Import(name="filterType", required=true)
    private Output<String> filterType;

    public Output<String> filterType() {
        return this.filterType;
    }

    @Import(name="filterValue", required=true)
    private Output<String> filterValue;

    public Output<String> filterValue() {
        return this.filterValue;
    }

    @Import(name="metrics", required=true)
    private Output<List<String>> metrics;

    public Output<List<String>> metrics() {
        return this.metrics;
    }

    @Import(name="prebuiltReport", required=true)
    private Output<String> prebuiltReport;

    public Output<String> prebuiltReport() {
        return this.prebuiltReport;
    }

    @Import(name="reportType", required=true)
    private Output<String> reportType;

    public Output<String> reportType() {
        return this.reportType;
    }

    @Import(name="rollbackWindow", required=true)
    private Output<String> rollbackWindow;

    public Output<String> rollbackWindow() {
        return this.rollbackWindow;
    }

    @Import(name="searchTypes", required=true)
    private Output<List<String>> searchTypes;

    public Output<List<String>> searchTypes() {
        return this.searchTypes;
    }

    @Import(name="segmentIds", required=true)
    private Output<List<String>> segmentIds;

    public Output<List<String>> segmentIds() {
        return this.segmentIds;
    }

    @Import(name="segments", required=true)
    private Output<List<String>> segments;

    public Output<List<String>> segments() {
        return this.segments;
    }

    @Import(name="table", required=true)
    private Output<String> table;

    public Output<String> table() {
        return this.table;
    }

    private GetConnectorConfigReportArgs() {}

    private GetConnectorConfigReportArgs(GetConnectorConfigReportArgs $) {
        this.aggregation = $.aggregation;
        this.attributes = $.attributes;
        this.configType = $.configType;
        this.dimensions = $.dimensions;
        this.fields = $.fields;
        this.filter = $.filter;
        this.filterFieldName = $.filterFieldName;
        this.filterType = $.filterType;
        this.filterValue = $.filterValue;
        this.metrics = $.metrics;
        this.prebuiltReport = $.prebuiltReport;
        this.reportType = $.reportType;
        this.rollbackWindow = $.rollbackWindow;
        this.searchTypes = $.searchTypes;
        this.segmentIds = $.segmentIds;
        this.segments = $.segments;
        this.table = $.table;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetConnectorConfigReportArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetConnectorConfigReportArgs $;

        public Builder() {
            $ = new GetConnectorConfigReportArgs();
        }

        public Builder(GetConnectorConfigReportArgs defaults) {
            $ = new GetConnectorConfigReportArgs(Objects.requireNonNull(defaults));
        }

        public Builder aggregation(Output<String> aggregation) {
            $.aggregation = aggregation;
            return this;
        }

        public Builder aggregation(String aggregation) {
            return aggregation(Output.of(aggregation));
        }

        public Builder attributes(Output<List<String>> attributes) {
            $.attributes = attributes;
            return this;
        }

        public Builder attributes(List<String> attributes) {
            return attributes(Output.of(attributes));
        }

        public Builder attributes(String... attributes) {
            return attributes(List.of(attributes));
        }

        public Builder configType(Output<String> configType) {
            $.configType = configType;
            return this;
        }

        public Builder configType(String configType) {
            return configType(Output.of(configType));
        }

        public Builder dimensions(Output<List<String>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        public Builder dimensions(List<String> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        public Builder dimensions(String... dimensions) {
            return dimensions(List.of(dimensions));
        }

        public Builder fields(Output<List<String>> fields) {
            $.fields = fields;
            return this;
        }

        public Builder fields(List<String> fields) {
            return fields(Output.of(fields));
        }

        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        public Builder filter(Output<String> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        public Builder filterFieldName(Output<String> filterFieldName) {
            $.filterFieldName = filterFieldName;
            return this;
        }

        public Builder filterFieldName(String filterFieldName) {
            return filterFieldName(Output.of(filterFieldName));
        }

        public Builder filterType(Output<String> filterType) {
            $.filterType = filterType;
            return this;
        }

        public Builder filterType(String filterType) {
            return filterType(Output.of(filterType));
        }

        public Builder filterValue(Output<String> filterValue) {
            $.filterValue = filterValue;
            return this;
        }

        public Builder filterValue(String filterValue) {
            return filterValue(Output.of(filterValue));
        }

        public Builder metrics(Output<List<String>> metrics) {
            $.metrics = metrics;
            return this;
        }

        public Builder metrics(List<String> metrics) {
            return metrics(Output.of(metrics));
        }

        public Builder metrics(String... metrics) {
            return metrics(List.of(metrics));
        }

        public Builder prebuiltReport(Output<String> prebuiltReport) {
            $.prebuiltReport = prebuiltReport;
            return this;
        }

        public Builder prebuiltReport(String prebuiltReport) {
            return prebuiltReport(Output.of(prebuiltReport));
        }

        public Builder reportType(Output<String> reportType) {
            $.reportType = reportType;
            return this;
        }

        public Builder reportType(String reportType) {
            return reportType(Output.of(reportType));
        }

        public Builder rollbackWindow(Output<String> rollbackWindow) {
            $.rollbackWindow = rollbackWindow;
            return this;
        }

        public Builder rollbackWindow(String rollbackWindow) {
            return rollbackWindow(Output.of(rollbackWindow));
        }

        public Builder searchTypes(Output<List<String>> searchTypes) {
            $.searchTypes = searchTypes;
            return this;
        }

        public Builder searchTypes(List<String> searchTypes) {
            return searchTypes(Output.of(searchTypes));
        }

        public Builder searchTypes(String... searchTypes) {
            return searchTypes(List.of(searchTypes));
        }

        public Builder segmentIds(Output<List<String>> segmentIds) {
            $.segmentIds = segmentIds;
            return this;
        }

        public Builder segmentIds(List<String> segmentIds) {
            return segmentIds(Output.of(segmentIds));
        }

        public Builder segmentIds(String... segmentIds) {
            return segmentIds(List.of(segmentIds));
        }

        public Builder segments(Output<List<String>> segments) {
            $.segments = segments;
            return this;
        }

        public Builder segments(List<String> segments) {
            return segments(Output.of(segments));
        }

        public Builder segments(String... segments) {
            return segments(List.of(segments));
        }

        public Builder table(Output<String> table) {
            $.table = table;
            return this;
        }

        public Builder table(String table) {
            return table(Output.of(table));
        }

        public GetConnectorConfigReportArgs build() {
            $.aggregation = Objects.requireNonNull($.aggregation, "expected parameter 'aggregation' to be non-null");
            $.attributes = Objects.requireNonNull($.attributes, "expected parameter 'attributes' to be non-null");
            $.configType = Objects.requireNonNull($.configType, "expected parameter 'configType' to be non-null");
            $.dimensions = Objects.requireNonNull($.dimensions, "expected parameter 'dimensions' to be non-null");
            $.fields = Objects.requireNonNull($.fields, "expected parameter 'fields' to be non-null");
            $.filter = Objects.requireNonNull($.filter, "expected parameter 'filter' to be non-null");
            $.filterFieldName = Objects.requireNonNull($.filterFieldName, "expected parameter 'filterFieldName' to be non-null");
            $.filterType = Objects.requireNonNull($.filterType, "expected parameter 'filterType' to be non-null");
            $.filterValue = Objects.requireNonNull($.filterValue, "expected parameter 'filterValue' to be non-null");
            $.metrics = Objects.requireNonNull($.metrics, "expected parameter 'metrics' to be non-null");
            $.prebuiltReport = Objects.requireNonNull($.prebuiltReport, "expected parameter 'prebuiltReport' to be non-null");
            $.reportType = Objects.requireNonNull($.reportType, "expected parameter 'reportType' to be non-null");
            $.rollbackWindow = Objects.requireNonNull($.rollbackWindow, "expected parameter 'rollbackWindow' to be non-null");
            $.searchTypes = Objects.requireNonNull($.searchTypes, "expected parameter 'searchTypes' to be non-null");
            $.segmentIds = Objects.requireNonNull($.segmentIds, "expected parameter 'segmentIds' to be non-null");
            $.segments = Objects.requireNonNull($.segments, "expected parameter 'segments' to be non-null");
            $.table = Objects.requireNonNull($.table, "expected parameter 'table' to be non-null");
            return $;
        }
    }

}
