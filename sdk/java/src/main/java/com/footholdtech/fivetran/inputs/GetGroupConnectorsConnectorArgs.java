// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.footholdtech.fivetran.inputs.GetGroupConnectorsConnectorStatusArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetGroupConnectorsConnectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetGroupConnectorsConnectorArgs Empty = new GetGroupConnectorsConnectorArgs();

    /**
     * The unique identifier of the user who has created the connector in your account
     * 
     */
    @Import(name="connectedBy", required=true)
    private Output<String> connectedBy;

    /**
     * @return The unique identifier of the user who has created the connector in your account
     * 
     */
    public Output<String> connectedBy() {
        return this.connectedBy;
    }

    /**
     * The timestamp of the time the connector was created in your account
     * 
     */
    @Import(name="createdAt", required=true)
    private Output<String> createdAt;

    /**
     * @return The timestamp of the time the connector was created in your account
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }

    /**
     * The optional parameter that defines the sync start time when the sync frequency is already set or being set by the current request to 1440. It can be specified in one hour increments starting from 00:00 to 23:00. If not specified, we will use [the baseline sync start time](https://fivetran.com/docs/getting-started/syncoverview#syncfrequencyandscheduling). This parameter has no effect on the [0 to 60 minutes offset](https://fivetran.com/docs/getting-started/syncoverview#syncstarttimesandoffsets) used to determine the actual sync start time
     * 
     */
    @Import(name="dailySyncTime", required=true)
    private Output<String> dailySyncTime;

    /**
     * @return The optional parameter that defines the sync start time when the sync frequency is already set or being set by the current request to 1440. It can be specified in one hour increments starting from 00:00 to 23:00. If not specified, we will use [the baseline sync start time](https://fivetran.com/docs/getting-started/syncoverview#syncfrequencyandscheduling). This parameter has no effect on the [0 to 60 minutes offset](https://fivetran.com/docs/getting-started/syncoverview#syncstarttimesandoffsets) used to determine the actual sync start time
     * 
     */
    public Output<String> dailySyncTime() {
        return this.dailySyncTime;
    }

    /**
     * The timestamp of the time the connector sync failed last time
     * 
     */
    @Import(name="failedAt", required=true)
    private Output<String> failedAt;

    /**
     * @return The timestamp of the time the connector sync failed last time
     * 
     */
    public Output<String> failedAt() {
        return this.failedAt;
    }

    /**
     * The unique identifier for the Group within the Fivetran system.
     * 
     */
    @Import(name="groupId", required=true)
    private Output<String> groupId;

    /**
     * @return The unique identifier for the Group within the Fivetran system.
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }

    /**
     * The unique identifier for the Connector within the Fivetran system.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique identifier for the Connector within the Fivetran system.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * The connector schedule configuration type. Supported values: auto, manual
     * 
     */
    @Import(name="scheduleType", required=true)
    private Output<String> scheduleType;

    /**
     * @return The connector schedule configuration type. Supported values: auto, manual
     * 
     */
    public Output<String> scheduleType() {
        return this.scheduleType;
    }

    /**
     * The name used both as the connector&#39;s name within the Fivetran system and as the source schema&#39;s name within your destination
     * 
     */
    @Import(name="schema", required=true)
    private Output<String> schema;

    /**
     * @return The name used both as the connector&#39;s name within the Fivetran system and as the source schema&#39;s name within your destination
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }

    /**
     * The connector type name within the Fivetran system
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    /**
     * @return The connector type name within the Fivetran system
     * 
     */
    public Output<String> service() {
        return this.service;
    }

    /**
     * The connector type version within the Fivetran system
     * 
     */
    @Import(name="serviceVersion", required=true)
    private Output<Integer> serviceVersion;

    /**
     * @return The connector type version within the Fivetran system
     * 
     */
    public Output<Integer> serviceVersion() {
        return this.serviceVersion;
    }

    @Import(name="statuses", required=true)
    private Output<List<GetGroupConnectorsConnectorStatusArgs>> statuses;

    public Output<List<GetGroupConnectorsConnectorStatusArgs>> statuses() {
        return this.statuses;
    }

    /**
     * The timestamp of the time the connector sync succeeded last time
     * 
     */
    @Import(name="succeededAt", required=true)
    private Output<String> succeededAt;

    /**
     * @return The timestamp of the time the connector sync succeeded last time
     * 
     */
    public Output<String> succeededAt() {
        return this.succeededAt;
    }

    /**
     * The connector sync frequency in minutes
     * 
     */
    @Import(name="syncFrequency", required=true)
    private Output<Integer> syncFrequency;

    /**
     * @return The connector sync frequency in minutes
     * 
     */
    public Output<Integer> syncFrequency() {
        return this.syncFrequency;
    }

    private GetGroupConnectorsConnectorArgs() {}

    private GetGroupConnectorsConnectorArgs(GetGroupConnectorsConnectorArgs $) {
        this.connectedBy = $.connectedBy;
        this.createdAt = $.createdAt;
        this.dailySyncTime = $.dailySyncTime;
        this.failedAt = $.failedAt;
        this.groupId = $.groupId;
        this.id = $.id;
        this.scheduleType = $.scheduleType;
        this.schema = $.schema;
        this.service = $.service;
        this.serviceVersion = $.serviceVersion;
        this.statuses = $.statuses;
        this.succeededAt = $.succeededAt;
        this.syncFrequency = $.syncFrequency;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGroupConnectorsConnectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGroupConnectorsConnectorArgs $;

        public Builder() {
            $ = new GetGroupConnectorsConnectorArgs();
        }

        public Builder(GetGroupConnectorsConnectorArgs defaults) {
            $ = new GetGroupConnectorsConnectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectedBy The unique identifier of the user who has created the connector in your account
         * 
         * @return builder
         * 
         */
        public Builder connectedBy(Output<String> connectedBy) {
            $.connectedBy = connectedBy;
            return this;
        }

        /**
         * @param connectedBy The unique identifier of the user who has created the connector in your account
         * 
         * @return builder
         * 
         */
        public Builder connectedBy(String connectedBy) {
            return connectedBy(Output.of(connectedBy));
        }

        /**
         * @param createdAt The timestamp of the time the connector was created in your account
         * 
         * @return builder
         * 
         */
        public Builder createdAt(Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The timestamp of the time the connector was created in your account
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param dailySyncTime The optional parameter that defines the sync start time when the sync frequency is already set or being set by the current request to 1440. It can be specified in one hour increments starting from 00:00 to 23:00. If not specified, we will use [the baseline sync start time](https://fivetran.com/docs/getting-started/syncoverview#syncfrequencyandscheduling). This parameter has no effect on the [0 to 60 minutes offset](https://fivetran.com/docs/getting-started/syncoverview#syncstarttimesandoffsets) used to determine the actual sync start time
         * 
         * @return builder
         * 
         */
        public Builder dailySyncTime(Output<String> dailySyncTime) {
            $.dailySyncTime = dailySyncTime;
            return this;
        }

        /**
         * @param dailySyncTime The optional parameter that defines the sync start time when the sync frequency is already set or being set by the current request to 1440. It can be specified in one hour increments starting from 00:00 to 23:00. If not specified, we will use [the baseline sync start time](https://fivetran.com/docs/getting-started/syncoverview#syncfrequencyandscheduling). This parameter has no effect on the [0 to 60 minutes offset](https://fivetran.com/docs/getting-started/syncoverview#syncstarttimesandoffsets) used to determine the actual sync start time
         * 
         * @return builder
         * 
         */
        public Builder dailySyncTime(String dailySyncTime) {
            return dailySyncTime(Output.of(dailySyncTime));
        }

        /**
         * @param failedAt The timestamp of the time the connector sync failed last time
         * 
         * @return builder
         * 
         */
        public Builder failedAt(Output<String> failedAt) {
            $.failedAt = failedAt;
            return this;
        }

        /**
         * @param failedAt The timestamp of the time the connector sync failed last time
         * 
         * @return builder
         * 
         */
        public Builder failedAt(String failedAt) {
            return failedAt(Output.of(failedAt));
        }

        /**
         * @param groupId The unique identifier for the Group within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The unique identifier for the Group within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param id The unique identifier for the Connector within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier for the Connector within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param scheduleType The connector schedule configuration type. Supported values: auto, manual
         * 
         * @return builder
         * 
         */
        public Builder scheduleType(Output<String> scheduleType) {
            $.scheduleType = scheduleType;
            return this;
        }

        /**
         * @param scheduleType The connector schedule configuration type. Supported values: auto, manual
         * 
         * @return builder
         * 
         */
        public Builder scheduleType(String scheduleType) {
            return scheduleType(Output.of(scheduleType));
        }

        /**
         * @param schema The name used both as the connector&#39;s name within the Fivetran system and as the source schema&#39;s name within your destination
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The name used both as the connector&#39;s name within the Fivetran system and as the source schema&#39;s name within your destination
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param service The connector type name within the Fivetran system
         * 
         * @return builder
         * 
         */
        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service The connector type name within the Fivetran system
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param serviceVersion The connector type version within the Fivetran system
         * 
         * @return builder
         * 
         */
        public Builder serviceVersion(Output<Integer> serviceVersion) {
            $.serviceVersion = serviceVersion;
            return this;
        }

        /**
         * @param serviceVersion The connector type version within the Fivetran system
         * 
         * @return builder
         * 
         */
        public Builder serviceVersion(Integer serviceVersion) {
            return serviceVersion(Output.of(serviceVersion));
        }

        public Builder statuses(Output<List<GetGroupConnectorsConnectorStatusArgs>> statuses) {
            $.statuses = statuses;
            return this;
        }

        public Builder statuses(List<GetGroupConnectorsConnectorStatusArgs> statuses) {
            return statuses(Output.of(statuses));
        }

        public Builder statuses(GetGroupConnectorsConnectorStatusArgs... statuses) {
            return statuses(List.of(statuses));
        }

        /**
         * @param succeededAt The timestamp of the time the connector sync succeeded last time
         * 
         * @return builder
         * 
         */
        public Builder succeededAt(Output<String> succeededAt) {
            $.succeededAt = succeededAt;
            return this;
        }

        /**
         * @param succeededAt The timestamp of the time the connector sync succeeded last time
         * 
         * @return builder
         * 
         */
        public Builder succeededAt(String succeededAt) {
            return succeededAt(Output.of(succeededAt));
        }

        /**
         * @param syncFrequency The connector sync frequency in minutes
         * 
         * @return builder
         * 
         */
        public Builder syncFrequency(Output<Integer> syncFrequency) {
            $.syncFrequency = syncFrequency;
            return this;
        }

        /**
         * @param syncFrequency The connector sync frequency in minutes
         * 
         * @return builder
         * 
         */
        public Builder syncFrequency(Integer syncFrequency) {
            return syncFrequency(Output.of(syncFrequency));
        }

        public GetGroupConnectorsConnectorArgs build() {
            $.connectedBy = Objects.requireNonNull($.connectedBy, "expected parameter 'connectedBy' to be non-null");
            $.createdAt = Objects.requireNonNull($.createdAt, "expected parameter 'createdAt' to be non-null");
            $.dailySyncTime = Objects.requireNonNull($.dailySyncTime, "expected parameter 'dailySyncTime' to be non-null");
            $.failedAt = Objects.requireNonNull($.failedAt, "expected parameter 'failedAt' to be non-null");
            $.groupId = Objects.requireNonNull($.groupId, "expected parameter 'groupId' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.scheduleType = Objects.requireNonNull($.scheduleType, "expected parameter 'scheduleType' to be non-null");
            $.schema = Objects.requireNonNull($.schema, "expected parameter 'schema' to be non-null");
            $.service = Objects.requireNonNull($.service, "expected parameter 'service' to be non-null");
            $.serviceVersion = Objects.requireNonNull($.serviceVersion, "expected parameter 'serviceVersion' to be non-null");
            $.statuses = Objects.requireNonNull($.statuses, "expected parameter 'statuses' to be non-null");
            $.succeededAt = Objects.requireNonNull($.succeededAt, "expected parameter 'succeededAt' to be non-null");
            $.syncFrequency = Objects.requireNonNull($.syncFrequency, "expected parameter 'syncFrequency' to be non-null");
            return $;
        }
    }

}
