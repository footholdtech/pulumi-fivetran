// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetConnectorConfigAdobeAnalyticsConfiguration {
    private List<String> calculatedMetrics;
    private List<String> elements;
    private List<String> metrics;
    private List<String> reportSuites;
    private List<String> segments;
    private String syncMode;
    private String table;

    private GetConnectorConfigAdobeAnalyticsConfiguration() {}
    public List<String> calculatedMetrics() {
        return this.calculatedMetrics;
    }
    public List<String> elements() {
        return this.elements;
    }
    public List<String> metrics() {
        return this.metrics;
    }
    public List<String> reportSuites() {
        return this.reportSuites;
    }
    public List<String> segments() {
        return this.segments;
    }
    public String syncMode() {
        return this.syncMode;
    }
    public String table() {
        return this.table;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectorConfigAdobeAnalyticsConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> calculatedMetrics;
        private List<String> elements;
        private List<String> metrics;
        private List<String> reportSuites;
        private List<String> segments;
        private String syncMode;
        private String table;
        public Builder() {}
        public Builder(GetConnectorConfigAdobeAnalyticsConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.calculatedMetrics = defaults.calculatedMetrics;
    	      this.elements = defaults.elements;
    	      this.metrics = defaults.metrics;
    	      this.reportSuites = defaults.reportSuites;
    	      this.segments = defaults.segments;
    	      this.syncMode = defaults.syncMode;
    	      this.table = defaults.table;
        }

        @CustomType.Setter
        public Builder calculatedMetrics(List<String> calculatedMetrics) {
            this.calculatedMetrics = Objects.requireNonNull(calculatedMetrics);
            return this;
        }
        public Builder calculatedMetrics(String... calculatedMetrics) {
            return calculatedMetrics(List.of(calculatedMetrics));
        }
        @CustomType.Setter
        public Builder elements(List<String> elements) {
            this.elements = Objects.requireNonNull(elements);
            return this;
        }
        public Builder elements(String... elements) {
            return elements(List.of(elements));
        }
        @CustomType.Setter
        public Builder metrics(List<String> metrics) {
            this.metrics = Objects.requireNonNull(metrics);
            return this;
        }
        public Builder metrics(String... metrics) {
            return metrics(List.of(metrics));
        }
        @CustomType.Setter
        public Builder reportSuites(List<String> reportSuites) {
            this.reportSuites = Objects.requireNonNull(reportSuites);
            return this;
        }
        public Builder reportSuites(String... reportSuites) {
            return reportSuites(List.of(reportSuites));
        }
        @CustomType.Setter
        public Builder segments(List<String> segments) {
            this.segments = Objects.requireNonNull(segments);
            return this;
        }
        public Builder segments(String... segments) {
            return segments(List.of(segments));
        }
        @CustomType.Setter
        public Builder syncMode(String syncMode) {
            this.syncMode = Objects.requireNonNull(syncMode);
            return this;
        }
        @CustomType.Setter
        public Builder table(String table) {
            this.table = Objects.requireNonNull(table);
            return this;
        }
        public GetConnectorConfigAdobeAnalyticsConfiguration build() {
            final var o = new GetConnectorConfigAdobeAnalyticsConfiguration();
            o.calculatedMetrics = calculatedMetrics;
            o.elements = elements;
            o.metrics = metrics;
            o.reportSuites = reportSuites;
            o.segments = segments;
            o.syncMode = syncMode;
            o.table = table;
            return o;
        }
    }
}
