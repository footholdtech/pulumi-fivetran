// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetTeamsTeamArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetTeamsTeamArgs Empty = new GetTeamsTeamArgs();

    /**
     * The description of the team within your account.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the team within your account.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The unique identifier for the team within your account.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique identifier for the team within your account.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * The name of the team within your account.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the team within your account.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The account role of the team.
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    /**
     * @return The account role of the team.
     * 
     */
    public Output<String> role() {
        return this.role;
    }

    private GetTeamsTeamArgs() {}

    private GetTeamsTeamArgs(GetTeamsTeamArgs $) {
        this.description = $.description;
        this.id = $.id;
        this.name = $.name;
        this.role = $.role;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTeamsTeamArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTeamsTeamArgs $;

        public Builder() {
            $ = new GetTeamsTeamArgs();
        }

        public Builder(GetTeamsTeamArgs defaults) {
            $ = new GetTeamsTeamArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the team within your account.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the team within your account.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param id The unique identifier for the team within your account.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier for the team within your account.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name The name of the team within your account.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the team within your account.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param role The account role of the team.
         * 
         * @return builder
         * 
         */
        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The account role of the team.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        public GetTeamsTeamArgs build() {
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.role = Objects.requireNonNull($.role, "expected parameter 'role' to be non-null");
            return $;
        }
    }

}
