// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetWebhookResult {
    /**
     * @return Boolean, if set to true, webhooks are immediately sent in response to events
     * 
     */
    private Boolean active;
    /**
     * @return The webhook creation timestamp
     * 
     */
    private String createdAt;
    /**
     * @return The ID of the user who created the webhook.
     * 
     */
    private String createdBy;
    /**
     * @return The array of event types
     * 
     */
    private List<String> events;
    /**
     * @return The group ID
     * 
     */
    private String groupId;
    /**
     * @return The webhook ID
     * 
     */
    private String id;
    /**
     * @return Specifies whether the setup tests should be run
     * 
     */
    private @Nullable Boolean runTests;
    /**
     * @return The secret string used for payload signing and masked in the response.
     * 
     */
    private String secret;
    /**
     * @return The webhook type (group, account)
     * 
     */
    private String type;
    /**
     * @return Your webhooks URL endpoint for your application
     * 
     */
    private String url;

    private GetWebhookResult() {}
    /**
     * @return Boolean, if set to true, webhooks are immediately sent in response to events
     * 
     */
    public Boolean active() {
        return this.active;
    }
    /**
     * @return The webhook creation timestamp
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return The ID of the user who created the webhook.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return The array of event types
     * 
     */
    public List<String> events() {
        return this.events;
    }
    /**
     * @return The group ID
     * 
     */
    public String groupId() {
        return this.groupId;
    }
    /**
     * @return The webhook ID
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Specifies whether the setup tests should be run
     * 
     */
    public Optional<Boolean> runTests() {
        return Optional.ofNullable(this.runTests);
    }
    /**
     * @return The secret string used for payload signing and masked in the response.
     * 
     */
    public String secret() {
        return this.secret;
    }
    /**
     * @return The webhook type (group, account)
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Your webhooks URL endpoint for your application
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWebhookResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean active;
        private String createdAt;
        private String createdBy;
        private List<String> events;
        private String groupId;
        private String id;
        private @Nullable Boolean runTests;
        private String secret;
        private String type;
        private String url;
        public Builder() {}
        public Builder(GetWebhookResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.active = defaults.active;
    	      this.createdAt = defaults.createdAt;
    	      this.createdBy = defaults.createdBy;
    	      this.events = defaults.events;
    	      this.groupId = defaults.groupId;
    	      this.id = defaults.id;
    	      this.runTests = defaults.runTests;
    	      this.secret = defaults.secret;
    	      this.type = defaults.type;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder active(Boolean active) {
            this.active = Objects.requireNonNull(active);
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            this.createdBy = Objects.requireNonNull(createdBy);
            return this;
        }
        @CustomType.Setter
        public Builder events(List<String> events) {
            this.events = Objects.requireNonNull(events);
            return this;
        }
        public Builder events(String... events) {
            return events(List.of(events));
        }
        @CustomType.Setter
        public Builder groupId(String groupId) {
            this.groupId = Objects.requireNonNull(groupId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder runTests(@Nullable Boolean runTests) {
            this.runTests = runTests;
            return this;
        }
        @CustomType.Setter
        public Builder secret(String secret) {
            this.secret = Objects.requireNonNull(secret);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }
        public GetWebhookResult build() {
            final var o = new GetWebhookResult();
            o.active = active;
            o.createdAt = createdAt;
            o.createdBy = createdBy;
            o.events = events;
            o.groupId = groupId;
            o.id = id;
            o.runTests = runTests;
            o.secret = secret;
            o.type = type;
            o.url = url;
            return o;
        }
    }
}
