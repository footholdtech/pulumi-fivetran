// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran;

import com.footholdtech.fivetran.inputs.DbtTransformationScheduleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class DbtTransformationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DbtTransformationArgs Empty = new DbtTransformationArgs();

    /**
     * Target dbt Model name.
     * 
     */
    @Import(name="dbtModelName", required=true)
    private Output<String> dbtModelName;

    /**
     * @return Target dbt Model name.
     * 
     */
    public Output<String> dbtModelName() {
        return this.dbtModelName;
    }

    /**
     * The unique identifier for the dbt Project within the Fivetran system.
     * 
     */
    @Import(name="dbtProjectId", required=true)
    private Output<String> dbtProjectId;

    /**
     * @return The unique identifier for the dbt Project within the Fivetran system.
     * 
     */
    public Output<String> dbtProjectId() {
        return this.dbtProjectId;
    }

    /**
     * The field indicating whether the transformation will be created in paused state. By default, the value is false.
     * 
     */
    @Import(name="paused", required=true)
    private Output<Boolean> paused;

    /**
     * @return The field indicating whether the transformation will be created in paused state. By default, the value is false.
     * 
     */
    public Output<Boolean> paused() {
        return this.paused;
    }

    /**
     * The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
     * 
     */
    @Import(name="runTests", required=true)
    private Output<Boolean> runTests;

    /**
     * @return The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
     * 
     */
    public Output<Boolean> runTests() {
        return this.runTests;
    }

    /**
     * dbt Transformation schedule parameters.
     * 
     */
    @Import(name="schedule", required=true)
    private Output<DbtTransformationScheduleArgs> schedule;

    /**
     * @return dbt Transformation schedule parameters.
     * 
     */
    public Output<DbtTransformationScheduleArgs> schedule() {
        return this.schedule;
    }

    private DbtTransformationArgs() {}

    private DbtTransformationArgs(DbtTransformationArgs $) {
        this.dbtModelName = $.dbtModelName;
        this.dbtProjectId = $.dbtProjectId;
        this.paused = $.paused;
        this.runTests = $.runTests;
        this.schedule = $.schedule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbtTransformationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbtTransformationArgs $;

        public Builder() {
            $ = new DbtTransformationArgs();
        }

        public Builder(DbtTransformationArgs defaults) {
            $ = new DbtTransformationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dbtModelName Target dbt Model name.
         * 
         * @return builder
         * 
         */
        public Builder dbtModelName(Output<String> dbtModelName) {
            $.dbtModelName = dbtModelName;
            return this;
        }

        /**
         * @param dbtModelName Target dbt Model name.
         * 
         * @return builder
         * 
         */
        public Builder dbtModelName(String dbtModelName) {
            return dbtModelName(Output.of(dbtModelName));
        }

        /**
         * @param dbtProjectId The unique identifier for the dbt Project within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder dbtProjectId(Output<String> dbtProjectId) {
            $.dbtProjectId = dbtProjectId;
            return this;
        }

        /**
         * @param dbtProjectId The unique identifier for the dbt Project within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder dbtProjectId(String dbtProjectId) {
            return dbtProjectId(Output.of(dbtProjectId));
        }

        /**
         * @param paused The field indicating whether the transformation will be created in paused state. By default, the value is false.
         * 
         * @return builder
         * 
         */
        public Builder paused(Output<Boolean> paused) {
            $.paused = paused;
            return this;
        }

        /**
         * @param paused The field indicating whether the transformation will be created in paused state. By default, the value is false.
         * 
         * @return builder
         * 
         */
        public Builder paused(Boolean paused) {
            return paused(Output.of(paused));
        }

        /**
         * @param runTests The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
         * 
         * @return builder
         * 
         */
        public Builder runTests(Output<Boolean> runTests) {
            $.runTests = runTests;
            return this;
        }

        /**
         * @param runTests The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
         * 
         * @return builder
         * 
         */
        public Builder runTests(Boolean runTests) {
            return runTests(Output.of(runTests));
        }

        /**
         * @param schedule dbt Transformation schedule parameters.
         * 
         * @return builder
         * 
         */
        public Builder schedule(Output<DbtTransformationScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule dbt Transformation schedule parameters.
         * 
         * @return builder
         * 
         */
        public Builder schedule(DbtTransformationScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        public DbtTransformationArgs build() {
            $.dbtModelName = Objects.requireNonNull($.dbtModelName, "expected parameter 'dbtModelName' to be non-null");
            $.dbtProjectId = Objects.requireNonNull($.dbtProjectId, "expected parameter 'dbtProjectId' to be non-null");
            $.paused = Objects.requireNonNull($.paused, "expected parameter 'paused' to be non-null");
            $.runTests = Objects.requireNonNull($.runTests, "expected parameter 'runTests' to be non-null");
            $.schedule = Objects.requireNonNull($.schedule, "expected parameter 'schedule' to be non-null");
            return $;
        }
    }

}
