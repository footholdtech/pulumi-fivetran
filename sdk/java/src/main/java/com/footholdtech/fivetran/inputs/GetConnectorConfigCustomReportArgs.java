// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetConnectorConfigCustomReportArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetConnectorConfigCustomReportArgs Empty = new GetConnectorConfigCustomReportArgs();

    @Import(name="aggregate", required=true)
    private Output<String> aggregate;

    public Output<String> aggregate() {
        return this.aggregate;
    }

    @Import(name="baseMetricsFields", required=true)
    private Output<List<String>> baseMetricsFields;

    public Output<List<String>> baseMetricsFields() {
        return this.baseMetricsFields;
    }

    @Import(name="breakdown", required=true)
    private Output<String> breakdown;

    public Output<String> breakdown() {
        return this.breakdown;
    }

    @Import(name="breakout", required=true)
    private Output<String> breakout;

    public Output<String> breakout() {
        return this.breakout;
    }

    @Import(name="conversionsReportIncluded", required=true)
    private Output<String> conversionsReportIncluded;

    public Output<String> conversionsReportIncluded() {
        return this.conversionsReportIncluded;
    }

    @Import(name="customEventsIncluded", required=true)
    private Output<String> customEventsIncluded;

    public Output<String> customEventsIncluded() {
        return this.customEventsIncluded;
    }

    @Import(name="dimension", required=true)
    private Output<String> dimension;

    public Output<String> dimension() {
        return this.dimension;
    }

    @Import(name="dimensions", required=true)
    private Output<List<String>> dimensions;

    public Output<List<String>> dimensions() {
        return this.dimensions;
    }

    @Import(name="eventNames", required=true)
    private Output<List<String>> eventNames;

    public Output<List<String>> eventNames() {
        return this.eventNames;
    }

    @Import(name="granularity", required=true)
    private Output<String> granularity;

    public Output<String> granularity() {
        return this.granularity;
    }

    @Import(name="level", required=true)
    private Output<String> level;

    public Output<String> level() {
        return this.level;
    }

    @Import(name="metrics", required=true)
    private Output<List<String>> metrics;

    public Output<List<String>> metrics() {
        return this.metrics;
    }

    @Import(name="reportFields", required=true)
    private Output<List<String>> reportFields;

    public Output<List<String>> reportFields() {
        return this.reportFields;
    }

    @Import(name="reportName", required=true)
    private Output<String> reportName;

    public Output<String> reportName() {
        return this.reportName;
    }

    @Import(name="reportType", required=true)
    private Output<String> reportType;

    public Output<String> reportType() {
        return this.reportType;
    }

    @Import(name="segmentation", required=true)
    private Output<String> segmentation;

    public Output<String> segmentation() {
        return this.segmentation;
    }

    @Import(name="skAdMetricsFields", required=true)
    private Output<List<String>> skAdMetricsFields;

    public Output<List<String>> skAdMetricsFields() {
        return this.skAdMetricsFields;
    }

    @Import(name="tableName", required=true)
    private Output<String> tableName;

    public Output<String> tableName() {
        return this.tableName;
    }

    private GetConnectorConfigCustomReportArgs() {}

    private GetConnectorConfigCustomReportArgs(GetConnectorConfigCustomReportArgs $) {
        this.aggregate = $.aggregate;
        this.baseMetricsFields = $.baseMetricsFields;
        this.breakdown = $.breakdown;
        this.breakout = $.breakout;
        this.conversionsReportIncluded = $.conversionsReportIncluded;
        this.customEventsIncluded = $.customEventsIncluded;
        this.dimension = $.dimension;
        this.dimensions = $.dimensions;
        this.eventNames = $.eventNames;
        this.granularity = $.granularity;
        this.level = $.level;
        this.metrics = $.metrics;
        this.reportFields = $.reportFields;
        this.reportName = $.reportName;
        this.reportType = $.reportType;
        this.segmentation = $.segmentation;
        this.skAdMetricsFields = $.skAdMetricsFields;
        this.tableName = $.tableName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetConnectorConfigCustomReportArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetConnectorConfigCustomReportArgs $;

        public Builder() {
            $ = new GetConnectorConfigCustomReportArgs();
        }

        public Builder(GetConnectorConfigCustomReportArgs defaults) {
            $ = new GetConnectorConfigCustomReportArgs(Objects.requireNonNull(defaults));
        }

        public Builder aggregate(Output<String> aggregate) {
            $.aggregate = aggregate;
            return this;
        }

        public Builder aggregate(String aggregate) {
            return aggregate(Output.of(aggregate));
        }

        public Builder baseMetricsFields(Output<List<String>> baseMetricsFields) {
            $.baseMetricsFields = baseMetricsFields;
            return this;
        }

        public Builder baseMetricsFields(List<String> baseMetricsFields) {
            return baseMetricsFields(Output.of(baseMetricsFields));
        }

        public Builder baseMetricsFields(String... baseMetricsFields) {
            return baseMetricsFields(List.of(baseMetricsFields));
        }

        public Builder breakdown(Output<String> breakdown) {
            $.breakdown = breakdown;
            return this;
        }

        public Builder breakdown(String breakdown) {
            return breakdown(Output.of(breakdown));
        }

        public Builder breakout(Output<String> breakout) {
            $.breakout = breakout;
            return this;
        }

        public Builder breakout(String breakout) {
            return breakout(Output.of(breakout));
        }

        public Builder conversionsReportIncluded(Output<String> conversionsReportIncluded) {
            $.conversionsReportIncluded = conversionsReportIncluded;
            return this;
        }

        public Builder conversionsReportIncluded(String conversionsReportIncluded) {
            return conversionsReportIncluded(Output.of(conversionsReportIncluded));
        }

        public Builder customEventsIncluded(Output<String> customEventsIncluded) {
            $.customEventsIncluded = customEventsIncluded;
            return this;
        }

        public Builder customEventsIncluded(String customEventsIncluded) {
            return customEventsIncluded(Output.of(customEventsIncluded));
        }

        public Builder dimension(Output<String> dimension) {
            $.dimension = dimension;
            return this;
        }

        public Builder dimension(String dimension) {
            return dimension(Output.of(dimension));
        }

        public Builder dimensions(Output<List<String>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        public Builder dimensions(List<String> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        public Builder dimensions(String... dimensions) {
            return dimensions(List.of(dimensions));
        }

        public Builder eventNames(Output<List<String>> eventNames) {
            $.eventNames = eventNames;
            return this;
        }

        public Builder eventNames(List<String> eventNames) {
            return eventNames(Output.of(eventNames));
        }

        public Builder eventNames(String... eventNames) {
            return eventNames(List.of(eventNames));
        }

        public Builder granularity(Output<String> granularity) {
            $.granularity = granularity;
            return this;
        }

        public Builder granularity(String granularity) {
            return granularity(Output.of(granularity));
        }

        public Builder level(Output<String> level) {
            $.level = level;
            return this;
        }

        public Builder level(String level) {
            return level(Output.of(level));
        }

        public Builder metrics(Output<List<String>> metrics) {
            $.metrics = metrics;
            return this;
        }

        public Builder metrics(List<String> metrics) {
            return metrics(Output.of(metrics));
        }

        public Builder metrics(String... metrics) {
            return metrics(List.of(metrics));
        }

        public Builder reportFields(Output<List<String>> reportFields) {
            $.reportFields = reportFields;
            return this;
        }

        public Builder reportFields(List<String> reportFields) {
            return reportFields(Output.of(reportFields));
        }

        public Builder reportFields(String... reportFields) {
            return reportFields(List.of(reportFields));
        }

        public Builder reportName(Output<String> reportName) {
            $.reportName = reportName;
            return this;
        }

        public Builder reportName(String reportName) {
            return reportName(Output.of(reportName));
        }

        public Builder reportType(Output<String> reportType) {
            $.reportType = reportType;
            return this;
        }

        public Builder reportType(String reportType) {
            return reportType(Output.of(reportType));
        }

        public Builder segmentation(Output<String> segmentation) {
            $.segmentation = segmentation;
            return this;
        }

        public Builder segmentation(String segmentation) {
            return segmentation(Output.of(segmentation));
        }

        public Builder skAdMetricsFields(Output<List<String>> skAdMetricsFields) {
            $.skAdMetricsFields = skAdMetricsFields;
            return this;
        }

        public Builder skAdMetricsFields(List<String> skAdMetricsFields) {
            return skAdMetricsFields(Output.of(skAdMetricsFields));
        }

        public Builder skAdMetricsFields(String... skAdMetricsFields) {
            return skAdMetricsFields(List.of(skAdMetricsFields));
        }

        public Builder tableName(Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public GetConnectorConfigCustomReportArgs build() {
            $.aggregate = Objects.requireNonNull($.aggregate, "expected parameter 'aggregate' to be non-null");
            $.baseMetricsFields = Objects.requireNonNull($.baseMetricsFields, "expected parameter 'baseMetricsFields' to be non-null");
            $.breakdown = Objects.requireNonNull($.breakdown, "expected parameter 'breakdown' to be non-null");
            $.breakout = Objects.requireNonNull($.breakout, "expected parameter 'breakout' to be non-null");
            $.conversionsReportIncluded = Objects.requireNonNull($.conversionsReportIncluded, "expected parameter 'conversionsReportIncluded' to be non-null");
            $.customEventsIncluded = Objects.requireNonNull($.customEventsIncluded, "expected parameter 'customEventsIncluded' to be non-null");
            $.dimension = Objects.requireNonNull($.dimension, "expected parameter 'dimension' to be non-null");
            $.dimensions = Objects.requireNonNull($.dimensions, "expected parameter 'dimensions' to be non-null");
            $.eventNames = Objects.requireNonNull($.eventNames, "expected parameter 'eventNames' to be non-null");
            $.granularity = Objects.requireNonNull($.granularity, "expected parameter 'granularity' to be non-null");
            $.level = Objects.requireNonNull($.level, "expected parameter 'level' to be non-null");
            $.metrics = Objects.requireNonNull($.metrics, "expected parameter 'metrics' to be non-null");
            $.reportFields = Objects.requireNonNull($.reportFields, "expected parameter 'reportFields' to be non-null");
            $.reportName = Objects.requireNonNull($.reportName, "expected parameter 'reportName' to be non-null");
            $.reportType = Objects.requireNonNull($.reportType, "expected parameter 'reportType' to be non-null");
            $.segmentation = Objects.requireNonNull($.segmentation, "expected parameter 'segmentation' to be non-null");
            $.skAdMetricsFields = Objects.requireNonNull($.skAdMetricsFields, "expected parameter 'skAdMetricsFields' to be non-null");
            $.tableName = Objects.requireNonNull($.tableName, "expected parameter 'tableName' to be non-null");
            return $;
        }
    }

}
