// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.footholdtech.fivetran.inputs.GetGroupConnectorsConnectorArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGroupConnectorsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetGroupConnectorsArgs Empty = new GetGroupConnectorsArgs();

    @Import(name="connectors")
    private @Nullable Output<List<GetGroupConnectorsConnectorArgs>> connectors;

    public Optional<Output<List<GetGroupConnectorsConnectorArgs>>> connectors() {
        return Optional.ofNullable(this.connectors);
    }

    /**
     * The unique identifier for the Connector within the Fivetran system.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique identifier for the Connector within the Fivetran system.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * The name used both as the connector&#39;s name within the Fivetran system and as the source schema&#39;s name within your destination
     * 
     */
    @Import(name="schema")
    private @Nullable Output<String> schema;

    /**
     * @return The name used both as the connector&#39;s name within the Fivetran system and as the source schema&#39;s name within your destination
     * 
     */
    public Optional<Output<String>> schema() {
        return Optional.ofNullable(this.schema);
    }

    private GetGroupConnectorsArgs() {}

    private GetGroupConnectorsArgs(GetGroupConnectorsArgs $) {
        this.connectors = $.connectors;
        this.id = $.id;
        this.schema = $.schema;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGroupConnectorsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGroupConnectorsArgs $;

        public Builder() {
            $ = new GetGroupConnectorsArgs();
        }

        public Builder(GetGroupConnectorsArgs defaults) {
            $ = new GetGroupConnectorsArgs(Objects.requireNonNull(defaults));
        }

        public Builder connectors(@Nullable Output<List<GetGroupConnectorsConnectorArgs>> connectors) {
            $.connectors = connectors;
            return this;
        }

        public Builder connectors(List<GetGroupConnectorsConnectorArgs> connectors) {
            return connectors(Output.of(connectors));
        }

        public Builder connectors(GetGroupConnectorsConnectorArgs... connectors) {
            return connectors(List.of(connectors));
        }

        /**
         * @param id The unique identifier for the Connector within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier for the Connector within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param schema The name used both as the connector&#39;s name within the Fivetran system and as the source schema&#39;s name within your destination
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The name used both as the connector&#39;s name within the Fivetran system and as the source schema&#39;s name within your destination
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        public GetGroupConnectorsArgs build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            return $;
        }
    }

}
