// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorScheduleState extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorScheduleState Empty = new ConnectorScheduleState();

    /**
     * The unique identifier for the connector
     * 
     */
    @Import(name="connectorId")
    private @Nullable Output<String> connectorId;

    /**
     * @return The unique identifier for the connector
     * 
     */
    public Optional<Output<String>> connectorId() {
        return Optional.ofNullable(this.connectorId);
    }

    /**
     * The optional parameter that defines the sync start time when the sync frequency is already set or being set by the current request to 1440. It can be specified in one hour increments starting from 00:00 to 23:00. If not specified, we will use [the baseline sync start time](https://fivetran.com/docs/getting-started/syncoverview#syncfrequencyandscheduling). This parameter has no effect on the [0 to 60 minutes offset](https://fivetran.com/docs/getting-started/syncoverview#syncstarttimesandoffsets) used to determine the actual sync start time
     * 
     */
    @Import(name="dailySyncTime")
    private @Nullable Output<String> dailySyncTime;

    /**
     * @return The optional parameter that defines the sync start time when the sync frequency is already set or being set by the current request to 1440. It can be specified in one hour increments starting from 00:00 to 23:00. If not specified, we will use [the baseline sync start time](https://fivetran.com/docs/getting-started/syncoverview#syncfrequencyandscheduling). This parameter has no effect on the [0 to 60 minutes offset](https://fivetran.com/docs/getting-started/syncoverview#syncstarttimesandoffsets) used to determine the actual sync start time
     * 
     */
    public Optional<Output<String>> dailySyncTime() {
        return Optional.ofNullable(this.dailySyncTime);
    }

    /**
     * Specifies whether the connector should be paused after the free trial period has ended
     * 
     */
    @Import(name="pauseAfterTrial")
    private @Nullable Output<String> pauseAfterTrial;

    /**
     * @return Specifies whether the connector should be paused after the free trial period has ended
     * 
     */
    public Optional<Output<String>> pauseAfterTrial() {
        return Optional.ofNullable(this.pauseAfterTrial);
    }

    /**
     * Specifies whether the connector is paused
     * 
     */
    @Import(name="paused")
    private @Nullable Output<String> paused;

    /**
     * @return Specifies whether the connector is paused
     * 
     */
    public Optional<Output<String>> paused() {
        return Optional.ofNullable(this.paused);
    }

    /**
     * The connector schedule configuration type. Supported values: auto, manual
     * 
     */
    @Import(name="scheduleType")
    private @Nullable Output<String> scheduleType;

    /**
     * @return The connector schedule configuration type. Supported values: auto, manual
     * 
     */
    public Optional<Output<String>> scheduleType() {
        return Optional.ofNullable(this.scheduleType);
    }

    /**
     * The connector sync frequency in minutes. Supported values: 1, 5, 15, 30, 60, 120, 180, 360, 480, 720, 1440.
     * 
     */
    @Import(name="syncFrequency")
    private @Nullable Output<String> syncFrequency;

    /**
     * @return The connector sync frequency in minutes. Supported values: 1, 5, 15, 30, 60, 120, 180, 360, 480, 720, 1440.
     * 
     */
    public Optional<Output<String>> syncFrequency() {
        return Optional.ofNullable(this.syncFrequency);
    }

    private ConnectorScheduleState() {}

    private ConnectorScheduleState(ConnectorScheduleState $) {
        this.connectorId = $.connectorId;
        this.dailySyncTime = $.dailySyncTime;
        this.pauseAfterTrial = $.pauseAfterTrial;
        this.paused = $.paused;
        this.scheduleType = $.scheduleType;
        this.syncFrequency = $.syncFrequency;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorScheduleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorScheduleState $;

        public Builder() {
            $ = new ConnectorScheduleState();
        }

        public Builder(ConnectorScheduleState defaults) {
            $ = new ConnectorScheduleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectorId The unique identifier for the connector
         * 
         * @return builder
         * 
         */
        public Builder connectorId(@Nullable Output<String> connectorId) {
            $.connectorId = connectorId;
            return this;
        }

        /**
         * @param connectorId The unique identifier for the connector
         * 
         * @return builder
         * 
         */
        public Builder connectorId(String connectorId) {
            return connectorId(Output.of(connectorId));
        }

        /**
         * @param dailySyncTime The optional parameter that defines the sync start time when the sync frequency is already set or being set by the current request to 1440. It can be specified in one hour increments starting from 00:00 to 23:00. If not specified, we will use [the baseline sync start time](https://fivetran.com/docs/getting-started/syncoverview#syncfrequencyandscheduling). This parameter has no effect on the [0 to 60 minutes offset](https://fivetran.com/docs/getting-started/syncoverview#syncstarttimesandoffsets) used to determine the actual sync start time
         * 
         * @return builder
         * 
         */
        public Builder dailySyncTime(@Nullable Output<String> dailySyncTime) {
            $.dailySyncTime = dailySyncTime;
            return this;
        }

        /**
         * @param dailySyncTime The optional parameter that defines the sync start time when the sync frequency is already set or being set by the current request to 1440. It can be specified in one hour increments starting from 00:00 to 23:00. If not specified, we will use [the baseline sync start time](https://fivetran.com/docs/getting-started/syncoverview#syncfrequencyandscheduling). This parameter has no effect on the [0 to 60 minutes offset](https://fivetran.com/docs/getting-started/syncoverview#syncstarttimesandoffsets) used to determine the actual sync start time
         * 
         * @return builder
         * 
         */
        public Builder dailySyncTime(String dailySyncTime) {
            return dailySyncTime(Output.of(dailySyncTime));
        }

        /**
         * @param pauseAfterTrial Specifies whether the connector should be paused after the free trial period has ended
         * 
         * @return builder
         * 
         */
        public Builder pauseAfterTrial(@Nullable Output<String> pauseAfterTrial) {
            $.pauseAfterTrial = pauseAfterTrial;
            return this;
        }

        /**
         * @param pauseAfterTrial Specifies whether the connector should be paused after the free trial period has ended
         * 
         * @return builder
         * 
         */
        public Builder pauseAfterTrial(String pauseAfterTrial) {
            return pauseAfterTrial(Output.of(pauseAfterTrial));
        }

        /**
         * @param paused Specifies whether the connector is paused
         * 
         * @return builder
         * 
         */
        public Builder paused(@Nullable Output<String> paused) {
            $.paused = paused;
            return this;
        }

        /**
         * @param paused Specifies whether the connector is paused
         * 
         * @return builder
         * 
         */
        public Builder paused(String paused) {
            return paused(Output.of(paused));
        }

        /**
         * @param scheduleType The connector schedule configuration type. Supported values: auto, manual
         * 
         * @return builder
         * 
         */
        public Builder scheduleType(@Nullable Output<String> scheduleType) {
            $.scheduleType = scheduleType;
            return this;
        }

        /**
         * @param scheduleType The connector schedule configuration type. Supported values: auto, manual
         * 
         * @return builder
         * 
         */
        public Builder scheduleType(String scheduleType) {
            return scheduleType(Output.of(scheduleType));
        }

        /**
         * @param syncFrequency The connector sync frequency in minutes. Supported values: 1, 5, 15, 30, 60, 120, 180, 360, 480, 720, 1440.
         * 
         * @return builder
         * 
         */
        public Builder syncFrequency(@Nullable Output<String> syncFrequency) {
            $.syncFrequency = syncFrequency;
            return this;
        }

        /**
         * @param syncFrequency The connector sync frequency in minutes. Supported values: 1, 5, 15, 30, 60, 120, 180, 360, 480, 720, 1440.
         * 
         * @return builder
         * 
         */
        public Builder syncFrequency(String syncFrequency) {
            return syncFrequency(Output.of(syncFrequency));
        }

        public ConnectorScheduleState build() {
            return $;
        }
    }

}
