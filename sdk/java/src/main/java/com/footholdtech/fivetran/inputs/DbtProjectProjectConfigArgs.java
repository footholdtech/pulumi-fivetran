// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbtProjectProjectConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DbtProjectProjectConfigArgs Empty = new DbtProjectProjectConfigArgs();

    /**
     * Folder in Git repo with your dbt project.
     * 
     */
    @Import(name="folderPath")
    private @Nullable Output<String> folderPath;

    /**
     * @return Folder in Git repo with your dbt project.
     * 
     */
    public Optional<Output<String>> folderPath() {
        return Optional.ofNullable(this.folderPath);
    }

    /**
     * Git branch.
     * 
     */
    @Import(name="gitBranch")
    private @Nullable Output<String> gitBranch;

    /**
     * @return Git branch.
     * 
     */
    public Optional<Output<String>> gitBranch() {
        return Optional.ofNullable(this.gitBranch);
    }

    /**
     * Git remote URL with your dbt project.
     * 
     */
    @Import(name="gitRemoteUrl")
    private @Nullable Output<String> gitRemoteUrl;

    /**
     * @return Git remote URL with your dbt project.
     * 
     */
    public Optional<Output<String>> gitRemoteUrl() {
        return Optional.ofNullable(this.gitRemoteUrl);
    }

    private DbtProjectProjectConfigArgs() {}

    private DbtProjectProjectConfigArgs(DbtProjectProjectConfigArgs $) {
        this.folderPath = $.folderPath;
        this.gitBranch = $.gitBranch;
        this.gitRemoteUrl = $.gitRemoteUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbtProjectProjectConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbtProjectProjectConfigArgs $;

        public Builder() {
            $ = new DbtProjectProjectConfigArgs();
        }

        public Builder(DbtProjectProjectConfigArgs defaults) {
            $ = new DbtProjectProjectConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param folderPath Folder in Git repo with your dbt project.
         * 
         * @return builder
         * 
         */
        public Builder folderPath(@Nullable Output<String> folderPath) {
            $.folderPath = folderPath;
            return this;
        }

        /**
         * @param folderPath Folder in Git repo with your dbt project.
         * 
         * @return builder
         * 
         */
        public Builder folderPath(String folderPath) {
            return folderPath(Output.of(folderPath));
        }

        /**
         * @param gitBranch Git branch.
         * 
         * @return builder
         * 
         */
        public Builder gitBranch(@Nullable Output<String> gitBranch) {
            $.gitBranch = gitBranch;
            return this;
        }

        /**
         * @param gitBranch Git branch.
         * 
         * @return builder
         * 
         */
        public Builder gitBranch(String gitBranch) {
            return gitBranch(Output.of(gitBranch));
        }

        /**
         * @param gitRemoteUrl Git remote URL with your dbt project.
         * 
         * @return builder
         * 
         */
        public Builder gitRemoteUrl(@Nullable Output<String> gitRemoteUrl) {
            $.gitRemoteUrl = gitRemoteUrl;
            return this;
        }

        /**
         * @param gitRemoteUrl Git remote URL with your dbt project.
         * 
         * @return builder
         * 
         */
        public Builder gitRemoteUrl(String gitRemoteUrl) {
            return gitRemoteUrl(Output.of(gitRemoteUrl));
        }

        public DbtProjectProjectConfigArgs build() {
            return $;
        }
    }

}
