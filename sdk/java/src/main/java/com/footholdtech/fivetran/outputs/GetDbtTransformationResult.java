// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.outputs;

import com.footholdtech.fivetran.outputs.GetDbtTransformationSchedule;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDbtTransformationResult {
    /**
     * @return Identifiers of related connectors.
     * 
     */
    private List<String> connectorIds;
    /**
     * @return The timestamp of the dbt Transformation creation.
     * 
     */
    private String createdAt;
    /**
     * @return The unique identifier for the dbt Model within the Fivetran system.
     * 
     */
    private String dbtModelId;
    /**
     * @return Target dbt Model name.
     * 
     */
    private String dbtModelName;
    /**
     * @return The unique identifier for the dbt Project within the Fivetran system.
     * 
     */
    private String dbtProjectId;
    /**
     * @return The ID of this resource.
     * 
     */
    private String id;
    /**
     * @return Identifiers of related models.
     * 
     */
    private List<String> modelIds;
    /**
     * @return The dbt Model name.
     * 
     */
    private String outputModelName;
    /**
     * @return The field indicating whether the transformation will be created in paused state. By default, the value is false.
     * 
     */
    private Boolean paused;
    /**
     * @return The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
     * 
     */
    private Boolean runTests;
    /**
     * @return dbt Transformation schedule parameters.
     * 
     */
    private List<GetDbtTransformationSchedule> schedules;

    private GetDbtTransformationResult() {}
    /**
     * @return Identifiers of related connectors.
     * 
     */
    public List<String> connectorIds() {
        return this.connectorIds;
    }
    /**
     * @return The timestamp of the dbt Transformation creation.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return The unique identifier for the dbt Model within the Fivetran system.
     * 
     */
    public String dbtModelId() {
        return this.dbtModelId;
    }
    /**
     * @return Target dbt Model name.
     * 
     */
    public String dbtModelName() {
        return this.dbtModelName;
    }
    /**
     * @return The unique identifier for the dbt Project within the Fivetran system.
     * 
     */
    public String dbtProjectId() {
        return this.dbtProjectId;
    }
    /**
     * @return The ID of this resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Identifiers of related models.
     * 
     */
    public List<String> modelIds() {
        return this.modelIds;
    }
    /**
     * @return The dbt Model name.
     * 
     */
    public String outputModelName() {
        return this.outputModelName;
    }
    /**
     * @return The field indicating whether the transformation will be created in paused state. By default, the value is false.
     * 
     */
    public Boolean paused() {
        return this.paused;
    }
    /**
     * @return The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
     * 
     */
    public Boolean runTests() {
        return this.runTests;
    }
    /**
     * @return dbt Transformation schedule parameters.
     * 
     */
    public List<GetDbtTransformationSchedule> schedules() {
        return this.schedules;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDbtTransformationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> connectorIds;
        private String createdAt;
        private String dbtModelId;
        private String dbtModelName;
        private String dbtProjectId;
        private String id;
        private List<String> modelIds;
        private String outputModelName;
        private Boolean paused;
        private Boolean runTests;
        private List<GetDbtTransformationSchedule> schedules;
        public Builder() {}
        public Builder(GetDbtTransformationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectorIds = defaults.connectorIds;
    	      this.createdAt = defaults.createdAt;
    	      this.dbtModelId = defaults.dbtModelId;
    	      this.dbtModelName = defaults.dbtModelName;
    	      this.dbtProjectId = defaults.dbtProjectId;
    	      this.id = defaults.id;
    	      this.modelIds = defaults.modelIds;
    	      this.outputModelName = defaults.outputModelName;
    	      this.paused = defaults.paused;
    	      this.runTests = defaults.runTests;
    	      this.schedules = defaults.schedules;
        }

        @CustomType.Setter
        public Builder connectorIds(List<String> connectorIds) {
            this.connectorIds = Objects.requireNonNull(connectorIds);
            return this;
        }
        public Builder connectorIds(String... connectorIds) {
            return connectorIds(List.of(connectorIds));
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }
        @CustomType.Setter
        public Builder dbtModelId(String dbtModelId) {
            this.dbtModelId = Objects.requireNonNull(dbtModelId);
            return this;
        }
        @CustomType.Setter
        public Builder dbtModelName(String dbtModelName) {
            this.dbtModelName = Objects.requireNonNull(dbtModelName);
            return this;
        }
        @CustomType.Setter
        public Builder dbtProjectId(String dbtProjectId) {
            this.dbtProjectId = Objects.requireNonNull(dbtProjectId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder modelIds(List<String> modelIds) {
            this.modelIds = Objects.requireNonNull(modelIds);
            return this;
        }
        public Builder modelIds(String... modelIds) {
            return modelIds(List.of(modelIds));
        }
        @CustomType.Setter
        public Builder outputModelName(String outputModelName) {
            this.outputModelName = Objects.requireNonNull(outputModelName);
            return this;
        }
        @CustomType.Setter
        public Builder paused(Boolean paused) {
            this.paused = Objects.requireNonNull(paused);
            return this;
        }
        @CustomType.Setter
        public Builder runTests(Boolean runTests) {
            this.runTests = Objects.requireNonNull(runTests);
            return this;
        }
        @CustomType.Setter
        public Builder schedules(List<GetDbtTransformationSchedule> schedules) {
            this.schedules = Objects.requireNonNull(schedules);
            return this;
        }
        public Builder schedules(GetDbtTransformationSchedule... schedules) {
            return schedules(List.of(schedules));
        }
        public GetDbtTransformationResult build() {
            final var o = new GetDbtTransformationResult();
            o.connectorIds = connectorIds;
            o.createdAt = createdAt;
            o.dbtModelId = dbtModelId;
            o.dbtModelName = dbtModelName;
            o.dbtProjectId = dbtProjectId;
            o.id = id;
            o.modelIds = modelIds;
            o.outputModelName = outputModelName;
            o.paused = paused;
            o.runTests = runTests;
            o.schedules = schedules;
            return o;
        }
    }
}
