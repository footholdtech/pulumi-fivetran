// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DestinationConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final DestinationConfigArgs Empty = new DestinationConfigArgs();

    /**
     * The connector authorization settings. Check possible config formats in [create method](https://www.terraform.io/openapi/reference/v1/operation/create_connector/)
     * 
     */
    @Import(name="auth")
    private @Nullable Output<String> auth;

    /**
     * @return The connector authorization settings. Check possible config formats in [create method](https://www.terraform.io/openapi/reference/v1/operation/create_connector/)
     * 
     */
    public Optional<Output<String>> auth() {
        return Optional.ofNullable(this.auth);
    }

    /**
     * Authentication type. Default value: `PASSWORD`.
     * 
     */
    @Import(name="authType")
    private @Nullable Output<String> authType;

    /**
     * @return Authentication type. Default value: `PASSWORD`.
     * 
     */
    public Optional<Output<String>> authType() {
        return Optional.ofNullable(this.authType);
    }

    /**
     * Customer bucket. If specified, your GCS bucket will be used to process the data instead of a Fivetran-managed bucket. The bucket must be present in the same location as the dataset location.
     * 
     */
    @Import(name="bucket")
    private @Nullable Output<String> bucket;

    /**
     * @return Customer bucket. If specified, your GCS bucket will be used to process the data instead of a Fivetran-managed bucket. The bucket must be present in the same location as the dataset location.
     * 
     */
    public Optional<Output<String>> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    /**
     * Catalog name
     * 
     */
    @Import(name="catalog")
    private @Nullable Output<String> catalog;

    /**
     * @return Catalog name
     * 
     */
    public Optional<Output<String>> catalog() {
        return Optional.ofNullable(this.catalog);
    }

    /**
     * ClientId of your Azure Data Lake Storage
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return ClientId of your Azure Data Lake Storage
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * Cluster ID. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return Cluster ID. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * Cluster region. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
     * 
     */
    @Import(name="clusterRegion")
    private @Nullable Output<String> clusterRegion;

    /**
     * @return Cluster region. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
     * 
     */
    public Optional<Output<String>> clusterRegion() {
        return Optional.ofNullable(this.clusterRegion);
    }

    /**
     * Connection method. Default value: `Directly`.
     * 
     */
    @Import(name="connectionType")
    private @Nullable Output<String> connectionType;

    /**
     * @return Connection method. Default value: `Directly`.
     * 
     */
    public Optional<Output<String>> connectionType() {
        return Optional.ofNullable(this.connectionType);
    }

    /**
     * Container Name of your Azure Data Lake Storage
     * 
     */
    @Import(name="containerName")
    private @Nullable Output<String> containerName;

    /**
     * @return Container Name of your Azure Data Lake Storage
     * 
     */
    public Optional<Output<String>> containerName() {
        return Optional.ofNullable(this.containerName);
    }

    /**
     * Whether to create external tables
     * 
     */
    @Import(name="createExternalTables")
    private @Nullable Output<String> createExternalTables;

    /**
     * @return Whether to create external tables
     * 
     */
    public Optional<Output<String>> createExternalTables() {
        return Optional.ofNullable(this.createExternalTables);
    }

    /**
     * Data location. Datasets will reside in this location.
     * 
     */
    @Import(name="dataSetLocation")
    private @Nullable Output<String> dataSetLocation;

    /**
     * @return Data location. Datasets will reside in this location.
     * 
     */
    public Optional<Output<String>> dataSetLocation() {
        return Optional.ofNullable(this.dataSetLocation);
    }

    /**
     * Database name
     * 
     */
    @Import(name="database")
    private @Nullable Output<String> database;

    /**
     * @return Database name
     * 
     */
    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * External location to store Delta tables. Default value: `&#34;&#34;`  (null). By default, the external tables will reside in the `/{schema}/{table}` path, and if you specify an external location in the `{externalLocation}/{schema}/{table}` path.
     * 
     */
    @Import(name="externalLocation")
    private @Nullable Output<String> externalLocation;

    /**
     * @return External location to store Delta tables. Default value: `&#34;&#34;`  (null). By default, the external tables will reside in the `/{schema}/{table}` path, and if you specify an external location in the `{externalLocation}/{schema}/{table}` path.
     * 
     */
    public Optional<Output<String>> externalLocation() {
        return Optional.ofNullable(this.externalLocation);
    }

    /**
     * ARN of the role which you created with different required policy mentioned in our setup guide
     * 
     */
    @Import(name="fivetranRoleArn")
    private @Nullable Output<String> fivetranRoleArn;

    /**
     * @return ARN of the role which you created with different required policy mentioned in our setup guide
     * 
     */
    public Optional<Output<String>> fivetranRoleArn() {
        return Optional.ofNullable(this.fivetranRoleArn);
    }

    /**
     * Server name
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return Server name
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * HTTP path
     * 
     */
    @Import(name="httpPath")
    private @Nullable Output<String> httpPath;

    /**
     * @return HTTP path
     * 
     */
    public Optional<Output<String>> httpPath() {
        return Optional.ofNullable(this.httpPath);
    }

    /**
     * Indicates that a private key is encrypted. The default value: `false`. The field can be specified if authentication type is `KEY_PAIR`.
     * 
     */
    @Import(name="isPrivateKeyEncrypted")
    private @Nullable Output<String> isPrivateKeyEncrypted;

    /**
     * @return Indicates that a private key is encrypted. The default value: `false`. The field can be specified if authentication type is `KEY_PAIR`.
     * 
     */
    public Optional<Output<String>> isPrivateKeyEncrypted() {
        return Optional.ofNullable(this.isPrivateKeyEncrypted);
    }

    /**
     * OneLake lakehouse name
     * 
     */
    @Import(name="lakehouseName")
    private @Nullable Output<String> lakehouseName;

    /**
     * @return OneLake lakehouse name
     * 
     */
    public Optional<Output<String>> lakehouseName() {
        return Optional.ofNullable(this.lakehouseName);
    }

    /**
     * In case private key is encrypted, you are required to enter passphrase that was used to encrypt the private key. The field can be specified if authentication type is `KEY_PAIR`.
     * 
     */
    @Import(name="passphrase")
    private @Nullable Output<String> passphrase;

    /**
     * @return In case private key is encrypted, you are required to enter passphrase that was used to encrypt the private key. The field can be specified if authentication type is `KEY_PAIR`.
     * 
     */
    public Optional<Output<String>> passphrase() {
        return Optional.ofNullable(this.passphrase);
    }

    /**
     * Database user password
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Database user password
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Personal access token
     * 
     */
    @Import(name="personalAccessToken")
    private @Nullable Output<String> personalAccessToken;

    /**
     * @return Personal access token
     * 
     */
    public Optional<Output<String>> personalAccessToken() {
        return Optional.ofNullable(this.personalAccessToken);
    }

    /**
     * Server port number
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Server port number
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Prefix path of the bucket for which you have configured access policy. It is not required if access has been granted to entire Bucket in the access policy
     * 
     */
    @Import(name="prefixPath")
    private @Nullable Output<String> prefixPath;

    /**
     * @return Prefix path of the bucket for which you have configured access policy. It is not required if access has been granted to entire Bucket in the access policy
     * 
     */
    public Optional<Output<String>> prefixPath() {
        return Optional.ofNullable(this.prefixPath);
    }

    /**
     * Private access key.  The field should be specified if authentication type is `KEY_PAIR`.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return Private access key.  The field should be specified if authentication type is `KEY_PAIR`.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * BigQuery project ID
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return BigQuery project ID
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Public key to grant Fivetran SSH access to git repository.
     * 
     */
    @Import(name="publicKey")
    private @Nullable Output<String> publicKey;

    /**
     * @return Public key to grant Fivetran SSH access to git repository.
     * 
     */
    public Optional<Output<String>> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    /**
     * Region of your AWS S3 bucket
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region of your AWS S3 bucket
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The group role that you would like to assign this new user to. Supported group roles: ‘Destination Administrator‘, ‘Destination Reviewer‘, ‘Destination Analyst‘, ‘Connector Creator‘, or a custom destination role
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The group role that you would like to assign this new user to. Supported group roles: ‘Destination Administrator‘, ‘Destination Reviewer‘, ‘Destination Analyst‘, ‘Connector Creator‘, or a custom destination role
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * Role ARN with Redshift permissions. Required if authentication type is `IAM`.
     * 
     */
    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    /**
     * @return Role ARN with Redshift permissions. Required if authentication type is `IAM`.
     * 
     */
    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    /**
     * Private key of the customer service account. If specified, your service account will be used to process the data instead of the Fivetran-managed service account.
     * 
     */
    @Import(name="secretKey")
    private @Nullable Output<String> secretKey;

    /**
     * @return Private key of the customer service account. If specified, your service account will be used to process the data instead of the Fivetran-managed service account.
     * 
     */
    public Optional<Output<String>> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    /**
     * Secret Value of your Azure Data Lake Storage
     * 
     */
    @Import(name="secretValue")
    private @Nullable Output<String> secretValue;

    /**
     * @return Secret Value of your Azure Data Lake Storage
     * 
     */
    public Optional<Output<String>> secretValue() {
        return Optional.ofNullable(this.secretValue);
    }

    /**
     * Server name
     * 
     */
    @Import(name="serverHostName")
    private @Nullable Output<String> serverHostName;

    /**
     * @return Server name
     * 
     */
    public Optional<Output<String>> serverHostName() {
        return Optional.ofNullable(this.serverHostName);
    }

    /**
     * Storage Account Name of your Azure Data Lake Storage
     * 
     */
    @Import(name="storageAccountName")
    private @Nullable Output<String> storageAccountName;

    /**
     * @return Storage Account Name of your Azure Data Lake Storage
     * 
     */
    public Optional<Output<String>> storageAccountName() {
        return Optional.ofNullable(this.storageAccountName);
    }

    /**
     * TenantId of your Azure Data Lake Storage
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return TenantId of your Azure Data Lake Storage
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    /**
     * SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
     * 
     */
    @Import(name="tunnelHost")
    private @Nullable Output<String> tunnelHost;

    /**
     * @return SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
     * 
     */
    public Optional<Output<String>> tunnelHost() {
        return Optional.ofNullable(this.tunnelHost);
    }

    /**
     * SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
     * 
     */
    @Import(name="tunnelPort")
    private @Nullable Output<String> tunnelPort;

    /**
     * @return SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
     * 
     */
    public Optional<Output<String>> tunnelPort() {
        return Optional.ofNullable(this.tunnelPort);
    }

    /**
     * SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
     * 
     */
    @Import(name="tunnelUser")
    private @Nullable Output<String> tunnelUser;

    /**
     * @return SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
     * 
     */
    public Optional<Output<String>> tunnelUser() {
        return Optional.ofNullable(this.tunnelUser);
    }

    /**
     * Database user name
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return Database user name
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    /**
     * OneLake workspace name
     * 
     */
    @Import(name="workspaceName")
    private @Nullable Output<String> workspaceName;

    /**
     * @return OneLake workspace name
     * 
     */
    public Optional<Output<String>> workspaceName() {
        return Optional.ofNullable(this.workspaceName);
    }

    private DestinationConfigArgs() {}

    private DestinationConfigArgs(DestinationConfigArgs $) {
        this.auth = $.auth;
        this.authType = $.authType;
        this.bucket = $.bucket;
        this.catalog = $.catalog;
        this.clientId = $.clientId;
        this.clusterId = $.clusterId;
        this.clusterRegion = $.clusterRegion;
        this.connectionType = $.connectionType;
        this.containerName = $.containerName;
        this.createExternalTables = $.createExternalTables;
        this.dataSetLocation = $.dataSetLocation;
        this.database = $.database;
        this.externalLocation = $.externalLocation;
        this.fivetranRoleArn = $.fivetranRoleArn;
        this.host = $.host;
        this.httpPath = $.httpPath;
        this.isPrivateKeyEncrypted = $.isPrivateKeyEncrypted;
        this.lakehouseName = $.lakehouseName;
        this.passphrase = $.passphrase;
        this.password = $.password;
        this.personalAccessToken = $.personalAccessToken;
        this.port = $.port;
        this.prefixPath = $.prefixPath;
        this.privateKey = $.privateKey;
        this.projectId = $.projectId;
        this.publicKey = $.publicKey;
        this.region = $.region;
        this.role = $.role;
        this.roleArn = $.roleArn;
        this.secretKey = $.secretKey;
        this.secretValue = $.secretValue;
        this.serverHostName = $.serverHostName;
        this.storageAccountName = $.storageAccountName;
        this.tenantId = $.tenantId;
        this.tunnelHost = $.tunnelHost;
        this.tunnelPort = $.tunnelPort;
        this.tunnelUser = $.tunnelUser;
        this.user = $.user;
        this.workspaceName = $.workspaceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DestinationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DestinationConfigArgs $;

        public Builder() {
            $ = new DestinationConfigArgs();
        }

        public Builder(DestinationConfigArgs defaults) {
            $ = new DestinationConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param auth The connector authorization settings. Check possible config formats in [create method](https://www.terraform.io/openapi/reference/v1/operation/create_connector/)
         * 
         * @return builder
         * 
         */
        public Builder auth(@Nullable Output<String> auth) {
            $.auth = auth;
            return this;
        }

        /**
         * @param auth The connector authorization settings. Check possible config formats in [create method](https://www.terraform.io/openapi/reference/v1/operation/create_connector/)
         * 
         * @return builder
         * 
         */
        public Builder auth(String auth) {
            return auth(Output.of(auth));
        }

        /**
         * @param authType Authentication type. Default value: `PASSWORD`.
         * 
         * @return builder
         * 
         */
        public Builder authType(@Nullable Output<String> authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param authType Authentication type. Default value: `PASSWORD`.
         * 
         * @return builder
         * 
         */
        public Builder authType(String authType) {
            return authType(Output.of(authType));
        }

        /**
         * @param bucket Customer bucket. If specified, your GCS bucket will be used to process the data instead of a Fivetran-managed bucket. The bucket must be present in the same location as the dataset location.
         * 
         * @return builder
         * 
         */
        public Builder bucket(@Nullable Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket Customer bucket. If specified, your GCS bucket will be used to process the data instead of a Fivetran-managed bucket. The bucket must be present in the same location as the dataset location.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param catalog Catalog name
         * 
         * @return builder
         * 
         */
        public Builder catalog(@Nullable Output<String> catalog) {
            $.catalog = catalog;
            return this;
        }

        /**
         * @param catalog Catalog name
         * 
         * @return builder
         * 
         */
        public Builder catalog(String catalog) {
            return catalog(Output.of(catalog));
        }

        /**
         * @param clientId ClientId of your Azure Data Lake Storage
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId ClientId of your Azure Data Lake Storage
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clusterId Cluster ID. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId Cluster ID. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param clusterRegion Cluster region. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
         * 
         * @return builder
         * 
         */
        public Builder clusterRegion(@Nullable Output<String> clusterRegion) {
            $.clusterRegion = clusterRegion;
            return this;
        }

        /**
         * @param clusterRegion Cluster region. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
         * 
         * @return builder
         * 
         */
        public Builder clusterRegion(String clusterRegion) {
            return clusterRegion(Output.of(clusterRegion));
        }

        /**
         * @param connectionType Connection method. Default value: `Directly`.
         * 
         * @return builder
         * 
         */
        public Builder connectionType(@Nullable Output<String> connectionType) {
            $.connectionType = connectionType;
            return this;
        }

        /**
         * @param connectionType Connection method. Default value: `Directly`.
         * 
         * @return builder
         * 
         */
        public Builder connectionType(String connectionType) {
            return connectionType(Output.of(connectionType));
        }

        /**
         * @param containerName Container Name of your Azure Data Lake Storage
         * 
         * @return builder
         * 
         */
        public Builder containerName(@Nullable Output<String> containerName) {
            $.containerName = containerName;
            return this;
        }

        /**
         * @param containerName Container Name of your Azure Data Lake Storage
         * 
         * @return builder
         * 
         */
        public Builder containerName(String containerName) {
            return containerName(Output.of(containerName));
        }

        /**
         * @param createExternalTables Whether to create external tables
         * 
         * @return builder
         * 
         */
        public Builder createExternalTables(@Nullable Output<String> createExternalTables) {
            $.createExternalTables = createExternalTables;
            return this;
        }

        /**
         * @param createExternalTables Whether to create external tables
         * 
         * @return builder
         * 
         */
        public Builder createExternalTables(String createExternalTables) {
            return createExternalTables(Output.of(createExternalTables));
        }

        /**
         * @param dataSetLocation Data location. Datasets will reside in this location.
         * 
         * @return builder
         * 
         */
        public Builder dataSetLocation(@Nullable Output<String> dataSetLocation) {
            $.dataSetLocation = dataSetLocation;
            return this;
        }

        /**
         * @param dataSetLocation Data location. Datasets will reside in this location.
         * 
         * @return builder
         * 
         */
        public Builder dataSetLocation(String dataSetLocation) {
            return dataSetLocation(Output.of(dataSetLocation));
        }

        /**
         * @param database Database name
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database Database name
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param externalLocation External location to store Delta tables. Default value: `&#34;&#34;`  (null). By default, the external tables will reside in the `/{schema}/{table}` path, and if you specify an external location in the `{externalLocation}/{schema}/{table}` path.
         * 
         * @return builder
         * 
         */
        public Builder externalLocation(@Nullable Output<String> externalLocation) {
            $.externalLocation = externalLocation;
            return this;
        }

        /**
         * @param externalLocation External location to store Delta tables. Default value: `&#34;&#34;`  (null). By default, the external tables will reside in the `/{schema}/{table}` path, and if you specify an external location in the `{externalLocation}/{schema}/{table}` path.
         * 
         * @return builder
         * 
         */
        public Builder externalLocation(String externalLocation) {
            return externalLocation(Output.of(externalLocation));
        }

        /**
         * @param fivetranRoleArn ARN of the role which you created with different required policy mentioned in our setup guide
         * 
         * @return builder
         * 
         */
        public Builder fivetranRoleArn(@Nullable Output<String> fivetranRoleArn) {
            $.fivetranRoleArn = fivetranRoleArn;
            return this;
        }

        /**
         * @param fivetranRoleArn ARN of the role which you created with different required policy mentioned in our setup guide
         * 
         * @return builder
         * 
         */
        public Builder fivetranRoleArn(String fivetranRoleArn) {
            return fivetranRoleArn(Output.of(fivetranRoleArn));
        }

        /**
         * @param host Server name
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host Server name
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param httpPath HTTP path
         * 
         * @return builder
         * 
         */
        public Builder httpPath(@Nullable Output<String> httpPath) {
            $.httpPath = httpPath;
            return this;
        }

        /**
         * @param httpPath HTTP path
         * 
         * @return builder
         * 
         */
        public Builder httpPath(String httpPath) {
            return httpPath(Output.of(httpPath));
        }

        /**
         * @param isPrivateKeyEncrypted Indicates that a private key is encrypted. The default value: `false`. The field can be specified if authentication type is `KEY_PAIR`.
         * 
         * @return builder
         * 
         */
        public Builder isPrivateKeyEncrypted(@Nullable Output<String> isPrivateKeyEncrypted) {
            $.isPrivateKeyEncrypted = isPrivateKeyEncrypted;
            return this;
        }

        /**
         * @param isPrivateKeyEncrypted Indicates that a private key is encrypted. The default value: `false`. The field can be specified if authentication type is `KEY_PAIR`.
         * 
         * @return builder
         * 
         */
        public Builder isPrivateKeyEncrypted(String isPrivateKeyEncrypted) {
            return isPrivateKeyEncrypted(Output.of(isPrivateKeyEncrypted));
        }

        /**
         * @param lakehouseName OneLake lakehouse name
         * 
         * @return builder
         * 
         */
        public Builder lakehouseName(@Nullable Output<String> lakehouseName) {
            $.lakehouseName = lakehouseName;
            return this;
        }

        /**
         * @param lakehouseName OneLake lakehouse name
         * 
         * @return builder
         * 
         */
        public Builder lakehouseName(String lakehouseName) {
            return lakehouseName(Output.of(lakehouseName));
        }

        /**
         * @param passphrase In case private key is encrypted, you are required to enter passphrase that was used to encrypt the private key. The field can be specified if authentication type is `KEY_PAIR`.
         * 
         * @return builder
         * 
         */
        public Builder passphrase(@Nullable Output<String> passphrase) {
            $.passphrase = passphrase;
            return this;
        }

        /**
         * @param passphrase In case private key is encrypted, you are required to enter passphrase that was used to encrypt the private key. The field can be specified if authentication type is `KEY_PAIR`.
         * 
         * @return builder
         * 
         */
        public Builder passphrase(String passphrase) {
            return passphrase(Output.of(passphrase));
        }

        /**
         * @param password Database user password
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Database user password
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param personalAccessToken Personal access token
         * 
         * @return builder
         * 
         */
        public Builder personalAccessToken(@Nullable Output<String> personalAccessToken) {
            $.personalAccessToken = personalAccessToken;
            return this;
        }

        /**
         * @param personalAccessToken Personal access token
         * 
         * @return builder
         * 
         */
        public Builder personalAccessToken(String personalAccessToken) {
            return personalAccessToken(Output.of(personalAccessToken));
        }

        /**
         * @param port Server port number
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Server port number
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param prefixPath Prefix path of the bucket for which you have configured access policy. It is not required if access has been granted to entire Bucket in the access policy
         * 
         * @return builder
         * 
         */
        public Builder prefixPath(@Nullable Output<String> prefixPath) {
            $.prefixPath = prefixPath;
            return this;
        }

        /**
         * @param prefixPath Prefix path of the bucket for which you have configured access policy. It is not required if access has been granted to entire Bucket in the access policy
         * 
         * @return builder
         * 
         */
        public Builder prefixPath(String prefixPath) {
            return prefixPath(Output.of(prefixPath));
        }

        /**
         * @param privateKey Private access key.  The field should be specified if authentication type is `KEY_PAIR`.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey Private access key.  The field should be specified if authentication type is `KEY_PAIR`.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param projectId BigQuery project ID
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId BigQuery project ID
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param publicKey Public key to grant Fivetran SSH access to git repository.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(@Nullable Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param publicKey Public key to grant Fivetran SSH access to git repository.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        /**
         * @param region Region of your AWS S3 bucket
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region of your AWS S3 bucket
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param role The group role that you would like to assign this new user to. Supported group roles: ‘Destination Administrator‘, ‘Destination Reviewer‘, ‘Destination Analyst‘, ‘Connector Creator‘, or a custom destination role
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The group role that you would like to assign this new user to. Supported group roles: ‘Destination Administrator‘, ‘Destination Reviewer‘, ‘Destination Analyst‘, ‘Connector Creator‘, or a custom destination role
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param roleArn Role ARN with Redshift permissions. Required if authentication type is `IAM`.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param roleArn Role ARN with Redshift permissions. Required if authentication type is `IAM`.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        /**
         * @param secretKey Private key of the customer service account. If specified, your service account will be used to process the data instead of the Fivetran-managed service account.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(@Nullable Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey Private key of the customer service account. If specified, your service account will be used to process the data instead of the Fivetran-managed service account.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        /**
         * @param secretValue Secret Value of your Azure Data Lake Storage
         * 
         * @return builder
         * 
         */
        public Builder secretValue(@Nullable Output<String> secretValue) {
            $.secretValue = secretValue;
            return this;
        }

        /**
         * @param secretValue Secret Value of your Azure Data Lake Storage
         * 
         * @return builder
         * 
         */
        public Builder secretValue(String secretValue) {
            return secretValue(Output.of(secretValue));
        }

        /**
         * @param serverHostName Server name
         * 
         * @return builder
         * 
         */
        public Builder serverHostName(@Nullable Output<String> serverHostName) {
            $.serverHostName = serverHostName;
            return this;
        }

        /**
         * @param serverHostName Server name
         * 
         * @return builder
         * 
         */
        public Builder serverHostName(String serverHostName) {
            return serverHostName(Output.of(serverHostName));
        }

        /**
         * @param storageAccountName Storage Account Name of your Azure Data Lake Storage
         * 
         * @return builder
         * 
         */
        public Builder storageAccountName(@Nullable Output<String> storageAccountName) {
            $.storageAccountName = storageAccountName;
            return this;
        }

        /**
         * @param storageAccountName Storage Account Name of your Azure Data Lake Storage
         * 
         * @return builder
         * 
         */
        public Builder storageAccountName(String storageAccountName) {
            return storageAccountName(Output.of(storageAccountName));
        }

        /**
         * @param tenantId TenantId of your Azure Data Lake Storage
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId TenantId of your Azure Data Lake Storage
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        /**
         * @param tunnelHost SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
         * 
         * @return builder
         * 
         */
        public Builder tunnelHost(@Nullable Output<String> tunnelHost) {
            $.tunnelHost = tunnelHost;
            return this;
        }

        /**
         * @param tunnelHost SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
         * 
         * @return builder
         * 
         */
        public Builder tunnelHost(String tunnelHost) {
            return tunnelHost(Output.of(tunnelHost));
        }

        /**
         * @param tunnelPort SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
         * 
         * @return builder
         * 
         */
        public Builder tunnelPort(@Nullable Output<String> tunnelPort) {
            $.tunnelPort = tunnelPort;
            return this;
        }

        /**
         * @param tunnelPort SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
         * 
         * @return builder
         * 
         */
        public Builder tunnelPort(String tunnelPort) {
            return tunnelPort(Output.of(tunnelPort));
        }

        /**
         * @param tunnelUser SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
         * 
         * @return builder
         * 
         */
        public Builder tunnelUser(@Nullable Output<String> tunnelUser) {
            $.tunnelUser = tunnelUser;
            return this;
        }

        /**
         * @param tunnelUser SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
         * 
         * @return builder
         * 
         */
        public Builder tunnelUser(String tunnelUser) {
            return tunnelUser(Output.of(tunnelUser));
        }

        /**
         * @param user Database user name
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user Database user name
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        /**
         * @param workspaceName OneLake workspace name
         * 
         * @return builder
         * 
         */
        public Builder workspaceName(@Nullable Output<String> workspaceName) {
            $.workspaceName = workspaceName;
            return this;
        }

        /**
         * @param workspaceName OneLake workspace name
         * 
         * @return builder
         * 
         */
        public Builder workspaceName(String workspaceName) {
            return workspaceName(Output.of(workspaceName));
        }

        public DestinationConfigArgs build() {
            return $;
        }
    }

}
