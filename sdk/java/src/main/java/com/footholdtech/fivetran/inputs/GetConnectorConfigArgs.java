// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.footholdtech.fivetran.inputs.GetConnectorConfigAccountsRedditAdArgs;
import com.footholdtech.fivetran.inputs.GetConnectorConfigAdobeAnalyticsConfigurationArgs;
import com.footholdtech.fivetran.inputs.GetConnectorConfigAppIdsAppsflyerArgs;
import com.footholdtech.fivetran.inputs.GetConnectorConfigCustomReportArgs;
import com.footholdtech.fivetran.inputs.GetConnectorConfigCustomTableArgs;
import com.footholdtech.fivetran.inputs.GetConnectorConfigProjectCredentialArgs;
import com.footholdtech.fivetran.inputs.GetConnectorConfigReportArgs;
import com.footholdtech.fivetran.inputs.GetConnectorConfigSecretsListArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetConnectorConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetConnectorConfigArgs Empty = new GetConnectorConfigArgs();

    @Import(name="absConnectionMethod", required=true)
    private Output<String> absConnectionMethod;

    public Output<String> absConnectionMethod() {
        return this.absConnectionMethod;
    }

    @Import(name="absConnectionString", required=true)
    private Output<String> absConnectionString;

    public Output<String> absConnectionString() {
        return this.absConnectionString;
    }

    @Import(name="absContainerAddress", required=true)
    private Output<String> absContainerAddress;

    public Output<String> absContainerAddress() {
        return this.absContainerAddress;
    }

    @Import(name="absContainerName", required=true)
    private Output<String> absContainerName;

    public Output<String> absContainerName() {
        return this.absContainerName;
    }

    @Import(name="absHostIp", required=true)
    private Output<String> absHostIp;

    public Output<String> absHostIp() {
        return this.absHostIp;
    }

    @Import(name="absHostUser", required=true)
    private Output<String> absHostUser;

    public Output<String> absHostUser() {
        return this.absHostUser;
    }

    @Import(name="absPrefix", required=true)
    private Output<String> absPrefix;

    public Output<String> absPrefix() {
        return this.absPrefix;
    }

    @Import(name="absPublicKey", required=true)
    private Output<String> absPublicKey;

    public Output<String> absPublicKey() {
        return this.absPublicKey;
    }

    @Import(name="accessKey", required=true)
    private Output<String> accessKey;

    public Output<String> accessKey() {
        return this.accessKey;
    }

    @Import(name="accessKeyId", required=true)
    private Output<String> accessKeyId;

    public Output<String> accessKeyId() {
        return this.accessKeyId;
    }

    @Import(name="accessKeySecret", required=true)
    private Output<String> accessKeySecret;

    public Output<String> accessKeySecret() {
        return this.accessKeySecret;
    }

    @Import(name="accessToken", required=true)
    private Output<String> accessToken;

    public Output<String> accessToken() {
        return this.accessToken;
    }

    @Import(name="accessType", required=true)
    private Output<String> accessType;

    public Output<String> accessType() {
        return this.accessType;
    }

    @Import(name="account", required=true)
    private Output<String> account;

    public Output<String> account() {
        return this.account;
    }

    @Import(name="accountId", required=true)
    private Output<String> accountId;

    public Output<String> accountId() {
        return this.accountId;
    }

    @Import(name="accountIds", required=true)
    private Output<List<String>> accountIds;

    public Output<List<String>> accountIds() {
        return this.accountIds;
    }

    @Import(name="accountKey", required=true)
    private Output<String> accountKey;

    public Output<String> accountKey() {
        return this.accountKey;
    }

    @Import(name="accountName", required=true)
    private Output<String> accountName;

    public Output<String> accountName() {
        return this.accountName;
    }

    @Import(name="accountSyncMode", required=true)
    private Output<String> accountSyncMode;

    public Output<String> accountSyncMode() {
        return this.accountSyncMode;
    }

    @Import(name="accounts", required=true)
    private Output<List<String>> accounts;

    public Output<List<String>> accounts() {
        return this.accounts;
    }

    @Import(name="accountsRedditAds", required=true)
    private Output<List<GetConnectorConfigAccountsRedditAdArgs>> accountsRedditAds;

    public Output<List<GetConnectorConfigAccountsRedditAdArgs>> accountsRedditAds() {
        return this.accountsRedditAds;
    }

    @Import(name="accountsSyncMode", required=true)
    private Output<String> accountsSyncMode;

    public Output<String> accountsSyncMode() {
        return this.accountsSyncMode;
    }

    @Import(name="actionBreakdowns", required=true)
    private Output<List<String>> actionBreakdowns;

    public Output<List<String>> actionBreakdowns() {
        return this.actionBreakdowns;
    }

    @Import(name="actionReportTime", required=true)
    private Output<String> actionReportTime;

    public Output<String> actionReportTime() {
        return this.actionReportTime;
    }

    @Import(name="adAnalytics", required=true)
    private Output<String> adAnalytics;

    public Output<String> adAnalytics() {
        return this.adAnalytics;
    }

    @Import(name="adUnitView", required=true)
    private Output<String> adUnitView;

    public Output<String> adUnitView() {
        return this.adUnitView;
    }

    @Import(name="adminApiKey", required=true)
    private Output<String> adminApiKey;

    public Output<String> adminApiKey() {
        return this.adminApiKey;
    }

    @Import(name="adobeAnalyticsConfigurations", required=true)
    private Output<List<GetConnectorConfigAdobeAnalyticsConfigurationArgs>> adobeAnalyticsConfigurations;

    public Output<List<GetConnectorConfigAdobeAnalyticsConfigurationArgs>> adobeAnalyticsConfigurations() {
        return this.adobeAnalyticsConfigurations;
    }

    @Import(name="advertisables", required=true)
    private Output<List<String>> advertisables;

    public Output<List<String>> advertisables() {
        return this.advertisables;
    }

    @Import(name="advertisers", required=true)
    private Output<List<String>> advertisers;

    public Output<List<String>> advertisers() {
        return this.advertisers;
    }

    @Import(name="advertisersIds", required=true)
    private Output<List<String>> advertisersIds;

    public Output<List<String>> advertisersIds() {
        return this.advertisersIds;
    }

    @Import(name="advertisersSyncMode", required=true)
    private Output<String> advertisersSyncMode;

    public Output<String> advertisersSyncMode() {
        return this.advertisersSyncMode;
    }

    @Import(name="agentHost", required=true)
    private Output<String> agentHost;

    public Output<String> agentHost() {
        return this.agentHost;
    }

    @Import(name="agentOraHome", required=true)
    private Output<String> agentOraHome;

    public Output<String> agentOraHome() {
        return this.agentOraHome;
    }

    @Import(name="agentPassword", required=true)
    private Output<String> agentPassword;

    public Output<String> agentPassword() {
        return this.agentPassword;
    }

    @Import(name="agentPort", required=true)
    private Output<String> agentPort;

    public Output<String> agentPort() {
        return this.agentPort;
    }

    @Import(name="agentPublicCert", required=true)
    private Output<String> agentPublicCert;

    public Output<String> agentPublicCert() {
        return this.agentPublicCert;
    }

    @Import(name="agentUser", required=true)
    private Output<String> agentUser;

    public Output<String> agentUser() {
        return this.agentUser;
    }

    @Import(name="aggregation", required=true)
    private Output<String> aggregation;

    public Output<String> aggregation() {
        return this.aggregation;
    }

    @Import(name="alwaysEncrypted", required=true)
    private Output<String> alwaysEncrypted;

    public Output<String> alwaysEncrypted() {
        return this.alwaysEncrypted;
    }

    @Import(name="apiAccessToken", required=true)
    private Output<String> apiAccessToken;

    public Output<String> apiAccessToken() {
        return this.apiAccessToken;
    }

    @Import(name="apiId", required=true)
    private Output<String> apiId;

    public Output<String> apiId() {
        return this.apiId;
    }

    @Import(name="apiKey", required=true)
    private Output<String> apiKey;

    public Output<String> apiKey() {
        return this.apiKey;
    }

    @Import(name="apiKeyApiSecret", required=true)
    private Output<String> apiKeyApiSecret;

    public Output<String> apiKeyApiSecret() {
        return this.apiKeyApiSecret;
    }

    @Import(name="apiKeys", required=true)
    private Output<List<String>> apiKeys;

    public Output<List<String>> apiKeys() {
        return this.apiKeys;
    }

    @Import(name="apiQuota", required=true)
    private Output<String> apiQuota;

    public Output<String> apiQuota() {
        return this.apiQuota;
    }

    @Import(name="apiRequestsPerMinute", required=true)
    private Output<String> apiRequestsPerMinute;

    public Output<String> apiRequestsPerMinute() {
        return this.apiRequestsPerMinute;
    }

    @Import(name="apiSecret", required=true)
    private Output<String> apiSecret;

    public Output<String> apiSecret() {
        return this.apiSecret;
    }

    @Import(name="apiSecretKey", required=true)
    private Output<String> apiSecretKey;

    public Output<String> apiSecretKey() {
        return this.apiSecretKey;
    }

    @Import(name="apiToken", required=true)
    private Output<String> apiToken;

    public Output<String> apiToken() {
        return this.apiToken;
    }

    @Import(name="apiType", required=true)
    private Output<String> apiType;

    public Output<String> apiType() {
        return this.apiType;
    }

    @Import(name="apiUrl", required=true)
    private Output<String> apiUrl;

    public Output<String> apiUrl() {
        return this.apiUrl;
    }

    @Import(name="apiUsage", required=true)
    private Output<String> apiUsage;

    public Output<String> apiUsage() {
        return this.apiUsage;
    }

    @Import(name="apiUtilizationPercentage", required=true)
    private Output<String> apiUtilizationPercentage;

    public Output<String> apiUtilizationPercentage() {
        return this.apiUtilizationPercentage;
    }

    @Import(name="apiVersion", required=true)
    private Output<String> apiVersion;

    public Output<String> apiVersion() {
        return this.apiVersion;
    }

    @Import(name="appId", required=true)
    private Output<String> appId;

    public Output<String> appId() {
        return this.appId;
    }

    @Import(name="appIds", required=true)
    private Output<List<String>> appIds;

    public Output<List<String>> appIds() {
        return this.appIds;
    }

    @Import(name="appIdsAppsflyers", required=true)
    private Output<List<GetConnectorConfigAppIdsAppsflyerArgs>> appIdsAppsflyers;

    public Output<List<GetConnectorConfigAppIdsAppsflyerArgs>> appIdsAppsflyers() {
        return this.appIdsAppsflyers;
    }

    @Import(name="appKey", required=true)
    private Output<String> appKey;

    public Output<String> appKey() {
        return this.appKey;
    }

    @Import(name="appSpecificPassword", required=true)
    private Output<String> appSpecificPassword;

    public Output<String> appSpecificPassword() {
        return this.appSpecificPassword;
    }

    @Import(name="appSyncMode", required=true)
    private Output<String> appSyncMode;

    public Output<String> appSyncMode() {
        return this.appSyncMode;
    }

    @Import(name="appendFileOption", required=true)
    private Output<String> appendFileOption;

    public Output<String> appendFileOption() {
        return this.appendFileOption;
    }

    @Import(name="applicationKey", required=true)
    private Output<String> applicationKey;

    public Output<String> applicationKey() {
        return this.applicationKey;
    }

    @Import(name="apps", required=true)
    private Output<List<String>> apps;

    public Output<List<String>> apps() {
        return this.apps;
    }

    @Import(name="archiveLogFormat", required=true)
    private Output<String> archiveLogFormat;

    public Output<String> archiveLogFormat() {
        return this.archiveLogFormat;
    }

    @Import(name="archiveLogPath", required=true)
    private Output<String> archiveLogPath;

    public Output<String> archiveLogPath() {
        return this.archiveLogPath;
    }

    @Import(name="archivePattern", required=true)
    private Output<String> archivePattern;

    public Output<String> archivePattern() {
        return this.archivePattern;
    }

    @Import(name="areSoapCredentialsProvided", required=true)
    private Output<String> areSoapCredentialsProvided;

    public Output<String> areSoapCredentialsProvided() {
        return this.areSoapCredentialsProvided;
    }

    @Import(name="asbIp", required=true)
    private Output<String> asbIp;

    public Output<String> asbIp() {
        return this.asbIp;
    }

    @Import(name="asmOption", required=true)
    private Output<String> asmOption;

    public Output<String> asmOption() {
        return this.asmOption;
    }

    @Import(name="asmOracleHome", required=true)
    private Output<String> asmOracleHome;

    public Output<String> asmOracleHome() {
        return this.asmOracleHome;
    }

    @Import(name="asmPassword", required=true)
    private Output<String> asmPassword;

    public Output<String> asmPassword() {
        return this.asmPassword;
    }

    @Import(name="asmTns", required=true)
    private Output<String> asmTns;

    public Output<String> asmTns() {
        return this.asmTns;
    }

    @Import(name="asmUser", required=true)
    private Output<String> asmUser;

    public Output<String> asmUser() {
        return this.asmUser;
    }

    @Import(name="attributionWindow", required=true)
    private Output<String> attributionWindow;

    public Output<String> attributionWindow() {
        return this.attributionWindow;
    }

    @Import(name="attributionWindowSize", required=true)
    private Output<String> attributionWindowSize;

    public Output<String> attributionWindowSize() {
        return this.attributionWindowSize;
    }

    @Import(name="auth", required=true)
    private Output<String> auth;

    public Output<String> auth() {
        return this.auth;
    }

    @Import(name="authMethod", required=true)
    private Output<String> authMethod;

    public Output<String> authMethod() {
        return this.authMethod;
    }

    @Import(name="authMode", required=true)
    private Output<String> authMode;

    public Output<String> authMode() {
        return this.authMode;
    }

    @Import(name="authType", required=true)
    private Output<String> authType;

    public Output<String> authType() {
        return this.authType;
    }

    @Import(name="authorizationMethod", required=true)
    private Output<String> authorizationMethod;

    public Output<String> authorizationMethod() {
        return this.authorizationMethod;
    }

    @Import(name="awsRegionCode", required=true)
    private Output<String> awsRegionCode;

    public Output<String> awsRegionCode() {
        return this.awsRegionCode;
    }

    @Import(name="baseCurrency", required=true)
    private Output<String> baseCurrency;

    public Output<String> baseCurrency() {
        return this.baseCurrency;
    }

    @Import(name="baseDomain", required=true)
    private Output<String> baseDomain;

    public Output<String> baseDomain() {
        return this.baseDomain;
    }

    @Import(name="baseId", required=true)
    private Output<String> baseId;

    public Output<String> baseId() {
        return this.baseId;
    }

    @Import(name="baseUrl", required=true)
    private Output<String> baseUrl;

    public Output<String> baseUrl() {
        return this.baseUrl;
    }

    @Import(name="bearerToken", required=true)
    private Output<String> bearerToken;

    public Output<String> bearerToken() {
        return this.bearerToken;
    }

    @Import(name="blobSasUrl", required=true)
    private Output<String> blobSasUrl;

    public Output<String> blobSasUrl() {
        return this.blobSasUrl;
    }

    @Import(name="breakdowns", required=true)
    private Output<List<String>> breakdowns;

    public Output<List<String>> breakdowns() {
        return this.breakdowns;
    }

    @Import(name="bucket", required=true)
    private Output<String> bucket;

    public Output<String> bucket() {
        return this.bucket;
    }

    @Import(name="bucketName", required=true)
    private Output<String> bucketName;

    public Output<String> bucketName() {
        return this.bucketName;
    }

    @Import(name="bucketService", required=true)
    private Output<String> bucketService;

    public Output<String> bucketService() {
        return this.bucketService;
    }

    @Import(name="businessId", required=true)
    private Output<String> businessId;

    public Output<String> businessId() {
        return this.businessId;
    }

    @Import(name="businessUnitId", required=true)
    private Output<String> businessUnitId;

    public Output<String> businessUnitId() {
        return this.businessUnitId;
    }

    @Import(name="certificate", required=true)
    private Output<String> certificate;

    public Output<String> certificate() {
        return this.certificate;
    }

    @Import(name="clickAttributionWindow", required=true)
    private Output<String> clickAttributionWindow;

    public Output<String> clickAttributionWindow() {
        return this.clickAttributionWindow;
    }

    @Import(name="client", required=true)
    private Output<String> client;

    public Output<String> client() {
        return this.client;
    }

    @Import(name="clientCert", required=true)
    private Output<String> clientCert;

    public Output<String> clientCert() {
        return this.clientCert;
    }

    @Import(name="clientCertKey", required=true)
    private Output<String> clientCertKey;

    public Output<String> clientCertKey() {
        return this.clientCertKey;
    }

    @Import(name="clientId", required=true)
    private Output<String> clientId;

    public Output<String> clientId() {
        return this.clientId;
    }

    @Import(name="clientKey", required=true)
    private Output<String> clientKey;

    public Output<String> clientKey() {
        return this.clientKey;
    }

    @Import(name="clientName", required=true)
    private Output<String> clientName;

    public Output<String> clientName() {
        return this.clientName;
    }

    @Import(name="clientSecret", required=true)
    private Output<String> clientSecret;

    public Output<String> clientSecret() {
        return this.clientSecret;
    }

    @Import(name="cloudStorageType", required=true)
    private Output<String> cloudStorageType;

    public Output<String> cloudStorageType() {
        return this.cloudStorageType;
    }

    @Import(name="columns", required=true)
    private Output<List<String>> columns;

    public Output<List<String>> columns() {
        return this.columns;
    }

    @Import(name="companyId", required=true)
    private Output<String> companyId;

    public Output<String> companyId() {
        return this.companyId;
    }

    @Import(name="companyKey", required=true)
    private Output<String> companyKey;

    public Output<String> companyKey() {
        return this.companyKey;
    }

    @Import(name="companyRequestToken", required=true)
    private Output<String> companyRequestToken;

    public Output<String> companyRequestToken() {
        return this.companyRequestToken;
    }

    @Import(name="companyUuid", required=true)
    private Output<String> companyUuid;

    public Output<String> companyUuid() {
        return this.companyUuid;
    }

    @Import(name="compression", required=true)
    private Output<String> compression;

    public Output<String> compression() {
        return this.compression;
    }

    @Import(name="configMethod", required=true)
    private Output<String> configMethod;

    public Output<String> configMethod() {
        return this.configMethod;
    }

    @Import(name="configRepositoryUrl", required=true)
    private Output<String> configRepositoryUrl;

    public Output<String> configRepositoryUrl() {
        return this.configRepositoryUrl;
    }

    @Import(name="configType", required=true)
    private Output<String> configType;

    public Output<String> configType() {
        return this.configType;
    }

    @Import(name="connectingUser", required=true)
    private Output<String> connectingUser;

    public Output<String> connectingUser() {
        return this.connectingUser;
    }

    @Import(name="connectingUserEmail", required=true)
    private Output<String> connectingUserEmail;

    public Output<String> connectingUserEmail() {
        return this.connectingUserEmail;
    }

    @Import(name="connectionMethod", required=true)
    private Output<String> connectionMethod;

    public Output<String> connectionMethod() {
        return this.connectionMethod;
    }

    @Import(name="connectionString", required=true)
    private Output<String> connectionString;

    public Output<String> connectionString() {
        return this.connectionString;
    }

    @Import(name="connectionType", required=true)
    private Output<String> connectionType;

    public Output<String> connectionType() {
        return this.connectionType;
    }

    @Import(name="consumerGroup", required=true)
    private Output<String> consumerGroup;

    public Output<String> consumerGroup() {
        return this.consumerGroup;
    }

    @Import(name="consumerKey", required=true)
    private Output<String> consumerKey;

    public Output<String> consumerKey() {
        return this.consumerKey;
    }

    @Import(name="consumerSecret", required=true)
    private Output<String> consumerSecret;

    public Output<String> consumerSecret() {
        return this.consumerSecret;
    }

    @Import(name="containerAddress", required=true)
    private Output<String> containerAddress;

    public Output<String> containerAddress() {
        return this.containerAddress;
    }

    @Import(name="containerName", required=true)
    private Output<String> containerName;

    public Output<String> containerName() {
        return this.containerName;
    }

    @Import(name="contentOwnerId", required=true)
    private Output<String> contentOwnerId;

    public Output<String> contentOwnerId() {
        return this.contentOwnerId;
    }

    @Import(name="conversationWebhookUrl", required=true)
    private Output<String> conversationWebhookUrl;

    public Output<String> conversationWebhookUrl() {
        return this.conversationWebhookUrl;
    }

    @Import(name="conversionDimensions", required=true)
    private Output<List<String>> conversionDimensions;

    public Output<List<String>> conversionDimensions() {
        return this.conversionDimensions;
    }

    @Import(name="conversionReportTime", required=true)
    private Output<String> conversionReportTime;

    public Output<String> conversionReportTime() {
        return this.conversionReportTime;
    }

    @Import(name="conversionWindowSize", required=true)
    private Output<String> conversionWindowSize;

    public Output<String> conversionWindowSize() {
        return this.conversionWindowSize;
    }

    @Import(name="csvDefinition", required=true)
    private Output<String> csvDefinition;

    public Output<String> csvDefinition() {
        return this.csvDefinition;
    }

    @Import(name="currency", required=true)
    private Output<String> currency;

    public Output<String> currency() {
        return this.currency;
    }

    @Import(name="customEventSyncMode", required=true)
    private Output<String> customEventSyncMode;

    public Output<String> customEventSyncMode() {
        return this.customEventSyncMode;
    }

    @Import(name="customEvents", required=true)
    private Output<List<String>> customEvents;

    public Output<List<String>> customEvents() {
        return this.customEvents;
    }

    @Import(name="customFieldIds", required=true)
    private Output<List<String>> customFieldIds;

    public Output<List<String>> customFieldIds() {
        return this.customFieldIds;
    }

    @Import(name="customFloodlightVariables", required=true)
    private Output<List<String>> customFloodlightVariables;

    public Output<List<String>> customFloodlightVariables() {
        return this.customFloodlightVariables;
    }

    @Import(name="customReports", required=true)
    private Output<List<GetConnectorConfigCustomReportArgs>> customReports;

    public Output<List<GetConnectorConfigCustomReportArgs>> customReports() {
        return this.customReports;
    }

    @Import(name="customTables", required=true)
    private Output<List<GetConnectorConfigCustomTableArgs>> customTables;

    public Output<List<GetConnectorConfigCustomTableArgs>> customTables() {
        return this.customTables;
    }

    @Import(name="customerId", required=true)
    private Output<String> customerId;

    public Output<String> customerId() {
        return this.customerId;
    }

    @Import(name="customerListId", required=true)
    private Output<String> customerListId;

    public Output<String> customerListId() {
        return this.customerListId;
    }

    @Import(name="dailyApiCallLimit", required=true)
    private Output<String> dailyApiCallLimit;

    public Output<String> dailyApiCallLimit() {
        return this.dailyApiCallLimit;
    }

    @Import(name="dataAccessMethod", required=true)
    private Output<String> dataAccessMethod;

    public Output<String> dataAccessMethod() {
        return this.dataAccessMethod;
    }

    @Import(name="dataCenter", required=true)
    private Output<String> dataCenter;

    public Output<String> dataCenter() {
        return this.dataCenter;
    }

    @Import(name="dataSetName", required=true)
    private Output<String> dataSetName;

    public Output<String> dataSetName() {
        return this.dataSetName;
    }

    @Import(name="database", required=true)
    private Output<String> database;

    public Output<String> database() {
        return this.database;
    }

    @Import(name="datasetId", required=true)
    private Output<String> datasetId;

    public Output<String> datasetId() {
        return this.datasetId;
    }

    @Import(name="datasource", required=true)
    private Output<String> datasource;

    public Output<String> datasource() {
        return this.datasource;
    }

    @Import(name="dateGranularity", required=true)
    private Output<String> dateGranularity;

    public Output<String> dateGranularity() {
        return this.dateGranularity;
    }

    @Import(name="delimiter", required=true)
    private Output<String> delimiter;

    public Output<String> delimiter() {
        return this.delimiter;
    }

    @Import(name="dimensionAttributes", required=true)
    private Output<List<String>> dimensionAttributes;

    public Output<List<String>> dimensionAttributes() {
        return this.dimensionAttributes;
    }

    @Import(name="dimensions", required=true)
    private Output<List<String>> dimensions;

    public Output<List<String>> dimensions() {
        return this.dimensions;
    }

    @Import(name="distributedConnectorClusterSize", required=true)
    private Output<String> distributedConnectorClusterSize;

    public Output<String> distributedConnectorClusterSize() {
        return this.distributedConnectorClusterSize;
    }

    @Import(name="domain", required=true)
    private Output<String> domain;

    public Output<String> domain() {
        return this.domain;
    }

    @Import(name="domainHostName", required=true)
    private Output<String> domainHostName;

    public Output<String> domainHostName() {
        return this.domainHostName;
    }

    @Import(name="domainName", required=true)
    private Output<String> domainName;

    public Output<String> domainName() {
        return this.domainName;
    }

    @Import(name="domainType", required=true)
    private Output<String> domainType;

    public Output<String> domainType() {
        return this.domainType;
    }

    @Import(name="elements", required=true)
    private Output<List<String>> elements;

    public Output<List<String>> elements() {
        return this.elements;
    }

    @Import(name="email", required=true)
    private Output<String> email;

    public Output<String> email() {
        return this.email;
    }

    @Import(name="emptyHeader", required=true)
    private Output<String> emptyHeader;

    public Output<String> emptyHeader() {
        return this.emptyHeader;
    }

    @Import(name="enableAllDimensionCombinations", required=true)
    private Output<String> enableAllDimensionCombinations;

    public Output<String> enableAllDimensionCombinations() {
        return this.enableAllDimensionCombinations;
    }

    @Import(name="enableArchiveLogOnly", required=true)
    private Output<String> enableArchiveLogOnly;

    public Output<String> enableArchiveLogOnly() {
        return this.enableArchiveLogOnly;
    }

    @Import(name="enableDataExtensionsSyncing", required=true)
    private Output<String> enableDataExtensionsSyncing;

    public Output<String> enableDataExtensionsSyncing() {
        return this.enableDataExtensionsSyncing;
    }

    @Import(name="enableDistributedConnectorMode", required=true)
    private Output<String> enableDistributedConnectorMode;

    public Output<String> enableDistributedConnectorMode() {
        return this.enableDistributedConnectorMode;
    }

    @Import(name="enableEnrichments", required=true)
    private Output<String> enableEnrichments;

    public Output<String> enableEnrichments() {
        return this.enableEnrichments;
    }

    @Import(name="enableExports", required=true)
    private Output<String> enableExports;

    public Output<String> enableExports() {
        return this.enableExports;
    }

    @Import(name="enableTde", required=true)
    private Output<String> enableTde;

    public Output<String> enableTde() {
        return this.enableTde;
    }

    @Import(name="encodedPublicKey", required=true)
    private Output<String> encodedPublicKey;

    public Output<String> encodedPublicKey() {
        return this.encodedPublicKey;
    }

    @Import(name="encryptionKey", required=true)
    private Output<String> encryptionKey;

    public Output<String> encryptionKey() {
        return this.encryptionKey;
    }

    @Import(name="endpoint", required=true)
    private Output<String> endpoint;

    public Output<String> endpoint() {
        return this.endpoint;
    }

    @Import(name="engagementAttributionWindow", required=true)
    private Output<String> engagementAttributionWindow;

    public Output<String> engagementAttributionWindow() {
        return this.engagementAttributionWindow;
    }

    @Import(name="enrichedExport", required=true)
    private Output<String> enrichedExport;

    public Output<String> enrichedExport() {
        return this.enrichedExport;
    }

    @Import(name="entityId", required=true)
    private Output<String> entityId;

    public Output<String> entityId() {
        return this.entityId;
    }

    @Import(name="environment", required=true)
    private Output<String> environment;

    public Output<String> environment() {
        return this.environment;
    }

    @Import(name="escapeChar", required=true)
    private Output<String> escapeChar;

    public Output<String> escapeChar() {
        return this.escapeChar;
    }

    @Import(name="euRegion", required=true)
    private Output<String> euRegion;

    public Output<String> euRegion() {
        return this.euRegion;
    }

    @Import(name="events", required=true)
    private Output<List<String>> events;

    public Output<List<String>> events() {
        return this.events;
    }

    @Import(name="exportStorageType", required=true)
    private Output<String> exportStorageType;

    public Output<String> exportStorageType() {
        return this.exportStorageType;
    }

    @Import(name="externalId", required=true)
    private Output<String> externalId;

    public Output<String> externalId() {
        return this.externalId;
    }

    @Import(name="fields", required=true)
    private Output<List<String>> fields;

    public Output<List<String>> fields() {
        return this.fields;
    }

    @Import(name="fileType", required=true)
    private Output<String> fileType;

    public Output<String> fileType() {
        return this.fileType;
    }

    @Import(name="filter", required=true)
    private Output<String> filter;

    public Output<String> filter() {
        return this.filter;
    }

    @Import(name="financeAccountSyncMode", required=true)
    private Output<String> financeAccountSyncMode;

    public Output<String> financeAccountSyncMode() {
        return this.financeAccountSyncMode;
    }

    @Import(name="financeAccounts", required=true)
    private Output<List<String>> financeAccounts;

    public Output<List<String>> financeAccounts() {
        return this.financeAccounts;
    }

    @Import(name="folder", required=true)
    private Output<String> folder;

    public Output<String> folder() {
        return this.folder;
    }

    @Import(name="folderId", required=true)
    private Output<String> folderId;

    public Output<String> folderId() {
        return this.folderId;
    }

    @Import(name="folderPath", required=true)
    private Output<String> folderPath;

    public Output<String> folderPath() {
        return this.folderPath;
    }

    @Import(name="forecastId", required=true)
    private Output<String> forecastId;

    public Output<String> forecastId() {
        return this.forecastId;
    }

    @Import(name="ftpHost", required=true)
    private Output<String> ftpHost;

    public Output<String> ftpHost() {
        return this.ftpHost;
    }

    @Import(name="ftpPassword", required=true)
    private Output<String> ftpPassword;

    public Output<String> ftpPassword() {
        return this.ftpPassword;
    }

    @Import(name="ftpPort", required=true)
    private Output<String> ftpPort;

    public Output<String> ftpPort() {
        return this.ftpPort;
    }

    @Import(name="ftpUser", required=true)
    private Output<String> ftpUser;

    public Output<String> ftpUser() {
        return this.ftpUser;
    }

    @Import(name="function", required=true)
    private Output<String> function;

    public Output<String> function() {
        return this.function;
    }

    @Import(name="functionApp", required=true)
    private Output<String> functionApp;

    public Output<String> functionApp() {
        return this.functionApp;
    }

    @Import(name="functionKey", required=true)
    private Output<String> functionKey;

    public Output<String> functionKey() {
        return this.functionKey;
    }

    @Import(name="functionName", required=true)
    private Output<String> functionName;

    public Output<String> functionName() {
        return this.functionName;
    }

    @Import(name="functionTrigger", required=true)
    private Output<String> functionTrigger;

    public Output<String> functionTrigger() {
        return this.functionTrigger;
    }

    @Import(name="gcsBucket", required=true)
    private Output<String> gcsBucket;

    public Output<String> gcsBucket() {
        return this.gcsBucket;
    }

    @Import(name="gcsFolder", required=true)
    private Output<String> gcsFolder;

    public Output<String> gcsFolder() {
        return this.gcsFolder;
    }

    @Import(name="groupName", required=true)
    private Output<String> groupName;

    public Output<String> groupName() {
        return this.groupName;
    }

    @Import(name="hasManagePermissions", required=true)
    private Output<String> hasManagePermissions;

    public Output<String> hasManagePermissions() {
        return this.hasManagePermissions;
    }

    @Import(name="homeFolder", required=true)
    private Output<String> homeFolder;

    public Output<String> homeFolder() {
        return this.homeFolder;
    }

    @Import(name="host", required=true)
    private Output<String> host;

    public Output<String> host() {
        return this.host;
    }

    @Import(name="hostIp", required=true)
    private Output<String> hostIp;

    public Output<String> hostIp() {
        return this.hostIp;
    }

    @Import(name="hostUser", required=true)
    private Output<String> hostUser;

    public Output<String> hostUser() {
        return this.hostUser;
    }

    @Import(name="hosts", required=true)
    private Output<List<String>> hosts;

    public Output<List<String>> hosts() {
        return this.hosts;
    }

    @Import(name="identity", required=true)
    private Output<String> identity;

    public Output<String> identity() {
        return this.identity;
    }

    @Import(name="includeOcapiEndpoints", required=true)
    private Output<String> includeOcapiEndpoints;

    public Output<String> includeOcapiEndpoints() {
        return this.includeOcapiEndpoints;
    }

    @Import(name="instance", required=true)
    private Output<String> instance;

    public Output<String> instance() {
        return this.instance;
    }

    @Import(name="instanceNumber", required=true)
    private Output<String> instanceNumber;

    public Output<String> instanceNumber() {
        return this.instanceNumber;
    }

    @Import(name="instanceUrl", required=true)
    private Output<String> instanceUrl;

    public Output<String> instanceUrl() {
        return this.instanceUrl;
    }

    @Import(name="integrationKey", required=true)
    private Output<String> integrationKey;

    public Output<String> integrationKey() {
        return this.integrationKey;
    }

    @Import(name="isAccountLevelConnector", required=true)
    private Output<String> isAccountLevelConnector;

    public Output<String> isAccountLevelConnector() {
        return this.isAccountLevelConnector;
    }

    @Import(name="isAuth2Enabled", required=true)
    private Output<String> isAuth2Enabled;

    public Output<String> isAuth2Enabled() {
        return this.isAuth2Enabled;
    }

    @Import(name="isCustomApiCredentials", required=true)
    private Output<String> isCustomApiCredentials;

    public Output<String> isCustomApiCredentials() {
        return this.isCustomApiCredentials;
    }

    @Import(name="isExternalActivitiesEndpointSelected", required=true)
    private Output<String> isExternalActivitiesEndpointSelected;

    public Output<String> isExternalActivitiesEndpointSelected() {
        return this.isExternalActivitiesEndpointSelected;
    }

    @Import(name="isFtps", required=true)
    private Output<String> isFtps;

    public Output<String> isFtps() {
        return this.isFtps;
    }

    @Import(name="isKeypair", required=true)
    private Output<String> isKeypair;

    public Output<String> isKeypair() {
        return this.isKeypair;
    }

    @Import(name="isMultiEntityFeatureEnabled", required=true)
    private Output<String> isMultiEntityFeatureEnabled;

    public Output<String> isMultiEntityFeatureEnabled() {
        return this.isMultiEntityFeatureEnabled;
    }

    @Import(name="isNewPackage", required=true)
    private Output<String> isNewPackage;

    public Output<String> isNewPackage() {
        return this.isNewPackage;
    }

    @Import(name="isPrivateKeyEncrypted", required=true)
    private Output<String> isPrivateKeyEncrypted;

    public Output<String> isPrivateKeyEncrypted() {
        return this.isPrivateKeyEncrypted;
    }

    @Import(name="isPrivateLinkRequired", required=true)
    private Output<String> isPrivateLinkRequired;

    public Output<String> isPrivateLinkRequired() {
        return this.isPrivateLinkRequired;
    }

    @Import(name="isPublic", required=true)
    private Output<String> isPublic;

    public Output<String> isPublic() {
        return this.isPublic;
    }

    @Import(name="isSailthruConnectEnabled", required=true)
    private Output<String> isSailthruConnectEnabled;

    public Output<String> isSailthruConnectEnabled() {
        return this.isSailthruConnectEnabled;
    }

    @Import(name="isSecure", required=true)
    private Output<String> isSecure;

    public Output<String> isSecure() {
        return this.isSecure;
    }

    @Import(name="isSingleTableMode", required=true)
    private Output<String> isSingleTableMode;

    public Output<String> isSingleTableMode() {
        return this.isSingleTableMode;
    }

    @Import(name="isVendor", required=true)
    private Output<String> isVendor;

    public Output<String> isVendor() {
        return this.isVendor;
    }

    @Import(name="jsonDeliveryMode", required=true)
    private Output<String> jsonDeliveryMode;

    public Output<String> jsonDeliveryMode() {
        return this.jsonDeliveryMode;
    }

    @Import(name="key", required=true)
    private Output<String> key;

    public Output<String> key() {
        return this.key;
    }

    @Import(name="keyPassword", required=true)
    private Output<String> keyPassword;

    public Output<String> keyPassword() {
        return this.keyPassword;
    }

    @Import(name="keyStoreType", required=true)
    private Output<String> keyStoreType;

    public Output<String> keyStoreType() {
        return this.keyStoreType;
    }

    @Import(name="keystore", required=true)
    private Output<String> keystore;

    public Output<String> keystore() {
        return this.keystore;
    }

    @Import(name="keystorePassword", required=true)
    private Output<String> keystorePassword;

    public Output<String> keystorePassword() {
        return this.keystorePassword;
    }

    @Import(name="lastSyncedChangesUtc_", required=true)
    private Output<String> lastSyncedChangesUtc_;

    public Output<String> lastSyncedChangesUtc_() {
        return this.lastSyncedChangesUtc_;
    }

    @Import(name="latestVersion", required=true)
    private Output<String> latestVersion;

    public Output<String> latestVersion() {
        return this.latestVersion;
    }

    @Import(name="limitForApiCallsToExternalActivitiesEndpoint", required=true)
    private Output<String> limitForApiCallsToExternalActivitiesEndpoint;

    public Output<String> limitForApiCallsToExternalActivitiesEndpoint() {
        return this.limitForApiCallsToExternalActivitiesEndpoint;
    }

    @Import(name="lineSeparator", required=true)
    private Output<String> lineSeparator;

    public Output<String> lineSeparator() {
        return this.lineSeparator;
    }

    @Import(name="listStrategy", required=true)
    private Output<String> listStrategy;

    public Output<String> listStrategy() {
        return this.listStrategy;
    }

    @Import(name="listSyncMode", required=true)
    private Output<String> listSyncMode;

    public Output<String> listSyncMode() {
        return this.listSyncMode;
    }

    @Import(name="logJournal", required=true)
    private Output<String> logJournal;

    public Output<String> logJournal() {
        return this.logJournal;
    }

    @Import(name="logJournalSchema", required=true)
    private Output<String> logJournalSchema;

    public Output<String> logJournalSchema() {
        return this.logJournalSchema;
    }

    @Import(name="login", required=true)
    private Output<String> login;

    public Output<String> login() {
        return this.login;
    }

    @Import(name="loginPassword", required=true)
    private Output<String> loginPassword;

    public Output<String> loginPassword() {
        return this.loginPassword;
    }

    @Import(name="managerAccounts", required=true)
    private Output<List<String>> managerAccounts;

    public Output<List<String>> managerAccounts() {
        return this.managerAccounts;
    }

    @Import(name="merchantId", required=true)
    private Output<String> merchantId;

    public Output<String> merchantId() {
        return this.merchantId;
    }

    @Import(name="messageType", required=true)
    private Output<String> messageType;

    public Output<String> messageType() {
        return this.messageType;
    }

    @Import(name="metrics", required=true)
    private Output<List<String>> metrics;

    public Output<List<String>> metrics() {
        return this.metrics;
    }

    @Import(name="namedRange", required=true)
    private Output<String> namedRange;

    public Output<String> namedRange() {
        return this.namedRange;
    }

    @Import(name="namespace", required=true)
    private Output<String> namespace;

    public Output<String> namespace() {
        return this.namespace;
    }

    @Import(name="networkCode", required=true)
    private Output<String> networkCode;

    public Output<String> networkCode() {
        return this.networkCode;
    }

    @Import(name="nullSequence", required=true)
    private Output<String> nullSequence;

    public Output<String> nullSequence() {
        return this.nullSequence;
    }

    @Import(name="oauthToken", required=true)
    private Output<String> oauthToken;

    public Output<String> oauthToken() {
        return this.oauthToken;
    }

    @Import(name="oauthTokenSecret", required=true)
    private Output<String> oauthTokenSecret;

    public Output<String> oauthTokenSecret() {
        return this.oauthTokenSecret;
    }

    @Import(name="ocapiClientId", required=true)
    private Output<String> ocapiClientId;

    public Output<String> ocapiClientId() {
        return this.ocapiClientId;
    }

    @Import(name="ocapiClientSecret", required=true)
    private Output<String> ocapiClientSecret;

    public Output<String> ocapiClientSecret() {
        return this.ocapiClientSecret;
    }

    @Import(name="ocapiCustomObjectTypes", required=true)
    private Output<String> ocapiCustomObjectTypes;

    public Output<String> ocapiCustomObjectTypes() {
        return this.ocapiCustomObjectTypes;
    }

    @Import(name="ocapiHostname", required=true)
    private Output<String> ocapiHostname;

    public Output<String> ocapiHostname() {
        return this.ocapiHostname;
    }

    @Import(name="onError", required=true)
    private Output<String> onError;

    public Output<String> onError() {
        return this.onError;
    }

    @Import(name="onPremise", required=true)
    private Output<String> onPremise;

    public Output<String> onPremise() {
        return this.onPremise;
    }

    @Import(name="organization", required=true)
    private Output<String> organization;

    public Output<String> organization() {
        return this.organization;
    }

    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    public Output<String> organizationId() {
        return this.organizationId;
    }

    @Import(name="organizations", required=true)
    private Output<List<String>> organizations;

    public Output<List<String>> organizations() {
        return this.organizations;
    }

    @Import(name="packedModeTables", required=true)
    private Output<List<String>> packedModeTables;

    public Output<List<String>> packedModeTables() {
        return this.packedModeTables;
    }

    @Import(name="packingMode", required=true)
    private Output<String> packingMode;

    public Output<String> packingMode() {
        return this.packingMode;
    }

    @Import(name="pages", required=true)
    private Output<List<String>> pages;

    public Output<List<String>> pages() {
        return this.pages;
    }

    @Import(name="partnerCode", required=true)
    private Output<String> partnerCode;

    public Output<String> partnerCode() {
        return this.partnerCode;
    }

    @Import(name="partners", required=true)
    private Output<List<String>> partners;

    public Output<List<String>> partners() {
        return this.partners;
    }

    @Import(name="passphrase", required=true)
    private Output<String> passphrase;

    public Output<String> passphrase() {
        return this.passphrase;
    }

    @Import(name="password", required=true)
    private Output<String> password;

    public Output<String> password() {
        return this.password;
    }

    @Import(name="pat", required=true)
    private Output<String> pat;

    public Output<String> pat() {
        return this.pat;
    }

    @Import(name="patName", required=true)
    private Output<String> patName;

    public Output<String> patName() {
        return this.patName;
    }

    @Import(name="patSecret", required=true)
    private Output<String> patSecret;

    public Output<String> patSecret() {
        return this.patSecret;
    }

    @Import(name="path", required=true)
    private Output<String> path;

    public Output<String> path() {
        return this.path;
    }

    @Import(name="pattern", required=true)
    private Output<String> pattern;

    public Output<String> pattern() {
        return this.pattern;
    }

    @Import(name="pdbName", required=true)
    private Output<String> pdbName;

    public Output<String> pdbName() {
        return this.pdbName;
    }

    @Import(name="pemCertificate", required=true)
    private Output<String> pemCertificate;

    public Output<String> pemCertificate() {
        return this.pemCertificate;
    }

    @Import(name="pemPrivateKey", required=true)
    private Output<String> pemPrivateKey;

    public Output<String> pemPrivateKey() {
        return this.pemPrivateKey;
    }

    @Import(name="perInteractionDimensions", required=true)
    private Output<List<String>> perInteractionDimensions;

    public Output<List<String>> perInteractionDimensions() {
        return this.perInteractionDimensions;
    }

    @Import(name="personalAccessToken", required=true)
    private Output<String> personalAccessToken;

    public Output<String> personalAccessToken() {
        return this.personalAccessToken;
    }

    @Import(name="pgpPassPhrase", required=true)
    private Output<String> pgpPassPhrase;

    public Output<String> pgpPassPhrase() {
        return this.pgpPassPhrase;
    }

    @Import(name="pgpSecretKey", required=true)
    private Output<String> pgpSecretKey;

    public Output<String> pgpSecretKey() {
        return this.pgpSecretKey;
    }

    @Import(name="phoneNumber", required=true)
    private Output<String> phoneNumber;

    public Output<String> phoneNumber() {
        return this.phoneNumber;
    }

    @Import(name="port", required=true)
    private Output<String> port;

    public Output<String> port() {
        return this.port;
    }

    @Import(name="postClickAttributionWindowSize", required=true)
    private Output<String> postClickAttributionWindowSize;

    public Output<String> postClickAttributionWindowSize() {
        return this.postClickAttributionWindowSize;
    }

    @Import(name="prebuiltReport", required=true)
    private Output<String> prebuiltReport;

    public Output<String> prebuiltReport() {
        return this.prebuiltReport;
    }

    @Import(name="prefix", required=true)
    private Output<String> prefix;

    public Output<String> prefix() {
        return this.prefix;
    }

    @Import(name="primaryKeys", required=true)
    private Output<List<String>> primaryKeys;

    public Output<List<String>> primaryKeys() {
        return this.primaryKeys;
    }

    @Import(name="privateKey", required=true)
    private Output<String> privateKey;

    public Output<String> privateKey() {
        return this.privateKey;
    }

    @Import(name="profiles", required=true)
    private Output<List<String>> profiles;

    public Output<List<String>> profiles() {
        return this.profiles;
    }

    @Import(name="projectCredentials", required=true)
    private Output<List<GetConnectorConfigProjectCredentialArgs>> projectCredentials;

    public Output<List<GetConnectorConfigProjectCredentialArgs>> projectCredentials() {
        return this.projectCredentials;
    }

    @Import(name="projectId", required=true)
    private Output<String> projectId;

    public Output<String> projectId() {
        return this.projectId;
    }

    @Import(name="projects", required=true)
    private Output<List<String>> projects;

    public Output<List<String>> projects() {
        return this.projects;
    }

    @Import(name="properties", required=true)
    private Output<List<String>> properties;

    public Output<List<String>> properties() {
        return this.properties;
    }

    @Import(name="publicKey", required=true)
    private Output<String> publicKey;

    public Output<String> publicKey() {
        return this.publicKey;
    }

    @Import(name="publicationName", required=true)
    private Output<String> publicationName;

    public Output<String> publicationName() {
        return this.publicationName;
    }

    @Import(name="queryId", required=true)
    private Output<String> queryId;

    public Output<String> queryId() {
        return this.queryId;
    }

    @Import(name="queryParamValue", required=true)
    private Output<String> queryParamValue;

    public Output<String> queryParamValue() {
        return this.queryParamValue;
    }

    @Import(name="refreshTokenExpiresAt", required=true)
    private Output<String> refreshTokenExpiresAt;

    public Output<String> refreshTokenExpiresAt() {
        return this.refreshTokenExpiresAt;
    }

    @Import(name="region", required=true)
    private Output<String> region;

    public Output<String> region() {
        return this.region;
    }

    @Import(name="replicaId", required=true)
    private Output<String> replicaId;

    public Output<String> replicaId() {
        return this.replicaId;
    }

    @Import(name="replicationSlot", required=true)
    private Output<String> replicationSlot;

    public Output<String> replicationSlot() {
        return this.replicationSlot;
    }

    @Import(name="reportConfigurationIds", required=true)
    private Output<List<String>> reportConfigurationIds;

    public Output<List<String>> reportConfigurationIds() {
        return this.reportConfigurationIds;
    }

    @Import(name="reportFormatType", required=true)
    private Output<String> reportFormatType;

    public Output<String> reportFormatType() {
        return this.reportFormatType;
    }

    @Import(name="reportSuites", required=true)
    private Output<List<String>> reportSuites;

    public Output<List<String>> reportSuites() {
        return this.reportSuites;
    }

    @Import(name="reportTimezone", required=true)
    private Output<String> reportTimezone;

    public Output<String> reportTimezone() {
        return this.reportTimezone;
    }

    @Import(name="reportType", required=true)
    private Output<String> reportType;

    public Output<String> reportType() {
        return this.reportType;
    }

    @Import(name="reportUrl", required=true)
    private Output<String> reportUrl;

    public Output<String> reportUrl() {
        return this.reportUrl;
    }

    @Import(name="reports", required=true)
    private Output<List<GetConnectorConfigReportArgs>> reports;

    public Output<List<GetConnectorConfigReportArgs>> reports() {
        return this.reports;
    }

    @Import(name="reportsLinkedinAds", required=true)
    private Output<List<String>> reportsLinkedinAds;

    public Output<List<String>> reportsLinkedinAds() {
        return this.reportsLinkedinAds;
    }

    @Import(name="repositories", required=true)
    private Output<List<String>> repositories;

    public Output<List<String>> repositories() {
        return this.repositories;
    }

    @Import(name="resourceToken", required=true)
    private Output<String> resourceToken;

    public Output<String> resourceToken() {
        return this.resourceToken;
    }

    @Import(name="resourceUrl", required=true)
    private Output<String> resourceUrl;

    public Output<String> resourceUrl() {
        return this.resourceUrl;
    }

    @Import(name="restApiLimit", required=true)
    private Output<String> restApiLimit;

    public Output<String> restApiLimit() {
        return this.restApiLimit;
    }

    @Import(name="rfcLibraryPath", required=true)
    private Output<String> rfcLibraryPath;

    public Output<String> rfcLibraryPath() {
        return this.rfcLibraryPath;
    }

    @Import(name="role", required=true)
    private Output<String> role;

    public Output<String> role() {
        return this.role;
    }

    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    public Output<String> roleArn() {
        return this.roleArn;
    }

    @Import(name="rollbackWindowSize", required=true)
    private Output<String> rollbackWindowSize;

    public Output<String> rollbackWindowSize() {
        return this.rollbackWindowSize;
    }

    @Import(name="s3Bucket", required=true)
    private Output<String> s3Bucket;

    public Output<String> s3Bucket() {
        return this.s3Bucket;
    }

    @Import(name="s3ExportBucket", required=true)
    private Output<String> s3ExportBucket;

    public Output<String> s3ExportBucket() {
        return this.s3ExportBucket;
    }

    @Import(name="s3ExportFolder", required=true)
    private Output<String> s3ExportFolder;

    public Output<String> s3ExportFolder() {
        return this.s3ExportFolder;
    }

    @Import(name="s3ExportRoleArn", required=true)
    private Output<String> s3ExportRoleArn;

    public Output<String> s3ExportRoleArn() {
        return this.s3ExportRoleArn;
    }

    @Import(name="s3RoleArn", required=true)
    private Output<String> s3RoleArn;

    public Output<String> s3RoleArn() {
        return this.s3RoleArn;
    }

    @Import(name="s3bucket", required=true)
    private Output<String> s3bucket;

    public Output<String> s3bucket() {
        return this.s3bucket;
    }

    @Import(name="s3externalId", required=true)
    private Output<String> s3externalId;

    public Output<String> s3externalId() {
        return this.s3externalId;
    }

    @Import(name="s3folder", required=true)
    private Output<String> s3folder;

    public Output<String> s3folder() {
        return this.s3folder;
    }

    @Import(name="s3path", required=true)
    private Output<String> s3path;

    public Output<String> s3path() {
        return this.s3path;
    }

    @Import(name="s3roleArn", required=true)
    private Output<String> s3roleArn;

    public Output<String> s3roleArn() {
        return this.s3roleArn;
    }

    @Import(name="salesAccountSyncMode", required=true)
    private Output<String> salesAccountSyncMode;

    public Output<String> salesAccountSyncMode() {
        return this.salesAccountSyncMode;
    }

    @Import(name="salesAccounts", required=true)
    private Output<List<String>> salesAccounts;

    public Output<List<String>> salesAccounts() {
        return this.salesAccounts;
    }

    @Import(name="salesforceSecurityToken", required=true)
    private Output<String> salesforceSecurityToken;

    public Output<String> salesforceSecurityToken() {
        return this.salesforceSecurityToken;
    }

    @Import(name="sandboxAccount", required=true)
    private Output<String> sandboxAccount;

    public Output<String> sandboxAccount() {
        return this.sandboxAccount;
    }

    @Import(name="sapSchema", required=true)
    private Output<String> sapSchema;

    public Output<String> sapSchema() {
        return this.sapSchema;
    }

    @Import(name="sapUser", required=true)
    private Output<String> sapUser;

    public Output<String> sapUser() {
        return this.sapUser;
    }

    @Import(name="saslMechanism", required=true)
    private Output<String> saslMechanism;

    public Output<String> saslMechanism() {
        return this.saslMechanism;
    }

    @Import(name="saslPlainKey", required=true)
    private Output<String> saslPlainKey;

    public Output<String> saslPlainKey() {
        return this.saslPlainKey;
    }

    @Import(name="saslPlainSecret", required=true)
    private Output<String> saslPlainSecret;

    public Output<String> saslPlainSecret() {
        return this.saslPlainSecret;
    }

    @Import(name="saslScram256Key", required=true)
    private Output<String> saslScram256Key;

    public Output<String> saslScram256Key() {
        return this.saslScram256Key;
    }

    @Import(name="saslScram256Secret", required=true)
    private Output<String> saslScram256Secret;

    public Output<String> saslScram256Secret() {
        return this.saslScram256Secret;
    }

    @Import(name="saslScram512Key", required=true)
    private Output<String> saslScram512Key;

    public Output<String> saslScram512Key() {
        return this.saslScram512Key;
    }

    @Import(name="saslScram512Secret", required=true)
    private Output<String> saslScram512Secret;

    public Output<String> saslScram512Secret() {
        return this.saslScram512Secret;
    }

    @Import(name="schemaRegistryCredentialsSource", required=true)
    private Output<String> schemaRegistryCredentialsSource;

    public Output<String> schemaRegistryCredentialsSource() {
        return this.schemaRegistryCredentialsSource;
    }

    @Import(name="schemaRegistryKey", required=true)
    private Output<String> schemaRegistryKey;

    public Output<String> schemaRegistryKey() {
        return this.schemaRegistryKey;
    }

    @Import(name="schemaRegistrySecret", required=true)
    private Output<String> schemaRegistrySecret;

    public Output<String> schemaRegistrySecret() {
        return this.schemaRegistrySecret;
    }

    @Import(name="schemaRegistryUrls", required=true)
    private Output<List<String>> schemaRegistryUrls;

    public Output<List<String>> schemaRegistryUrls() {
        return this.schemaRegistryUrls;
    }

    @Import(name="secret", required=true)
    private Output<String> secret;

    public Output<String> secret() {
        return this.secret;
    }

    @Import(name="secretKey", required=true)
    private Output<String> secretKey;

    public Output<String> secretKey() {
        return this.secretKey;
    }

    @Import(name="secrets", required=true)
    private Output<String> secrets;

    public Output<String> secrets() {
        return this.secrets;
    }

    @Import(name="secretsLists", required=true)
    private Output<List<GetConnectorConfigSecretsListArgs>> secretsLists;

    public Output<List<GetConnectorConfigSecretsListArgs>> secretsLists() {
        return this.secretsLists;
    }

    @Import(name="securityProtocol", required=true)
    private Output<String> securityProtocol;

    public Output<String> securityProtocol() {
        return this.securityProtocol;
    }

    @Import(name="segments", required=true)
    private Output<List<String>> segments;

    public Output<List<String>> segments() {
        return this.segments;
    }

    @Import(name="selectedExports", required=true)
    private Output<List<String>> selectedExports;

    public Output<List<String>> selectedExports() {
        return this.selectedExports;
    }

    @Import(name="senderId", required=true)
    private Output<String> senderId;

    public Output<String> senderId() {
        return this.senderId;
    }

    @Import(name="senderPassword", required=true)
    private Output<String> senderPassword;

    public Output<String> senderPassword() {
        return this.senderPassword;
    }

    @Import(name="serverAddress", required=true)
    private Output<String> serverAddress;

    public Output<String> serverAddress() {
        return this.serverAddress;
    }

    @Import(name="serverUrl", required=true)
    private Output<String> serverUrl;

    public Output<String> serverUrl() {
        return this.serverUrl;
    }

    @Import(name="servers", required=true)
    private Output<List<String>> servers;

    public Output<List<String>> servers() {
        return this.servers;
    }

    @Import(name="serviceAccount", required=true)
    private Output<String> serviceAccount;

    public Output<String> serviceAccount() {
        return this.serviceAccount;
    }

    @Import(name="serviceAccountEmail", required=true)
    private Output<String> serviceAccountEmail;

    public Output<String> serviceAccountEmail() {
        return this.serviceAccountEmail;
    }

    @Import(name="serviceAccountKey", required=true)
    private Output<String> serviceAccountKey;

    public Output<String> serviceAccountKey() {
        return this.serviceAccountKey;
    }

    @Import(name="serviceVersion", required=true)
    private Output<String> serviceVersion;

    public Output<String> serviceVersion() {
        return this.serviceVersion;
    }

    @Import(name="sftpHost", required=true)
    private Output<String> sftpHost;

    public Output<String> sftpHost() {
        return this.sftpHost;
    }

    @Import(name="sftpIsKeyPair", required=true)
    private Output<String> sftpIsKeyPair;

    public Output<String> sftpIsKeyPair() {
        return this.sftpIsKeyPair;
    }

    @Import(name="sftpPassword", required=true)
    private Output<String> sftpPassword;

    public Output<String> sftpPassword() {
        return this.sftpPassword;
    }

    @Import(name="sftpPort", required=true)
    private Output<String> sftpPort;

    public Output<String> sftpPort() {
        return this.sftpPort;
    }

    @Import(name="sftpPublicKey", required=true)
    private Output<String> sftpPublicKey;

    public Output<String> sftpPublicKey() {
        return this.sftpPublicKey;
    }

    @Import(name="sftpUser", required=true)
    private Output<String> sftpUser;

    public Output<String> sftpUser() {
        return this.sftpUser;
    }

    @Import(name="shareUrl", required=true)
    private Output<String> shareUrl;

    public Output<String> shareUrl() {
        return this.shareUrl;
    }

    @Import(name="sheetId", required=true)
    private Output<String> sheetId;

    public Output<String> sheetId() {
        return this.sheetId;
    }

    @Import(name="shop", required=true)
    private Output<String> shop;

    public Output<String> shop() {
        return this.shop;
    }

    @Import(name="shortCode", required=true)
    private Output<String> shortCode;

    public Output<String> shortCode() {
        return this.shortCode;
    }

    @Import(name="showRecordsWithNoMetrics", required=true)
    private Output<String> showRecordsWithNoMetrics;

    public Output<String> showRecordsWithNoMetrics() {
        return this.showRecordsWithNoMetrics;
    }

    @Import(name="sid", required=true)
    private Output<String> sid;

    public Output<String> sid() {
        return this.sid;
    }

    @Import(name="signerPublicKey", required=true)
    private Output<String> signerPublicKey;

    public Output<String> signerPublicKey() {
        return this.signerPublicKey;
    }

    @Import(name="siteAddress", required=true)
    private Output<String> siteAddress;

    public Output<String> siteAddress() {
        return this.siteAddress;
    }

    @Import(name="siteId", required=true)
    private Output<String> siteId;

    public Output<String> siteId() {
        return this.siteId;
    }

    @Import(name="siteName", required=true)
    private Output<String> siteName;

    public Output<String> siteName() {
        return this.siteName;
    }

    @Import(name="siteUrls", required=true)
    private Output<List<String>> siteUrls;

    public Output<List<String>> siteUrls() {
        return this.siteUrls;
    }

    @Import(name="skipAfter", required=true)
    private Output<String> skipAfter;

    public Output<String> skipAfter() {
        return this.skipAfter;
    }

    @Import(name="skipBefore", required=true)
    private Output<String> skipBefore;

    public Output<String> skipBefore() {
        return this.skipBefore;
    }

    @Import(name="soapUri", required=true)
    private Output<String> soapUri;

    public Output<String> soapUri() {
        return this.soapUri;
    }

    @Import(name="socialDataSyncTimeframe", required=true)
    private Output<String> socialDataSyncTimeframe;

    public Output<String> socialDataSyncTimeframe() {
        return this.socialDataSyncTimeframe;
    }

    @Import(name="source", required=true)
    private Output<String> source;

    public Output<String> source() {
        return this.source;
    }

    @Import(name="storeHash", required=true)
    private Output<String> storeHash;

    public Output<String> storeHash() {
        return this.storeHash;
    }

    @Import(name="subDomain", required=true)
    private Output<String> subDomain;

    public Output<String> subDomain() {
        return this.subDomain;
    }

    @Import(name="subdomain", required=true)
    private Output<String> subdomain;

    public Output<String> subdomain() {
        return this.subdomain;
    }

    @Import(name="subscriberName", required=true)
    private Output<String> subscriberName;

    public Output<String> subscriberName() {
        return this.subscriberName;
    }

    @Import(name="subscription", required=true)
    private Output<String> subscription;

    public Output<String> subscription() {
        return this.subscription;
    }

    @Import(name="supportConnectedAccountsSync", required=true)
    private Output<String> supportConnectedAccountsSync;

    public Output<String> supportConnectedAccountsSync() {
        return this.supportConnectedAccountsSync;
    }

    @Import(name="supportNestedColumns", required=true)
    private Output<String> supportNestedColumns;

    public Output<String> supportNestedColumns() {
        return this.supportNestedColumns;
    }

    @Import(name="surveyIds", required=true)
    private Output<String> surveyIds;

    public Output<String> surveyIds() {
        return this.surveyIds;
    }

    @Import(name="swipeAttributionWindow", required=true)
    private Output<String> swipeAttributionWindow;

    public Output<String> swipeAttributionWindow() {
        return this.swipeAttributionWindow;
    }

    @Import(name="syncDataLocker", required=true)
    private Output<String> syncDataLocker;

    public Output<String> syncDataLocker() {
        return this.syncDataLocker;
    }

    @Import(name="syncFormat", required=true)
    private Output<String> syncFormat;

    public Output<String> syncFormat() {
        return this.syncFormat;
    }

    @Import(name="syncFormulaFields", required=true)
    private Output<String> syncFormulaFields;

    public Output<String> syncFormulaFields() {
        return this.syncFormulaFields;
    }

    @Import(name="syncMetadata", required=true)
    private Output<String> syncMetadata;

    public Output<String> syncMetadata() {
        return this.syncMetadata;
    }

    @Import(name="syncMethod", required=true)
    private Output<String> syncMethod;

    public Output<String> syncMethod() {
        return this.syncMethod;
    }

    @Import(name="syncMode", required=true)
    private Output<String> syncMode;

    public Output<String> syncMode() {
        return this.syncMode;
    }

    @Import(name="syncMultipleAccounts", required=true)
    private Output<String> syncMultipleAccounts;

    public Output<String> syncMultipleAccounts() {
        return this.syncMultipleAccounts;
    }

    @Import(name="syncPackMode", required=true)
    private Output<String> syncPackMode;

    public Output<String> syncPackMode() {
        return this.syncPackMode;
    }

    @Import(name="syncPullApi", required=true)
    private Output<String> syncPullApi;

    public Output<String> syncPullApi() {
        return this.syncPullApi;
    }

    @Import(name="syncType", required=true)
    private Output<String> syncType;

    public Output<String> syncType() {
        return this.syncType;
    }

    @Import(name="sysnr", required=true)
    private Output<String> sysnr;

    public Output<String> sysnr() {
        return this.sysnr;
    }

    @Import(name="tableName", required=true)
    private Output<String> tableName;

    public Output<String> tableName() {
        return this.tableName;
    }

    @Import(name="tdeCertificate", required=true)
    private Output<String> tdeCertificate;

    public Output<String> tdeCertificate() {
        return this.tdeCertificate;
    }

    @Import(name="tdeCertificateName", required=true)
    private Output<String> tdeCertificateName;

    public Output<String> tdeCertificateName() {
        return this.tdeCertificateName;
    }

    @Import(name="tdePassword", required=true)
    private Output<String> tdePassword;

    public Output<String> tdePassword() {
        return this.tdePassword;
    }

    @Import(name="tdePrivateKey", required=true)
    private Output<String> tdePrivateKey;

    public Output<String> tdePrivateKey() {
        return this.tdePrivateKey;
    }

    @Import(name="teamId", required=true)
    private Output<String> teamId;

    public Output<String> teamId() {
        return this.teamId;
    }

    @Import(name="technicalAccountId", required=true)
    private Output<String> technicalAccountId;

    public Output<String> technicalAccountId() {
        return this.technicalAccountId;
    }

    @Import(name="templateLabels", required=true)
    private Output<List<String>> templateLabels;

    public Output<List<String>> templateLabels() {
        return this.templateLabels;
    }

    @Import(name="tenant", required=true)
    private Output<String> tenant;

    public Output<String> tenant() {
        return this.tenant;
    }

    @Import(name="tenantId", required=true)
    private Output<String> tenantId;

    public Output<String> tenantId() {
        return this.tenantId;
    }

    @Import(name="testTableName", required=true)
    private Output<String> testTableName;

    public Output<String> testTableName() {
        return this.testTableName;
    }

    @Import(name="timeZone", required=true)
    private Output<String> timeZone;

    public Output<String> timeZone() {
        return this.timeZone;
    }

    @Import(name="timeframeMonths", required=true)
    private Output<String> timeframeMonths;

    public Output<String> timeframeMonths() {
        return this.timeframeMonths;
    }

    @Import(name="tns", required=true)
    private Output<String> tns;

    public Output<String> tns() {
        return this.tns;
    }

    @Import(name="tokenAuthenticatedContainer", required=true)
    private Output<String> tokenAuthenticatedContainer;

    public Output<String> tokenAuthenticatedContainer() {
        return this.tokenAuthenticatedContainer;
    }

    @Import(name="tokenAuthenticatedDatabase", required=true)
    private Output<String> tokenAuthenticatedDatabase;

    public Output<String> tokenAuthenticatedDatabase() {
        return this.tokenAuthenticatedDatabase;
    }

    @Import(name="tokenId", required=true)
    private Output<String> tokenId;

    public Output<String> tokenId() {
        return this.tokenId;
    }

    @Import(name="tokenKey", required=true)
    private Output<String> tokenKey;

    public Output<String> tokenKey() {
        return this.tokenKey;
    }

    @Import(name="tokenSecret", required=true)
    private Output<String> tokenSecret;

    public Output<String> tokenSecret() {
        return this.tokenSecret;
    }

    @Import(name="tokenSecretKey", required=true)
    private Output<String> tokenSecretKey;

    public Output<String> tokenSecretKey() {
        return this.tokenSecretKey;
    }

    @Import(name="topics", required=true)
    private Output<List<String>> topics;

    public Output<List<String>> topics() {
        return this.topics;
    }

    @Import(name="trustStoreType", required=true)
    private Output<String> trustStoreType;

    public Output<String> trustStoreType() {
        return this.trustStoreType;
    }

    @Import(name="trustedCert", required=true)
    private Output<String> trustedCert;

    public Output<String> trustedCert() {
        return this.trustedCert;
    }

    @Import(name="truststore", required=true)
    private Output<String> truststore;

    public Output<String> truststore() {
        return this.truststore;
    }

    @Import(name="tunnelHost", required=true)
    private Output<String> tunnelHost;

    public Output<String> tunnelHost() {
        return this.tunnelHost;
    }

    @Import(name="tunnelPort", required=true)
    private Output<String> tunnelPort;

    public Output<String> tunnelPort() {
        return this.tunnelPort;
    }

    @Import(name="tunnelUser", required=true)
    private Output<String> tunnelUser;

    public Output<String> tunnelUser() {
        return this.tunnelUser;
    }

    @Import(name="uniqueId", required=true)
    private Output<String> uniqueId;

    public Output<String> uniqueId() {
        return this.uniqueId;
    }

    @Import(name="updateConfigOnEachSync", required=true)
    private Output<String> updateConfigOnEachSync;

    public Output<String> updateConfigOnEachSync() {
        return this.updateConfigOnEachSync;
    }

    @Import(name="updateMethod", required=true)
    private Output<String> updateMethod;

    public Output<String> updateMethod() {
        return this.updateMethod;
    }

    @Import(name="uri", required=true)
    private Output<String> uri;

    public Output<String> uri() {
        return this.uri;
    }

    @Import(name="useApiKeys", required=true)
    private Output<String> useApiKeys;

    public Output<String> useApiKeys() {
        return this.useApiKeys;
    }

    @Import(name="useCustomerBucket", required=true)
    private Output<String> useCustomerBucket;

    public Output<String> useCustomerBucket() {
        return this.useCustomerBucket;
    }

    @Import(name="useOracleRac", required=true)
    private Output<String> useOracleRac;

    public Output<String> useOracleRac() {
        return this.useOracleRac;
    }

    @Import(name="usePgpEncryptionOptions", required=true)
    private Output<String> usePgpEncryptionOptions;

    public Output<String> usePgpEncryptionOptions() {
        return this.usePgpEncryptionOptions;
    }

    @Import(name="useServiceAccount", required=true)
    private Output<String> useServiceAccount;

    public Output<String> useServiceAccount() {
        return this.useServiceAccount;
    }

    @Import(name="useTemplateLabels", required=true)
    private Output<String> useTemplateLabels;

    public Output<String> useTemplateLabels() {
        return this.useTemplateLabels;
    }

    @Import(name="useWebhooks", required=true)
    private Output<String> useWebhooks;

    public Output<String> useWebhooks() {
        return this.useWebhooks;
    }

    @Import(name="useWorkspace", required=true)
    private Output<String> useWorkspace;

    public Output<String> useWorkspace() {
        return this.useWorkspace;
    }

    @Import(name="user", required=true)
    private Output<String> user;

    public Output<String> user() {
        return this.user;
    }

    @Import(name="userId", required=true)
    private Output<String> userId;

    public Output<String> userId() {
        return this.userId;
    }

    @Import(name="userKey", required=true)
    private Output<String> userKey;

    public Output<String> userKey() {
        return this.userKey;
    }

    @Import(name="userName", required=true)
    private Output<String> userName;

    public Output<String> userName() {
        return this.userName;
    }

    @Import(name="userProfiles", required=true)
    private Output<List<String>> userProfiles;

    public Output<List<String>> userProfiles() {
        return this.userProfiles;
    }

    @Import(name="username", required=true)
    private Output<String> username;

    public Output<String> username() {
        return this.username;
    }

    @Import(name="viewAttributionWindow", required=true)
    private Output<String> viewAttributionWindow;

    public Output<String> viewAttributionWindow() {
        return this.viewAttributionWindow;
    }

    @Import(name="viewThroughAttributionWindowSize", required=true)
    private Output<String> viewThroughAttributionWindowSize;

    public Output<String> viewThroughAttributionWindowSize() {
        return this.viewThroughAttributionWindowSize;
    }

    @Import(name="webhookEndpoint", required=true)
    private Output<String> webhookEndpoint;

    public Output<String> webhookEndpoint() {
        return this.webhookEndpoint;
    }

    @Import(name="webhookKey", required=true)
    private Output<String> webhookKey;

    public Output<String> webhookKey() {
        return this.webhookKey;
    }

    @Import(name="webhookUrl", required=true)
    private Output<String> webhookUrl;

    public Output<String> webhookUrl() {
        return this.webhookUrl;
    }

    @Import(name="wordPressSiteIdOrWoocommerceDomainName", required=true)
    private Output<String> wordPressSiteIdOrWoocommerceDomainName;

    public Output<String> wordPressSiteIdOrWoocommerceDomainName() {
        return this.wordPressSiteIdOrWoocommerceDomainName;
    }

    @Import(name="workspaceName", required=true)
    private Output<String> workspaceName;

    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    @Import(name="workspaceSameAsSource", required=true)
    private Output<String> workspaceSameAsSource;

    public Output<String> workspaceSameAsSource() {
        return this.workspaceSameAsSource;
    }

    @Import(name="workspaceSchema", required=true)
    private Output<String> workspaceSchema;

    public Output<String> workspaceSchema() {
        return this.workspaceSchema;
    }

    @Import(name="wsCertificate", required=true)
    private Output<String> wsCertificate;

    public Output<String> wsCertificate() {
        return this.wsCertificate;
    }

    private GetConnectorConfigArgs() {}

    private GetConnectorConfigArgs(GetConnectorConfigArgs $) {
        this.absConnectionMethod = $.absConnectionMethod;
        this.absConnectionString = $.absConnectionString;
        this.absContainerAddress = $.absContainerAddress;
        this.absContainerName = $.absContainerName;
        this.absHostIp = $.absHostIp;
        this.absHostUser = $.absHostUser;
        this.absPrefix = $.absPrefix;
        this.absPublicKey = $.absPublicKey;
        this.accessKey = $.accessKey;
        this.accessKeyId = $.accessKeyId;
        this.accessKeySecret = $.accessKeySecret;
        this.accessToken = $.accessToken;
        this.accessType = $.accessType;
        this.account = $.account;
        this.accountId = $.accountId;
        this.accountIds = $.accountIds;
        this.accountKey = $.accountKey;
        this.accountName = $.accountName;
        this.accountSyncMode = $.accountSyncMode;
        this.accounts = $.accounts;
        this.accountsRedditAds = $.accountsRedditAds;
        this.accountsSyncMode = $.accountsSyncMode;
        this.actionBreakdowns = $.actionBreakdowns;
        this.actionReportTime = $.actionReportTime;
        this.adAnalytics = $.adAnalytics;
        this.adUnitView = $.adUnitView;
        this.adminApiKey = $.adminApiKey;
        this.adobeAnalyticsConfigurations = $.adobeAnalyticsConfigurations;
        this.advertisables = $.advertisables;
        this.advertisers = $.advertisers;
        this.advertisersIds = $.advertisersIds;
        this.advertisersSyncMode = $.advertisersSyncMode;
        this.agentHost = $.agentHost;
        this.agentOraHome = $.agentOraHome;
        this.agentPassword = $.agentPassword;
        this.agentPort = $.agentPort;
        this.agentPublicCert = $.agentPublicCert;
        this.agentUser = $.agentUser;
        this.aggregation = $.aggregation;
        this.alwaysEncrypted = $.alwaysEncrypted;
        this.apiAccessToken = $.apiAccessToken;
        this.apiId = $.apiId;
        this.apiKey = $.apiKey;
        this.apiKeyApiSecret = $.apiKeyApiSecret;
        this.apiKeys = $.apiKeys;
        this.apiQuota = $.apiQuota;
        this.apiRequestsPerMinute = $.apiRequestsPerMinute;
        this.apiSecret = $.apiSecret;
        this.apiSecretKey = $.apiSecretKey;
        this.apiToken = $.apiToken;
        this.apiType = $.apiType;
        this.apiUrl = $.apiUrl;
        this.apiUsage = $.apiUsage;
        this.apiUtilizationPercentage = $.apiUtilizationPercentage;
        this.apiVersion = $.apiVersion;
        this.appId = $.appId;
        this.appIds = $.appIds;
        this.appIdsAppsflyers = $.appIdsAppsflyers;
        this.appKey = $.appKey;
        this.appSpecificPassword = $.appSpecificPassword;
        this.appSyncMode = $.appSyncMode;
        this.appendFileOption = $.appendFileOption;
        this.applicationKey = $.applicationKey;
        this.apps = $.apps;
        this.archiveLogFormat = $.archiveLogFormat;
        this.archiveLogPath = $.archiveLogPath;
        this.archivePattern = $.archivePattern;
        this.areSoapCredentialsProvided = $.areSoapCredentialsProvided;
        this.asbIp = $.asbIp;
        this.asmOption = $.asmOption;
        this.asmOracleHome = $.asmOracleHome;
        this.asmPassword = $.asmPassword;
        this.asmTns = $.asmTns;
        this.asmUser = $.asmUser;
        this.attributionWindow = $.attributionWindow;
        this.attributionWindowSize = $.attributionWindowSize;
        this.auth = $.auth;
        this.authMethod = $.authMethod;
        this.authMode = $.authMode;
        this.authType = $.authType;
        this.authorizationMethod = $.authorizationMethod;
        this.awsRegionCode = $.awsRegionCode;
        this.baseCurrency = $.baseCurrency;
        this.baseDomain = $.baseDomain;
        this.baseId = $.baseId;
        this.baseUrl = $.baseUrl;
        this.bearerToken = $.bearerToken;
        this.blobSasUrl = $.blobSasUrl;
        this.breakdowns = $.breakdowns;
        this.bucket = $.bucket;
        this.bucketName = $.bucketName;
        this.bucketService = $.bucketService;
        this.businessId = $.businessId;
        this.businessUnitId = $.businessUnitId;
        this.certificate = $.certificate;
        this.clickAttributionWindow = $.clickAttributionWindow;
        this.client = $.client;
        this.clientCert = $.clientCert;
        this.clientCertKey = $.clientCertKey;
        this.clientId = $.clientId;
        this.clientKey = $.clientKey;
        this.clientName = $.clientName;
        this.clientSecret = $.clientSecret;
        this.cloudStorageType = $.cloudStorageType;
        this.columns = $.columns;
        this.companyId = $.companyId;
        this.companyKey = $.companyKey;
        this.companyRequestToken = $.companyRequestToken;
        this.companyUuid = $.companyUuid;
        this.compression = $.compression;
        this.configMethod = $.configMethod;
        this.configRepositoryUrl = $.configRepositoryUrl;
        this.configType = $.configType;
        this.connectingUser = $.connectingUser;
        this.connectingUserEmail = $.connectingUserEmail;
        this.connectionMethod = $.connectionMethod;
        this.connectionString = $.connectionString;
        this.connectionType = $.connectionType;
        this.consumerGroup = $.consumerGroup;
        this.consumerKey = $.consumerKey;
        this.consumerSecret = $.consumerSecret;
        this.containerAddress = $.containerAddress;
        this.containerName = $.containerName;
        this.contentOwnerId = $.contentOwnerId;
        this.conversationWebhookUrl = $.conversationWebhookUrl;
        this.conversionDimensions = $.conversionDimensions;
        this.conversionReportTime = $.conversionReportTime;
        this.conversionWindowSize = $.conversionWindowSize;
        this.csvDefinition = $.csvDefinition;
        this.currency = $.currency;
        this.customEventSyncMode = $.customEventSyncMode;
        this.customEvents = $.customEvents;
        this.customFieldIds = $.customFieldIds;
        this.customFloodlightVariables = $.customFloodlightVariables;
        this.customReports = $.customReports;
        this.customTables = $.customTables;
        this.customerId = $.customerId;
        this.customerListId = $.customerListId;
        this.dailyApiCallLimit = $.dailyApiCallLimit;
        this.dataAccessMethod = $.dataAccessMethod;
        this.dataCenter = $.dataCenter;
        this.dataSetName = $.dataSetName;
        this.database = $.database;
        this.datasetId = $.datasetId;
        this.datasource = $.datasource;
        this.dateGranularity = $.dateGranularity;
        this.delimiter = $.delimiter;
        this.dimensionAttributes = $.dimensionAttributes;
        this.dimensions = $.dimensions;
        this.distributedConnectorClusterSize = $.distributedConnectorClusterSize;
        this.domain = $.domain;
        this.domainHostName = $.domainHostName;
        this.domainName = $.domainName;
        this.domainType = $.domainType;
        this.elements = $.elements;
        this.email = $.email;
        this.emptyHeader = $.emptyHeader;
        this.enableAllDimensionCombinations = $.enableAllDimensionCombinations;
        this.enableArchiveLogOnly = $.enableArchiveLogOnly;
        this.enableDataExtensionsSyncing = $.enableDataExtensionsSyncing;
        this.enableDistributedConnectorMode = $.enableDistributedConnectorMode;
        this.enableEnrichments = $.enableEnrichments;
        this.enableExports = $.enableExports;
        this.enableTde = $.enableTde;
        this.encodedPublicKey = $.encodedPublicKey;
        this.encryptionKey = $.encryptionKey;
        this.endpoint = $.endpoint;
        this.engagementAttributionWindow = $.engagementAttributionWindow;
        this.enrichedExport = $.enrichedExport;
        this.entityId = $.entityId;
        this.environment = $.environment;
        this.escapeChar = $.escapeChar;
        this.euRegion = $.euRegion;
        this.events = $.events;
        this.exportStorageType = $.exportStorageType;
        this.externalId = $.externalId;
        this.fields = $.fields;
        this.fileType = $.fileType;
        this.filter = $.filter;
        this.financeAccountSyncMode = $.financeAccountSyncMode;
        this.financeAccounts = $.financeAccounts;
        this.folder = $.folder;
        this.folderId = $.folderId;
        this.folderPath = $.folderPath;
        this.forecastId = $.forecastId;
        this.ftpHost = $.ftpHost;
        this.ftpPassword = $.ftpPassword;
        this.ftpPort = $.ftpPort;
        this.ftpUser = $.ftpUser;
        this.function = $.function;
        this.functionApp = $.functionApp;
        this.functionKey = $.functionKey;
        this.functionName = $.functionName;
        this.functionTrigger = $.functionTrigger;
        this.gcsBucket = $.gcsBucket;
        this.gcsFolder = $.gcsFolder;
        this.groupName = $.groupName;
        this.hasManagePermissions = $.hasManagePermissions;
        this.homeFolder = $.homeFolder;
        this.host = $.host;
        this.hostIp = $.hostIp;
        this.hostUser = $.hostUser;
        this.hosts = $.hosts;
        this.identity = $.identity;
        this.includeOcapiEndpoints = $.includeOcapiEndpoints;
        this.instance = $.instance;
        this.instanceNumber = $.instanceNumber;
        this.instanceUrl = $.instanceUrl;
        this.integrationKey = $.integrationKey;
        this.isAccountLevelConnector = $.isAccountLevelConnector;
        this.isAuth2Enabled = $.isAuth2Enabled;
        this.isCustomApiCredentials = $.isCustomApiCredentials;
        this.isExternalActivitiesEndpointSelected = $.isExternalActivitiesEndpointSelected;
        this.isFtps = $.isFtps;
        this.isKeypair = $.isKeypair;
        this.isMultiEntityFeatureEnabled = $.isMultiEntityFeatureEnabled;
        this.isNewPackage = $.isNewPackage;
        this.isPrivateKeyEncrypted = $.isPrivateKeyEncrypted;
        this.isPrivateLinkRequired = $.isPrivateLinkRequired;
        this.isPublic = $.isPublic;
        this.isSailthruConnectEnabled = $.isSailthruConnectEnabled;
        this.isSecure = $.isSecure;
        this.isSingleTableMode = $.isSingleTableMode;
        this.isVendor = $.isVendor;
        this.jsonDeliveryMode = $.jsonDeliveryMode;
        this.key = $.key;
        this.keyPassword = $.keyPassword;
        this.keyStoreType = $.keyStoreType;
        this.keystore = $.keystore;
        this.keystorePassword = $.keystorePassword;
        this.lastSyncedChangesUtc_ = $.lastSyncedChangesUtc_;
        this.latestVersion = $.latestVersion;
        this.limitForApiCallsToExternalActivitiesEndpoint = $.limitForApiCallsToExternalActivitiesEndpoint;
        this.lineSeparator = $.lineSeparator;
        this.listStrategy = $.listStrategy;
        this.listSyncMode = $.listSyncMode;
        this.logJournal = $.logJournal;
        this.logJournalSchema = $.logJournalSchema;
        this.login = $.login;
        this.loginPassword = $.loginPassword;
        this.managerAccounts = $.managerAccounts;
        this.merchantId = $.merchantId;
        this.messageType = $.messageType;
        this.metrics = $.metrics;
        this.namedRange = $.namedRange;
        this.namespace = $.namespace;
        this.networkCode = $.networkCode;
        this.nullSequence = $.nullSequence;
        this.oauthToken = $.oauthToken;
        this.oauthTokenSecret = $.oauthTokenSecret;
        this.ocapiClientId = $.ocapiClientId;
        this.ocapiClientSecret = $.ocapiClientSecret;
        this.ocapiCustomObjectTypes = $.ocapiCustomObjectTypes;
        this.ocapiHostname = $.ocapiHostname;
        this.onError = $.onError;
        this.onPremise = $.onPremise;
        this.organization = $.organization;
        this.organizationId = $.organizationId;
        this.organizations = $.organizations;
        this.packedModeTables = $.packedModeTables;
        this.packingMode = $.packingMode;
        this.pages = $.pages;
        this.partnerCode = $.partnerCode;
        this.partners = $.partners;
        this.passphrase = $.passphrase;
        this.password = $.password;
        this.pat = $.pat;
        this.patName = $.patName;
        this.patSecret = $.patSecret;
        this.path = $.path;
        this.pattern = $.pattern;
        this.pdbName = $.pdbName;
        this.pemCertificate = $.pemCertificate;
        this.pemPrivateKey = $.pemPrivateKey;
        this.perInteractionDimensions = $.perInteractionDimensions;
        this.personalAccessToken = $.personalAccessToken;
        this.pgpPassPhrase = $.pgpPassPhrase;
        this.pgpSecretKey = $.pgpSecretKey;
        this.phoneNumber = $.phoneNumber;
        this.port = $.port;
        this.postClickAttributionWindowSize = $.postClickAttributionWindowSize;
        this.prebuiltReport = $.prebuiltReport;
        this.prefix = $.prefix;
        this.primaryKeys = $.primaryKeys;
        this.privateKey = $.privateKey;
        this.profiles = $.profiles;
        this.projectCredentials = $.projectCredentials;
        this.projectId = $.projectId;
        this.projects = $.projects;
        this.properties = $.properties;
        this.publicKey = $.publicKey;
        this.publicationName = $.publicationName;
        this.queryId = $.queryId;
        this.queryParamValue = $.queryParamValue;
        this.refreshTokenExpiresAt = $.refreshTokenExpiresAt;
        this.region = $.region;
        this.replicaId = $.replicaId;
        this.replicationSlot = $.replicationSlot;
        this.reportConfigurationIds = $.reportConfigurationIds;
        this.reportFormatType = $.reportFormatType;
        this.reportSuites = $.reportSuites;
        this.reportTimezone = $.reportTimezone;
        this.reportType = $.reportType;
        this.reportUrl = $.reportUrl;
        this.reports = $.reports;
        this.reportsLinkedinAds = $.reportsLinkedinAds;
        this.repositories = $.repositories;
        this.resourceToken = $.resourceToken;
        this.resourceUrl = $.resourceUrl;
        this.restApiLimit = $.restApiLimit;
        this.rfcLibraryPath = $.rfcLibraryPath;
        this.role = $.role;
        this.roleArn = $.roleArn;
        this.rollbackWindowSize = $.rollbackWindowSize;
        this.s3Bucket = $.s3Bucket;
        this.s3ExportBucket = $.s3ExportBucket;
        this.s3ExportFolder = $.s3ExportFolder;
        this.s3ExportRoleArn = $.s3ExportRoleArn;
        this.s3RoleArn = $.s3RoleArn;
        this.s3bucket = $.s3bucket;
        this.s3externalId = $.s3externalId;
        this.s3folder = $.s3folder;
        this.s3path = $.s3path;
        this.s3roleArn = $.s3roleArn;
        this.salesAccountSyncMode = $.salesAccountSyncMode;
        this.salesAccounts = $.salesAccounts;
        this.salesforceSecurityToken = $.salesforceSecurityToken;
        this.sandboxAccount = $.sandboxAccount;
        this.sapSchema = $.sapSchema;
        this.sapUser = $.sapUser;
        this.saslMechanism = $.saslMechanism;
        this.saslPlainKey = $.saslPlainKey;
        this.saslPlainSecret = $.saslPlainSecret;
        this.saslScram256Key = $.saslScram256Key;
        this.saslScram256Secret = $.saslScram256Secret;
        this.saslScram512Key = $.saslScram512Key;
        this.saslScram512Secret = $.saslScram512Secret;
        this.schemaRegistryCredentialsSource = $.schemaRegistryCredentialsSource;
        this.schemaRegistryKey = $.schemaRegistryKey;
        this.schemaRegistrySecret = $.schemaRegistrySecret;
        this.schemaRegistryUrls = $.schemaRegistryUrls;
        this.secret = $.secret;
        this.secretKey = $.secretKey;
        this.secrets = $.secrets;
        this.secretsLists = $.secretsLists;
        this.securityProtocol = $.securityProtocol;
        this.segments = $.segments;
        this.selectedExports = $.selectedExports;
        this.senderId = $.senderId;
        this.senderPassword = $.senderPassword;
        this.serverAddress = $.serverAddress;
        this.serverUrl = $.serverUrl;
        this.servers = $.servers;
        this.serviceAccount = $.serviceAccount;
        this.serviceAccountEmail = $.serviceAccountEmail;
        this.serviceAccountKey = $.serviceAccountKey;
        this.serviceVersion = $.serviceVersion;
        this.sftpHost = $.sftpHost;
        this.sftpIsKeyPair = $.sftpIsKeyPair;
        this.sftpPassword = $.sftpPassword;
        this.sftpPort = $.sftpPort;
        this.sftpPublicKey = $.sftpPublicKey;
        this.sftpUser = $.sftpUser;
        this.shareUrl = $.shareUrl;
        this.sheetId = $.sheetId;
        this.shop = $.shop;
        this.shortCode = $.shortCode;
        this.showRecordsWithNoMetrics = $.showRecordsWithNoMetrics;
        this.sid = $.sid;
        this.signerPublicKey = $.signerPublicKey;
        this.siteAddress = $.siteAddress;
        this.siteId = $.siteId;
        this.siteName = $.siteName;
        this.siteUrls = $.siteUrls;
        this.skipAfter = $.skipAfter;
        this.skipBefore = $.skipBefore;
        this.soapUri = $.soapUri;
        this.socialDataSyncTimeframe = $.socialDataSyncTimeframe;
        this.source = $.source;
        this.storeHash = $.storeHash;
        this.subDomain = $.subDomain;
        this.subdomain = $.subdomain;
        this.subscriberName = $.subscriberName;
        this.subscription = $.subscription;
        this.supportConnectedAccountsSync = $.supportConnectedAccountsSync;
        this.supportNestedColumns = $.supportNestedColumns;
        this.surveyIds = $.surveyIds;
        this.swipeAttributionWindow = $.swipeAttributionWindow;
        this.syncDataLocker = $.syncDataLocker;
        this.syncFormat = $.syncFormat;
        this.syncFormulaFields = $.syncFormulaFields;
        this.syncMetadata = $.syncMetadata;
        this.syncMethod = $.syncMethod;
        this.syncMode = $.syncMode;
        this.syncMultipleAccounts = $.syncMultipleAccounts;
        this.syncPackMode = $.syncPackMode;
        this.syncPullApi = $.syncPullApi;
        this.syncType = $.syncType;
        this.sysnr = $.sysnr;
        this.tableName = $.tableName;
        this.tdeCertificate = $.tdeCertificate;
        this.tdeCertificateName = $.tdeCertificateName;
        this.tdePassword = $.tdePassword;
        this.tdePrivateKey = $.tdePrivateKey;
        this.teamId = $.teamId;
        this.technicalAccountId = $.technicalAccountId;
        this.templateLabels = $.templateLabels;
        this.tenant = $.tenant;
        this.tenantId = $.tenantId;
        this.testTableName = $.testTableName;
        this.timeZone = $.timeZone;
        this.timeframeMonths = $.timeframeMonths;
        this.tns = $.tns;
        this.tokenAuthenticatedContainer = $.tokenAuthenticatedContainer;
        this.tokenAuthenticatedDatabase = $.tokenAuthenticatedDatabase;
        this.tokenId = $.tokenId;
        this.tokenKey = $.tokenKey;
        this.tokenSecret = $.tokenSecret;
        this.tokenSecretKey = $.tokenSecretKey;
        this.topics = $.topics;
        this.trustStoreType = $.trustStoreType;
        this.trustedCert = $.trustedCert;
        this.truststore = $.truststore;
        this.tunnelHost = $.tunnelHost;
        this.tunnelPort = $.tunnelPort;
        this.tunnelUser = $.tunnelUser;
        this.uniqueId = $.uniqueId;
        this.updateConfigOnEachSync = $.updateConfigOnEachSync;
        this.updateMethod = $.updateMethod;
        this.uri = $.uri;
        this.useApiKeys = $.useApiKeys;
        this.useCustomerBucket = $.useCustomerBucket;
        this.useOracleRac = $.useOracleRac;
        this.usePgpEncryptionOptions = $.usePgpEncryptionOptions;
        this.useServiceAccount = $.useServiceAccount;
        this.useTemplateLabels = $.useTemplateLabels;
        this.useWebhooks = $.useWebhooks;
        this.useWorkspace = $.useWorkspace;
        this.user = $.user;
        this.userId = $.userId;
        this.userKey = $.userKey;
        this.userName = $.userName;
        this.userProfiles = $.userProfiles;
        this.username = $.username;
        this.viewAttributionWindow = $.viewAttributionWindow;
        this.viewThroughAttributionWindowSize = $.viewThroughAttributionWindowSize;
        this.webhookEndpoint = $.webhookEndpoint;
        this.webhookKey = $.webhookKey;
        this.webhookUrl = $.webhookUrl;
        this.wordPressSiteIdOrWoocommerceDomainName = $.wordPressSiteIdOrWoocommerceDomainName;
        this.workspaceName = $.workspaceName;
        this.workspaceSameAsSource = $.workspaceSameAsSource;
        this.workspaceSchema = $.workspaceSchema;
        this.wsCertificate = $.wsCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetConnectorConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetConnectorConfigArgs $;

        public Builder() {
            $ = new GetConnectorConfigArgs();
        }

        public Builder(GetConnectorConfigArgs defaults) {
            $ = new GetConnectorConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder absConnectionMethod(Output<String> absConnectionMethod) {
            $.absConnectionMethod = absConnectionMethod;
            return this;
        }

        public Builder absConnectionMethod(String absConnectionMethod) {
            return absConnectionMethod(Output.of(absConnectionMethod));
        }

        public Builder absConnectionString(Output<String> absConnectionString) {
            $.absConnectionString = absConnectionString;
            return this;
        }

        public Builder absConnectionString(String absConnectionString) {
            return absConnectionString(Output.of(absConnectionString));
        }

        public Builder absContainerAddress(Output<String> absContainerAddress) {
            $.absContainerAddress = absContainerAddress;
            return this;
        }

        public Builder absContainerAddress(String absContainerAddress) {
            return absContainerAddress(Output.of(absContainerAddress));
        }

        public Builder absContainerName(Output<String> absContainerName) {
            $.absContainerName = absContainerName;
            return this;
        }

        public Builder absContainerName(String absContainerName) {
            return absContainerName(Output.of(absContainerName));
        }

        public Builder absHostIp(Output<String> absHostIp) {
            $.absHostIp = absHostIp;
            return this;
        }

        public Builder absHostIp(String absHostIp) {
            return absHostIp(Output.of(absHostIp));
        }

        public Builder absHostUser(Output<String> absHostUser) {
            $.absHostUser = absHostUser;
            return this;
        }

        public Builder absHostUser(String absHostUser) {
            return absHostUser(Output.of(absHostUser));
        }

        public Builder absPrefix(Output<String> absPrefix) {
            $.absPrefix = absPrefix;
            return this;
        }

        public Builder absPrefix(String absPrefix) {
            return absPrefix(Output.of(absPrefix));
        }

        public Builder absPublicKey(Output<String> absPublicKey) {
            $.absPublicKey = absPublicKey;
            return this;
        }

        public Builder absPublicKey(String absPublicKey) {
            return absPublicKey(Output.of(absPublicKey));
        }

        public Builder accessKey(Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        public Builder accessKeyId(Output<String> accessKeyId) {
            $.accessKeyId = accessKeyId;
            return this;
        }

        public Builder accessKeyId(String accessKeyId) {
            return accessKeyId(Output.of(accessKeyId));
        }

        public Builder accessKeySecret(Output<String> accessKeySecret) {
            $.accessKeySecret = accessKeySecret;
            return this;
        }

        public Builder accessKeySecret(String accessKeySecret) {
            return accessKeySecret(Output.of(accessKeySecret));
        }

        public Builder accessToken(Output<String> accessToken) {
            $.accessToken = accessToken;
            return this;
        }

        public Builder accessToken(String accessToken) {
            return accessToken(Output.of(accessToken));
        }

        public Builder accessType(Output<String> accessType) {
            $.accessType = accessType;
            return this;
        }

        public Builder accessType(String accessType) {
            return accessType(Output.of(accessType));
        }

        public Builder account(Output<String> account) {
            $.account = account;
            return this;
        }

        public Builder account(String account) {
            return account(Output.of(account));
        }

        public Builder accountId(Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder accountIds(Output<List<String>> accountIds) {
            $.accountIds = accountIds;
            return this;
        }

        public Builder accountIds(List<String> accountIds) {
            return accountIds(Output.of(accountIds));
        }

        public Builder accountIds(String... accountIds) {
            return accountIds(List.of(accountIds));
        }

        public Builder accountKey(Output<String> accountKey) {
            $.accountKey = accountKey;
            return this;
        }

        public Builder accountKey(String accountKey) {
            return accountKey(Output.of(accountKey));
        }

        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        public Builder accountSyncMode(Output<String> accountSyncMode) {
            $.accountSyncMode = accountSyncMode;
            return this;
        }

        public Builder accountSyncMode(String accountSyncMode) {
            return accountSyncMode(Output.of(accountSyncMode));
        }

        public Builder accounts(Output<List<String>> accounts) {
            $.accounts = accounts;
            return this;
        }

        public Builder accounts(List<String> accounts) {
            return accounts(Output.of(accounts));
        }

        public Builder accounts(String... accounts) {
            return accounts(List.of(accounts));
        }

        public Builder accountsRedditAds(Output<List<GetConnectorConfigAccountsRedditAdArgs>> accountsRedditAds) {
            $.accountsRedditAds = accountsRedditAds;
            return this;
        }

        public Builder accountsRedditAds(List<GetConnectorConfigAccountsRedditAdArgs> accountsRedditAds) {
            return accountsRedditAds(Output.of(accountsRedditAds));
        }

        public Builder accountsRedditAds(GetConnectorConfigAccountsRedditAdArgs... accountsRedditAds) {
            return accountsRedditAds(List.of(accountsRedditAds));
        }

        public Builder accountsSyncMode(Output<String> accountsSyncMode) {
            $.accountsSyncMode = accountsSyncMode;
            return this;
        }

        public Builder accountsSyncMode(String accountsSyncMode) {
            return accountsSyncMode(Output.of(accountsSyncMode));
        }

        public Builder actionBreakdowns(Output<List<String>> actionBreakdowns) {
            $.actionBreakdowns = actionBreakdowns;
            return this;
        }

        public Builder actionBreakdowns(List<String> actionBreakdowns) {
            return actionBreakdowns(Output.of(actionBreakdowns));
        }

        public Builder actionBreakdowns(String... actionBreakdowns) {
            return actionBreakdowns(List.of(actionBreakdowns));
        }

        public Builder actionReportTime(Output<String> actionReportTime) {
            $.actionReportTime = actionReportTime;
            return this;
        }

        public Builder actionReportTime(String actionReportTime) {
            return actionReportTime(Output.of(actionReportTime));
        }

        public Builder adAnalytics(Output<String> adAnalytics) {
            $.adAnalytics = adAnalytics;
            return this;
        }

        public Builder adAnalytics(String adAnalytics) {
            return adAnalytics(Output.of(adAnalytics));
        }

        public Builder adUnitView(Output<String> adUnitView) {
            $.adUnitView = adUnitView;
            return this;
        }

        public Builder adUnitView(String adUnitView) {
            return adUnitView(Output.of(adUnitView));
        }

        public Builder adminApiKey(Output<String> adminApiKey) {
            $.adminApiKey = adminApiKey;
            return this;
        }

        public Builder adminApiKey(String adminApiKey) {
            return adminApiKey(Output.of(adminApiKey));
        }

        public Builder adobeAnalyticsConfigurations(Output<List<GetConnectorConfigAdobeAnalyticsConfigurationArgs>> adobeAnalyticsConfigurations) {
            $.adobeAnalyticsConfigurations = adobeAnalyticsConfigurations;
            return this;
        }

        public Builder adobeAnalyticsConfigurations(List<GetConnectorConfigAdobeAnalyticsConfigurationArgs> adobeAnalyticsConfigurations) {
            return adobeAnalyticsConfigurations(Output.of(adobeAnalyticsConfigurations));
        }

        public Builder adobeAnalyticsConfigurations(GetConnectorConfigAdobeAnalyticsConfigurationArgs... adobeAnalyticsConfigurations) {
            return adobeAnalyticsConfigurations(List.of(adobeAnalyticsConfigurations));
        }

        public Builder advertisables(Output<List<String>> advertisables) {
            $.advertisables = advertisables;
            return this;
        }

        public Builder advertisables(List<String> advertisables) {
            return advertisables(Output.of(advertisables));
        }

        public Builder advertisables(String... advertisables) {
            return advertisables(List.of(advertisables));
        }

        public Builder advertisers(Output<List<String>> advertisers) {
            $.advertisers = advertisers;
            return this;
        }

        public Builder advertisers(List<String> advertisers) {
            return advertisers(Output.of(advertisers));
        }

        public Builder advertisers(String... advertisers) {
            return advertisers(List.of(advertisers));
        }

        public Builder advertisersIds(Output<List<String>> advertisersIds) {
            $.advertisersIds = advertisersIds;
            return this;
        }

        public Builder advertisersIds(List<String> advertisersIds) {
            return advertisersIds(Output.of(advertisersIds));
        }

        public Builder advertisersIds(String... advertisersIds) {
            return advertisersIds(List.of(advertisersIds));
        }

        public Builder advertisersSyncMode(Output<String> advertisersSyncMode) {
            $.advertisersSyncMode = advertisersSyncMode;
            return this;
        }

        public Builder advertisersSyncMode(String advertisersSyncMode) {
            return advertisersSyncMode(Output.of(advertisersSyncMode));
        }

        public Builder agentHost(Output<String> agentHost) {
            $.agentHost = agentHost;
            return this;
        }

        public Builder agentHost(String agentHost) {
            return agentHost(Output.of(agentHost));
        }

        public Builder agentOraHome(Output<String> agentOraHome) {
            $.agentOraHome = agentOraHome;
            return this;
        }

        public Builder agentOraHome(String agentOraHome) {
            return agentOraHome(Output.of(agentOraHome));
        }

        public Builder agentPassword(Output<String> agentPassword) {
            $.agentPassword = agentPassword;
            return this;
        }

        public Builder agentPassword(String agentPassword) {
            return agentPassword(Output.of(agentPassword));
        }

        public Builder agentPort(Output<String> agentPort) {
            $.agentPort = agentPort;
            return this;
        }

        public Builder agentPort(String agentPort) {
            return agentPort(Output.of(agentPort));
        }

        public Builder agentPublicCert(Output<String> agentPublicCert) {
            $.agentPublicCert = agentPublicCert;
            return this;
        }

        public Builder agentPublicCert(String agentPublicCert) {
            return agentPublicCert(Output.of(agentPublicCert));
        }

        public Builder agentUser(Output<String> agentUser) {
            $.agentUser = agentUser;
            return this;
        }

        public Builder agentUser(String agentUser) {
            return agentUser(Output.of(agentUser));
        }

        public Builder aggregation(Output<String> aggregation) {
            $.aggregation = aggregation;
            return this;
        }

        public Builder aggregation(String aggregation) {
            return aggregation(Output.of(aggregation));
        }

        public Builder alwaysEncrypted(Output<String> alwaysEncrypted) {
            $.alwaysEncrypted = alwaysEncrypted;
            return this;
        }

        public Builder alwaysEncrypted(String alwaysEncrypted) {
            return alwaysEncrypted(Output.of(alwaysEncrypted));
        }

        public Builder apiAccessToken(Output<String> apiAccessToken) {
            $.apiAccessToken = apiAccessToken;
            return this;
        }

        public Builder apiAccessToken(String apiAccessToken) {
            return apiAccessToken(Output.of(apiAccessToken));
        }

        public Builder apiId(Output<String> apiId) {
            $.apiId = apiId;
            return this;
        }

        public Builder apiId(String apiId) {
            return apiId(Output.of(apiId));
        }

        public Builder apiKey(Output<String> apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        public Builder apiKey(String apiKey) {
            return apiKey(Output.of(apiKey));
        }

        public Builder apiKeyApiSecret(Output<String> apiKeyApiSecret) {
            $.apiKeyApiSecret = apiKeyApiSecret;
            return this;
        }

        public Builder apiKeyApiSecret(String apiKeyApiSecret) {
            return apiKeyApiSecret(Output.of(apiKeyApiSecret));
        }

        public Builder apiKeys(Output<List<String>> apiKeys) {
            $.apiKeys = apiKeys;
            return this;
        }

        public Builder apiKeys(List<String> apiKeys) {
            return apiKeys(Output.of(apiKeys));
        }

        public Builder apiKeys(String... apiKeys) {
            return apiKeys(List.of(apiKeys));
        }

        public Builder apiQuota(Output<String> apiQuota) {
            $.apiQuota = apiQuota;
            return this;
        }

        public Builder apiQuota(String apiQuota) {
            return apiQuota(Output.of(apiQuota));
        }

        public Builder apiRequestsPerMinute(Output<String> apiRequestsPerMinute) {
            $.apiRequestsPerMinute = apiRequestsPerMinute;
            return this;
        }

        public Builder apiRequestsPerMinute(String apiRequestsPerMinute) {
            return apiRequestsPerMinute(Output.of(apiRequestsPerMinute));
        }

        public Builder apiSecret(Output<String> apiSecret) {
            $.apiSecret = apiSecret;
            return this;
        }

        public Builder apiSecret(String apiSecret) {
            return apiSecret(Output.of(apiSecret));
        }

        public Builder apiSecretKey(Output<String> apiSecretKey) {
            $.apiSecretKey = apiSecretKey;
            return this;
        }

        public Builder apiSecretKey(String apiSecretKey) {
            return apiSecretKey(Output.of(apiSecretKey));
        }

        public Builder apiToken(Output<String> apiToken) {
            $.apiToken = apiToken;
            return this;
        }

        public Builder apiToken(String apiToken) {
            return apiToken(Output.of(apiToken));
        }

        public Builder apiType(Output<String> apiType) {
            $.apiType = apiType;
            return this;
        }

        public Builder apiType(String apiType) {
            return apiType(Output.of(apiType));
        }

        public Builder apiUrl(Output<String> apiUrl) {
            $.apiUrl = apiUrl;
            return this;
        }

        public Builder apiUrl(String apiUrl) {
            return apiUrl(Output.of(apiUrl));
        }

        public Builder apiUsage(Output<String> apiUsage) {
            $.apiUsage = apiUsage;
            return this;
        }

        public Builder apiUsage(String apiUsage) {
            return apiUsage(Output.of(apiUsage));
        }

        public Builder apiUtilizationPercentage(Output<String> apiUtilizationPercentage) {
            $.apiUtilizationPercentage = apiUtilizationPercentage;
            return this;
        }

        public Builder apiUtilizationPercentage(String apiUtilizationPercentage) {
            return apiUtilizationPercentage(Output.of(apiUtilizationPercentage));
        }

        public Builder apiVersion(Output<String> apiVersion) {
            $.apiVersion = apiVersion;
            return this;
        }

        public Builder apiVersion(String apiVersion) {
            return apiVersion(Output.of(apiVersion));
        }

        public Builder appId(Output<String> appId) {
            $.appId = appId;
            return this;
        }

        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        public Builder appIds(Output<List<String>> appIds) {
            $.appIds = appIds;
            return this;
        }

        public Builder appIds(List<String> appIds) {
            return appIds(Output.of(appIds));
        }

        public Builder appIds(String... appIds) {
            return appIds(List.of(appIds));
        }

        public Builder appIdsAppsflyers(Output<List<GetConnectorConfigAppIdsAppsflyerArgs>> appIdsAppsflyers) {
            $.appIdsAppsflyers = appIdsAppsflyers;
            return this;
        }

        public Builder appIdsAppsflyers(List<GetConnectorConfigAppIdsAppsflyerArgs> appIdsAppsflyers) {
            return appIdsAppsflyers(Output.of(appIdsAppsflyers));
        }

        public Builder appIdsAppsflyers(GetConnectorConfigAppIdsAppsflyerArgs... appIdsAppsflyers) {
            return appIdsAppsflyers(List.of(appIdsAppsflyers));
        }

        public Builder appKey(Output<String> appKey) {
            $.appKey = appKey;
            return this;
        }

        public Builder appKey(String appKey) {
            return appKey(Output.of(appKey));
        }

        public Builder appSpecificPassword(Output<String> appSpecificPassword) {
            $.appSpecificPassword = appSpecificPassword;
            return this;
        }

        public Builder appSpecificPassword(String appSpecificPassword) {
            return appSpecificPassword(Output.of(appSpecificPassword));
        }

        public Builder appSyncMode(Output<String> appSyncMode) {
            $.appSyncMode = appSyncMode;
            return this;
        }

        public Builder appSyncMode(String appSyncMode) {
            return appSyncMode(Output.of(appSyncMode));
        }

        public Builder appendFileOption(Output<String> appendFileOption) {
            $.appendFileOption = appendFileOption;
            return this;
        }

        public Builder appendFileOption(String appendFileOption) {
            return appendFileOption(Output.of(appendFileOption));
        }

        public Builder applicationKey(Output<String> applicationKey) {
            $.applicationKey = applicationKey;
            return this;
        }

        public Builder applicationKey(String applicationKey) {
            return applicationKey(Output.of(applicationKey));
        }

        public Builder apps(Output<List<String>> apps) {
            $.apps = apps;
            return this;
        }

        public Builder apps(List<String> apps) {
            return apps(Output.of(apps));
        }

        public Builder apps(String... apps) {
            return apps(List.of(apps));
        }

        public Builder archiveLogFormat(Output<String> archiveLogFormat) {
            $.archiveLogFormat = archiveLogFormat;
            return this;
        }

        public Builder archiveLogFormat(String archiveLogFormat) {
            return archiveLogFormat(Output.of(archiveLogFormat));
        }

        public Builder archiveLogPath(Output<String> archiveLogPath) {
            $.archiveLogPath = archiveLogPath;
            return this;
        }

        public Builder archiveLogPath(String archiveLogPath) {
            return archiveLogPath(Output.of(archiveLogPath));
        }

        public Builder archivePattern(Output<String> archivePattern) {
            $.archivePattern = archivePattern;
            return this;
        }

        public Builder archivePattern(String archivePattern) {
            return archivePattern(Output.of(archivePattern));
        }

        public Builder areSoapCredentialsProvided(Output<String> areSoapCredentialsProvided) {
            $.areSoapCredentialsProvided = areSoapCredentialsProvided;
            return this;
        }

        public Builder areSoapCredentialsProvided(String areSoapCredentialsProvided) {
            return areSoapCredentialsProvided(Output.of(areSoapCredentialsProvided));
        }

        public Builder asbIp(Output<String> asbIp) {
            $.asbIp = asbIp;
            return this;
        }

        public Builder asbIp(String asbIp) {
            return asbIp(Output.of(asbIp));
        }

        public Builder asmOption(Output<String> asmOption) {
            $.asmOption = asmOption;
            return this;
        }

        public Builder asmOption(String asmOption) {
            return asmOption(Output.of(asmOption));
        }

        public Builder asmOracleHome(Output<String> asmOracleHome) {
            $.asmOracleHome = asmOracleHome;
            return this;
        }

        public Builder asmOracleHome(String asmOracleHome) {
            return asmOracleHome(Output.of(asmOracleHome));
        }

        public Builder asmPassword(Output<String> asmPassword) {
            $.asmPassword = asmPassword;
            return this;
        }

        public Builder asmPassword(String asmPassword) {
            return asmPassword(Output.of(asmPassword));
        }

        public Builder asmTns(Output<String> asmTns) {
            $.asmTns = asmTns;
            return this;
        }

        public Builder asmTns(String asmTns) {
            return asmTns(Output.of(asmTns));
        }

        public Builder asmUser(Output<String> asmUser) {
            $.asmUser = asmUser;
            return this;
        }

        public Builder asmUser(String asmUser) {
            return asmUser(Output.of(asmUser));
        }

        public Builder attributionWindow(Output<String> attributionWindow) {
            $.attributionWindow = attributionWindow;
            return this;
        }

        public Builder attributionWindow(String attributionWindow) {
            return attributionWindow(Output.of(attributionWindow));
        }

        public Builder attributionWindowSize(Output<String> attributionWindowSize) {
            $.attributionWindowSize = attributionWindowSize;
            return this;
        }

        public Builder attributionWindowSize(String attributionWindowSize) {
            return attributionWindowSize(Output.of(attributionWindowSize));
        }

        public Builder auth(Output<String> auth) {
            $.auth = auth;
            return this;
        }

        public Builder auth(String auth) {
            return auth(Output.of(auth));
        }

        public Builder authMethod(Output<String> authMethod) {
            $.authMethod = authMethod;
            return this;
        }

        public Builder authMethod(String authMethod) {
            return authMethod(Output.of(authMethod));
        }

        public Builder authMode(Output<String> authMode) {
            $.authMode = authMode;
            return this;
        }

        public Builder authMode(String authMode) {
            return authMode(Output.of(authMode));
        }

        public Builder authType(Output<String> authType) {
            $.authType = authType;
            return this;
        }

        public Builder authType(String authType) {
            return authType(Output.of(authType));
        }

        public Builder authorizationMethod(Output<String> authorizationMethod) {
            $.authorizationMethod = authorizationMethod;
            return this;
        }

        public Builder authorizationMethod(String authorizationMethod) {
            return authorizationMethod(Output.of(authorizationMethod));
        }

        public Builder awsRegionCode(Output<String> awsRegionCode) {
            $.awsRegionCode = awsRegionCode;
            return this;
        }

        public Builder awsRegionCode(String awsRegionCode) {
            return awsRegionCode(Output.of(awsRegionCode));
        }

        public Builder baseCurrency(Output<String> baseCurrency) {
            $.baseCurrency = baseCurrency;
            return this;
        }

        public Builder baseCurrency(String baseCurrency) {
            return baseCurrency(Output.of(baseCurrency));
        }

        public Builder baseDomain(Output<String> baseDomain) {
            $.baseDomain = baseDomain;
            return this;
        }

        public Builder baseDomain(String baseDomain) {
            return baseDomain(Output.of(baseDomain));
        }

        public Builder baseId(Output<String> baseId) {
            $.baseId = baseId;
            return this;
        }

        public Builder baseId(String baseId) {
            return baseId(Output.of(baseId));
        }

        public Builder baseUrl(Output<String> baseUrl) {
            $.baseUrl = baseUrl;
            return this;
        }

        public Builder baseUrl(String baseUrl) {
            return baseUrl(Output.of(baseUrl));
        }

        public Builder bearerToken(Output<String> bearerToken) {
            $.bearerToken = bearerToken;
            return this;
        }

        public Builder bearerToken(String bearerToken) {
            return bearerToken(Output.of(bearerToken));
        }

        public Builder blobSasUrl(Output<String> blobSasUrl) {
            $.blobSasUrl = blobSasUrl;
            return this;
        }

        public Builder blobSasUrl(String blobSasUrl) {
            return blobSasUrl(Output.of(blobSasUrl));
        }

        public Builder breakdowns(Output<List<String>> breakdowns) {
            $.breakdowns = breakdowns;
            return this;
        }

        public Builder breakdowns(List<String> breakdowns) {
            return breakdowns(Output.of(breakdowns));
        }

        public Builder breakdowns(String... breakdowns) {
            return breakdowns(List.of(breakdowns));
        }

        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        public Builder bucketName(Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        public Builder bucketService(Output<String> bucketService) {
            $.bucketService = bucketService;
            return this;
        }

        public Builder bucketService(String bucketService) {
            return bucketService(Output.of(bucketService));
        }

        public Builder businessId(Output<String> businessId) {
            $.businessId = businessId;
            return this;
        }

        public Builder businessId(String businessId) {
            return businessId(Output.of(businessId));
        }

        public Builder businessUnitId(Output<String> businessUnitId) {
            $.businessUnitId = businessUnitId;
            return this;
        }

        public Builder businessUnitId(String businessUnitId) {
            return businessUnitId(Output.of(businessUnitId));
        }

        public Builder certificate(Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        public Builder clickAttributionWindow(Output<String> clickAttributionWindow) {
            $.clickAttributionWindow = clickAttributionWindow;
            return this;
        }

        public Builder clickAttributionWindow(String clickAttributionWindow) {
            return clickAttributionWindow(Output.of(clickAttributionWindow));
        }

        public Builder client(Output<String> client) {
            $.client = client;
            return this;
        }

        public Builder client(String client) {
            return client(Output.of(client));
        }

        public Builder clientCert(Output<String> clientCert) {
            $.clientCert = clientCert;
            return this;
        }

        public Builder clientCert(String clientCert) {
            return clientCert(Output.of(clientCert));
        }

        public Builder clientCertKey(Output<String> clientCertKey) {
            $.clientCertKey = clientCertKey;
            return this;
        }

        public Builder clientCertKey(String clientCertKey) {
            return clientCertKey(Output.of(clientCertKey));
        }

        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        public Builder clientKey(Output<String> clientKey) {
            $.clientKey = clientKey;
            return this;
        }

        public Builder clientKey(String clientKey) {
            return clientKey(Output.of(clientKey));
        }

        public Builder clientName(Output<String> clientName) {
            $.clientName = clientName;
            return this;
        }

        public Builder clientName(String clientName) {
            return clientName(Output.of(clientName));
        }

        public Builder clientSecret(Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        public Builder cloudStorageType(Output<String> cloudStorageType) {
            $.cloudStorageType = cloudStorageType;
            return this;
        }

        public Builder cloudStorageType(String cloudStorageType) {
            return cloudStorageType(Output.of(cloudStorageType));
        }

        public Builder columns(Output<List<String>> columns) {
            $.columns = columns;
            return this;
        }

        public Builder columns(List<String> columns) {
            return columns(Output.of(columns));
        }

        public Builder columns(String... columns) {
            return columns(List.of(columns));
        }

        public Builder companyId(Output<String> companyId) {
            $.companyId = companyId;
            return this;
        }

        public Builder companyId(String companyId) {
            return companyId(Output.of(companyId));
        }

        public Builder companyKey(Output<String> companyKey) {
            $.companyKey = companyKey;
            return this;
        }

        public Builder companyKey(String companyKey) {
            return companyKey(Output.of(companyKey));
        }

        public Builder companyRequestToken(Output<String> companyRequestToken) {
            $.companyRequestToken = companyRequestToken;
            return this;
        }

        public Builder companyRequestToken(String companyRequestToken) {
            return companyRequestToken(Output.of(companyRequestToken));
        }

        public Builder companyUuid(Output<String> companyUuid) {
            $.companyUuid = companyUuid;
            return this;
        }

        public Builder companyUuid(String companyUuid) {
            return companyUuid(Output.of(companyUuid));
        }

        public Builder compression(Output<String> compression) {
            $.compression = compression;
            return this;
        }

        public Builder compression(String compression) {
            return compression(Output.of(compression));
        }

        public Builder configMethod(Output<String> configMethod) {
            $.configMethod = configMethod;
            return this;
        }

        public Builder configMethod(String configMethod) {
            return configMethod(Output.of(configMethod));
        }

        public Builder configRepositoryUrl(Output<String> configRepositoryUrl) {
            $.configRepositoryUrl = configRepositoryUrl;
            return this;
        }

        public Builder configRepositoryUrl(String configRepositoryUrl) {
            return configRepositoryUrl(Output.of(configRepositoryUrl));
        }

        public Builder configType(Output<String> configType) {
            $.configType = configType;
            return this;
        }

        public Builder configType(String configType) {
            return configType(Output.of(configType));
        }

        public Builder connectingUser(Output<String> connectingUser) {
            $.connectingUser = connectingUser;
            return this;
        }

        public Builder connectingUser(String connectingUser) {
            return connectingUser(Output.of(connectingUser));
        }

        public Builder connectingUserEmail(Output<String> connectingUserEmail) {
            $.connectingUserEmail = connectingUserEmail;
            return this;
        }

        public Builder connectingUserEmail(String connectingUserEmail) {
            return connectingUserEmail(Output.of(connectingUserEmail));
        }

        public Builder connectionMethod(Output<String> connectionMethod) {
            $.connectionMethod = connectionMethod;
            return this;
        }

        public Builder connectionMethod(String connectionMethod) {
            return connectionMethod(Output.of(connectionMethod));
        }

        public Builder connectionString(Output<String> connectionString) {
            $.connectionString = connectionString;
            return this;
        }

        public Builder connectionString(String connectionString) {
            return connectionString(Output.of(connectionString));
        }

        public Builder connectionType(Output<String> connectionType) {
            $.connectionType = connectionType;
            return this;
        }

        public Builder connectionType(String connectionType) {
            return connectionType(Output.of(connectionType));
        }

        public Builder consumerGroup(Output<String> consumerGroup) {
            $.consumerGroup = consumerGroup;
            return this;
        }

        public Builder consumerGroup(String consumerGroup) {
            return consumerGroup(Output.of(consumerGroup));
        }

        public Builder consumerKey(Output<String> consumerKey) {
            $.consumerKey = consumerKey;
            return this;
        }

        public Builder consumerKey(String consumerKey) {
            return consumerKey(Output.of(consumerKey));
        }

        public Builder consumerSecret(Output<String> consumerSecret) {
            $.consumerSecret = consumerSecret;
            return this;
        }

        public Builder consumerSecret(String consumerSecret) {
            return consumerSecret(Output.of(consumerSecret));
        }

        public Builder containerAddress(Output<String> containerAddress) {
            $.containerAddress = containerAddress;
            return this;
        }

        public Builder containerAddress(String containerAddress) {
            return containerAddress(Output.of(containerAddress));
        }

        public Builder containerName(Output<String> containerName) {
            $.containerName = containerName;
            return this;
        }

        public Builder containerName(String containerName) {
            return containerName(Output.of(containerName));
        }

        public Builder contentOwnerId(Output<String> contentOwnerId) {
            $.contentOwnerId = contentOwnerId;
            return this;
        }

        public Builder contentOwnerId(String contentOwnerId) {
            return contentOwnerId(Output.of(contentOwnerId));
        }

        public Builder conversationWebhookUrl(Output<String> conversationWebhookUrl) {
            $.conversationWebhookUrl = conversationWebhookUrl;
            return this;
        }

        public Builder conversationWebhookUrl(String conversationWebhookUrl) {
            return conversationWebhookUrl(Output.of(conversationWebhookUrl));
        }

        public Builder conversionDimensions(Output<List<String>> conversionDimensions) {
            $.conversionDimensions = conversionDimensions;
            return this;
        }

        public Builder conversionDimensions(List<String> conversionDimensions) {
            return conversionDimensions(Output.of(conversionDimensions));
        }

        public Builder conversionDimensions(String... conversionDimensions) {
            return conversionDimensions(List.of(conversionDimensions));
        }

        public Builder conversionReportTime(Output<String> conversionReportTime) {
            $.conversionReportTime = conversionReportTime;
            return this;
        }

        public Builder conversionReportTime(String conversionReportTime) {
            return conversionReportTime(Output.of(conversionReportTime));
        }

        public Builder conversionWindowSize(Output<String> conversionWindowSize) {
            $.conversionWindowSize = conversionWindowSize;
            return this;
        }

        public Builder conversionWindowSize(String conversionWindowSize) {
            return conversionWindowSize(Output.of(conversionWindowSize));
        }

        public Builder csvDefinition(Output<String> csvDefinition) {
            $.csvDefinition = csvDefinition;
            return this;
        }

        public Builder csvDefinition(String csvDefinition) {
            return csvDefinition(Output.of(csvDefinition));
        }

        public Builder currency(Output<String> currency) {
            $.currency = currency;
            return this;
        }

        public Builder currency(String currency) {
            return currency(Output.of(currency));
        }

        public Builder customEventSyncMode(Output<String> customEventSyncMode) {
            $.customEventSyncMode = customEventSyncMode;
            return this;
        }

        public Builder customEventSyncMode(String customEventSyncMode) {
            return customEventSyncMode(Output.of(customEventSyncMode));
        }

        public Builder customEvents(Output<List<String>> customEvents) {
            $.customEvents = customEvents;
            return this;
        }

        public Builder customEvents(List<String> customEvents) {
            return customEvents(Output.of(customEvents));
        }

        public Builder customEvents(String... customEvents) {
            return customEvents(List.of(customEvents));
        }

        public Builder customFieldIds(Output<List<String>> customFieldIds) {
            $.customFieldIds = customFieldIds;
            return this;
        }

        public Builder customFieldIds(List<String> customFieldIds) {
            return customFieldIds(Output.of(customFieldIds));
        }

        public Builder customFieldIds(String... customFieldIds) {
            return customFieldIds(List.of(customFieldIds));
        }

        public Builder customFloodlightVariables(Output<List<String>> customFloodlightVariables) {
            $.customFloodlightVariables = customFloodlightVariables;
            return this;
        }

        public Builder customFloodlightVariables(List<String> customFloodlightVariables) {
            return customFloodlightVariables(Output.of(customFloodlightVariables));
        }

        public Builder customFloodlightVariables(String... customFloodlightVariables) {
            return customFloodlightVariables(List.of(customFloodlightVariables));
        }

        public Builder customReports(Output<List<GetConnectorConfigCustomReportArgs>> customReports) {
            $.customReports = customReports;
            return this;
        }

        public Builder customReports(List<GetConnectorConfigCustomReportArgs> customReports) {
            return customReports(Output.of(customReports));
        }

        public Builder customReports(GetConnectorConfigCustomReportArgs... customReports) {
            return customReports(List.of(customReports));
        }

        public Builder customTables(Output<List<GetConnectorConfigCustomTableArgs>> customTables) {
            $.customTables = customTables;
            return this;
        }

        public Builder customTables(List<GetConnectorConfigCustomTableArgs> customTables) {
            return customTables(Output.of(customTables));
        }

        public Builder customTables(GetConnectorConfigCustomTableArgs... customTables) {
            return customTables(List.of(customTables));
        }

        public Builder customerId(Output<String> customerId) {
            $.customerId = customerId;
            return this;
        }

        public Builder customerId(String customerId) {
            return customerId(Output.of(customerId));
        }

        public Builder customerListId(Output<String> customerListId) {
            $.customerListId = customerListId;
            return this;
        }

        public Builder customerListId(String customerListId) {
            return customerListId(Output.of(customerListId));
        }

        public Builder dailyApiCallLimit(Output<String> dailyApiCallLimit) {
            $.dailyApiCallLimit = dailyApiCallLimit;
            return this;
        }

        public Builder dailyApiCallLimit(String dailyApiCallLimit) {
            return dailyApiCallLimit(Output.of(dailyApiCallLimit));
        }

        public Builder dataAccessMethod(Output<String> dataAccessMethod) {
            $.dataAccessMethod = dataAccessMethod;
            return this;
        }

        public Builder dataAccessMethod(String dataAccessMethod) {
            return dataAccessMethod(Output.of(dataAccessMethod));
        }

        public Builder dataCenter(Output<String> dataCenter) {
            $.dataCenter = dataCenter;
            return this;
        }

        public Builder dataCenter(String dataCenter) {
            return dataCenter(Output.of(dataCenter));
        }

        public Builder dataSetName(Output<String> dataSetName) {
            $.dataSetName = dataSetName;
            return this;
        }

        public Builder dataSetName(String dataSetName) {
            return dataSetName(Output.of(dataSetName));
        }

        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        public Builder database(String database) {
            return database(Output.of(database));
        }

        public Builder datasetId(Output<String> datasetId) {
            $.datasetId = datasetId;
            return this;
        }

        public Builder datasetId(String datasetId) {
            return datasetId(Output.of(datasetId));
        }

        public Builder datasource(Output<String> datasource) {
            $.datasource = datasource;
            return this;
        }

        public Builder datasource(String datasource) {
            return datasource(Output.of(datasource));
        }

        public Builder dateGranularity(Output<String> dateGranularity) {
            $.dateGranularity = dateGranularity;
            return this;
        }

        public Builder dateGranularity(String dateGranularity) {
            return dateGranularity(Output.of(dateGranularity));
        }

        public Builder delimiter(Output<String> delimiter) {
            $.delimiter = delimiter;
            return this;
        }

        public Builder delimiter(String delimiter) {
            return delimiter(Output.of(delimiter));
        }

        public Builder dimensionAttributes(Output<List<String>> dimensionAttributes) {
            $.dimensionAttributes = dimensionAttributes;
            return this;
        }

        public Builder dimensionAttributes(List<String> dimensionAttributes) {
            return dimensionAttributes(Output.of(dimensionAttributes));
        }

        public Builder dimensionAttributes(String... dimensionAttributes) {
            return dimensionAttributes(List.of(dimensionAttributes));
        }

        public Builder dimensions(Output<List<String>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        public Builder dimensions(List<String> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        public Builder dimensions(String... dimensions) {
            return dimensions(List.of(dimensions));
        }

        public Builder distributedConnectorClusterSize(Output<String> distributedConnectorClusterSize) {
            $.distributedConnectorClusterSize = distributedConnectorClusterSize;
            return this;
        }

        public Builder distributedConnectorClusterSize(String distributedConnectorClusterSize) {
            return distributedConnectorClusterSize(Output.of(distributedConnectorClusterSize));
        }

        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        public Builder domainHostName(Output<String> domainHostName) {
            $.domainHostName = domainHostName;
            return this;
        }

        public Builder domainHostName(String domainHostName) {
            return domainHostName(Output.of(domainHostName));
        }

        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        public Builder domainType(Output<String> domainType) {
            $.domainType = domainType;
            return this;
        }

        public Builder domainType(String domainType) {
            return domainType(Output.of(domainType));
        }

        public Builder elements(Output<List<String>> elements) {
            $.elements = elements;
            return this;
        }

        public Builder elements(List<String> elements) {
            return elements(Output.of(elements));
        }

        public Builder elements(String... elements) {
            return elements(List.of(elements));
        }

        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        public Builder email(String email) {
            return email(Output.of(email));
        }

        public Builder emptyHeader(Output<String> emptyHeader) {
            $.emptyHeader = emptyHeader;
            return this;
        }

        public Builder emptyHeader(String emptyHeader) {
            return emptyHeader(Output.of(emptyHeader));
        }

        public Builder enableAllDimensionCombinations(Output<String> enableAllDimensionCombinations) {
            $.enableAllDimensionCombinations = enableAllDimensionCombinations;
            return this;
        }

        public Builder enableAllDimensionCombinations(String enableAllDimensionCombinations) {
            return enableAllDimensionCombinations(Output.of(enableAllDimensionCombinations));
        }

        public Builder enableArchiveLogOnly(Output<String> enableArchiveLogOnly) {
            $.enableArchiveLogOnly = enableArchiveLogOnly;
            return this;
        }

        public Builder enableArchiveLogOnly(String enableArchiveLogOnly) {
            return enableArchiveLogOnly(Output.of(enableArchiveLogOnly));
        }

        public Builder enableDataExtensionsSyncing(Output<String> enableDataExtensionsSyncing) {
            $.enableDataExtensionsSyncing = enableDataExtensionsSyncing;
            return this;
        }

        public Builder enableDataExtensionsSyncing(String enableDataExtensionsSyncing) {
            return enableDataExtensionsSyncing(Output.of(enableDataExtensionsSyncing));
        }

        public Builder enableDistributedConnectorMode(Output<String> enableDistributedConnectorMode) {
            $.enableDistributedConnectorMode = enableDistributedConnectorMode;
            return this;
        }

        public Builder enableDistributedConnectorMode(String enableDistributedConnectorMode) {
            return enableDistributedConnectorMode(Output.of(enableDistributedConnectorMode));
        }

        public Builder enableEnrichments(Output<String> enableEnrichments) {
            $.enableEnrichments = enableEnrichments;
            return this;
        }

        public Builder enableEnrichments(String enableEnrichments) {
            return enableEnrichments(Output.of(enableEnrichments));
        }

        public Builder enableExports(Output<String> enableExports) {
            $.enableExports = enableExports;
            return this;
        }

        public Builder enableExports(String enableExports) {
            return enableExports(Output.of(enableExports));
        }

        public Builder enableTde(Output<String> enableTde) {
            $.enableTde = enableTde;
            return this;
        }

        public Builder enableTde(String enableTde) {
            return enableTde(Output.of(enableTde));
        }

        public Builder encodedPublicKey(Output<String> encodedPublicKey) {
            $.encodedPublicKey = encodedPublicKey;
            return this;
        }

        public Builder encodedPublicKey(String encodedPublicKey) {
            return encodedPublicKey(Output.of(encodedPublicKey));
        }

        public Builder encryptionKey(Output<String> encryptionKey) {
            $.encryptionKey = encryptionKey;
            return this;
        }

        public Builder encryptionKey(String encryptionKey) {
            return encryptionKey(Output.of(encryptionKey));
        }

        public Builder endpoint(Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        public Builder engagementAttributionWindow(Output<String> engagementAttributionWindow) {
            $.engagementAttributionWindow = engagementAttributionWindow;
            return this;
        }

        public Builder engagementAttributionWindow(String engagementAttributionWindow) {
            return engagementAttributionWindow(Output.of(engagementAttributionWindow));
        }

        public Builder enrichedExport(Output<String> enrichedExport) {
            $.enrichedExport = enrichedExport;
            return this;
        }

        public Builder enrichedExport(String enrichedExport) {
            return enrichedExport(Output.of(enrichedExport));
        }

        public Builder entityId(Output<String> entityId) {
            $.entityId = entityId;
            return this;
        }

        public Builder entityId(String entityId) {
            return entityId(Output.of(entityId));
        }

        public Builder environment(Output<String> environment) {
            $.environment = environment;
            return this;
        }

        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        public Builder escapeChar(Output<String> escapeChar) {
            $.escapeChar = escapeChar;
            return this;
        }

        public Builder escapeChar(String escapeChar) {
            return escapeChar(Output.of(escapeChar));
        }

        public Builder euRegion(Output<String> euRegion) {
            $.euRegion = euRegion;
            return this;
        }

        public Builder euRegion(String euRegion) {
            return euRegion(Output.of(euRegion));
        }

        public Builder events(Output<List<String>> events) {
            $.events = events;
            return this;
        }

        public Builder events(List<String> events) {
            return events(Output.of(events));
        }

        public Builder events(String... events) {
            return events(List.of(events));
        }

        public Builder exportStorageType(Output<String> exportStorageType) {
            $.exportStorageType = exportStorageType;
            return this;
        }

        public Builder exportStorageType(String exportStorageType) {
            return exportStorageType(Output.of(exportStorageType));
        }

        public Builder externalId(Output<String> externalId) {
            $.externalId = externalId;
            return this;
        }

        public Builder externalId(String externalId) {
            return externalId(Output.of(externalId));
        }

        public Builder fields(Output<List<String>> fields) {
            $.fields = fields;
            return this;
        }

        public Builder fields(List<String> fields) {
            return fields(Output.of(fields));
        }

        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        public Builder fileType(Output<String> fileType) {
            $.fileType = fileType;
            return this;
        }

        public Builder fileType(String fileType) {
            return fileType(Output.of(fileType));
        }

        public Builder filter(Output<String> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        public Builder financeAccountSyncMode(Output<String> financeAccountSyncMode) {
            $.financeAccountSyncMode = financeAccountSyncMode;
            return this;
        }

        public Builder financeAccountSyncMode(String financeAccountSyncMode) {
            return financeAccountSyncMode(Output.of(financeAccountSyncMode));
        }

        public Builder financeAccounts(Output<List<String>> financeAccounts) {
            $.financeAccounts = financeAccounts;
            return this;
        }

        public Builder financeAccounts(List<String> financeAccounts) {
            return financeAccounts(Output.of(financeAccounts));
        }

        public Builder financeAccounts(String... financeAccounts) {
            return financeAccounts(List.of(financeAccounts));
        }

        public Builder folder(Output<String> folder) {
            $.folder = folder;
            return this;
        }

        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        public Builder folderId(Output<String> folderId) {
            $.folderId = folderId;
            return this;
        }

        public Builder folderId(String folderId) {
            return folderId(Output.of(folderId));
        }

        public Builder folderPath(Output<String> folderPath) {
            $.folderPath = folderPath;
            return this;
        }

        public Builder folderPath(String folderPath) {
            return folderPath(Output.of(folderPath));
        }

        public Builder forecastId(Output<String> forecastId) {
            $.forecastId = forecastId;
            return this;
        }

        public Builder forecastId(String forecastId) {
            return forecastId(Output.of(forecastId));
        }

        public Builder ftpHost(Output<String> ftpHost) {
            $.ftpHost = ftpHost;
            return this;
        }

        public Builder ftpHost(String ftpHost) {
            return ftpHost(Output.of(ftpHost));
        }

        public Builder ftpPassword(Output<String> ftpPassword) {
            $.ftpPassword = ftpPassword;
            return this;
        }

        public Builder ftpPassword(String ftpPassword) {
            return ftpPassword(Output.of(ftpPassword));
        }

        public Builder ftpPort(Output<String> ftpPort) {
            $.ftpPort = ftpPort;
            return this;
        }

        public Builder ftpPort(String ftpPort) {
            return ftpPort(Output.of(ftpPort));
        }

        public Builder ftpUser(Output<String> ftpUser) {
            $.ftpUser = ftpUser;
            return this;
        }

        public Builder ftpUser(String ftpUser) {
            return ftpUser(Output.of(ftpUser));
        }

        public Builder function(Output<String> function) {
            $.function = function;
            return this;
        }

        public Builder function(String function) {
            return function(Output.of(function));
        }

        public Builder functionApp(Output<String> functionApp) {
            $.functionApp = functionApp;
            return this;
        }

        public Builder functionApp(String functionApp) {
            return functionApp(Output.of(functionApp));
        }

        public Builder functionKey(Output<String> functionKey) {
            $.functionKey = functionKey;
            return this;
        }

        public Builder functionKey(String functionKey) {
            return functionKey(Output.of(functionKey));
        }

        public Builder functionName(Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        public Builder functionTrigger(Output<String> functionTrigger) {
            $.functionTrigger = functionTrigger;
            return this;
        }

        public Builder functionTrigger(String functionTrigger) {
            return functionTrigger(Output.of(functionTrigger));
        }

        public Builder gcsBucket(Output<String> gcsBucket) {
            $.gcsBucket = gcsBucket;
            return this;
        }

        public Builder gcsBucket(String gcsBucket) {
            return gcsBucket(Output.of(gcsBucket));
        }

        public Builder gcsFolder(Output<String> gcsFolder) {
            $.gcsFolder = gcsFolder;
            return this;
        }

        public Builder gcsFolder(String gcsFolder) {
            return gcsFolder(Output.of(gcsFolder));
        }

        public Builder groupName(Output<String> groupName) {
            $.groupName = groupName;
            return this;
        }

        public Builder groupName(String groupName) {
            return groupName(Output.of(groupName));
        }

        public Builder hasManagePermissions(Output<String> hasManagePermissions) {
            $.hasManagePermissions = hasManagePermissions;
            return this;
        }

        public Builder hasManagePermissions(String hasManagePermissions) {
            return hasManagePermissions(Output.of(hasManagePermissions));
        }

        public Builder homeFolder(Output<String> homeFolder) {
            $.homeFolder = homeFolder;
            return this;
        }

        public Builder homeFolder(String homeFolder) {
            return homeFolder(Output.of(homeFolder));
        }

        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        public Builder host(String host) {
            return host(Output.of(host));
        }

        public Builder hostIp(Output<String> hostIp) {
            $.hostIp = hostIp;
            return this;
        }

        public Builder hostIp(String hostIp) {
            return hostIp(Output.of(hostIp));
        }

        public Builder hostUser(Output<String> hostUser) {
            $.hostUser = hostUser;
            return this;
        }

        public Builder hostUser(String hostUser) {
            return hostUser(Output.of(hostUser));
        }

        public Builder hosts(Output<List<String>> hosts) {
            $.hosts = hosts;
            return this;
        }

        public Builder hosts(List<String> hosts) {
            return hosts(Output.of(hosts));
        }

        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }

        public Builder identity(Output<String> identity) {
            $.identity = identity;
            return this;
        }

        public Builder identity(String identity) {
            return identity(Output.of(identity));
        }

        public Builder includeOcapiEndpoints(Output<String> includeOcapiEndpoints) {
            $.includeOcapiEndpoints = includeOcapiEndpoints;
            return this;
        }

        public Builder includeOcapiEndpoints(String includeOcapiEndpoints) {
            return includeOcapiEndpoints(Output.of(includeOcapiEndpoints));
        }

        public Builder instance(Output<String> instance) {
            $.instance = instance;
            return this;
        }

        public Builder instance(String instance) {
            return instance(Output.of(instance));
        }

        public Builder instanceNumber(Output<String> instanceNumber) {
            $.instanceNumber = instanceNumber;
            return this;
        }

        public Builder instanceNumber(String instanceNumber) {
            return instanceNumber(Output.of(instanceNumber));
        }

        public Builder instanceUrl(Output<String> instanceUrl) {
            $.instanceUrl = instanceUrl;
            return this;
        }

        public Builder instanceUrl(String instanceUrl) {
            return instanceUrl(Output.of(instanceUrl));
        }

        public Builder integrationKey(Output<String> integrationKey) {
            $.integrationKey = integrationKey;
            return this;
        }

        public Builder integrationKey(String integrationKey) {
            return integrationKey(Output.of(integrationKey));
        }

        public Builder isAccountLevelConnector(Output<String> isAccountLevelConnector) {
            $.isAccountLevelConnector = isAccountLevelConnector;
            return this;
        }

        public Builder isAccountLevelConnector(String isAccountLevelConnector) {
            return isAccountLevelConnector(Output.of(isAccountLevelConnector));
        }

        public Builder isAuth2Enabled(Output<String> isAuth2Enabled) {
            $.isAuth2Enabled = isAuth2Enabled;
            return this;
        }

        public Builder isAuth2Enabled(String isAuth2Enabled) {
            return isAuth2Enabled(Output.of(isAuth2Enabled));
        }

        public Builder isCustomApiCredentials(Output<String> isCustomApiCredentials) {
            $.isCustomApiCredentials = isCustomApiCredentials;
            return this;
        }

        public Builder isCustomApiCredentials(String isCustomApiCredentials) {
            return isCustomApiCredentials(Output.of(isCustomApiCredentials));
        }

        public Builder isExternalActivitiesEndpointSelected(Output<String> isExternalActivitiesEndpointSelected) {
            $.isExternalActivitiesEndpointSelected = isExternalActivitiesEndpointSelected;
            return this;
        }

        public Builder isExternalActivitiesEndpointSelected(String isExternalActivitiesEndpointSelected) {
            return isExternalActivitiesEndpointSelected(Output.of(isExternalActivitiesEndpointSelected));
        }

        public Builder isFtps(Output<String> isFtps) {
            $.isFtps = isFtps;
            return this;
        }

        public Builder isFtps(String isFtps) {
            return isFtps(Output.of(isFtps));
        }

        public Builder isKeypair(Output<String> isKeypair) {
            $.isKeypair = isKeypair;
            return this;
        }

        public Builder isKeypair(String isKeypair) {
            return isKeypair(Output.of(isKeypair));
        }

        public Builder isMultiEntityFeatureEnabled(Output<String> isMultiEntityFeatureEnabled) {
            $.isMultiEntityFeatureEnabled = isMultiEntityFeatureEnabled;
            return this;
        }

        public Builder isMultiEntityFeatureEnabled(String isMultiEntityFeatureEnabled) {
            return isMultiEntityFeatureEnabled(Output.of(isMultiEntityFeatureEnabled));
        }

        public Builder isNewPackage(Output<String> isNewPackage) {
            $.isNewPackage = isNewPackage;
            return this;
        }

        public Builder isNewPackage(String isNewPackage) {
            return isNewPackage(Output.of(isNewPackage));
        }

        public Builder isPrivateKeyEncrypted(Output<String> isPrivateKeyEncrypted) {
            $.isPrivateKeyEncrypted = isPrivateKeyEncrypted;
            return this;
        }

        public Builder isPrivateKeyEncrypted(String isPrivateKeyEncrypted) {
            return isPrivateKeyEncrypted(Output.of(isPrivateKeyEncrypted));
        }

        public Builder isPrivateLinkRequired(Output<String> isPrivateLinkRequired) {
            $.isPrivateLinkRequired = isPrivateLinkRequired;
            return this;
        }

        public Builder isPrivateLinkRequired(String isPrivateLinkRequired) {
            return isPrivateLinkRequired(Output.of(isPrivateLinkRequired));
        }

        public Builder isPublic(Output<String> isPublic) {
            $.isPublic = isPublic;
            return this;
        }

        public Builder isPublic(String isPublic) {
            return isPublic(Output.of(isPublic));
        }

        public Builder isSailthruConnectEnabled(Output<String> isSailthruConnectEnabled) {
            $.isSailthruConnectEnabled = isSailthruConnectEnabled;
            return this;
        }

        public Builder isSailthruConnectEnabled(String isSailthruConnectEnabled) {
            return isSailthruConnectEnabled(Output.of(isSailthruConnectEnabled));
        }

        public Builder isSecure(Output<String> isSecure) {
            $.isSecure = isSecure;
            return this;
        }

        public Builder isSecure(String isSecure) {
            return isSecure(Output.of(isSecure));
        }

        public Builder isSingleTableMode(Output<String> isSingleTableMode) {
            $.isSingleTableMode = isSingleTableMode;
            return this;
        }

        public Builder isSingleTableMode(String isSingleTableMode) {
            return isSingleTableMode(Output.of(isSingleTableMode));
        }

        public Builder isVendor(Output<String> isVendor) {
            $.isVendor = isVendor;
            return this;
        }

        public Builder isVendor(String isVendor) {
            return isVendor(Output.of(isVendor));
        }

        public Builder jsonDeliveryMode(Output<String> jsonDeliveryMode) {
            $.jsonDeliveryMode = jsonDeliveryMode;
            return this;
        }

        public Builder jsonDeliveryMode(String jsonDeliveryMode) {
            return jsonDeliveryMode(Output.of(jsonDeliveryMode));
        }

        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        public Builder key(String key) {
            return key(Output.of(key));
        }

        public Builder keyPassword(Output<String> keyPassword) {
            $.keyPassword = keyPassword;
            return this;
        }

        public Builder keyPassword(String keyPassword) {
            return keyPassword(Output.of(keyPassword));
        }

        public Builder keyStoreType(Output<String> keyStoreType) {
            $.keyStoreType = keyStoreType;
            return this;
        }

        public Builder keyStoreType(String keyStoreType) {
            return keyStoreType(Output.of(keyStoreType));
        }

        public Builder keystore(Output<String> keystore) {
            $.keystore = keystore;
            return this;
        }

        public Builder keystore(String keystore) {
            return keystore(Output.of(keystore));
        }

        public Builder keystorePassword(Output<String> keystorePassword) {
            $.keystorePassword = keystorePassword;
            return this;
        }

        public Builder keystorePassword(String keystorePassword) {
            return keystorePassword(Output.of(keystorePassword));
        }

        public Builder lastSyncedChangesUtc_(Output<String> lastSyncedChangesUtc_) {
            $.lastSyncedChangesUtc_ = lastSyncedChangesUtc_;
            return this;
        }

        public Builder lastSyncedChangesUtc_(String lastSyncedChangesUtc_) {
            return lastSyncedChangesUtc_(Output.of(lastSyncedChangesUtc_));
        }

        public Builder latestVersion(Output<String> latestVersion) {
            $.latestVersion = latestVersion;
            return this;
        }

        public Builder latestVersion(String latestVersion) {
            return latestVersion(Output.of(latestVersion));
        }

        public Builder limitForApiCallsToExternalActivitiesEndpoint(Output<String> limitForApiCallsToExternalActivitiesEndpoint) {
            $.limitForApiCallsToExternalActivitiesEndpoint = limitForApiCallsToExternalActivitiesEndpoint;
            return this;
        }

        public Builder limitForApiCallsToExternalActivitiesEndpoint(String limitForApiCallsToExternalActivitiesEndpoint) {
            return limitForApiCallsToExternalActivitiesEndpoint(Output.of(limitForApiCallsToExternalActivitiesEndpoint));
        }

        public Builder lineSeparator(Output<String> lineSeparator) {
            $.lineSeparator = lineSeparator;
            return this;
        }

        public Builder lineSeparator(String lineSeparator) {
            return lineSeparator(Output.of(lineSeparator));
        }

        public Builder listStrategy(Output<String> listStrategy) {
            $.listStrategy = listStrategy;
            return this;
        }

        public Builder listStrategy(String listStrategy) {
            return listStrategy(Output.of(listStrategy));
        }

        public Builder listSyncMode(Output<String> listSyncMode) {
            $.listSyncMode = listSyncMode;
            return this;
        }

        public Builder listSyncMode(String listSyncMode) {
            return listSyncMode(Output.of(listSyncMode));
        }

        public Builder logJournal(Output<String> logJournal) {
            $.logJournal = logJournal;
            return this;
        }

        public Builder logJournal(String logJournal) {
            return logJournal(Output.of(logJournal));
        }

        public Builder logJournalSchema(Output<String> logJournalSchema) {
            $.logJournalSchema = logJournalSchema;
            return this;
        }

        public Builder logJournalSchema(String logJournalSchema) {
            return logJournalSchema(Output.of(logJournalSchema));
        }

        public Builder login(Output<String> login) {
            $.login = login;
            return this;
        }

        public Builder login(String login) {
            return login(Output.of(login));
        }

        public Builder loginPassword(Output<String> loginPassword) {
            $.loginPassword = loginPassword;
            return this;
        }

        public Builder loginPassword(String loginPassword) {
            return loginPassword(Output.of(loginPassword));
        }

        public Builder managerAccounts(Output<List<String>> managerAccounts) {
            $.managerAccounts = managerAccounts;
            return this;
        }

        public Builder managerAccounts(List<String> managerAccounts) {
            return managerAccounts(Output.of(managerAccounts));
        }

        public Builder managerAccounts(String... managerAccounts) {
            return managerAccounts(List.of(managerAccounts));
        }

        public Builder merchantId(Output<String> merchantId) {
            $.merchantId = merchantId;
            return this;
        }

        public Builder merchantId(String merchantId) {
            return merchantId(Output.of(merchantId));
        }

        public Builder messageType(Output<String> messageType) {
            $.messageType = messageType;
            return this;
        }

        public Builder messageType(String messageType) {
            return messageType(Output.of(messageType));
        }

        public Builder metrics(Output<List<String>> metrics) {
            $.metrics = metrics;
            return this;
        }

        public Builder metrics(List<String> metrics) {
            return metrics(Output.of(metrics));
        }

        public Builder metrics(String... metrics) {
            return metrics(List.of(metrics));
        }

        public Builder namedRange(Output<String> namedRange) {
            $.namedRange = namedRange;
            return this;
        }

        public Builder namedRange(String namedRange) {
            return namedRange(Output.of(namedRange));
        }

        public Builder namespace(Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public Builder networkCode(Output<String> networkCode) {
            $.networkCode = networkCode;
            return this;
        }

        public Builder networkCode(String networkCode) {
            return networkCode(Output.of(networkCode));
        }

        public Builder nullSequence(Output<String> nullSequence) {
            $.nullSequence = nullSequence;
            return this;
        }

        public Builder nullSequence(String nullSequence) {
            return nullSequence(Output.of(nullSequence));
        }

        public Builder oauthToken(Output<String> oauthToken) {
            $.oauthToken = oauthToken;
            return this;
        }

        public Builder oauthToken(String oauthToken) {
            return oauthToken(Output.of(oauthToken));
        }

        public Builder oauthTokenSecret(Output<String> oauthTokenSecret) {
            $.oauthTokenSecret = oauthTokenSecret;
            return this;
        }

        public Builder oauthTokenSecret(String oauthTokenSecret) {
            return oauthTokenSecret(Output.of(oauthTokenSecret));
        }

        public Builder ocapiClientId(Output<String> ocapiClientId) {
            $.ocapiClientId = ocapiClientId;
            return this;
        }

        public Builder ocapiClientId(String ocapiClientId) {
            return ocapiClientId(Output.of(ocapiClientId));
        }

        public Builder ocapiClientSecret(Output<String> ocapiClientSecret) {
            $.ocapiClientSecret = ocapiClientSecret;
            return this;
        }

        public Builder ocapiClientSecret(String ocapiClientSecret) {
            return ocapiClientSecret(Output.of(ocapiClientSecret));
        }

        public Builder ocapiCustomObjectTypes(Output<String> ocapiCustomObjectTypes) {
            $.ocapiCustomObjectTypes = ocapiCustomObjectTypes;
            return this;
        }

        public Builder ocapiCustomObjectTypes(String ocapiCustomObjectTypes) {
            return ocapiCustomObjectTypes(Output.of(ocapiCustomObjectTypes));
        }

        public Builder ocapiHostname(Output<String> ocapiHostname) {
            $.ocapiHostname = ocapiHostname;
            return this;
        }

        public Builder ocapiHostname(String ocapiHostname) {
            return ocapiHostname(Output.of(ocapiHostname));
        }

        public Builder onError(Output<String> onError) {
            $.onError = onError;
            return this;
        }

        public Builder onError(String onError) {
            return onError(Output.of(onError));
        }

        public Builder onPremise(Output<String> onPremise) {
            $.onPremise = onPremise;
            return this;
        }

        public Builder onPremise(String onPremise) {
            return onPremise(Output.of(onPremise));
        }

        public Builder organization(Output<String> organization) {
            $.organization = organization;
            return this;
        }

        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        public Builder organizations(Output<List<String>> organizations) {
            $.organizations = organizations;
            return this;
        }

        public Builder organizations(List<String> organizations) {
            return organizations(Output.of(organizations));
        }

        public Builder organizations(String... organizations) {
            return organizations(List.of(organizations));
        }

        public Builder packedModeTables(Output<List<String>> packedModeTables) {
            $.packedModeTables = packedModeTables;
            return this;
        }

        public Builder packedModeTables(List<String> packedModeTables) {
            return packedModeTables(Output.of(packedModeTables));
        }

        public Builder packedModeTables(String... packedModeTables) {
            return packedModeTables(List.of(packedModeTables));
        }

        public Builder packingMode(Output<String> packingMode) {
            $.packingMode = packingMode;
            return this;
        }

        public Builder packingMode(String packingMode) {
            return packingMode(Output.of(packingMode));
        }

        public Builder pages(Output<List<String>> pages) {
            $.pages = pages;
            return this;
        }

        public Builder pages(List<String> pages) {
            return pages(Output.of(pages));
        }

        public Builder pages(String... pages) {
            return pages(List.of(pages));
        }

        public Builder partnerCode(Output<String> partnerCode) {
            $.partnerCode = partnerCode;
            return this;
        }

        public Builder partnerCode(String partnerCode) {
            return partnerCode(Output.of(partnerCode));
        }

        public Builder partners(Output<List<String>> partners) {
            $.partners = partners;
            return this;
        }

        public Builder partners(List<String> partners) {
            return partners(Output.of(partners));
        }

        public Builder partners(String... partners) {
            return partners(List.of(partners));
        }

        public Builder passphrase(Output<String> passphrase) {
            $.passphrase = passphrase;
            return this;
        }

        public Builder passphrase(String passphrase) {
            return passphrase(Output.of(passphrase));
        }

        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder pat(Output<String> pat) {
            $.pat = pat;
            return this;
        }

        public Builder pat(String pat) {
            return pat(Output.of(pat));
        }

        public Builder patName(Output<String> patName) {
            $.patName = patName;
            return this;
        }

        public Builder patName(String patName) {
            return patName(Output.of(patName));
        }

        public Builder patSecret(Output<String> patSecret) {
            $.patSecret = patSecret;
            return this;
        }

        public Builder patSecret(String patSecret) {
            return patSecret(Output.of(patSecret));
        }

        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        public Builder path(String path) {
            return path(Output.of(path));
        }

        public Builder pattern(Output<String> pattern) {
            $.pattern = pattern;
            return this;
        }

        public Builder pattern(String pattern) {
            return pattern(Output.of(pattern));
        }

        public Builder pdbName(Output<String> pdbName) {
            $.pdbName = pdbName;
            return this;
        }

        public Builder pdbName(String pdbName) {
            return pdbName(Output.of(pdbName));
        }

        public Builder pemCertificate(Output<String> pemCertificate) {
            $.pemCertificate = pemCertificate;
            return this;
        }

        public Builder pemCertificate(String pemCertificate) {
            return pemCertificate(Output.of(pemCertificate));
        }

        public Builder pemPrivateKey(Output<String> pemPrivateKey) {
            $.pemPrivateKey = pemPrivateKey;
            return this;
        }

        public Builder pemPrivateKey(String pemPrivateKey) {
            return pemPrivateKey(Output.of(pemPrivateKey));
        }

        public Builder perInteractionDimensions(Output<List<String>> perInteractionDimensions) {
            $.perInteractionDimensions = perInteractionDimensions;
            return this;
        }

        public Builder perInteractionDimensions(List<String> perInteractionDimensions) {
            return perInteractionDimensions(Output.of(perInteractionDimensions));
        }

        public Builder perInteractionDimensions(String... perInteractionDimensions) {
            return perInteractionDimensions(List.of(perInteractionDimensions));
        }

        public Builder personalAccessToken(Output<String> personalAccessToken) {
            $.personalAccessToken = personalAccessToken;
            return this;
        }

        public Builder personalAccessToken(String personalAccessToken) {
            return personalAccessToken(Output.of(personalAccessToken));
        }

        public Builder pgpPassPhrase(Output<String> pgpPassPhrase) {
            $.pgpPassPhrase = pgpPassPhrase;
            return this;
        }

        public Builder pgpPassPhrase(String pgpPassPhrase) {
            return pgpPassPhrase(Output.of(pgpPassPhrase));
        }

        public Builder pgpSecretKey(Output<String> pgpSecretKey) {
            $.pgpSecretKey = pgpSecretKey;
            return this;
        }

        public Builder pgpSecretKey(String pgpSecretKey) {
            return pgpSecretKey(Output.of(pgpSecretKey));
        }

        public Builder phoneNumber(Output<String> phoneNumber) {
            $.phoneNumber = phoneNumber;
            return this;
        }

        public Builder phoneNumber(String phoneNumber) {
            return phoneNumber(Output.of(phoneNumber));
        }

        public Builder port(Output<String> port) {
            $.port = port;
            return this;
        }

        public Builder port(String port) {
            return port(Output.of(port));
        }

        public Builder postClickAttributionWindowSize(Output<String> postClickAttributionWindowSize) {
            $.postClickAttributionWindowSize = postClickAttributionWindowSize;
            return this;
        }

        public Builder postClickAttributionWindowSize(String postClickAttributionWindowSize) {
            return postClickAttributionWindowSize(Output.of(postClickAttributionWindowSize));
        }

        public Builder prebuiltReport(Output<String> prebuiltReport) {
            $.prebuiltReport = prebuiltReport;
            return this;
        }

        public Builder prebuiltReport(String prebuiltReport) {
            return prebuiltReport(Output.of(prebuiltReport));
        }

        public Builder prefix(Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        public Builder primaryKeys(Output<List<String>> primaryKeys) {
            $.primaryKeys = primaryKeys;
            return this;
        }

        public Builder primaryKeys(List<String> primaryKeys) {
            return primaryKeys(Output.of(primaryKeys));
        }

        public Builder primaryKeys(String... primaryKeys) {
            return primaryKeys(List.of(primaryKeys));
        }

        public Builder privateKey(Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        public Builder profiles(Output<List<String>> profiles) {
            $.profiles = profiles;
            return this;
        }

        public Builder profiles(List<String> profiles) {
            return profiles(Output.of(profiles));
        }

        public Builder profiles(String... profiles) {
            return profiles(List.of(profiles));
        }

        public Builder projectCredentials(Output<List<GetConnectorConfigProjectCredentialArgs>> projectCredentials) {
            $.projectCredentials = projectCredentials;
            return this;
        }

        public Builder projectCredentials(List<GetConnectorConfigProjectCredentialArgs> projectCredentials) {
            return projectCredentials(Output.of(projectCredentials));
        }

        public Builder projectCredentials(GetConnectorConfigProjectCredentialArgs... projectCredentials) {
            return projectCredentials(List.of(projectCredentials));
        }

        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public Builder projects(Output<List<String>> projects) {
            $.projects = projects;
            return this;
        }

        public Builder projects(List<String> projects) {
            return projects(Output.of(projects));
        }

        public Builder projects(String... projects) {
            return projects(List.of(projects));
        }

        public Builder properties(Output<List<String>> properties) {
            $.properties = properties;
            return this;
        }

        public Builder properties(List<String> properties) {
            return properties(Output.of(properties));
        }

        public Builder properties(String... properties) {
            return properties(List.of(properties));
        }

        public Builder publicKey(Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        public Builder publicationName(Output<String> publicationName) {
            $.publicationName = publicationName;
            return this;
        }

        public Builder publicationName(String publicationName) {
            return publicationName(Output.of(publicationName));
        }

        public Builder queryId(Output<String> queryId) {
            $.queryId = queryId;
            return this;
        }

        public Builder queryId(String queryId) {
            return queryId(Output.of(queryId));
        }

        public Builder queryParamValue(Output<String> queryParamValue) {
            $.queryParamValue = queryParamValue;
            return this;
        }

        public Builder queryParamValue(String queryParamValue) {
            return queryParamValue(Output.of(queryParamValue));
        }

        public Builder refreshTokenExpiresAt(Output<String> refreshTokenExpiresAt) {
            $.refreshTokenExpiresAt = refreshTokenExpiresAt;
            return this;
        }

        public Builder refreshTokenExpiresAt(String refreshTokenExpiresAt) {
            return refreshTokenExpiresAt(Output.of(refreshTokenExpiresAt));
        }

        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder replicaId(Output<String> replicaId) {
            $.replicaId = replicaId;
            return this;
        }

        public Builder replicaId(String replicaId) {
            return replicaId(Output.of(replicaId));
        }

        public Builder replicationSlot(Output<String> replicationSlot) {
            $.replicationSlot = replicationSlot;
            return this;
        }

        public Builder replicationSlot(String replicationSlot) {
            return replicationSlot(Output.of(replicationSlot));
        }

        public Builder reportConfigurationIds(Output<List<String>> reportConfigurationIds) {
            $.reportConfigurationIds = reportConfigurationIds;
            return this;
        }

        public Builder reportConfigurationIds(List<String> reportConfigurationIds) {
            return reportConfigurationIds(Output.of(reportConfigurationIds));
        }

        public Builder reportConfigurationIds(String... reportConfigurationIds) {
            return reportConfigurationIds(List.of(reportConfigurationIds));
        }

        public Builder reportFormatType(Output<String> reportFormatType) {
            $.reportFormatType = reportFormatType;
            return this;
        }

        public Builder reportFormatType(String reportFormatType) {
            return reportFormatType(Output.of(reportFormatType));
        }

        public Builder reportSuites(Output<List<String>> reportSuites) {
            $.reportSuites = reportSuites;
            return this;
        }

        public Builder reportSuites(List<String> reportSuites) {
            return reportSuites(Output.of(reportSuites));
        }

        public Builder reportSuites(String... reportSuites) {
            return reportSuites(List.of(reportSuites));
        }

        public Builder reportTimezone(Output<String> reportTimezone) {
            $.reportTimezone = reportTimezone;
            return this;
        }

        public Builder reportTimezone(String reportTimezone) {
            return reportTimezone(Output.of(reportTimezone));
        }

        public Builder reportType(Output<String> reportType) {
            $.reportType = reportType;
            return this;
        }

        public Builder reportType(String reportType) {
            return reportType(Output.of(reportType));
        }

        public Builder reportUrl(Output<String> reportUrl) {
            $.reportUrl = reportUrl;
            return this;
        }

        public Builder reportUrl(String reportUrl) {
            return reportUrl(Output.of(reportUrl));
        }

        public Builder reports(Output<List<GetConnectorConfigReportArgs>> reports) {
            $.reports = reports;
            return this;
        }

        public Builder reports(List<GetConnectorConfigReportArgs> reports) {
            return reports(Output.of(reports));
        }

        public Builder reports(GetConnectorConfigReportArgs... reports) {
            return reports(List.of(reports));
        }

        public Builder reportsLinkedinAds(Output<List<String>> reportsLinkedinAds) {
            $.reportsLinkedinAds = reportsLinkedinAds;
            return this;
        }

        public Builder reportsLinkedinAds(List<String> reportsLinkedinAds) {
            return reportsLinkedinAds(Output.of(reportsLinkedinAds));
        }

        public Builder reportsLinkedinAds(String... reportsLinkedinAds) {
            return reportsLinkedinAds(List.of(reportsLinkedinAds));
        }

        public Builder repositories(Output<List<String>> repositories) {
            $.repositories = repositories;
            return this;
        }

        public Builder repositories(List<String> repositories) {
            return repositories(Output.of(repositories));
        }

        public Builder repositories(String... repositories) {
            return repositories(List.of(repositories));
        }

        public Builder resourceToken(Output<String> resourceToken) {
            $.resourceToken = resourceToken;
            return this;
        }

        public Builder resourceToken(String resourceToken) {
            return resourceToken(Output.of(resourceToken));
        }

        public Builder resourceUrl(Output<String> resourceUrl) {
            $.resourceUrl = resourceUrl;
            return this;
        }

        public Builder resourceUrl(String resourceUrl) {
            return resourceUrl(Output.of(resourceUrl));
        }

        public Builder restApiLimit(Output<String> restApiLimit) {
            $.restApiLimit = restApiLimit;
            return this;
        }

        public Builder restApiLimit(String restApiLimit) {
            return restApiLimit(Output.of(restApiLimit));
        }

        public Builder rfcLibraryPath(Output<String> rfcLibraryPath) {
            $.rfcLibraryPath = rfcLibraryPath;
            return this;
        }

        public Builder rfcLibraryPath(String rfcLibraryPath) {
            return rfcLibraryPath(Output.of(rfcLibraryPath));
        }

        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        public Builder role(String role) {
            return role(Output.of(role));
        }

        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public Builder rollbackWindowSize(Output<String> rollbackWindowSize) {
            $.rollbackWindowSize = rollbackWindowSize;
            return this;
        }

        public Builder rollbackWindowSize(String rollbackWindowSize) {
            return rollbackWindowSize(Output.of(rollbackWindowSize));
        }

        public Builder s3Bucket(Output<String> s3Bucket) {
            $.s3Bucket = s3Bucket;
            return this;
        }

        public Builder s3Bucket(String s3Bucket) {
            return s3Bucket(Output.of(s3Bucket));
        }

        public Builder s3ExportBucket(Output<String> s3ExportBucket) {
            $.s3ExportBucket = s3ExportBucket;
            return this;
        }

        public Builder s3ExportBucket(String s3ExportBucket) {
            return s3ExportBucket(Output.of(s3ExportBucket));
        }

        public Builder s3ExportFolder(Output<String> s3ExportFolder) {
            $.s3ExportFolder = s3ExportFolder;
            return this;
        }

        public Builder s3ExportFolder(String s3ExportFolder) {
            return s3ExportFolder(Output.of(s3ExportFolder));
        }

        public Builder s3ExportRoleArn(Output<String> s3ExportRoleArn) {
            $.s3ExportRoleArn = s3ExportRoleArn;
            return this;
        }

        public Builder s3ExportRoleArn(String s3ExportRoleArn) {
            return s3ExportRoleArn(Output.of(s3ExportRoleArn));
        }

        public Builder s3RoleArn(Output<String> s3RoleArn) {
            $.s3RoleArn = s3RoleArn;
            return this;
        }

        public Builder s3RoleArn(String s3RoleArn) {
            return s3RoleArn(Output.of(s3RoleArn));
        }

        public Builder s3bucket(Output<String> s3bucket) {
            $.s3bucket = s3bucket;
            return this;
        }

        public Builder s3bucket(String s3bucket) {
            return s3bucket(Output.of(s3bucket));
        }

        public Builder s3externalId(Output<String> s3externalId) {
            $.s3externalId = s3externalId;
            return this;
        }

        public Builder s3externalId(String s3externalId) {
            return s3externalId(Output.of(s3externalId));
        }

        public Builder s3folder(Output<String> s3folder) {
            $.s3folder = s3folder;
            return this;
        }

        public Builder s3folder(String s3folder) {
            return s3folder(Output.of(s3folder));
        }

        public Builder s3path(Output<String> s3path) {
            $.s3path = s3path;
            return this;
        }

        public Builder s3path(String s3path) {
            return s3path(Output.of(s3path));
        }

        public Builder s3roleArn(Output<String> s3roleArn) {
            $.s3roleArn = s3roleArn;
            return this;
        }

        public Builder s3roleArn(String s3roleArn) {
            return s3roleArn(Output.of(s3roleArn));
        }

        public Builder salesAccountSyncMode(Output<String> salesAccountSyncMode) {
            $.salesAccountSyncMode = salesAccountSyncMode;
            return this;
        }

        public Builder salesAccountSyncMode(String salesAccountSyncMode) {
            return salesAccountSyncMode(Output.of(salesAccountSyncMode));
        }

        public Builder salesAccounts(Output<List<String>> salesAccounts) {
            $.salesAccounts = salesAccounts;
            return this;
        }

        public Builder salesAccounts(List<String> salesAccounts) {
            return salesAccounts(Output.of(salesAccounts));
        }

        public Builder salesAccounts(String... salesAccounts) {
            return salesAccounts(List.of(salesAccounts));
        }

        public Builder salesforceSecurityToken(Output<String> salesforceSecurityToken) {
            $.salesforceSecurityToken = salesforceSecurityToken;
            return this;
        }

        public Builder salesforceSecurityToken(String salesforceSecurityToken) {
            return salesforceSecurityToken(Output.of(salesforceSecurityToken));
        }

        public Builder sandboxAccount(Output<String> sandboxAccount) {
            $.sandboxAccount = sandboxAccount;
            return this;
        }

        public Builder sandboxAccount(String sandboxAccount) {
            return sandboxAccount(Output.of(sandboxAccount));
        }

        public Builder sapSchema(Output<String> sapSchema) {
            $.sapSchema = sapSchema;
            return this;
        }

        public Builder sapSchema(String sapSchema) {
            return sapSchema(Output.of(sapSchema));
        }

        public Builder sapUser(Output<String> sapUser) {
            $.sapUser = sapUser;
            return this;
        }

        public Builder sapUser(String sapUser) {
            return sapUser(Output.of(sapUser));
        }

        public Builder saslMechanism(Output<String> saslMechanism) {
            $.saslMechanism = saslMechanism;
            return this;
        }

        public Builder saslMechanism(String saslMechanism) {
            return saslMechanism(Output.of(saslMechanism));
        }

        public Builder saslPlainKey(Output<String> saslPlainKey) {
            $.saslPlainKey = saslPlainKey;
            return this;
        }

        public Builder saslPlainKey(String saslPlainKey) {
            return saslPlainKey(Output.of(saslPlainKey));
        }

        public Builder saslPlainSecret(Output<String> saslPlainSecret) {
            $.saslPlainSecret = saslPlainSecret;
            return this;
        }

        public Builder saslPlainSecret(String saslPlainSecret) {
            return saslPlainSecret(Output.of(saslPlainSecret));
        }

        public Builder saslScram256Key(Output<String> saslScram256Key) {
            $.saslScram256Key = saslScram256Key;
            return this;
        }

        public Builder saslScram256Key(String saslScram256Key) {
            return saslScram256Key(Output.of(saslScram256Key));
        }

        public Builder saslScram256Secret(Output<String> saslScram256Secret) {
            $.saslScram256Secret = saslScram256Secret;
            return this;
        }

        public Builder saslScram256Secret(String saslScram256Secret) {
            return saslScram256Secret(Output.of(saslScram256Secret));
        }

        public Builder saslScram512Key(Output<String> saslScram512Key) {
            $.saslScram512Key = saslScram512Key;
            return this;
        }

        public Builder saslScram512Key(String saslScram512Key) {
            return saslScram512Key(Output.of(saslScram512Key));
        }

        public Builder saslScram512Secret(Output<String> saslScram512Secret) {
            $.saslScram512Secret = saslScram512Secret;
            return this;
        }

        public Builder saslScram512Secret(String saslScram512Secret) {
            return saslScram512Secret(Output.of(saslScram512Secret));
        }

        public Builder schemaRegistryCredentialsSource(Output<String> schemaRegistryCredentialsSource) {
            $.schemaRegistryCredentialsSource = schemaRegistryCredentialsSource;
            return this;
        }

        public Builder schemaRegistryCredentialsSource(String schemaRegistryCredentialsSource) {
            return schemaRegistryCredentialsSource(Output.of(schemaRegistryCredentialsSource));
        }

        public Builder schemaRegistryKey(Output<String> schemaRegistryKey) {
            $.schemaRegistryKey = schemaRegistryKey;
            return this;
        }

        public Builder schemaRegistryKey(String schemaRegistryKey) {
            return schemaRegistryKey(Output.of(schemaRegistryKey));
        }

        public Builder schemaRegistrySecret(Output<String> schemaRegistrySecret) {
            $.schemaRegistrySecret = schemaRegistrySecret;
            return this;
        }

        public Builder schemaRegistrySecret(String schemaRegistrySecret) {
            return schemaRegistrySecret(Output.of(schemaRegistrySecret));
        }

        public Builder schemaRegistryUrls(Output<List<String>> schemaRegistryUrls) {
            $.schemaRegistryUrls = schemaRegistryUrls;
            return this;
        }

        public Builder schemaRegistryUrls(List<String> schemaRegistryUrls) {
            return schemaRegistryUrls(Output.of(schemaRegistryUrls));
        }

        public Builder schemaRegistryUrls(String... schemaRegistryUrls) {
            return schemaRegistryUrls(List.of(schemaRegistryUrls));
        }

        public Builder secret(Output<String> secret) {
            $.secret = secret;
            return this;
        }

        public Builder secret(String secret) {
            return secret(Output.of(secret));
        }

        public Builder secretKey(Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        public Builder secrets(Output<String> secrets) {
            $.secrets = secrets;
            return this;
        }

        public Builder secrets(String secrets) {
            return secrets(Output.of(secrets));
        }

        public Builder secretsLists(Output<List<GetConnectorConfigSecretsListArgs>> secretsLists) {
            $.secretsLists = secretsLists;
            return this;
        }

        public Builder secretsLists(List<GetConnectorConfigSecretsListArgs> secretsLists) {
            return secretsLists(Output.of(secretsLists));
        }

        public Builder secretsLists(GetConnectorConfigSecretsListArgs... secretsLists) {
            return secretsLists(List.of(secretsLists));
        }

        public Builder securityProtocol(Output<String> securityProtocol) {
            $.securityProtocol = securityProtocol;
            return this;
        }

        public Builder securityProtocol(String securityProtocol) {
            return securityProtocol(Output.of(securityProtocol));
        }

        public Builder segments(Output<List<String>> segments) {
            $.segments = segments;
            return this;
        }

        public Builder segments(List<String> segments) {
            return segments(Output.of(segments));
        }

        public Builder segments(String... segments) {
            return segments(List.of(segments));
        }

        public Builder selectedExports(Output<List<String>> selectedExports) {
            $.selectedExports = selectedExports;
            return this;
        }

        public Builder selectedExports(List<String> selectedExports) {
            return selectedExports(Output.of(selectedExports));
        }

        public Builder selectedExports(String... selectedExports) {
            return selectedExports(List.of(selectedExports));
        }

        public Builder senderId(Output<String> senderId) {
            $.senderId = senderId;
            return this;
        }

        public Builder senderId(String senderId) {
            return senderId(Output.of(senderId));
        }

        public Builder senderPassword(Output<String> senderPassword) {
            $.senderPassword = senderPassword;
            return this;
        }

        public Builder senderPassword(String senderPassword) {
            return senderPassword(Output.of(senderPassword));
        }

        public Builder serverAddress(Output<String> serverAddress) {
            $.serverAddress = serverAddress;
            return this;
        }

        public Builder serverAddress(String serverAddress) {
            return serverAddress(Output.of(serverAddress));
        }

        public Builder serverUrl(Output<String> serverUrl) {
            $.serverUrl = serverUrl;
            return this;
        }

        public Builder serverUrl(String serverUrl) {
            return serverUrl(Output.of(serverUrl));
        }

        public Builder servers(Output<List<String>> servers) {
            $.servers = servers;
            return this;
        }

        public Builder servers(List<String> servers) {
            return servers(Output.of(servers));
        }

        public Builder servers(String... servers) {
            return servers(List.of(servers));
        }

        public Builder serviceAccount(Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        public Builder serviceAccountEmail(Output<String> serviceAccountEmail) {
            $.serviceAccountEmail = serviceAccountEmail;
            return this;
        }

        public Builder serviceAccountEmail(String serviceAccountEmail) {
            return serviceAccountEmail(Output.of(serviceAccountEmail));
        }

        public Builder serviceAccountKey(Output<String> serviceAccountKey) {
            $.serviceAccountKey = serviceAccountKey;
            return this;
        }

        public Builder serviceAccountKey(String serviceAccountKey) {
            return serviceAccountKey(Output.of(serviceAccountKey));
        }

        public Builder serviceVersion(Output<String> serviceVersion) {
            $.serviceVersion = serviceVersion;
            return this;
        }

        public Builder serviceVersion(String serviceVersion) {
            return serviceVersion(Output.of(serviceVersion));
        }

        public Builder sftpHost(Output<String> sftpHost) {
            $.sftpHost = sftpHost;
            return this;
        }

        public Builder sftpHost(String sftpHost) {
            return sftpHost(Output.of(sftpHost));
        }

        public Builder sftpIsKeyPair(Output<String> sftpIsKeyPair) {
            $.sftpIsKeyPair = sftpIsKeyPair;
            return this;
        }

        public Builder sftpIsKeyPair(String sftpIsKeyPair) {
            return sftpIsKeyPair(Output.of(sftpIsKeyPair));
        }

        public Builder sftpPassword(Output<String> sftpPassword) {
            $.sftpPassword = sftpPassword;
            return this;
        }

        public Builder sftpPassword(String sftpPassword) {
            return sftpPassword(Output.of(sftpPassword));
        }

        public Builder sftpPort(Output<String> sftpPort) {
            $.sftpPort = sftpPort;
            return this;
        }

        public Builder sftpPort(String sftpPort) {
            return sftpPort(Output.of(sftpPort));
        }

        public Builder sftpPublicKey(Output<String> sftpPublicKey) {
            $.sftpPublicKey = sftpPublicKey;
            return this;
        }

        public Builder sftpPublicKey(String sftpPublicKey) {
            return sftpPublicKey(Output.of(sftpPublicKey));
        }

        public Builder sftpUser(Output<String> sftpUser) {
            $.sftpUser = sftpUser;
            return this;
        }

        public Builder sftpUser(String sftpUser) {
            return sftpUser(Output.of(sftpUser));
        }

        public Builder shareUrl(Output<String> shareUrl) {
            $.shareUrl = shareUrl;
            return this;
        }

        public Builder shareUrl(String shareUrl) {
            return shareUrl(Output.of(shareUrl));
        }

        public Builder sheetId(Output<String> sheetId) {
            $.sheetId = sheetId;
            return this;
        }

        public Builder sheetId(String sheetId) {
            return sheetId(Output.of(sheetId));
        }

        public Builder shop(Output<String> shop) {
            $.shop = shop;
            return this;
        }

        public Builder shop(String shop) {
            return shop(Output.of(shop));
        }

        public Builder shortCode(Output<String> shortCode) {
            $.shortCode = shortCode;
            return this;
        }

        public Builder shortCode(String shortCode) {
            return shortCode(Output.of(shortCode));
        }

        public Builder showRecordsWithNoMetrics(Output<String> showRecordsWithNoMetrics) {
            $.showRecordsWithNoMetrics = showRecordsWithNoMetrics;
            return this;
        }

        public Builder showRecordsWithNoMetrics(String showRecordsWithNoMetrics) {
            return showRecordsWithNoMetrics(Output.of(showRecordsWithNoMetrics));
        }

        public Builder sid(Output<String> sid) {
            $.sid = sid;
            return this;
        }

        public Builder sid(String sid) {
            return sid(Output.of(sid));
        }

        public Builder signerPublicKey(Output<String> signerPublicKey) {
            $.signerPublicKey = signerPublicKey;
            return this;
        }

        public Builder signerPublicKey(String signerPublicKey) {
            return signerPublicKey(Output.of(signerPublicKey));
        }

        public Builder siteAddress(Output<String> siteAddress) {
            $.siteAddress = siteAddress;
            return this;
        }

        public Builder siteAddress(String siteAddress) {
            return siteAddress(Output.of(siteAddress));
        }

        public Builder siteId(Output<String> siteId) {
            $.siteId = siteId;
            return this;
        }

        public Builder siteId(String siteId) {
            return siteId(Output.of(siteId));
        }

        public Builder siteName(Output<String> siteName) {
            $.siteName = siteName;
            return this;
        }

        public Builder siteName(String siteName) {
            return siteName(Output.of(siteName));
        }

        public Builder siteUrls(Output<List<String>> siteUrls) {
            $.siteUrls = siteUrls;
            return this;
        }

        public Builder siteUrls(List<String> siteUrls) {
            return siteUrls(Output.of(siteUrls));
        }

        public Builder siteUrls(String... siteUrls) {
            return siteUrls(List.of(siteUrls));
        }

        public Builder skipAfter(Output<String> skipAfter) {
            $.skipAfter = skipAfter;
            return this;
        }

        public Builder skipAfter(String skipAfter) {
            return skipAfter(Output.of(skipAfter));
        }

        public Builder skipBefore(Output<String> skipBefore) {
            $.skipBefore = skipBefore;
            return this;
        }

        public Builder skipBefore(String skipBefore) {
            return skipBefore(Output.of(skipBefore));
        }

        public Builder soapUri(Output<String> soapUri) {
            $.soapUri = soapUri;
            return this;
        }

        public Builder soapUri(String soapUri) {
            return soapUri(Output.of(soapUri));
        }

        public Builder socialDataSyncTimeframe(Output<String> socialDataSyncTimeframe) {
            $.socialDataSyncTimeframe = socialDataSyncTimeframe;
            return this;
        }

        public Builder socialDataSyncTimeframe(String socialDataSyncTimeframe) {
            return socialDataSyncTimeframe(Output.of(socialDataSyncTimeframe));
        }

        public Builder source(Output<String> source) {
            $.source = source;
            return this;
        }

        public Builder source(String source) {
            return source(Output.of(source));
        }

        public Builder storeHash(Output<String> storeHash) {
            $.storeHash = storeHash;
            return this;
        }

        public Builder storeHash(String storeHash) {
            return storeHash(Output.of(storeHash));
        }

        public Builder subDomain(Output<String> subDomain) {
            $.subDomain = subDomain;
            return this;
        }

        public Builder subDomain(String subDomain) {
            return subDomain(Output.of(subDomain));
        }

        public Builder subdomain(Output<String> subdomain) {
            $.subdomain = subdomain;
            return this;
        }

        public Builder subdomain(String subdomain) {
            return subdomain(Output.of(subdomain));
        }

        public Builder subscriberName(Output<String> subscriberName) {
            $.subscriberName = subscriberName;
            return this;
        }

        public Builder subscriberName(String subscriberName) {
            return subscriberName(Output.of(subscriberName));
        }

        public Builder subscription(Output<String> subscription) {
            $.subscription = subscription;
            return this;
        }

        public Builder subscription(String subscription) {
            return subscription(Output.of(subscription));
        }

        public Builder supportConnectedAccountsSync(Output<String> supportConnectedAccountsSync) {
            $.supportConnectedAccountsSync = supportConnectedAccountsSync;
            return this;
        }

        public Builder supportConnectedAccountsSync(String supportConnectedAccountsSync) {
            return supportConnectedAccountsSync(Output.of(supportConnectedAccountsSync));
        }

        public Builder supportNestedColumns(Output<String> supportNestedColumns) {
            $.supportNestedColumns = supportNestedColumns;
            return this;
        }

        public Builder supportNestedColumns(String supportNestedColumns) {
            return supportNestedColumns(Output.of(supportNestedColumns));
        }

        public Builder surveyIds(Output<String> surveyIds) {
            $.surveyIds = surveyIds;
            return this;
        }

        public Builder surveyIds(String surveyIds) {
            return surveyIds(Output.of(surveyIds));
        }

        public Builder swipeAttributionWindow(Output<String> swipeAttributionWindow) {
            $.swipeAttributionWindow = swipeAttributionWindow;
            return this;
        }

        public Builder swipeAttributionWindow(String swipeAttributionWindow) {
            return swipeAttributionWindow(Output.of(swipeAttributionWindow));
        }

        public Builder syncDataLocker(Output<String> syncDataLocker) {
            $.syncDataLocker = syncDataLocker;
            return this;
        }

        public Builder syncDataLocker(String syncDataLocker) {
            return syncDataLocker(Output.of(syncDataLocker));
        }

        public Builder syncFormat(Output<String> syncFormat) {
            $.syncFormat = syncFormat;
            return this;
        }

        public Builder syncFormat(String syncFormat) {
            return syncFormat(Output.of(syncFormat));
        }

        public Builder syncFormulaFields(Output<String> syncFormulaFields) {
            $.syncFormulaFields = syncFormulaFields;
            return this;
        }

        public Builder syncFormulaFields(String syncFormulaFields) {
            return syncFormulaFields(Output.of(syncFormulaFields));
        }

        public Builder syncMetadata(Output<String> syncMetadata) {
            $.syncMetadata = syncMetadata;
            return this;
        }

        public Builder syncMetadata(String syncMetadata) {
            return syncMetadata(Output.of(syncMetadata));
        }

        public Builder syncMethod(Output<String> syncMethod) {
            $.syncMethod = syncMethod;
            return this;
        }

        public Builder syncMethod(String syncMethod) {
            return syncMethod(Output.of(syncMethod));
        }

        public Builder syncMode(Output<String> syncMode) {
            $.syncMode = syncMode;
            return this;
        }

        public Builder syncMode(String syncMode) {
            return syncMode(Output.of(syncMode));
        }

        public Builder syncMultipleAccounts(Output<String> syncMultipleAccounts) {
            $.syncMultipleAccounts = syncMultipleAccounts;
            return this;
        }

        public Builder syncMultipleAccounts(String syncMultipleAccounts) {
            return syncMultipleAccounts(Output.of(syncMultipleAccounts));
        }

        public Builder syncPackMode(Output<String> syncPackMode) {
            $.syncPackMode = syncPackMode;
            return this;
        }

        public Builder syncPackMode(String syncPackMode) {
            return syncPackMode(Output.of(syncPackMode));
        }

        public Builder syncPullApi(Output<String> syncPullApi) {
            $.syncPullApi = syncPullApi;
            return this;
        }

        public Builder syncPullApi(String syncPullApi) {
            return syncPullApi(Output.of(syncPullApi));
        }

        public Builder syncType(Output<String> syncType) {
            $.syncType = syncType;
            return this;
        }

        public Builder syncType(String syncType) {
            return syncType(Output.of(syncType));
        }

        public Builder sysnr(Output<String> sysnr) {
            $.sysnr = sysnr;
            return this;
        }

        public Builder sysnr(String sysnr) {
            return sysnr(Output.of(sysnr));
        }

        public Builder tableName(Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public Builder tdeCertificate(Output<String> tdeCertificate) {
            $.tdeCertificate = tdeCertificate;
            return this;
        }

        public Builder tdeCertificate(String tdeCertificate) {
            return tdeCertificate(Output.of(tdeCertificate));
        }

        public Builder tdeCertificateName(Output<String> tdeCertificateName) {
            $.tdeCertificateName = tdeCertificateName;
            return this;
        }

        public Builder tdeCertificateName(String tdeCertificateName) {
            return tdeCertificateName(Output.of(tdeCertificateName));
        }

        public Builder tdePassword(Output<String> tdePassword) {
            $.tdePassword = tdePassword;
            return this;
        }

        public Builder tdePassword(String tdePassword) {
            return tdePassword(Output.of(tdePassword));
        }

        public Builder tdePrivateKey(Output<String> tdePrivateKey) {
            $.tdePrivateKey = tdePrivateKey;
            return this;
        }

        public Builder tdePrivateKey(String tdePrivateKey) {
            return tdePrivateKey(Output.of(tdePrivateKey));
        }

        public Builder teamId(Output<String> teamId) {
            $.teamId = teamId;
            return this;
        }

        public Builder teamId(String teamId) {
            return teamId(Output.of(teamId));
        }

        public Builder technicalAccountId(Output<String> technicalAccountId) {
            $.technicalAccountId = technicalAccountId;
            return this;
        }

        public Builder technicalAccountId(String technicalAccountId) {
            return technicalAccountId(Output.of(technicalAccountId));
        }

        public Builder templateLabels(Output<List<String>> templateLabels) {
            $.templateLabels = templateLabels;
            return this;
        }

        public Builder templateLabels(List<String> templateLabels) {
            return templateLabels(Output.of(templateLabels));
        }

        public Builder templateLabels(String... templateLabels) {
            return templateLabels(List.of(templateLabels));
        }

        public Builder tenant(Output<String> tenant) {
            $.tenant = tenant;
            return this;
        }

        public Builder tenant(String tenant) {
            return tenant(Output.of(tenant));
        }

        public Builder tenantId(Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public Builder testTableName(Output<String> testTableName) {
            $.testTableName = testTableName;
            return this;
        }

        public Builder testTableName(String testTableName) {
            return testTableName(Output.of(testTableName));
        }

        public Builder timeZone(Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public Builder timeframeMonths(Output<String> timeframeMonths) {
            $.timeframeMonths = timeframeMonths;
            return this;
        }

        public Builder timeframeMonths(String timeframeMonths) {
            return timeframeMonths(Output.of(timeframeMonths));
        }

        public Builder tns(Output<String> tns) {
            $.tns = tns;
            return this;
        }

        public Builder tns(String tns) {
            return tns(Output.of(tns));
        }

        public Builder tokenAuthenticatedContainer(Output<String> tokenAuthenticatedContainer) {
            $.tokenAuthenticatedContainer = tokenAuthenticatedContainer;
            return this;
        }

        public Builder tokenAuthenticatedContainer(String tokenAuthenticatedContainer) {
            return tokenAuthenticatedContainer(Output.of(tokenAuthenticatedContainer));
        }

        public Builder tokenAuthenticatedDatabase(Output<String> tokenAuthenticatedDatabase) {
            $.tokenAuthenticatedDatabase = tokenAuthenticatedDatabase;
            return this;
        }

        public Builder tokenAuthenticatedDatabase(String tokenAuthenticatedDatabase) {
            return tokenAuthenticatedDatabase(Output.of(tokenAuthenticatedDatabase));
        }

        public Builder tokenId(Output<String> tokenId) {
            $.tokenId = tokenId;
            return this;
        }

        public Builder tokenId(String tokenId) {
            return tokenId(Output.of(tokenId));
        }

        public Builder tokenKey(Output<String> tokenKey) {
            $.tokenKey = tokenKey;
            return this;
        }

        public Builder tokenKey(String tokenKey) {
            return tokenKey(Output.of(tokenKey));
        }

        public Builder tokenSecret(Output<String> tokenSecret) {
            $.tokenSecret = tokenSecret;
            return this;
        }

        public Builder tokenSecret(String tokenSecret) {
            return tokenSecret(Output.of(tokenSecret));
        }

        public Builder tokenSecretKey(Output<String> tokenSecretKey) {
            $.tokenSecretKey = tokenSecretKey;
            return this;
        }

        public Builder tokenSecretKey(String tokenSecretKey) {
            return tokenSecretKey(Output.of(tokenSecretKey));
        }

        public Builder topics(Output<List<String>> topics) {
            $.topics = topics;
            return this;
        }

        public Builder topics(List<String> topics) {
            return topics(Output.of(topics));
        }

        public Builder topics(String... topics) {
            return topics(List.of(topics));
        }

        public Builder trustStoreType(Output<String> trustStoreType) {
            $.trustStoreType = trustStoreType;
            return this;
        }

        public Builder trustStoreType(String trustStoreType) {
            return trustStoreType(Output.of(trustStoreType));
        }

        public Builder trustedCert(Output<String> trustedCert) {
            $.trustedCert = trustedCert;
            return this;
        }

        public Builder trustedCert(String trustedCert) {
            return trustedCert(Output.of(trustedCert));
        }

        public Builder truststore(Output<String> truststore) {
            $.truststore = truststore;
            return this;
        }

        public Builder truststore(String truststore) {
            return truststore(Output.of(truststore));
        }

        public Builder tunnelHost(Output<String> tunnelHost) {
            $.tunnelHost = tunnelHost;
            return this;
        }

        public Builder tunnelHost(String tunnelHost) {
            return tunnelHost(Output.of(tunnelHost));
        }

        public Builder tunnelPort(Output<String> tunnelPort) {
            $.tunnelPort = tunnelPort;
            return this;
        }

        public Builder tunnelPort(String tunnelPort) {
            return tunnelPort(Output.of(tunnelPort));
        }

        public Builder tunnelUser(Output<String> tunnelUser) {
            $.tunnelUser = tunnelUser;
            return this;
        }

        public Builder tunnelUser(String tunnelUser) {
            return tunnelUser(Output.of(tunnelUser));
        }

        public Builder uniqueId(Output<String> uniqueId) {
            $.uniqueId = uniqueId;
            return this;
        }

        public Builder uniqueId(String uniqueId) {
            return uniqueId(Output.of(uniqueId));
        }

        public Builder updateConfigOnEachSync(Output<String> updateConfigOnEachSync) {
            $.updateConfigOnEachSync = updateConfigOnEachSync;
            return this;
        }

        public Builder updateConfigOnEachSync(String updateConfigOnEachSync) {
            return updateConfigOnEachSync(Output.of(updateConfigOnEachSync));
        }

        public Builder updateMethod(Output<String> updateMethod) {
            $.updateMethod = updateMethod;
            return this;
        }

        public Builder updateMethod(String updateMethod) {
            return updateMethod(Output.of(updateMethod));
        }

        public Builder uri(Output<String> uri) {
            $.uri = uri;
            return this;
        }

        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public Builder useApiKeys(Output<String> useApiKeys) {
            $.useApiKeys = useApiKeys;
            return this;
        }

        public Builder useApiKeys(String useApiKeys) {
            return useApiKeys(Output.of(useApiKeys));
        }

        public Builder useCustomerBucket(Output<String> useCustomerBucket) {
            $.useCustomerBucket = useCustomerBucket;
            return this;
        }

        public Builder useCustomerBucket(String useCustomerBucket) {
            return useCustomerBucket(Output.of(useCustomerBucket));
        }

        public Builder useOracleRac(Output<String> useOracleRac) {
            $.useOracleRac = useOracleRac;
            return this;
        }

        public Builder useOracleRac(String useOracleRac) {
            return useOracleRac(Output.of(useOracleRac));
        }

        public Builder usePgpEncryptionOptions(Output<String> usePgpEncryptionOptions) {
            $.usePgpEncryptionOptions = usePgpEncryptionOptions;
            return this;
        }

        public Builder usePgpEncryptionOptions(String usePgpEncryptionOptions) {
            return usePgpEncryptionOptions(Output.of(usePgpEncryptionOptions));
        }

        public Builder useServiceAccount(Output<String> useServiceAccount) {
            $.useServiceAccount = useServiceAccount;
            return this;
        }

        public Builder useServiceAccount(String useServiceAccount) {
            return useServiceAccount(Output.of(useServiceAccount));
        }

        public Builder useTemplateLabels(Output<String> useTemplateLabels) {
            $.useTemplateLabels = useTemplateLabels;
            return this;
        }

        public Builder useTemplateLabels(String useTemplateLabels) {
            return useTemplateLabels(Output.of(useTemplateLabels));
        }

        public Builder useWebhooks(Output<String> useWebhooks) {
            $.useWebhooks = useWebhooks;
            return this;
        }

        public Builder useWebhooks(String useWebhooks) {
            return useWebhooks(Output.of(useWebhooks));
        }

        public Builder useWorkspace(Output<String> useWorkspace) {
            $.useWorkspace = useWorkspace;
            return this;
        }

        public Builder useWorkspace(String useWorkspace) {
            return useWorkspace(Output.of(useWorkspace));
        }

        public Builder user(Output<String> user) {
            $.user = user;
            return this;
        }

        public Builder user(String user) {
            return user(Output.of(user));
        }

        public Builder userId(Output<String> userId) {
            $.userId = userId;
            return this;
        }

        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public Builder userKey(Output<String> userKey) {
            $.userKey = userKey;
            return this;
        }

        public Builder userKey(String userKey) {
            return userKey(Output.of(userKey));
        }

        public Builder userName(Output<String> userName) {
            $.userName = userName;
            return this;
        }

        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public Builder userProfiles(Output<List<String>> userProfiles) {
            $.userProfiles = userProfiles;
            return this;
        }

        public Builder userProfiles(List<String> userProfiles) {
            return userProfiles(Output.of(userProfiles));
        }

        public Builder userProfiles(String... userProfiles) {
            return userProfiles(List.of(userProfiles));
        }

        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        public Builder username(String username) {
            return username(Output.of(username));
        }

        public Builder viewAttributionWindow(Output<String> viewAttributionWindow) {
            $.viewAttributionWindow = viewAttributionWindow;
            return this;
        }

        public Builder viewAttributionWindow(String viewAttributionWindow) {
            return viewAttributionWindow(Output.of(viewAttributionWindow));
        }

        public Builder viewThroughAttributionWindowSize(Output<String> viewThroughAttributionWindowSize) {
            $.viewThroughAttributionWindowSize = viewThroughAttributionWindowSize;
            return this;
        }

        public Builder viewThroughAttributionWindowSize(String viewThroughAttributionWindowSize) {
            return viewThroughAttributionWindowSize(Output.of(viewThroughAttributionWindowSize));
        }

        public Builder webhookEndpoint(Output<String> webhookEndpoint) {
            $.webhookEndpoint = webhookEndpoint;
            return this;
        }

        public Builder webhookEndpoint(String webhookEndpoint) {
            return webhookEndpoint(Output.of(webhookEndpoint));
        }

        public Builder webhookKey(Output<String> webhookKey) {
            $.webhookKey = webhookKey;
            return this;
        }

        public Builder webhookKey(String webhookKey) {
            return webhookKey(Output.of(webhookKey));
        }

        public Builder webhookUrl(Output<String> webhookUrl) {
            $.webhookUrl = webhookUrl;
            return this;
        }

        public Builder webhookUrl(String webhookUrl) {
            return webhookUrl(Output.of(webhookUrl));
        }

        public Builder wordPressSiteIdOrWoocommerceDomainName(Output<String> wordPressSiteIdOrWoocommerceDomainName) {
            $.wordPressSiteIdOrWoocommerceDomainName = wordPressSiteIdOrWoocommerceDomainName;
            return this;
        }

        public Builder wordPressSiteIdOrWoocommerceDomainName(String wordPressSiteIdOrWoocommerceDomainName) {
            return wordPressSiteIdOrWoocommerceDomainName(Output.of(wordPressSiteIdOrWoocommerceDomainName));
        }

        public Builder workspaceName(Output<String> workspaceName) {
            $.workspaceName = workspaceName;
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            return workspaceName(Output.of(workspaceName));
        }

        public Builder workspaceSameAsSource(Output<String> workspaceSameAsSource) {
            $.workspaceSameAsSource = workspaceSameAsSource;
            return this;
        }

        public Builder workspaceSameAsSource(String workspaceSameAsSource) {
            return workspaceSameAsSource(Output.of(workspaceSameAsSource));
        }

        public Builder workspaceSchema(Output<String> workspaceSchema) {
            $.workspaceSchema = workspaceSchema;
            return this;
        }

        public Builder workspaceSchema(String workspaceSchema) {
            return workspaceSchema(Output.of(workspaceSchema));
        }

        public Builder wsCertificate(Output<String> wsCertificate) {
            $.wsCertificate = wsCertificate;
            return this;
        }

        public Builder wsCertificate(String wsCertificate) {
            return wsCertificate(Output.of(wsCertificate));
        }

        public GetConnectorConfigArgs build() {
            $.absConnectionMethod = Objects.requireNonNull($.absConnectionMethod, "expected parameter 'absConnectionMethod' to be non-null");
            $.absConnectionString = Objects.requireNonNull($.absConnectionString, "expected parameter 'absConnectionString' to be non-null");
            $.absContainerAddress = Objects.requireNonNull($.absContainerAddress, "expected parameter 'absContainerAddress' to be non-null");
            $.absContainerName = Objects.requireNonNull($.absContainerName, "expected parameter 'absContainerName' to be non-null");
            $.absHostIp = Objects.requireNonNull($.absHostIp, "expected parameter 'absHostIp' to be non-null");
            $.absHostUser = Objects.requireNonNull($.absHostUser, "expected parameter 'absHostUser' to be non-null");
            $.absPrefix = Objects.requireNonNull($.absPrefix, "expected parameter 'absPrefix' to be non-null");
            $.absPublicKey = Objects.requireNonNull($.absPublicKey, "expected parameter 'absPublicKey' to be non-null");
            $.accessKey = Objects.requireNonNull($.accessKey, "expected parameter 'accessKey' to be non-null");
            $.accessKeyId = Objects.requireNonNull($.accessKeyId, "expected parameter 'accessKeyId' to be non-null");
            $.accessKeySecret = Objects.requireNonNull($.accessKeySecret, "expected parameter 'accessKeySecret' to be non-null");
            $.accessToken = Objects.requireNonNull($.accessToken, "expected parameter 'accessToken' to be non-null");
            $.accessType = Objects.requireNonNull($.accessType, "expected parameter 'accessType' to be non-null");
            $.account = Objects.requireNonNull($.account, "expected parameter 'account' to be non-null");
            $.accountId = Objects.requireNonNull($.accountId, "expected parameter 'accountId' to be non-null");
            $.accountIds = Objects.requireNonNull($.accountIds, "expected parameter 'accountIds' to be non-null");
            $.accountKey = Objects.requireNonNull($.accountKey, "expected parameter 'accountKey' to be non-null");
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.accountSyncMode = Objects.requireNonNull($.accountSyncMode, "expected parameter 'accountSyncMode' to be non-null");
            $.accounts = Objects.requireNonNull($.accounts, "expected parameter 'accounts' to be non-null");
            $.accountsRedditAds = Objects.requireNonNull($.accountsRedditAds, "expected parameter 'accountsRedditAds' to be non-null");
            $.accountsSyncMode = Objects.requireNonNull($.accountsSyncMode, "expected parameter 'accountsSyncMode' to be non-null");
            $.actionBreakdowns = Objects.requireNonNull($.actionBreakdowns, "expected parameter 'actionBreakdowns' to be non-null");
            $.actionReportTime = Objects.requireNonNull($.actionReportTime, "expected parameter 'actionReportTime' to be non-null");
            $.adAnalytics = Objects.requireNonNull($.adAnalytics, "expected parameter 'adAnalytics' to be non-null");
            $.adUnitView = Objects.requireNonNull($.adUnitView, "expected parameter 'adUnitView' to be non-null");
            $.adminApiKey = Objects.requireNonNull($.adminApiKey, "expected parameter 'adminApiKey' to be non-null");
            $.adobeAnalyticsConfigurations = Objects.requireNonNull($.adobeAnalyticsConfigurations, "expected parameter 'adobeAnalyticsConfigurations' to be non-null");
            $.advertisables = Objects.requireNonNull($.advertisables, "expected parameter 'advertisables' to be non-null");
            $.advertisers = Objects.requireNonNull($.advertisers, "expected parameter 'advertisers' to be non-null");
            $.advertisersIds = Objects.requireNonNull($.advertisersIds, "expected parameter 'advertisersIds' to be non-null");
            $.advertisersSyncMode = Objects.requireNonNull($.advertisersSyncMode, "expected parameter 'advertisersSyncMode' to be non-null");
            $.agentHost = Objects.requireNonNull($.agentHost, "expected parameter 'agentHost' to be non-null");
            $.agentOraHome = Objects.requireNonNull($.agentOraHome, "expected parameter 'agentOraHome' to be non-null");
            $.agentPassword = Objects.requireNonNull($.agentPassword, "expected parameter 'agentPassword' to be non-null");
            $.agentPort = Objects.requireNonNull($.agentPort, "expected parameter 'agentPort' to be non-null");
            $.agentPublicCert = Objects.requireNonNull($.agentPublicCert, "expected parameter 'agentPublicCert' to be non-null");
            $.agentUser = Objects.requireNonNull($.agentUser, "expected parameter 'agentUser' to be non-null");
            $.aggregation = Objects.requireNonNull($.aggregation, "expected parameter 'aggregation' to be non-null");
            $.alwaysEncrypted = Objects.requireNonNull($.alwaysEncrypted, "expected parameter 'alwaysEncrypted' to be non-null");
            $.apiAccessToken = Objects.requireNonNull($.apiAccessToken, "expected parameter 'apiAccessToken' to be non-null");
            $.apiId = Objects.requireNonNull($.apiId, "expected parameter 'apiId' to be non-null");
            $.apiKey = Objects.requireNonNull($.apiKey, "expected parameter 'apiKey' to be non-null");
            $.apiKeyApiSecret = Objects.requireNonNull($.apiKeyApiSecret, "expected parameter 'apiKeyApiSecret' to be non-null");
            $.apiKeys = Objects.requireNonNull($.apiKeys, "expected parameter 'apiKeys' to be non-null");
            $.apiQuota = Objects.requireNonNull($.apiQuota, "expected parameter 'apiQuota' to be non-null");
            $.apiRequestsPerMinute = Objects.requireNonNull($.apiRequestsPerMinute, "expected parameter 'apiRequestsPerMinute' to be non-null");
            $.apiSecret = Objects.requireNonNull($.apiSecret, "expected parameter 'apiSecret' to be non-null");
            $.apiSecretKey = Objects.requireNonNull($.apiSecretKey, "expected parameter 'apiSecretKey' to be non-null");
            $.apiToken = Objects.requireNonNull($.apiToken, "expected parameter 'apiToken' to be non-null");
            $.apiType = Objects.requireNonNull($.apiType, "expected parameter 'apiType' to be non-null");
            $.apiUrl = Objects.requireNonNull($.apiUrl, "expected parameter 'apiUrl' to be non-null");
            $.apiUsage = Objects.requireNonNull($.apiUsage, "expected parameter 'apiUsage' to be non-null");
            $.apiUtilizationPercentage = Objects.requireNonNull($.apiUtilizationPercentage, "expected parameter 'apiUtilizationPercentage' to be non-null");
            $.apiVersion = Objects.requireNonNull($.apiVersion, "expected parameter 'apiVersion' to be non-null");
            $.appId = Objects.requireNonNull($.appId, "expected parameter 'appId' to be non-null");
            $.appIds = Objects.requireNonNull($.appIds, "expected parameter 'appIds' to be non-null");
            $.appIdsAppsflyers = Objects.requireNonNull($.appIdsAppsflyers, "expected parameter 'appIdsAppsflyers' to be non-null");
            $.appKey = Objects.requireNonNull($.appKey, "expected parameter 'appKey' to be non-null");
            $.appSpecificPassword = Objects.requireNonNull($.appSpecificPassword, "expected parameter 'appSpecificPassword' to be non-null");
            $.appSyncMode = Objects.requireNonNull($.appSyncMode, "expected parameter 'appSyncMode' to be non-null");
            $.appendFileOption = Objects.requireNonNull($.appendFileOption, "expected parameter 'appendFileOption' to be non-null");
            $.applicationKey = Objects.requireNonNull($.applicationKey, "expected parameter 'applicationKey' to be non-null");
            $.apps = Objects.requireNonNull($.apps, "expected parameter 'apps' to be non-null");
            $.archiveLogFormat = Objects.requireNonNull($.archiveLogFormat, "expected parameter 'archiveLogFormat' to be non-null");
            $.archiveLogPath = Objects.requireNonNull($.archiveLogPath, "expected parameter 'archiveLogPath' to be non-null");
            $.archivePattern = Objects.requireNonNull($.archivePattern, "expected parameter 'archivePattern' to be non-null");
            $.areSoapCredentialsProvided = Objects.requireNonNull($.areSoapCredentialsProvided, "expected parameter 'areSoapCredentialsProvided' to be non-null");
            $.asbIp = Objects.requireNonNull($.asbIp, "expected parameter 'asbIp' to be non-null");
            $.asmOption = Objects.requireNonNull($.asmOption, "expected parameter 'asmOption' to be non-null");
            $.asmOracleHome = Objects.requireNonNull($.asmOracleHome, "expected parameter 'asmOracleHome' to be non-null");
            $.asmPassword = Objects.requireNonNull($.asmPassword, "expected parameter 'asmPassword' to be non-null");
            $.asmTns = Objects.requireNonNull($.asmTns, "expected parameter 'asmTns' to be non-null");
            $.asmUser = Objects.requireNonNull($.asmUser, "expected parameter 'asmUser' to be non-null");
            $.attributionWindow = Objects.requireNonNull($.attributionWindow, "expected parameter 'attributionWindow' to be non-null");
            $.attributionWindowSize = Objects.requireNonNull($.attributionWindowSize, "expected parameter 'attributionWindowSize' to be non-null");
            $.auth = Objects.requireNonNull($.auth, "expected parameter 'auth' to be non-null");
            $.authMethod = Objects.requireNonNull($.authMethod, "expected parameter 'authMethod' to be non-null");
            $.authMode = Objects.requireNonNull($.authMode, "expected parameter 'authMode' to be non-null");
            $.authType = Objects.requireNonNull($.authType, "expected parameter 'authType' to be non-null");
            $.authorizationMethod = Objects.requireNonNull($.authorizationMethod, "expected parameter 'authorizationMethod' to be non-null");
            $.awsRegionCode = Objects.requireNonNull($.awsRegionCode, "expected parameter 'awsRegionCode' to be non-null");
            $.baseCurrency = Objects.requireNonNull($.baseCurrency, "expected parameter 'baseCurrency' to be non-null");
            $.baseDomain = Objects.requireNonNull($.baseDomain, "expected parameter 'baseDomain' to be non-null");
            $.baseId = Objects.requireNonNull($.baseId, "expected parameter 'baseId' to be non-null");
            $.baseUrl = Objects.requireNonNull($.baseUrl, "expected parameter 'baseUrl' to be non-null");
            $.bearerToken = Objects.requireNonNull($.bearerToken, "expected parameter 'bearerToken' to be non-null");
            $.blobSasUrl = Objects.requireNonNull($.blobSasUrl, "expected parameter 'blobSasUrl' to be non-null");
            $.breakdowns = Objects.requireNonNull($.breakdowns, "expected parameter 'breakdowns' to be non-null");
            $.bucket = Objects.requireNonNull($.bucket, "expected parameter 'bucket' to be non-null");
            $.bucketName = Objects.requireNonNull($.bucketName, "expected parameter 'bucketName' to be non-null");
            $.bucketService = Objects.requireNonNull($.bucketService, "expected parameter 'bucketService' to be non-null");
            $.businessId = Objects.requireNonNull($.businessId, "expected parameter 'businessId' to be non-null");
            $.businessUnitId = Objects.requireNonNull($.businessUnitId, "expected parameter 'businessUnitId' to be non-null");
            $.certificate = Objects.requireNonNull($.certificate, "expected parameter 'certificate' to be non-null");
            $.clickAttributionWindow = Objects.requireNonNull($.clickAttributionWindow, "expected parameter 'clickAttributionWindow' to be non-null");
            $.client = Objects.requireNonNull($.client, "expected parameter 'client' to be non-null");
            $.clientCert = Objects.requireNonNull($.clientCert, "expected parameter 'clientCert' to be non-null");
            $.clientCertKey = Objects.requireNonNull($.clientCertKey, "expected parameter 'clientCertKey' to be non-null");
            $.clientId = Objects.requireNonNull($.clientId, "expected parameter 'clientId' to be non-null");
            $.clientKey = Objects.requireNonNull($.clientKey, "expected parameter 'clientKey' to be non-null");
            $.clientName = Objects.requireNonNull($.clientName, "expected parameter 'clientName' to be non-null");
            $.clientSecret = Objects.requireNonNull($.clientSecret, "expected parameter 'clientSecret' to be non-null");
            $.cloudStorageType = Objects.requireNonNull($.cloudStorageType, "expected parameter 'cloudStorageType' to be non-null");
            $.columns = Objects.requireNonNull($.columns, "expected parameter 'columns' to be non-null");
            $.companyId = Objects.requireNonNull($.companyId, "expected parameter 'companyId' to be non-null");
            $.companyKey = Objects.requireNonNull($.companyKey, "expected parameter 'companyKey' to be non-null");
            $.companyRequestToken = Objects.requireNonNull($.companyRequestToken, "expected parameter 'companyRequestToken' to be non-null");
            $.companyUuid = Objects.requireNonNull($.companyUuid, "expected parameter 'companyUuid' to be non-null");
            $.compression = Objects.requireNonNull($.compression, "expected parameter 'compression' to be non-null");
            $.configMethod = Objects.requireNonNull($.configMethod, "expected parameter 'configMethod' to be non-null");
            $.configRepositoryUrl = Objects.requireNonNull($.configRepositoryUrl, "expected parameter 'configRepositoryUrl' to be non-null");
            $.configType = Objects.requireNonNull($.configType, "expected parameter 'configType' to be non-null");
            $.connectingUser = Objects.requireNonNull($.connectingUser, "expected parameter 'connectingUser' to be non-null");
            $.connectingUserEmail = Objects.requireNonNull($.connectingUserEmail, "expected parameter 'connectingUserEmail' to be non-null");
            $.connectionMethod = Objects.requireNonNull($.connectionMethod, "expected parameter 'connectionMethod' to be non-null");
            $.connectionString = Objects.requireNonNull($.connectionString, "expected parameter 'connectionString' to be non-null");
            $.connectionType = Objects.requireNonNull($.connectionType, "expected parameter 'connectionType' to be non-null");
            $.consumerGroup = Objects.requireNonNull($.consumerGroup, "expected parameter 'consumerGroup' to be non-null");
            $.consumerKey = Objects.requireNonNull($.consumerKey, "expected parameter 'consumerKey' to be non-null");
            $.consumerSecret = Objects.requireNonNull($.consumerSecret, "expected parameter 'consumerSecret' to be non-null");
            $.containerAddress = Objects.requireNonNull($.containerAddress, "expected parameter 'containerAddress' to be non-null");
            $.containerName = Objects.requireNonNull($.containerName, "expected parameter 'containerName' to be non-null");
            $.contentOwnerId = Objects.requireNonNull($.contentOwnerId, "expected parameter 'contentOwnerId' to be non-null");
            $.conversationWebhookUrl = Objects.requireNonNull($.conversationWebhookUrl, "expected parameter 'conversationWebhookUrl' to be non-null");
            $.conversionDimensions = Objects.requireNonNull($.conversionDimensions, "expected parameter 'conversionDimensions' to be non-null");
            $.conversionReportTime = Objects.requireNonNull($.conversionReportTime, "expected parameter 'conversionReportTime' to be non-null");
            $.conversionWindowSize = Objects.requireNonNull($.conversionWindowSize, "expected parameter 'conversionWindowSize' to be non-null");
            $.csvDefinition = Objects.requireNonNull($.csvDefinition, "expected parameter 'csvDefinition' to be non-null");
            $.currency = Objects.requireNonNull($.currency, "expected parameter 'currency' to be non-null");
            $.customEventSyncMode = Objects.requireNonNull($.customEventSyncMode, "expected parameter 'customEventSyncMode' to be non-null");
            $.customEvents = Objects.requireNonNull($.customEvents, "expected parameter 'customEvents' to be non-null");
            $.customFieldIds = Objects.requireNonNull($.customFieldIds, "expected parameter 'customFieldIds' to be non-null");
            $.customFloodlightVariables = Objects.requireNonNull($.customFloodlightVariables, "expected parameter 'customFloodlightVariables' to be non-null");
            $.customReports = Objects.requireNonNull($.customReports, "expected parameter 'customReports' to be non-null");
            $.customTables = Objects.requireNonNull($.customTables, "expected parameter 'customTables' to be non-null");
            $.customerId = Objects.requireNonNull($.customerId, "expected parameter 'customerId' to be non-null");
            $.customerListId = Objects.requireNonNull($.customerListId, "expected parameter 'customerListId' to be non-null");
            $.dailyApiCallLimit = Objects.requireNonNull($.dailyApiCallLimit, "expected parameter 'dailyApiCallLimit' to be non-null");
            $.dataAccessMethod = Objects.requireNonNull($.dataAccessMethod, "expected parameter 'dataAccessMethod' to be non-null");
            $.dataCenter = Objects.requireNonNull($.dataCenter, "expected parameter 'dataCenter' to be non-null");
            $.dataSetName = Objects.requireNonNull($.dataSetName, "expected parameter 'dataSetName' to be non-null");
            $.database = Objects.requireNonNull($.database, "expected parameter 'database' to be non-null");
            $.datasetId = Objects.requireNonNull($.datasetId, "expected parameter 'datasetId' to be non-null");
            $.datasource = Objects.requireNonNull($.datasource, "expected parameter 'datasource' to be non-null");
            $.dateGranularity = Objects.requireNonNull($.dateGranularity, "expected parameter 'dateGranularity' to be non-null");
            $.delimiter = Objects.requireNonNull($.delimiter, "expected parameter 'delimiter' to be non-null");
            $.dimensionAttributes = Objects.requireNonNull($.dimensionAttributes, "expected parameter 'dimensionAttributes' to be non-null");
            $.dimensions = Objects.requireNonNull($.dimensions, "expected parameter 'dimensions' to be non-null");
            $.distributedConnectorClusterSize = Objects.requireNonNull($.distributedConnectorClusterSize, "expected parameter 'distributedConnectorClusterSize' to be non-null");
            $.domain = Objects.requireNonNull($.domain, "expected parameter 'domain' to be non-null");
            $.domainHostName = Objects.requireNonNull($.domainHostName, "expected parameter 'domainHostName' to be non-null");
            $.domainName = Objects.requireNonNull($.domainName, "expected parameter 'domainName' to be non-null");
            $.domainType = Objects.requireNonNull($.domainType, "expected parameter 'domainType' to be non-null");
            $.elements = Objects.requireNonNull($.elements, "expected parameter 'elements' to be non-null");
            $.email = Objects.requireNonNull($.email, "expected parameter 'email' to be non-null");
            $.emptyHeader = Objects.requireNonNull($.emptyHeader, "expected parameter 'emptyHeader' to be non-null");
            $.enableAllDimensionCombinations = Objects.requireNonNull($.enableAllDimensionCombinations, "expected parameter 'enableAllDimensionCombinations' to be non-null");
            $.enableArchiveLogOnly = Objects.requireNonNull($.enableArchiveLogOnly, "expected parameter 'enableArchiveLogOnly' to be non-null");
            $.enableDataExtensionsSyncing = Objects.requireNonNull($.enableDataExtensionsSyncing, "expected parameter 'enableDataExtensionsSyncing' to be non-null");
            $.enableDistributedConnectorMode = Objects.requireNonNull($.enableDistributedConnectorMode, "expected parameter 'enableDistributedConnectorMode' to be non-null");
            $.enableEnrichments = Objects.requireNonNull($.enableEnrichments, "expected parameter 'enableEnrichments' to be non-null");
            $.enableExports = Objects.requireNonNull($.enableExports, "expected parameter 'enableExports' to be non-null");
            $.enableTde = Objects.requireNonNull($.enableTde, "expected parameter 'enableTde' to be non-null");
            $.encodedPublicKey = Objects.requireNonNull($.encodedPublicKey, "expected parameter 'encodedPublicKey' to be non-null");
            $.encryptionKey = Objects.requireNonNull($.encryptionKey, "expected parameter 'encryptionKey' to be non-null");
            $.endpoint = Objects.requireNonNull($.endpoint, "expected parameter 'endpoint' to be non-null");
            $.engagementAttributionWindow = Objects.requireNonNull($.engagementAttributionWindow, "expected parameter 'engagementAttributionWindow' to be non-null");
            $.enrichedExport = Objects.requireNonNull($.enrichedExport, "expected parameter 'enrichedExport' to be non-null");
            $.entityId = Objects.requireNonNull($.entityId, "expected parameter 'entityId' to be non-null");
            $.environment = Objects.requireNonNull($.environment, "expected parameter 'environment' to be non-null");
            $.escapeChar = Objects.requireNonNull($.escapeChar, "expected parameter 'escapeChar' to be non-null");
            $.euRegion = Objects.requireNonNull($.euRegion, "expected parameter 'euRegion' to be non-null");
            $.events = Objects.requireNonNull($.events, "expected parameter 'events' to be non-null");
            $.exportStorageType = Objects.requireNonNull($.exportStorageType, "expected parameter 'exportStorageType' to be non-null");
            $.externalId = Objects.requireNonNull($.externalId, "expected parameter 'externalId' to be non-null");
            $.fields = Objects.requireNonNull($.fields, "expected parameter 'fields' to be non-null");
            $.fileType = Objects.requireNonNull($.fileType, "expected parameter 'fileType' to be non-null");
            $.filter = Objects.requireNonNull($.filter, "expected parameter 'filter' to be non-null");
            $.financeAccountSyncMode = Objects.requireNonNull($.financeAccountSyncMode, "expected parameter 'financeAccountSyncMode' to be non-null");
            $.financeAccounts = Objects.requireNonNull($.financeAccounts, "expected parameter 'financeAccounts' to be non-null");
            $.folder = Objects.requireNonNull($.folder, "expected parameter 'folder' to be non-null");
            $.folderId = Objects.requireNonNull($.folderId, "expected parameter 'folderId' to be non-null");
            $.folderPath = Objects.requireNonNull($.folderPath, "expected parameter 'folderPath' to be non-null");
            $.forecastId = Objects.requireNonNull($.forecastId, "expected parameter 'forecastId' to be non-null");
            $.ftpHost = Objects.requireNonNull($.ftpHost, "expected parameter 'ftpHost' to be non-null");
            $.ftpPassword = Objects.requireNonNull($.ftpPassword, "expected parameter 'ftpPassword' to be non-null");
            $.ftpPort = Objects.requireNonNull($.ftpPort, "expected parameter 'ftpPort' to be non-null");
            $.ftpUser = Objects.requireNonNull($.ftpUser, "expected parameter 'ftpUser' to be non-null");
            $.function = Objects.requireNonNull($.function, "expected parameter 'function' to be non-null");
            $.functionApp = Objects.requireNonNull($.functionApp, "expected parameter 'functionApp' to be non-null");
            $.functionKey = Objects.requireNonNull($.functionKey, "expected parameter 'functionKey' to be non-null");
            $.functionName = Objects.requireNonNull($.functionName, "expected parameter 'functionName' to be non-null");
            $.functionTrigger = Objects.requireNonNull($.functionTrigger, "expected parameter 'functionTrigger' to be non-null");
            $.gcsBucket = Objects.requireNonNull($.gcsBucket, "expected parameter 'gcsBucket' to be non-null");
            $.gcsFolder = Objects.requireNonNull($.gcsFolder, "expected parameter 'gcsFolder' to be non-null");
            $.groupName = Objects.requireNonNull($.groupName, "expected parameter 'groupName' to be non-null");
            $.hasManagePermissions = Objects.requireNonNull($.hasManagePermissions, "expected parameter 'hasManagePermissions' to be non-null");
            $.homeFolder = Objects.requireNonNull($.homeFolder, "expected parameter 'homeFolder' to be non-null");
            $.host = Objects.requireNonNull($.host, "expected parameter 'host' to be non-null");
            $.hostIp = Objects.requireNonNull($.hostIp, "expected parameter 'hostIp' to be non-null");
            $.hostUser = Objects.requireNonNull($.hostUser, "expected parameter 'hostUser' to be non-null");
            $.hosts = Objects.requireNonNull($.hosts, "expected parameter 'hosts' to be non-null");
            $.identity = Objects.requireNonNull($.identity, "expected parameter 'identity' to be non-null");
            $.includeOcapiEndpoints = Objects.requireNonNull($.includeOcapiEndpoints, "expected parameter 'includeOcapiEndpoints' to be non-null");
            $.instance = Objects.requireNonNull($.instance, "expected parameter 'instance' to be non-null");
            $.instanceNumber = Objects.requireNonNull($.instanceNumber, "expected parameter 'instanceNumber' to be non-null");
            $.instanceUrl = Objects.requireNonNull($.instanceUrl, "expected parameter 'instanceUrl' to be non-null");
            $.integrationKey = Objects.requireNonNull($.integrationKey, "expected parameter 'integrationKey' to be non-null");
            $.isAccountLevelConnector = Objects.requireNonNull($.isAccountLevelConnector, "expected parameter 'isAccountLevelConnector' to be non-null");
            $.isAuth2Enabled = Objects.requireNonNull($.isAuth2Enabled, "expected parameter 'isAuth2Enabled' to be non-null");
            $.isCustomApiCredentials = Objects.requireNonNull($.isCustomApiCredentials, "expected parameter 'isCustomApiCredentials' to be non-null");
            $.isExternalActivitiesEndpointSelected = Objects.requireNonNull($.isExternalActivitiesEndpointSelected, "expected parameter 'isExternalActivitiesEndpointSelected' to be non-null");
            $.isFtps = Objects.requireNonNull($.isFtps, "expected parameter 'isFtps' to be non-null");
            $.isKeypair = Objects.requireNonNull($.isKeypair, "expected parameter 'isKeypair' to be non-null");
            $.isMultiEntityFeatureEnabled = Objects.requireNonNull($.isMultiEntityFeatureEnabled, "expected parameter 'isMultiEntityFeatureEnabled' to be non-null");
            $.isNewPackage = Objects.requireNonNull($.isNewPackage, "expected parameter 'isNewPackage' to be non-null");
            $.isPrivateKeyEncrypted = Objects.requireNonNull($.isPrivateKeyEncrypted, "expected parameter 'isPrivateKeyEncrypted' to be non-null");
            $.isPrivateLinkRequired = Objects.requireNonNull($.isPrivateLinkRequired, "expected parameter 'isPrivateLinkRequired' to be non-null");
            $.isPublic = Objects.requireNonNull($.isPublic, "expected parameter 'isPublic' to be non-null");
            $.isSailthruConnectEnabled = Objects.requireNonNull($.isSailthruConnectEnabled, "expected parameter 'isSailthruConnectEnabled' to be non-null");
            $.isSecure = Objects.requireNonNull($.isSecure, "expected parameter 'isSecure' to be non-null");
            $.isSingleTableMode = Objects.requireNonNull($.isSingleTableMode, "expected parameter 'isSingleTableMode' to be non-null");
            $.isVendor = Objects.requireNonNull($.isVendor, "expected parameter 'isVendor' to be non-null");
            $.jsonDeliveryMode = Objects.requireNonNull($.jsonDeliveryMode, "expected parameter 'jsonDeliveryMode' to be non-null");
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.keyPassword = Objects.requireNonNull($.keyPassword, "expected parameter 'keyPassword' to be non-null");
            $.keyStoreType = Objects.requireNonNull($.keyStoreType, "expected parameter 'keyStoreType' to be non-null");
            $.keystore = Objects.requireNonNull($.keystore, "expected parameter 'keystore' to be non-null");
            $.keystorePassword = Objects.requireNonNull($.keystorePassword, "expected parameter 'keystorePassword' to be non-null");
            $.lastSyncedChangesUtc_ = Objects.requireNonNull($.lastSyncedChangesUtc_, "expected parameter 'lastSyncedChangesUtc_' to be non-null");
            $.latestVersion = Objects.requireNonNull($.latestVersion, "expected parameter 'latestVersion' to be non-null");
            $.limitForApiCallsToExternalActivitiesEndpoint = Objects.requireNonNull($.limitForApiCallsToExternalActivitiesEndpoint, "expected parameter 'limitForApiCallsToExternalActivitiesEndpoint' to be non-null");
            $.lineSeparator = Objects.requireNonNull($.lineSeparator, "expected parameter 'lineSeparator' to be non-null");
            $.listStrategy = Objects.requireNonNull($.listStrategy, "expected parameter 'listStrategy' to be non-null");
            $.listSyncMode = Objects.requireNonNull($.listSyncMode, "expected parameter 'listSyncMode' to be non-null");
            $.logJournal = Objects.requireNonNull($.logJournal, "expected parameter 'logJournal' to be non-null");
            $.logJournalSchema = Objects.requireNonNull($.logJournalSchema, "expected parameter 'logJournalSchema' to be non-null");
            $.login = Objects.requireNonNull($.login, "expected parameter 'login' to be non-null");
            $.loginPassword = Objects.requireNonNull($.loginPassword, "expected parameter 'loginPassword' to be non-null");
            $.managerAccounts = Objects.requireNonNull($.managerAccounts, "expected parameter 'managerAccounts' to be non-null");
            $.merchantId = Objects.requireNonNull($.merchantId, "expected parameter 'merchantId' to be non-null");
            $.messageType = Objects.requireNonNull($.messageType, "expected parameter 'messageType' to be non-null");
            $.metrics = Objects.requireNonNull($.metrics, "expected parameter 'metrics' to be non-null");
            $.namedRange = Objects.requireNonNull($.namedRange, "expected parameter 'namedRange' to be non-null");
            $.namespace = Objects.requireNonNull($.namespace, "expected parameter 'namespace' to be non-null");
            $.networkCode = Objects.requireNonNull($.networkCode, "expected parameter 'networkCode' to be non-null");
            $.nullSequence = Objects.requireNonNull($.nullSequence, "expected parameter 'nullSequence' to be non-null");
            $.oauthToken = Objects.requireNonNull($.oauthToken, "expected parameter 'oauthToken' to be non-null");
            $.oauthTokenSecret = Objects.requireNonNull($.oauthTokenSecret, "expected parameter 'oauthTokenSecret' to be non-null");
            $.ocapiClientId = Objects.requireNonNull($.ocapiClientId, "expected parameter 'ocapiClientId' to be non-null");
            $.ocapiClientSecret = Objects.requireNonNull($.ocapiClientSecret, "expected parameter 'ocapiClientSecret' to be non-null");
            $.ocapiCustomObjectTypes = Objects.requireNonNull($.ocapiCustomObjectTypes, "expected parameter 'ocapiCustomObjectTypes' to be non-null");
            $.ocapiHostname = Objects.requireNonNull($.ocapiHostname, "expected parameter 'ocapiHostname' to be non-null");
            $.onError = Objects.requireNonNull($.onError, "expected parameter 'onError' to be non-null");
            $.onPremise = Objects.requireNonNull($.onPremise, "expected parameter 'onPremise' to be non-null");
            $.organization = Objects.requireNonNull($.organization, "expected parameter 'organization' to be non-null");
            $.organizationId = Objects.requireNonNull($.organizationId, "expected parameter 'organizationId' to be non-null");
            $.organizations = Objects.requireNonNull($.organizations, "expected parameter 'organizations' to be non-null");
            $.packedModeTables = Objects.requireNonNull($.packedModeTables, "expected parameter 'packedModeTables' to be non-null");
            $.packingMode = Objects.requireNonNull($.packingMode, "expected parameter 'packingMode' to be non-null");
            $.pages = Objects.requireNonNull($.pages, "expected parameter 'pages' to be non-null");
            $.partnerCode = Objects.requireNonNull($.partnerCode, "expected parameter 'partnerCode' to be non-null");
            $.partners = Objects.requireNonNull($.partners, "expected parameter 'partners' to be non-null");
            $.passphrase = Objects.requireNonNull($.passphrase, "expected parameter 'passphrase' to be non-null");
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.pat = Objects.requireNonNull($.pat, "expected parameter 'pat' to be non-null");
            $.patName = Objects.requireNonNull($.patName, "expected parameter 'patName' to be non-null");
            $.patSecret = Objects.requireNonNull($.patSecret, "expected parameter 'patSecret' to be non-null");
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            $.pattern = Objects.requireNonNull($.pattern, "expected parameter 'pattern' to be non-null");
            $.pdbName = Objects.requireNonNull($.pdbName, "expected parameter 'pdbName' to be non-null");
            $.pemCertificate = Objects.requireNonNull($.pemCertificate, "expected parameter 'pemCertificate' to be non-null");
            $.pemPrivateKey = Objects.requireNonNull($.pemPrivateKey, "expected parameter 'pemPrivateKey' to be non-null");
            $.perInteractionDimensions = Objects.requireNonNull($.perInteractionDimensions, "expected parameter 'perInteractionDimensions' to be non-null");
            $.personalAccessToken = Objects.requireNonNull($.personalAccessToken, "expected parameter 'personalAccessToken' to be non-null");
            $.pgpPassPhrase = Objects.requireNonNull($.pgpPassPhrase, "expected parameter 'pgpPassPhrase' to be non-null");
            $.pgpSecretKey = Objects.requireNonNull($.pgpSecretKey, "expected parameter 'pgpSecretKey' to be non-null");
            $.phoneNumber = Objects.requireNonNull($.phoneNumber, "expected parameter 'phoneNumber' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.postClickAttributionWindowSize = Objects.requireNonNull($.postClickAttributionWindowSize, "expected parameter 'postClickAttributionWindowSize' to be non-null");
            $.prebuiltReport = Objects.requireNonNull($.prebuiltReport, "expected parameter 'prebuiltReport' to be non-null");
            $.prefix = Objects.requireNonNull($.prefix, "expected parameter 'prefix' to be non-null");
            $.primaryKeys = Objects.requireNonNull($.primaryKeys, "expected parameter 'primaryKeys' to be non-null");
            $.privateKey = Objects.requireNonNull($.privateKey, "expected parameter 'privateKey' to be non-null");
            $.profiles = Objects.requireNonNull($.profiles, "expected parameter 'profiles' to be non-null");
            $.projectCredentials = Objects.requireNonNull($.projectCredentials, "expected parameter 'projectCredentials' to be non-null");
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            $.projects = Objects.requireNonNull($.projects, "expected parameter 'projects' to be non-null");
            $.properties = Objects.requireNonNull($.properties, "expected parameter 'properties' to be non-null");
            $.publicKey = Objects.requireNonNull($.publicKey, "expected parameter 'publicKey' to be non-null");
            $.publicationName = Objects.requireNonNull($.publicationName, "expected parameter 'publicationName' to be non-null");
            $.queryId = Objects.requireNonNull($.queryId, "expected parameter 'queryId' to be non-null");
            $.queryParamValue = Objects.requireNonNull($.queryParamValue, "expected parameter 'queryParamValue' to be non-null");
            $.refreshTokenExpiresAt = Objects.requireNonNull($.refreshTokenExpiresAt, "expected parameter 'refreshTokenExpiresAt' to be non-null");
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            $.replicaId = Objects.requireNonNull($.replicaId, "expected parameter 'replicaId' to be non-null");
            $.replicationSlot = Objects.requireNonNull($.replicationSlot, "expected parameter 'replicationSlot' to be non-null");
            $.reportConfigurationIds = Objects.requireNonNull($.reportConfigurationIds, "expected parameter 'reportConfigurationIds' to be non-null");
            $.reportFormatType = Objects.requireNonNull($.reportFormatType, "expected parameter 'reportFormatType' to be non-null");
            $.reportSuites = Objects.requireNonNull($.reportSuites, "expected parameter 'reportSuites' to be non-null");
            $.reportTimezone = Objects.requireNonNull($.reportTimezone, "expected parameter 'reportTimezone' to be non-null");
            $.reportType = Objects.requireNonNull($.reportType, "expected parameter 'reportType' to be non-null");
            $.reportUrl = Objects.requireNonNull($.reportUrl, "expected parameter 'reportUrl' to be non-null");
            $.reports = Objects.requireNonNull($.reports, "expected parameter 'reports' to be non-null");
            $.reportsLinkedinAds = Objects.requireNonNull($.reportsLinkedinAds, "expected parameter 'reportsLinkedinAds' to be non-null");
            $.repositories = Objects.requireNonNull($.repositories, "expected parameter 'repositories' to be non-null");
            $.resourceToken = Objects.requireNonNull($.resourceToken, "expected parameter 'resourceToken' to be non-null");
            $.resourceUrl = Objects.requireNonNull($.resourceUrl, "expected parameter 'resourceUrl' to be non-null");
            $.restApiLimit = Objects.requireNonNull($.restApiLimit, "expected parameter 'restApiLimit' to be non-null");
            $.rfcLibraryPath = Objects.requireNonNull($.rfcLibraryPath, "expected parameter 'rfcLibraryPath' to be non-null");
            $.role = Objects.requireNonNull($.role, "expected parameter 'role' to be non-null");
            $.roleArn = Objects.requireNonNull($.roleArn, "expected parameter 'roleArn' to be non-null");
            $.rollbackWindowSize = Objects.requireNonNull($.rollbackWindowSize, "expected parameter 'rollbackWindowSize' to be non-null");
            $.s3Bucket = Objects.requireNonNull($.s3Bucket, "expected parameter 's3Bucket' to be non-null");
            $.s3ExportBucket = Objects.requireNonNull($.s3ExportBucket, "expected parameter 's3ExportBucket' to be non-null");
            $.s3ExportFolder = Objects.requireNonNull($.s3ExportFolder, "expected parameter 's3ExportFolder' to be non-null");
            $.s3ExportRoleArn = Objects.requireNonNull($.s3ExportRoleArn, "expected parameter 's3ExportRoleArn' to be non-null");
            $.s3RoleArn = Objects.requireNonNull($.s3RoleArn, "expected parameter 's3RoleArn' to be non-null");
            $.s3bucket = Objects.requireNonNull($.s3bucket, "expected parameter 's3bucket' to be non-null");
            $.s3externalId = Objects.requireNonNull($.s3externalId, "expected parameter 's3externalId' to be non-null");
            $.s3folder = Objects.requireNonNull($.s3folder, "expected parameter 's3folder' to be non-null");
            $.s3path = Objects.requireNonNull($.s3path, "expected parameter 's3path' to be non-null");
            $.s3roleArn = Objects.requireNonNull($.s3roleArn, "expected parameter 's3roleArn' to be non-null");
            $.salesAccountSyncMode = Objects.requireNonNull($.salesAccountSyncMode, "expected parameter 'salesAccountSyncMode' to be non-null");
            $.salesAccounts = Objects.requireNonNull($.salesAccounts, "expected parameter 'salesAccounts' to be non-null");
            $.salesforceSecurityToken = Objects.requireNonNull($.salesforceSecurityToken, "expected parameter 'salesforceSecurityToken' to be non-null");
            $.sandboxAccount = Objects.requireNonNull($.sandboxAccount, "expected parameter 'sandboxAccount' to be non-null");
            $.sapSchema = Objects.requireNonNull($.sapSchema, "expected parameter 'sapSchema' to be non-null");
            $.sapUser = Objects.requireNonNull($.sapUser, "expected parameter 'sapUser' to be non-null");
            $.saslMechanism = Objects.requireNonNull($.saslMechanism, "expected parameter 'saslMechanism' to be non-null");
            $.saslPlainKey = Objects.requireNonNull($.saslPlainKey, "expected parameter 'saslPlainKey' to be non-null");
            $.saslPlainSecret = Objects.requireNonNull($.saslPlainSecret, "expected parameter 'saslPlainSecret' to be non-null");
            $.saslScram256Key = Objects.requireNonNull($.saslScram256Key, "expected parameter 'saslScram256Key' to be non-null");
            $.saslScram256Secret = Objects.requireNonNull($.saslScram256Secret, "expected parameter 'saslScram256Secret' to be non-null");
            $.saslScram512Key = Objects.requireNonNull($.saslScram512Key, "expected parameter 'saslScram512Key' to be non-null");
            $.saslScram512Secret = Objects.requireNonNull($.saslScram512Secret, "expected parameter 'saslScram512Secret' to be non-null");
            $.schemaRegistryCredentialsSource = Objects.requireNonNull($.schemaRegistryCredentialsSource, "expected parameter 'schemaRegistryCredentialsSource' to be non-null");
            $.schemaRegistryKey = Objects.requireNonNull($.schemaRegistryKey, "expected parameter 'schemaRegistryKey' to be non-null");
            $.schemaRegistrySecret = Objects.requireNonNull($.schemaRegistrySecret, "expected parameter 'schemaRegistrySecret' to be non-null");
            $.schemaRegistryUrls = Objects.requireNonNull($.schemaRegistryUrls, "expected parameter 'schemaRegistryUrls' to be non-null");
            $.secret = Objects.requireNonNull($.secret, "expected parameter 'secret' to be non-null");
            $.secretKey = Objects.requireNonNull($.secretKey, "expected parameter 'secretKey' to be non-null");
            $.secrets = Objects.requireNonNull($.secrets, "expected parameter 'secrets' to be non-null");
            $.secretsLists = Objects.requireNonNull($.secretsLists, "expected parameter 'secretsLists' to be non-null");
            $.securityProtocol = Objects.requireNonNull($.securityProtocol, "expected parameter 'securityProtocol' to be non-null");
            $.segments = Objects.requireNonNull($.segments, "expected parameter 'segments' to be non-null");
            $.selectedExports = Objects.requireNonNull($.selectedExports, "expected parameter 'selectedExports' to be non-null");
            $.senderId = Objects.requireNonNull($.senderId, "expected parameter 'senderId' to be non-null");
            $.senderPassword = Objects.requireNonNull($.senderPassword, "expected parameter 'senderPassword' to be non-null");
            $.serverAddress = Objects.requireNonNull($.serverAddress, "expected parameter 'serverAddress' to be non-null");
            $.serverUrl = Objects.requireNonNull($.serverUrl, "expected parameter 'serverUrl' to be non-null");
            $.servers = Objects.requireNonNull($.servers, "expected parameter 'servers' to be non-null");
            $.serviceAccount = Objects.requireNonNull($.serviceAccount, "expected parameter 'serviceAccount' to be non-null");
            $.serviceAccountEmail = Objects.requireNonNull($.serviceAccountEmail, "expected parameter 'serviceAccountEmail' to be non-null");
            $.serviceAccountKey = Objects.requireNonNull($.serviceAccountKey, "expected parameter 'serviceAccountKey' to be non-null");
            $.serviceVersion = Objects.requireNonNull($.serviceVersion, "expected parameter 'serviceVersion' to be non-null");
            $.sftpHost = Objects.requireNonNull($.sftpHost, "expected parameter 'sftpHost' to be non-null");
            $.sftpIsKeyPair = Objects.requireNonNull($.sftpIsKeyPair, "expected parameter 'sftpIsKeyPair' to be non-null");
            $.sftpPassword = Objects.requireNonNull($.sftpPassword, "expected parameter 'sftpPassword' to be non-null");
            $.sftpPort = Objects.requireNonNull($.sftpPort, "expected parameter 'sftpPort' to be non-null");
            $.sftpPublicKey = Objects.requireNonNull($.sftpPublicKey, "expected parameter 'sftpPublicKey' to be non-null");
            $.sftpUser = Objects.requireNonNull($.sftpUser, "expected parameter 'sftpUser' to be non-null");
            $.shareUrl = Objects.requireNonNull($.shareUrl, "expected parameter 'shareUrl' to be non-null");
            $.sheetId = Objects.requireNonNull($.sheetId, "expected parameter 'sheetId' to be non-null");
            $.shop = Objects.requireNonNull($.shop, "expected parameter 'shop' to be non-null");
            $.shortCode = Objects.requireNonNull($.shortCode, "expected parameter 'shortCode' to be non-null");
            $.showRecordsWithNoMetrics = Objects.requireNonNull($.showRecordsWithNoMetrics, "expected parameter 'showRecordsWithNoMetrics' to be non-null");
            $.sid = Objects.requireNonNull($.sid, "expected parameter 'sid' to be non-null");
            $.signerPublicKey = Objects.requireNonNull($.signerPublicKey, "expected parameter 'signerPublicKey' to be non-null");
            $.siteAddress = Objects.requireNonNull($.siteAddress, "expected parameter 'siteAddress' to be non-null");
            $.siteId = Objects.requireNonNull($.siteId, "expected parameter 'siteId' to be non-null");
            $.siteName = Objects.requireNonNull($.siteName, "expected parameter 'siteName' to be non-null");
            $.siteUrls = Objects.requireNonNull($.siteUrls, "expected parameter 'siteUrls' to be non-null");
            $.skipAfter = Objects.requireNonNull($.skipAfter, "expected parameter 'skipAfter' to be non-null");
            $.skipBefore = Objects.requireNonNull($.skipBefore, "expected parameter 'skipBefore' to be non-null");
            $.soapUri = Objects.requireNonNull($.soapUri, "expected parameter 'soapUri' to be non-null");
            $.socialDataSyncTimeframe = Objects.requireNonNull($.socialDataSyncTimeframe, "expected parameter 'socialDataSyncTimeframe' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            $.storeHash = Objects.requireNonNull($.storeHash, "expected parameter 'storeHash' to be non-null");
            $.subDomain = Objects.requireNonNull($.subDomain, "expected parameter 'subDomain' to be non-null");
            $.subdomain = Objects.requireNonNull($.subdomain, "expected parameter 'subdomain' to be non-null");
            $.subscriberName = Objects.requireNonNull($.subscriberName, "expected parameter 'subscriberName' to be non-null");
            $.subscription = Objects.requireNonNull($.subscription, "expected parameter 'subscription' to be non-null");
            $.supportConnectedAccountsSync = Objects.requireNonNull($.supportConnectedAccountsSync, "expected parameter 'supportConnectedAccountsSync' to be non-null");
            $.supportNestedColumns = Objects.requireNonNull($.supportNestedColumns, "expected parameter 'supportNestedColumns' to be non-null");
            $.surveyIds = Objects.requireNonNull($.surveyIds, "expected parameter 'surveyIds' to be non-null");
            $.swipeAttributionWindow = Objects.requireNonNull($.swipeAttributionWindow, "expected parameter 'swipeAttributionWindow' to be non-null");
            $.syncDataLocker = Objects.requireNonNull($.syncDataLocker, "expected parameter 'syncDataLocker' to be non-null");
            $.syncFormat = Objects.requireNonNull($.syncFormat, "expected parameter 'syncFormat' to be non-null");
            $.syncFormulaFields = Objects.requireNonNull($.syncFormulaFields, "expected parameter 'syncFormulaFields' to be non-null");
            $.syncMetadata = Objects.requireNonNull($.syncMetadata, "expected parameter 'syncMetadata' to be non-null");
            $.syncMethod = Objects.requireNonNull($.syncMethod, "expected parameter 'syncMethod' to be non-null");
            $.syncMode = Objects.requireNonNull($.syncMode, "expected parameter 'syncMode' to be non-null");
            $.syncMultipleAccounts = Objects.requireNonNull($.syncMultipleAccounts, "expected parameter 'syncMultipleAccounts' to be non-null");
            $.syncPackMode = Objects.requireNonNull($.syncPackMode, "expected parameter 'syncPackMode' to be non-null");
            $.syncPullApi = Objects.requireNonNull($.syncPullApi, "expected parameter 'syncPullApi' to be non-null");
            $.syncType = Objects.requireNonNull($.syncType, "expected parameter 'syncType' to be non-null");
            $.sysnr = Objects.requireNonNull($.sysnr, "expected parameter 'sysnr' to be non-null");
            $.tableName = Objects.requireNonNull($.tableName, "expected parameter 'tableName' to be non-null");
            $.tdeCertificate = Objects.requireNonNull($.tdeCertificate, "expected parameter 'tdeCertificate' to be non-null");
            $.tdeCertificateName = Objects.requireNonNull($.tdeCertificateName, "expected parameter 'tdeCertificateName' to be non-null");
            $.tdePassword = Objects.requireNonNull($.tdePassword, "expected parameter 'tdePassword' to be non-null");
            $.tdePrivateKey = Objects.requireNonNull($.tdePrivateKey, "expected parameter 'tdePrivateKey' to be non-null");
            $.teamId = Objects.requireNonNull($.teamId, "expected parameter 'teamId' to be non-null");
            $.technicalAccountId = Objects.requireNonNull($.technicalAccountId, "expected parameter 'technicalAccountId' to be non-null");
            $.templateLabels = Objects.requireNonNull($.templateLabels, "expected parameter 'templateLabels' to be non-null");
            $.tenant = Objects.requireNonNull($.tenant, "expected parameter 'tenant' to be non-null");
            $.tenantId = Objects.requireNonNull($.tenantId, "expected parameter 'tenantId' to be non-null");
            $.testTableName = Objects.requireNonNull($.testTableName, "expected parameter 'testTableName' to be non-null");
            $.timeZone = Objects.requireNonNull($.timeZone, "expected parameter 'timeZone' to be non-null");
            $.timeframeMonths = Objects.requireNonNull($.timeframeMonths, "expected parameter 'timeframeMonths' to be non-null");
            $.tns = Objects.requireNonNull($.tns, "expected parameter 'tns' to be non-null");
            $.tokenAuthenticatedContainer = Objects.requireNonNull($.tokenAuthenticatedContainer, "expected parameter 'tokenAuthenticatedContainer' to be non-null");
            $.tokenAuthenticatedDatabase = Objects.requireNonNull($.tokenAuthenticatedDatabase, "expected parameter 'tokenAuthenticatedDatabase' to be non-null");
            $.tokenId = Objects.requireNonNull($.tokenId, "expected parameter 'tokenId' to be non-null");
            $.tokenKey = Objects.requireNonNull($.tokenKey, "expected parameter 'tokenKey' to be non-null");
            $.tokenSecret = Objects.requireNonNull($.tokenSecret, "expected parameter 'tokenSecret' to be non-null");
            $.tokenSecretKey = Objects.requireNonNull($.tokenSecretKey, "expected parameter 'tokenSecretKey' to be non-null");
            $.topics = Objects.requireNonNull($.topics, "expected parameter 'topics' to be non-null");
            $.trustStoreType = Objects.requireNonNull($.trustStoreType, "expected parameter 'trustStoreType' to be non-null");
            $.trustedCert = Objects.requireNonNull($.trustedCert, "expected parameter 'trustedCert' to be non-null");
            $.truststore = Objects.requireNonNull($.truststore, "expected parameter 'truststore' to be non-null");
            $.tunnelHost = Objects.requireNonNull($.tunnelHost, "expected parameter 'tunnelHost' to be non-null");
            $.tunnelPort = Objects.requireNonNull($.tunnelPort, "expected parameter 'tunnelPort' to be non-null");
            $.tunnelUser = Objects.requireNonNull($.tunnelUser, "expected parameter 'tunnelUser' to be non-null");
            $.uniqueId = Objects.requireNonNull($.uniqueId, "expected parameter 'uniqueId' to be non-null");
            $.updateConfigOnEachSync = Objects.requireNonNull($.updateConfigOnEachSync, "expected parameter 'updateConfigOnEachSync' to be non-null");
            $.updateMethod = Objects.requireNonNull($.updateMethod, "expected parameter 'updateMethod' to be non-null");
            $.uri = Objects.requireNonNull($.uri, "expected parameter 'uri' to be non-null");
            $.useApiKeys = Objects.requireNonNull($.useApiKeys, "expected parameter 'useApiKeys' to be non-null");
            $.useCustomerBucket = Objects.requireNonNull($.useCustomerBucket, "expected parameter 'useCustomerBucket' to be non-null");
            $.useOracleRac = Objects.requireNonNull($.useOracleRac, "expected parameter 'useOracleRac' to be non-null");
            $.usePgpEncryptionOptions = Objects.requireNonNull($.usePgpEncryptionOptions, "expected parameter 'usePgpEncryptionOptions' to be non-null");
            $.useServiceAccount = Objects.requireNonNull($.useServiceAccount, "expected parameter 'useServiceAccount' to be non-null");
            $.useTemplateLabels = Objects.requireNonNull($.useTemplateLabels, "expected parameter 'useTemplateLabels' to be non-null");
            $.useWebhooks = Objects.requireNonNull($.useWebhooks, "expected parameter 'useWebhooks' to be non-null");
            $.useWorkspace = Objects.requireNonNull($.useWorkspace, "expected parameter 'useWorkspace' to be non-null");
            $.user = Objects.requireNonNull($.user, "expected parameter 'user' to be non-null");
            $.userId = Objects.requireNonNull($.userId, "expected parameter 'userId' to be non-null");
            $.userKey = Objects.requireNonNull($.userKey, "expected parameter 'userKey' to be non-null");
            $.userName = Objects.requireNonNull($.userName, "expected parameter 'userName' to be non-null");
            $.userProfiles = Objects.requireNonNull($.userProfiles, "expected parameter 'userProfiles' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            $.viewAttributionWindow = Objects.requireNonNull($.viewAttributionWindow, "expected parameter 'viewAttributionWindow' to be non-null");
            $.viewThroughAttributionWindowSize = Objects.requireNonNull($.viewThroughAttributionWindowSize, "expected parameter 'viewThroughAttributionWindowSize' to be non-null");
            $.webhookEndpoint = Objects.requireNonNull($.webhookEndpoint, "expected parameter 'webhookEndpoint' to be non-null");
            $.webhookKey = Objects.requireNonNull($.webhookKey, "expected parameter 'webhookKey' to be non-null");
            $.webhookUrl = Objects.requireNonNull($.webhookUrl, "expected parameter 'webhookUrl' to be non-null");
            $.wordPressSiteIdOrWoocommerceDomainName = Objects.requireNonNull($.wordPressSiteIdOrWoocommerceDomainName, "expected parameter 'wordPressSiteIdOrWoocommerceDomainName' to be non-null");
            $.workspaceName = Objects.requireNonNull($.workspaceName, "expected parameter 'workspaceName' to be non-null");
            $.workspaceSameAsSource = Objects.requireNonNull($.workspaceSameAsSource, "expected parameter 'workspaceSameAsSource' to be non-null");
            $.workspaceSchema = Objects.requireNonNull($.workspaceSchema, "expected parameter 'workspaceSchema' to be non-null");
            $.wsCertificate = Objects.requireNonNull($.wsCertificate, "expected parameter 'wsCertificate' to be non-null");
            return $;
        }
    }

}
