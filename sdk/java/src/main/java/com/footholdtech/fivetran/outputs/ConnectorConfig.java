// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.outputs;

import com.footholdtech.fivetran.outputs.ConnectorConfigAccountsRedditAd;
import com.footholdtech.fivetran.outputs.ConnectorConfigAdobeAnalyticsConfiguration;
import com.footholdtech.fivetran.outputs.ConnectorConfigAppIdsAppsflyer;
import com.footholdtech.fivetran.outputs.ConnectorConfigCustomReport;
import com.footholdtech.fivetran.outputs.ConnectorConfigCustomTable;
import com.footholdtech.fivetran.outputs.ConnectorConfigProjectCredential;
import com.footholdtech.fivetran.outputs.ConnectorConfigReport;
import com.footholdtech.fivetran.outputs.ConnectorConfigSecretsList;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectorConfig {
    private @Nullable String absConnectionMethod;
    private @Nullable String absConnectionString;
    private @Nullable String absContainerAddress;
    private @Nullable String absContainerName;
    private @Nullable String absHostIp;
    private @Nullable String absHostUser;
    private @Nullable String absPrefix;
    private @Nullable String absPublicKey;
    private @Nullable String accessKey;
    private @Nullable String accessKeyId;
    private @Nullable String accessKeySecret;
    private @Nullable String accessToken;
    private @Nullable String accessType;
    private @Nullable String account;
    private @Nullable String accountId;
    private @Nullable List<String> accountIds;
    private @Nullable String accountKey;
    private @Nullable String accountName;
    private @Nullable String accountSyncMode;
    private @Nullable List<String> accounts;
    private @Nullable List<ConnectorConfigAccountsRedditAd> accountsRedditAds;
    private @Nullable String accountsSyncMode;
    private @Nullable List<String> actionBreakdowns;
    private @Nullable String actionReportTime;
    private @Nullable String adAnalytics;
    private @Nullable String adUnitView;
    private @Nullable String adminApiKey;
    private @Nullable List<ConnectorConfigAdobeAnalyticsConfiguration> adobeAnalyticsConfigurations;
    private @Nullable List<String> advertisables;
    private @Nullable List<String> advertisers;
    private @Nullable List<String> advertisersIds;
    private @Nullable String advertisersSyncMode;
    private @Nullable String agentHost;
    private @Nullable String agentOraHome;
    private @Nullable String agentPassword;
    private @Nullable String agentPort;
    private @Nullable String agentPublicCert;
    private @Nullable String agentUser;
    private @Nullable String aggregation;
    private @Nullable String alwaysEncrypted;
    private @Nullable String apiAccessToken;
    private @Nullable String apiId;
    private @Nullable String apiKey;
    private @Nullable String apiKeyApiSecret;
    private @Nullable List<String> apiKeys;
    private @Nullable String apiQuota;
    private @Nullable String apiRequestsPerMinute;
    private @Nullable String apiSecret;
    private @Nullable String apiSecretKey;
    private @Nullable String apiToken;
    private @Nullable String apiType;
    private @Nullable String apiUrl;
    private @Nullable String apiUsage;
    private @Nullable String apiUtilizationPercentage;
    private @Nullable String apiVersion;
    private @Nullable String appId;
    private @Nullable List<String> appIds;
    private @Nullable List<ConnectorConfigAppIdsAppsflyer> appIdsAppsflyers;
    private @Nullable String appKey;
    private @Nullable String appSpecificPassword;
    private @Nullable String appSyncMode;
    private @Nullable String appendFileOption;
    private @Nullable String applicationKey;
    private @Nullable List<String> apps;
    private @Nullable String archiveLogFormat;
    private @Nullable String archiveLogPath;
    private @Nullable String archivePattern;
    private @Nullable String areSoapCredentialsProvided;
    private @Nullable String asbIp;
    private @Nullable String asmOption;
    private @Nullable String asmOracleHome;
    private @Nullable String asmPassword;
    private @Nullable String asmTns;
    private @Nullable String asmUser;
    private @Nullable String attributionWindow;
    private @Nullable String attributionWindowSize;
    private @Nullable String auth;
    private @Nullable String authMethod;
    private @Nullable String authMode;
    private @Nullable String authType;
    private @Nullable String authorizationMethod;
    private @Nullable String awsRegionCode;
    private @Nullable String baseCurrency;
    private @Nullable String baseDomain;
    private @Nullable String baseId;
    private @Nullable String baseUrl;
    private @Nullable String bearerToken;
    private @Nullable String blobSasUrl;
    private @Nullable List<String> breakdowns;
    private @Nullable String bucket;
    private @Nullable String bucketName;
    private @Nullable String bucketService;
    private @Nullable String businessId;
    private @Nullable String businessUnitId;
    private @Nullable String certificate;
    private @Nullable String clickAttributionWindow;
    private @Nullable String client;
    private @Nullable String clientCert;
    private @Nullable String clientCertKey;
    private @Nullable String clientId;
    private @Nullable String clientKey;
    private @Nullable String clientName;
    private @Nullable String clientSecret;
    private @Nullable String cloudStorageType;
    private @Nullable List<String> columns;
    private @Nullable String companyId;
    private @Nullable String companyKey;
    private @Nullable String companyRequestToken;
    private @Nullable String companyUuid;
    private @Nullable String compression;
    private @Nullable String configMethod;
    private @Nullable String configRepositoryUrl;
    private @Nullable String configType;
    private @Nullable String connectingUser;
    private @Nullable String connectingUserEmail;
    private @Nullable String connectionMethod;
    private @Nullable String connectionString;
    private @Nullable String connectionType;
    private @Nullable String consumerGroup;
    private @Nullable String consumerKey;
    private @Nullable String consumerSecret;
    private @Nullable String containerAddress;
    private @Nullable String containerName;
    private @Nullable String contentOwnerId;
    private @Nullable String conversationWebhookUrl;
    private @Nullable List<String> conversionDimensions;
    private @Nullable String conversionReportTime;
    private @Nullable String conversionWindowSize;
    private @Nullable String csvDefinition;
    private @Nullable String currency;
    private @Nullable String customEventSyncMode;
    private @Nullable List<String> customEvents;
    private @Nullable List<String> customFieldIds;
    private @Nullable List<String> customFloodlightVariables;
    private @Nullable List<ConnectorConfigCustomReport> customReports;
    private @Nullable List<ConnectorConfigCustomTable> customTables;
    private @Nullable String customerId;
    private @Nullable String customerListId;
    private @Nullable String dailyApiCallLimit;
    private @Nullable String dataAccessMethod;
    private @Nullable String dataCenter;
    private @Nullable String dataSetName;
    private @Nullable String database;
    private @Nullable String datasetId;
    private @Nullable String datasource;
    private @Nullable String dateGranularity;
    private @Nullable String delimiter;
    private @Nullable List<String> dimensionAttributes;
    private @Nullable List<String> dimensions;
    private @Nullable String distributedConnectorClusterSize;
    private @Nullable String domain;
    private @Nullable String domainHostName;
    private @Nullable String domainName;
    private @Nullable String domainType;
    private @Nullable List<String> elements;
    private @Nullable String email;
    private @Nullable String emptyHeader;
    private @Nullable String enableAllDimensionCombinations;
    private @Nullable String enableArchiveLogOnly;
    private @Nullable String enableDataExtensionsSyncing;
    private @Nullable String enableDistributedConnectorMode;
    private @Nullable String enableEnrichments;
    private @Nullable String enableExports;
    private @Nullable String enableTde;
    private @Nullable String encodedPublicKey;
    private @Nullable String encryptionKey;
    private @Nullable String endpoint;
    private @Nullable String engagementAttributionWindow;
    private @Nullable String enrichedExport;
    private @Nullable String entityId;
    private @Nullable String environment;
    private @Nullable String escapeChar;
    private @Nullable String euRegion;
    private @Nullable List<String> events;
    private @Nullable String exportStorageType;
    private @Nullable String externalId;
    private @Nullable List<String> fields;
    private @Nullable String fileType;
    private @Nullable String filter;
    private @Nullable String financeAccountSyncMode;
    private @Nullable List<String> financeAccounts;
    private @Nullable String folder;
    private @Nullable String folderId;
    private @Nullable String folderPath;
    private @Nullable String forecastId;
    private @Nullable String ftpHost;
    private @Nullable String ftpPassword;
    private @Nullable String ftpPort;
    private @Nullable String ftpUser;
    private @Nullable String function;
    private @Nullable String functionApp;
    private @Nullable String functionKey;
    private @Nullable String functionName;
    private @Nullable String functionTrigger;
    private @Nullable String gcsBucket;
    private @Nullable String gcsFolder;
    private @Nullable String groupName;
    private @Nullable String hasManagePermissions;
    private @Nullable String homeFolder;
    private @Nullable String host;
    private @Nullable String hostIp;
    private @Nullable String hostUser;
    private @Nullable List<String> hosts;
    private @Nullable String identity;
    private @Nullable String includeOcapiEndpoints;
    private @Nullable String instance;
    private @Nullable String instanceNumber;
    private @Nullable String instanceUrl;
    private @Nullable String integrationKey;
    private @Nullable String isAccountLevelConnector;
    private @Nullable String isAuth2Enabled;
    private @Nullable String isCustomApiCredentials;
    private @Nullable String isExternalActivitiesEndpointSelected;
    private @Nullable String isFtps;
    private @Nullable String isKeypair;
    private @Nullable String isMultiEntityFeatureEnabled;
    private @Nullable String isNewPackage;
    private @Nullable String isPrivateKeyEncrypted;
    private @Nullable String isPrivateLinkRequired;
    private @Nullable String isPublic;
    private @Nullable String isSailthruConnectEnabled;
    private @Nullable String isSecure;
    private @Nullable String isSingleTableMode;
    private @Nullable String isVendor;
    private @Nullable String jsonDeliveryMode;
    private @Nullable String key;
    private @Nullable String keyPassword;
    private @Nullable String keyStoreType;
    private @Nullable String keystore;
    private @Nullable String keystorePassword;
    private @Nullable String lastSyncedChangesUtc_;
    private @Nullable String latestVersion;
    private @Nullable String limitForApiCallsToExternalActivitiesEndpoint;
    private @Nullable String lineSeparator;
    private @Nullable String listStrategy;
    private @Nullable String listSyncMode;
    private @Nullable String logJournal;
    private @Nullable String logJournalSchema;
    private @Nullable String login;
    private @Nullable String loginPassword;
    private @Nullable List<String> managerAccounts;
    private @Nullable String merchantId;
    private @Nullable String messageType;
    private @Nullable List<String> metrics;
    private @Nullable String namedRange;
    private @Nullable String namespace;
    private @Nullable String networkCode;
    private @Nullable String nullSequence;
    private @Nullable String oauthToken;
    private @Nullable String oauthTokenSecret;
    private @Nullable String ocapiClientId;
    private @Nullable String ocapiClientSecret;
    private @Nullable String ocapiCustomObjectTypes;
    private @Nullable String ocapiHostname;
    private @Nullable String onError;
    private @Nullable String onPremise;
    private @Nullable String organization;
    private @Nullable String organizationId;
    private @Nullable List<String> organizations;
    private @Nullable List<String> packedModeTables;
    private @Nullable String packingMode;
    private @Nullable List<String> pages;
    private @Nullable String partnerCode;
    private @Nullable List<String> partners;
    private @Nullable String passphrase;
    private @Nullable String password;
    private @Nullable String pat;
    private @Nullable String patName;
    private @Nullable String patSecret;
    private @Nullable String path;
    private @Nullable String pattern;
    private @Nullable String pdbName;
    private @Nullable String pemCertificate;
    private @Nullable String pemPrivateKey;
    private @Nullable List<String> perInteractionDimensions;
    private @Nullable String personalAccessToken;
    private @Nullable String pgpPassPhrase;
    private @Nullable String pgpSecretKey;
    private @Nullable String phoneNumber;
    private @Nullable String port;
    private @Nullable String postClickAttributionWindowSize;
    private @Nullable String prebuiltReport;
    private @Nullable String prefix;
    private @Nullable List<String> primaryKeys;
    private @Nullable String privateKey;
    private @Nullable List<String> profiles;
    private @Nullable List<ConnectorConfigProjectCredential> projectCredentials;
    private @Nullable String projectId;
    private @Nullable List<String> projects;
    private @Nullable List<String> properties;
    private @Nullable String publicKey;
    private @Nullable String publicationName;
    private @Nullable String queryId;
    private @Nullable String queryParamValue;
    private @Nullable String refreshTokenExpiresAt;
    private @Nullable String region;
    private @Nullable String replicaId;
    private @Nullable String replicationSlot;
    private @Nullable List<String> reportConfigurationIds;
    private @Nullable String reportFormatType;
    private @Nullable List<String> reportSuites;
    private @Nullable String reportTimezone;
    private @Nullable String reportType;
    private @Nullable String reportUrl;
    private @Nullable List<ConnectorConfigReport> reports;
    private @Nullable List<String> reportsLinkedinAds;
    private @Nullable List<String> repositories;
    private @Nullable String resourceToken;
    private @Nullable String resourceUrl;
    private @Nullable String restApiLimit;
    private @Nullable String rfcLibraryPath;
    private @Nullable String role;
    private @Nullable String roleArn;
    private @Nullable String rollbackWindowSize;
    private @Nullable String s3Bucket;
    private @Nullable String s3ExportBucket;
    private @Nullable String s3ExportFolder;
    private @Nullable String s3ExportRoleArn;
    private @Nullable String s3RoleArn;
    private @Nullable String s3bucket;
    private @Nullable String s3externalId;
    private @Nullable String s3folder;
    private @Nullable String s3path;
    private @Nullable String s3roleArn;
    private @Nullable String salesAccountSyncMode;
    private @Nullable List<String> salesAccounts;
    private @Nullable String salesforceSecurityToken;
    private @Nullable String sandboxAccount;
    private @Nullable String sapSchema;
    private @Nullable String sapUser;
    private @Nullable String saslMechanism;
    private @Nullable String saslPlainKey;
    private @Nullable String saslPlainSecret;
    private @Nullable String saslScram256Key;
    private @Nullable String saslScram256Secret;
    private @Nullable String saslScram512Key;
    private @Nullable String saslScram512Secret;
    private @Nullable String schemaRegistryCredentialsSource;
    private @Nullable String schemaRegistryKey;
    private @Nullable String schemaRegistrySecret;
    private @Nullable List<String> schemaRegistryUrls;
    private @Nullable String secret;
    private @Nullable String secretKey;
    private @Nullable String secrets;
    private @Nullable List<ConnectorConfigSecretsList> secretsLists;
    private @Nullable String securityProtocol;
    private @Nullable List<String> segments;
    private @Nullable List<String> selectedExports;
    private @Nullable String senderId;
    private @Nullable String senderPassword;
    private @Nullable String serverAddress;
    private @Nullable String serverUrl;
    private @Nullable List<String> servers;
    private @Nullable String serviceAccount;
    private @Nullable String serviceAccountEmail;
    private @Nullable String serviceAccountKey;
    private @Nullable String serviceVersion;
    private @Nullable String sftpHost;
    private @Nullable String sftpIsKeyPair;
    private @Nullable String sftpPassword;
    private @Nullable String sftpPort;
    private @Nullable String sftpPublicKey;
    private @Nullable String sftpUser;
    private @Nullable String shareUrl;
    private @Nullable String sheetId;
    private @Nullable String shop;
    private @Nullable String shortCode;
    private @Nullable String showRecordsWithNoMetrics;
    private @Nullable String sid;
    private @Nullable String signerPublicKey;
    private @Nullable String siteAddress;
    private @Nullable String siteId;
    private @Nullable String siteName;
    private @Nullable List<String> siteUrls;
    private @Nullable String skipAfter;
    private @Nullable String skipBefore;
    private @Nullable String soapUri;
    private @Nullable String socialDataSyncTimeframe;
    private @Nullable String source;
    private @Nullable String storeHash;
    private @Nullable String subDomain;
    private @Nullable String subdomain;
    private @Nullable String subscriberName;
    private @Nullable String subscription;
    private @Nullable String supportConnectedAccountsSync;
    private @Nullable String supportNestedColumns;
    private @Nullable String surveyIds;
    private @Nullable String swipeAttributionWindow;
    private @Nullable String syncDataLocker;
    private @Nullable String syncFormat;
    private @Nullable String syncFormulaFields;
    private @Nullable String syncMetadata;
    private @Nullable String syncMethod;
    private @Nullable String syncMode;
    private @Nullable String syncMultipleAccounts;
    private @Nullable String syncPackMode;
    private @Nullable String syncPullApi;
    private @Nullable String syncType;
    private @Nullable String sysnr;
    private @Nullable String tableName;
    private @Nullable String tdeCertificate;
    private @Nullable String tdeCertificateName;
    private @Nullable String tdePassword;
    private @Nullable String tdePrivateKey;
    private @Nullable String teamId;
    private @Nullable String technicalAccountId;
    private @Nullable List<String> templateLabels;
    private @Nullable String tenant;
    private @Nullable String tenantId;
    private @Nullable String testTableName;
    private @Nullable String timeZone;
    private @Nullable String timeframeMonths;
    private @Nullable String tns;
    private @Nullable String tokenAuthenticatedContainer;
    private @Nullable String tokenAuthenticatedDatabase;
    private @Nullable String tokenId;
    private @Nullable String tokenKey;
    private @Nullable String tokenSecret;
    private @Nullable String tokenSecretKey;
    private @Nullable List<String> topics;
    private @Nullable String trustStoreType;
    private @Nullable String trustedCert;
    private @Nullable String truststore;
    private @Nullable String tunnelHost;
    private @Nullable String tunnelPort;
    private @Nullable String tunnelUser;
    private @Nullable String uniqueId;
    private @Nullable String updateConfigOnEachSync;
    private @Nullable String updateMethod;
    private @Nullable String uri;
    private @Nullable String useApiKeys;
    private @Nullable String useCustomerBucket;
    private @Nullable String useOracleRac;
    private @Nullable String usePgpEncryptionOptions;
    private @Nullable String useServiceAccount;
    private @Nullable String useTemplateLabels;
    private @Nullable String useWebhooks;
    private @Nullable String useWorkspace;
    private @Nullable String user;
    private @Nullable String userId;
    private @Nullable String userKey;
    private @Nullable String userName;
    private @Nullable List<String> userProfiles;
    private @Nullable String username;
    private @Nullable String viewAttributionWindow;
    private @Nullable String viewThroughAttributionWindowSize;
    private @Nullable String webhookEndpoint;
    private @Nullable String webhookKey;
    private @Nullable String webhookUrl;
    private @Nullable String wordPressSiteIdOrWoocommerceDomainName;
    private @Nullable String workspaceName;
    private @Nullable String workspaceSameAsSource;
    private @Nullable String workspaceSchema;
    private @Nullable String wsCertificate;

    private ConnectorConfig() {}
    public Optional<String> absConnectionMethod() {
        return Optional.ofNullable(this.absConnectionMethod);
    }
    public Optional<String> absConnectionString() {
        return Optional.ofNullable(this.absConnectionString);
    }
    public Optional<String> absContainerAddress() {
        return Optional.ofNullable(this.absContainerAddress);
    }
    public Optional<String> absContainerName() {
        return Optional.ofNullable(this.absContainerName);
    }
    public Optional<String> absHostIp() {
        return Optional.ofNullable(this.absHostIp);
    }
    public Optional<String> absHostUser() {
        return Optional.ofNullable(this.absHostUser);
    }
    public Optional<String> absPrefix() {
        return Optional.ofNullable(this.absPrefix);
    }
    public Optional<String> absPublicKey() {
        return Optional.ofNullable(this.absPublicKey);
    }
    public Optional<String> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }
    public Optional<String> accessKeyId() {
        return Optional.ofNullable(this.accessKeyId);
    }
    public Optional<String> accessKeySecret() {
        return Optional.ofNullable(this.accessKeySecret);
    }
    public Optional<String> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }
    public Optional<String> accessType() {
        return Optional.ofNullable(this.accessType);
    }
    public Optional<String> account() {
        return Optional.ofNullable(this.account);
    }
    public Optional<String> accountId() {
        return Optional.ofNullable(this.accountId);
    }
    public List<String> accountIds() {
        return this.accountIds == null ? List.of() : this.accountIds;
    }
    public Optional<String> accountKey() {
        return Optional.ofNullable(this.accountKey);
    }
    public Optional<String> accountName() {
        return Optional.ofNullable(this.accountName);
    }
    public Optional<String> accountSyncMode() {
        return Optional.ofNullable(this.accountSyncMode);
    }
    public List<String> accounts() {
        return this.accounts == null ? List.of() : this.accounts;
    }
    public List<ConnectorConfigAccountsRedditAd> accountsRedditAds() {
        return this.accountsRedditAds == null ? List.of() : this.accountsRedditAds;
    }
    public Optional<String> accountsSyncMode() {
        return Optional.ofNullable(this.accountsSyncMode);
    }
    public List<String> actionBreakdowns() {
        return this.actionBreakdowns == null ? List.of() : this.actionBreakdowns;
    }
    public Optional<String> actionReportTime() {
        return Optional.ofNullable(this.actionReportTime);
    }
    public Optional<String> adAnalytics() {
        return Optional.ofNullable(this.adAnalytics);
    }
    public Optional<String> adUnitView() {
        return Optional.ofNullable(this.adUnitView);
    }
    public Optional<String> adminApiKey() {
        return Optional.ofNullable(this.adminApiKey);
    }
    public List<ConnectorConfigAdobeAnalyticsConfiguration> adobeAnalyticsConfigurations() {
        return this.adobeAnalyticsConfigurations == null ? List.of() : this.adobeAnalyticsConfigurations;
    }
    public List<String> advertisables() {
        return this.advertisables == null ? List.of() : this.advertisables;
    }
    public List<String> advertisers() {
        return this.advertisers == null ? List.of() : this.advertisers;
    }
    public List<String> advertisersIds() {
        return this.advertisersIds == null ? List.of() : this.advertisersIds;
    }
    public Optional<String> advertisersSyncMode() {
        return Optional.ofNullable(this.advertisersSyncMode);
    }
    public Optional<String> agentHost() {
        return Optional.ofNullable(this.agentHost);
    }
    public Optional<String> agentOraHome() {
        return Optional.ofNullable(this.agentOraHome);
    }
    public Optional<String> agentPassword() {
        return Optional.ofNullable(this.agentPassword);
    }
    public Optional<String> agentPort() {
        return Optional.ofNullable(this.agentPort);
    }
    public Optional<String> agentPublicCert() {
        return Optional.ofNullable(this.agentPublicCert);
    }
    public Optional<String> agentUser() {
        return Optional.ofNullable(this.agentUser);
    }
    public Optional<String> aggregation() {
        return Optional.ofNullable(this.aggregation);
    }
    public Optional<String> alwaysEncrypted() {
        return Optional.ofNullable(this.alwaysEncrypted);
    }
    public Optional<String> apiAccessToken() {
        return Optional.ofNullable(this.apiAccessToken);
    }
    public Optional<String> apiId() {
        return Optional.ofNullable(this.apiId);
    }
    public Optional<String> apiKey() {
        return Optional.ofNullable(this.apiKey);
    }
    public Optional<String> apiKeyApiSecret() {
        return Optional.ofNullable(this.apiKeyApiSecret);
    }
    public List<String> apiKeys() {
        return this.apiKeys == null ? List.of() : this.apiKeys;
    }
    public Optional<String> apiQuota() {
        return Optional.ofNullable(this.apiQuota);
    }
    public Optional<String> apiRequestsPerMinute() {
        return Optional.ofNullable(this.apiRequestsPerMinute);
    }
    public Optional<String> apiSecret() {
        return Optional.ofNullable(this.apiSecret);
    }
    public Optional<String> apiSecretKey() {
        return Optional.ofNullable(this.apiSecretKey);
    }
    public Optional<String> apiToken() {
        return Optional.ofNullable(this.apiToken);
    }
    public Optional<String> apiType() {
        return Optional.ofNullable(this.apiType);
    }
    public Optional<String> apiUrl() {
        return Optional.ofNullable(this.apiUrl);
    }
    public Optional<String> apiUsage() {
        return Optional.ofNullable(this.apiUsage);
    }
    public Optional<String> apiUtilizationPercentage() {
        return Optional.ofNullable(this.apiUtilizationPercentage);
    }
    public Optional<String> apiVersion() {
        return Optional.ofNullable(this.apiVersion);
    }
    public Optional<String> appId() {
        return Optional.ofNullable(this.appId);
    }
    public List<String> appIds() {
        return this.appIds == null ? List.of() : this.appIds;
    }
    public List<ConnectorConfigAppIdsAppsflyer> appIdsAppsflyers() {
        return this.appIdsAppsflyers == null ? List.of() : this.appIdsAppsflyers;
    }
    public Optional<String> appKey() {
        return Optional.ofNullable(this.appKey);
    }
    public Optional<String> appSpecificPassword() {
        return Optional.ofNullable(this.appSpecificPassword);
    }
    public Optional<String> appSyncMode() {
        return Optional.ofNullable(this.appSyncMode);
    }
    public Optional<String> appendFileOption() {
        return Optional.ofNullable(this.appendFileOption);
    }
    public Optional<String> applicationKey() {
        return Optional.ofNullable(this.applicationKey);
    }
    public List<String> apps() {
        return this.apps == null ? List.of() : this.apps;
    }
    public Optional<String> archiveLogFormat() {
        return Optional.ofNullable(this.archiveLogFormat);
    }
    public Optional<String> archiveLogPath() {
        return Optional.ofNullable(this.archiveLogPath);
    }
    public Optional<String> archivePattern() {
        return Optional.ofNullable(this.archivePattern);
    }
    public Optional<String> areSoapCredentialsProvided() {
        return Optional.ofNullable(this.areSoapCredentialsProvided);
    }
    public Optional<String> asbIp() {
        return Optional.ofNullable(this.asbIp);
    }
    public Optional<String> asmOption() {
        return Optional.ofNullable(this.asmOption);
    }
    public Optional<String> asmOracleHome() {
        return Optional.ofNullable(this.asmOracleHome);
    }
    public Optional<String> asmPassword() {
        return Optional.ofNullable(this.asmPassword);
    }
    public Optional<String> asmTns() {
        return Optional.ofNullable(this.asmTns);
    }
    public Optional<String> asmUser() {
        return Optional.ofNullable(this.asmUser);
    }
    public Optional<String> attributionWindow() {
        return Optional.ofNullable(this.attributionWindow);
    }
    public Optional<String> attributionWindowSize() {
        return Optional.ofNullable(this.attributionWindowSize);
    }
    public Optional<String> auth() {
        return Optional.ofNullable(this.auth);
    }
    public Optional<String> authMethod() {
        return Optional.ofNullable(this.authMethod);
    }
    public Optional<String> authMode() {
        return Optional.ofNullable(this.authMode);
    }
    public Optional<String> authType() {
        return Optional.ofNullable(this.authType);
    }
    public Optional<String> authorizationMethod() {
        return Optional.ofNullable(this.authorizationMethod);
    }
    public Optional<String> awsRegionCode() {
        return Optional.ofNullable(this.awsRegionCode);
    }
    public Optional<String> baseCurrency() {
        return Optional.ofNullable(this.baseCurrency);
    }
    public Optional<String> baseDomain() {
        return Optional.ofNullable(this.baseDomain);
    }
    public Optional<String> baseId() {
        return Optional.ofNullable(this.baseId);
    }
    public Optional<String> baseUrl() {
        return Optional.ofNullable(this.baseUrl);
    }
    public Optional<String> bearerToken() {
        return Optional.ofNullable(this.bearerToken);
    }
    public Optional<String> blobSasUrl() {
        return Optional.ofNullable(this.blobSasUrl);
    }
    public List<String> breakdowns() {
        return this.breakdowns == null ? List.of() : this.breakdowns;
    }
    public Optional<String> bucket() {
        return Optional.ofNullable(this.bucket);
    }
    public Optional<String> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }
    public Optional<String> bucketService() {
        return Optional.ofNullable(this.bucketService);
    }
    public Optional<String> businessId() {
        return Optional.ofNullable(this.businessId);
    }
    public Optional<String> businessUnitId() {
        return Optional.ofNullable(this.businessUnitId);
    }
    public Optional<String> certificate() {
        return Optional.ofNullable(this.certificate);
    }
    public Optional<String> clickAttributionWindow() {
        return Optional.ofNullable(this.clickAttributionWindow);
    }
    public Optional<String> client() {
        return Optional.ofNullable(this.client);
    }
    public Optional<String> clientCert() {
        return Optional.ofNullable(this.clientCert);
    }
    public Optional<String> clientCertKey() {
        return Optional.ofNullable(this.clientCertKey);
    }
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    public Optional<String> clientKey() {
        return Optional.ofNullable(this.clientKey);
    }
    public Optional<String> clientName() {
        return Optional.ofNullable(this.clientName);
    }
    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }
    public Optional<String> cloudStorageType() {
        return Optional.ofNullable(this.cloudStorageType);
    }
    public List<String> columns() {
        return this.columns == null ? List.of() : this.columns;
    }
    public Optional<String> companyId() {
        return Optional.ofNullable(this.companyId);
    }
    public Optional<String> companyKey() {
        return Optional.ofNullable(this.companyKey);
    }
    public Optional<String> companyRequestToken() {
        return Optional.ofNullable(this.companyRequestToken);
    }
    public Optional<String> companyUuid() {
        return Optional.ofNullable(this.companyUuid);
    }
    public Optional<String> compression() {
        return Optional.ofNullable(this.compression);
    }
    public Optional<String> configMethod() {
        return Optional.ofNullable(this.configMethod);
    }
    public Optional<String> configRepositoryUrl() {
        return Optional.ofNullable(this.configRepositoryUrl);
    }
    public Optional<String> configType() {
        return Optional.ofNullable(this.configType);
    }
    public Optional<String> connectingUser() {
        return Optional.ofNullable(this.connectingUser);
    }
    public Optional<String> connectingUserEmail() {
        return Optional.ofNullable(this.connectingUserEmail);
    }
    public Optional<String> connectionMethod() {
        return Optional.ofNullable(this.connectionMethod);
    }
    public Optional<String> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }
    public Optional<String> connectionType() {
        return Optional.ofNullable(this.connectionType);
    }
    public Optional<String> consumerGroup() {
        return Optional.ofNullable(this.consumerGroup);
    }
    public Optional<String> consumerKey() {
        return Optional.ofNullable(this.consumerKey);
    }
    public Optional<String> consumerSecret() {
        return Optional.ofNullable(this.consumerSecret);
    }
    public Optional<String> containerAddress() {
        return Optional.ofNullable(this.containerAddress);
    }
    public Optional<String> containerName() {
        return Optional.ofNullable(this.containerName);
    }
    public Optional<String> contentOwnerId() {
        return Optional.ofNullable(this.contentOwnerId);
    }
    public Optional<String> conversationWebhookUrl() {
        return Optional.ofNullable(this.conversationWebhookUrl);
    }
    public List<String> conversionDimensions() {
        return this.conversionDimensions == null ? List.of() : this.conversionDimensions;
    }
    public Optional<String> conversionReportTime() {
        return Optional.ofNullable(this.conversionReportTime);
    }
    public Optional<String> conversionWindowSize() {
        return Optional.ofNullable(this.conversionWindowSize);
    }
    public Optional<String> csvDefinition() {
        return Optional.ofNullable(this.csvDefinition);
    }
    public Optional<String> currency() {
        return Optional.ofNullable(this.currency);
    }
    public Optional<String> customEventSyncMode() {
        return Optional.ofNullable(this.customEventSyncMode);
    }
    public List<String> customEvents() {
        return this.customEvents == null ? List.of() : this.customEvents;
    }
    public List<String> customFieldIds() {
        return this.customFieldIds == null ? List.of() : this.customFieldIds;
    }
    public List<String> customFloodlightVariables() {
        return this.customFloodlightVariables == null ? List.of() : this.customFloodlightVariables;
    }
    public List<ConnectorConfigCustomReport> customReports() {
        return this.customReports == null ? List.of() : this.customReports;
    }
    public List<ConnectorConfigCustomTable> customTables() {
        return this.customTables == null ? List.of() : this.customTables;
    }
    public Optional<String> customerId() {
        return Optional.ofNullable(this.customerId);
    }
    public Optional<String> customerListId() {
        return Optional.ofNullable(this.customerListId);
    }
    public Optional<String> dailyApiCallLimit() {
        return Optional.ofNullable(this.dailyApiCallLimit);
    }
    public Optional<String> dataAccessMethod() {
        return Optional.ofNullable(this.dataAccessMethod);
    }
    public Optional<String> dataCenter() {
        return Optional.ofNullable(this.dataCenter);
    }
    public Optional<String> dataSetName() {
        return Optional.ofNullable(this.dataSetName);
    }
    public Optional<String> database() {
        return Optional.ofNullable(this.database);
    }
    public Optional<String> datasetId() {
        return Optional.ofNullable(this.datasetId);
    }
    public Optional<String> datasource() {
        return Optional.ofNullable(this.datasource);
    }
    public Optional<String> dateGranularity() {
        return Optional.ofNullable(this.dateGranularity);
    }
    public Optional<String> delimiter() {
        return Optional.ofNullable(this.delimiter);
    }
    public List<String> dimensionAttributes() {
        return this.dimensionAttributes == null ? List.of() : this.dimensionAttributes;
    }
    public List<String> dimensions() {
        return this.dimensions == null ? List.of() : this.dimensions;
    }
    public Optional<String> distributedConnectorClusterSize() {
        return Optional.ofNullable(this.distributedConnectorClusterSize);
    }
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }
    public Optional<String> domainHostName() {
        return Optional.ofNullable(this.domainHostName);
    }
    public Optional<String> domainName() {
        return Optional.ofNullable(this.domainName);
    }
    public Optional<String> domainType() {
        return Optional.ofNullable(this.domainType);
    }
    public List<String> elements() {
        return this.elements == null ? List.of() : this.elements;
    }
    public Optional<String> email() {
        return Optional.ofNullable(this.email);
    }
    public Optional<String> emptyHeader() {
        return Optional.ofNullable(this.emptyHeader);
    }
    public Optional<String> enableAllDimensionCombinations() {
        return Optional.ofNullable(this.enableAllDimensionCombinations);
    }
    public Optional<String> enableArchiveLogOnly() {
        return Optional.ofNullable(this.enableArchiveLogOnly);
    }
    public Optional<String> enableDataExtensionsSyncing() {
        return Optional.ofNullable(this.enableDataExtensionsSyncing);
    }
    public Optional<String> enableDistributedConnectorMode() {
        return Optional.ofNullable(this.enableDistributedConnectorMode);
    }
    public Optional<String> enableEnrichments() {
        return Optional.ofNullable(this.enableEnrichments);
    }
    public Optional<String> enableExports() {
        return Optional.ofNullable(this.enableExports);
    }
    public Optional<String> enableTde() {
        return Optional.ofNullable(this.enableTde);
    }
    public Optional<String> encodedPublicKey() {
        return Optional.ofNullable(this.encodedPublicKey);
    }
    public Optional<String> encryptionKey() {
        return Optional.ofNullable(this.encryptionKey);
    }
    public Optional<String> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }
    public Optional<String> engagementAttributionWindow() {
        return Optional.ofNullable(this.engagementAttributionWindow);
    }
    public Optional<String> enrichedExport() {
        return Optional.ofNullable(this.enrichedExport);
    }
    public Optional<String> entityId() {
        return Optional.ofNullable(this.entityId);
    }
    public Optional<String> environment() {
        return Optional.ofNullable(this.environment);
    }
    public Optional<String> escapeChar() {
        return Optional.ofNullable(this.escapeChar);
    }
    public Optional<String> euRegion() {
        return Optional.ofNullable(this.euRegion);
    }
    public List<String> events() {
        return this.events == null ? List.of() : this.events;
    }
    public Optional<String> exportStorageType() {
        return Optional.ofNullable(this.exportStorageType);
    }
    public Optional<String> externalId() {
        return Optional.ofNullable(this.externalId);
    }
    public List<String> fields() {
        return this.fields == null ? List.of() : this.fields;
    }
    public Optional<String> fileType() {
        return Optional.ofNullable(this.fileType);
    }
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }
    public Optional<String> financeAccountSyncMode() {
        return Optional.ofNullable(this.financeAccountSyncMode);
    }
    public List<String> financeAccounts() {
        return this.financeAccounts == null ? List.of() : this.financeAccounts;
    }
    public Optional<String> folder() {
        return Optional.ofNullable(this.folder);
    }
    public Optional<String> folderId() {
        return Optional.ofNullable(this.folderId);
    }
    public Optional<String> folderPath() {
        return Optional.ofNullable(this.folderPath);
    }
    public Optional<String> forecastId() {
        return Optional.ofNullable(this.forecastId);
    }
    public Optional<String> ftpHost() {
        return Optional.ofNullable(this.ftpHost);
    }
    public Optional<String> ftpPassword() {
        return Optional.ofNullable(this.ftpPassword);
    }
    public Optional<String> ftpPort() {
        return Optional.ofNullable(this.ftpPort);
    }
    public Optional<String> ftpUser() {
        return Optional.ofNullable(this.ftpUser);
    }
    public Optional<String> function() {
        return Optional.ofNullable(this.function);
    }
    public Optional<String> functionApp() {
        return Optional.ofNullable(this.functionApp);
    }
    public Optional<String> functionKey() {
        return Optional.ofNullable(this.functionKey);
    }
    public Optional<String> functionName() {
        return Optional.ofNullable(this.functionName);
    }
    public Optional<String> functionTrigger() {
        return Optional.ofNullable(this.functionTrigger);
    }
    public Optional<String> gcsBucket() {
        return Optional.ofNullable(this.gcsBucket);
    }
    public Optional<String> gcsFolder() {
        return Optional.ofNullable(this.gcsFolder);
    }
    public Optional<String> groupName() {
        return Optional.ofNullable(this.groupName);
    }
    public Optional<String> hasManagePermissions() {
        return Optional.ofNullable(this.hasManagePermissions);
    }
    public Optional<String> homeFolder() {
        return Optional.ofNullable(this.homeFolder);
    }
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }
    public Optional<String> hostIp() {
        return Optional.ofNullable(this.hostIp);
    }
    public Optional<String> hostUser() {
        return Optional.ofNullable(this.hostUser);
    }
    public List<String> hosts() {
        return this.hosts == null ? List.of() : this.hosts;
    }
    public Optional<String> identity() {
        return Optional.ofNullable(this.identity);
    }
    public Optional<String> includeOcapiEndpoints() {
        return Optional.ofNullable(this.includeOcapiEndpoints);
    }
    public Optional<String> instance() {
        return Optional.ofNullable(this.instance);
    }
    public Optional<String> instanceNumber() {
        return Optional.ofNullable(this.instanceNumber);
    }
    public Optional<String> instanceUrl() {
        return Optional.ofNullable(this.instanceUrl);
    }
    public Optional<String> integrationKey() {
        return Optional.ofNullable(this.integrationKey);
    }
    public Optional<String> isAccountLevelConnector() {
        return Optional.ofNullable(this.isAccountLevelConnector);
    }
    public Optional<String> isAuth2Enabled() {
        return Optional.ofNullable(this.isAuth2Enabled);
    }
    public Optional<String> isCustomApiCredentials() {
        return Optional.ofNullable(this.isCustomApiCredentials);
    }
    public Optional<String> isExternalActivitiesEndpointSelected() {
        return Optional.ofNullable(this.isExternalActivitiesEndpointSelected);
    }
    public Optional<String> isFtps() {
        return Optional.ofNullable(this.isFtps);
    }
    public Optional<String> isKeypair() {
        return Optional.ofNullable(this.isKeypair);
    }
    public Optional<String> isMultiEntityFeatureEnabled() {
        return Optional.ofNullable(this.isMultiEntityFeatureEnabled);
    }
    public Optional<String> isNewPackage() {
        return Optional.ofNullable(this.isNewPackage);
    }
    public Optional<String> isPrivateKeyEncrypted() {
        return Optional.ofNullable(this.isPrivateKeyEncrypted);
    }
    public Optional<String> isPrivateLinkRequired() {
        return Optional.ofNullable(this.isPrivateLinkRequired);
    }
    public Optional<String> isPublic() {
        return Optional.ofNullable(this.isPublic);
    }
    public Optional<String> isSailthruConnectEnabled() {
        return Optional.ofNullable(this.isSailthruConnectEnabled);
    }
    public Optional<String> isSecure() {
        return Optional.ofNullable(this.isSecure);
    }
    public Optional<String> isSingleTableMode() {
        return Optional.ofNullable(this.isSingleTableMode);
    }
    public Optional<String> isVendor() {
        return Optional.ofNullable(this.isVendor);
    }
    public Optional<String> jsonDeliveryMode() {
        return Optional.ofNullable(this.jsonDeliveryMode);
    }
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    public Optional<String> keyPassword() {
        return Optional.ofNullable(this.keyPassword);
    }
    public Optional<String> keyStoreType() {
        return Optional.ofNullable(this.keyStoreType);
    }
    public Optional<String> keystore() {
        return Optional.ofNullable(this.keystore);
    }
    public Optional<String> keystorePassword() {
        return Optional.ofNullable(this.keystorePassword);
    }
    public Optional<String> lastSyncedChangesUtc_() {
        return Optional.ofNullable(this.lastSyncedChangesUtc_);
    }
    public Optional<String> latestVersion() {
        return Optional.ofNullable(this.latestVersion);
    }
    public Optional<String> limitForApiCallsToExternalActivitiesEndpoint() {
        return Optional.ofNullable(this.limitForApiCallsToExternalActivitiesEndpoint);
    }
    public Optional<String> lineSeparator() {
        return Optional.ofNullable(this.lineSeparator);
    }
    public Optional<String> listStrategy() {
        return Optional.ofNullable(this.listStrategy);
    }
    public Optional<String> listSyncMode() {
        return Optional.ofNullable(this.listSyncMode);
    }
    public Optional<String> logJournal() {
        return Optional.ofNullable(this.logJournal);
    }
    public Optional<String> logJournalSchema() {
        return Optional.ofNullable(this.logJournalSchema);
    }
    public Optional<String> login() {
        return Optional.ofNullable(this.login);
    }
    public Optional<String> loginPassword() {
        return Optional.ofNullable(this.loginPassword);
    }
    public List<String> managerAccounts() {
        return this.managerAccounts == null ? List.of() : this.managerAccounts;
    }
    public Optional<String> merchantId() {
        return Optional.ofNullable(this.merchantId);
    }
    public Optional<String> messageType() {
        return Optional.ofNullable(this.messageType);
    }
    public List<String> metrics() {
        return this.metrics == null ? List.of() : this.metrics;
    }
    public Optional<String> namedRange() {
        return Optional.ofNullable(this.namedRange);
    }
    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }
    public Optional<String> networkCode() {
        return Optional.ofNullable(this.networkCode);
    }
    public Optional<String> nullSequence() {
        return Optional.ofNullable(this.nullSequence);
    }
    public Optional<String> oauthToken() {
        return Optional.ofNullable(this.oauthToken);
    }
    public Optional<String> oauthTokenSecret() {
        return Optional.ofNullable(this.oauthTokenSecret);
    }
    public Optional<String> ocapiClientId() {
        return Optional.ofNullable(this.ocapiClientId);
    }
    public Optional<String> ocapiClientSecret() {
        return Optional.ofNullable(this.ocapiClientSecret);
    }
    public Optional<String> ocapiCustomObjectTypes() {
        return Optional.ofNullable(this.ocapiCustomObjectTypes);
    }
    public Optional<String> ocapiHostname() {
        return Optional.ofNullable(this.ocapiHostname);
    }
    public Optional<String> onError() {
        return Optional.ofNullable(this.onError);
    }
    public Optional<String> onPremise() {
        return Optional.ofNullable(this.onPremise);
    }
    public Optional<String> organization() {
        return Optional.ofNullable(this.organization);
    }
    public Optional<String> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }
    public List<String> organizations() {
        return this.organizations == null ? List.of() : this.organizations;
    }
    public List<String> packedModeTables() {
        return this.packedModeTables == null ? List.of() : this.packedModeTables;
    }
    public Optional<String> packingMode() {
        return Optional.ofNullable(this.packingMode);
    }
    public List<String> pages() {
        return this.pages == null ? List.of() : this.pages;
    }
    public Optional<String> partnerCode() {
        return Optional.ofNullable(this.partnerCode);
    }
    public List<String> partners() {
        return this.partners == null ? List.of() : this.partners;
    }
    public Optional<String> passphrase() {
        return Optional.ofNullable(this.passphrase);
    }
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    public Optional<String> pat() {
        return Optional.ofNullable(this.pat);
    }
    public Optional<String> patName() {
        return Optional.ofNullable(this.patName);
    }
    public Optional<String> patSecret() {
        return Optional.ofNullable(this.patSecret);
    }
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    public Optional<String> pattern() {
        return Optional.ofNullable(this.pattern);
    }
    public Optional<String> pdbName() {
        return Optional.ofNullable(this.pdbName);
    }
    public Optional<String> pemCertificate() {
        return Optional.ofNullable(this.pemCertificate);
    }
    public Optional<String> pemPrivateKey() {
        return Optional.ofNullable(this.pemPrivateKey);
    }
    public List<String> perInteractionDimensions() {
        return this.perInteractionDimensions == null ? List.of() : this.perInteractionDimensions;
    }
    public Optional<String> personalAccessToken() {
        return Optional.ofNullable(this.personalAccessToken);
    }
    public Optional<String> pgpPassPhrase() {
        return Optional.ofNullable(this.pgpPassPhrase);
    }
    public Optional<String> pgpSecretKey() {
        return Optional.ofNullable(this.pgpSecretKey);
    }
    public Optional<String> phoneNumber() {
        return Optional.ofNullable(this.phoneNumber);
    }
    public Optional<String> port() {
        return Optional.ofNullable(this.port);
    }
    public Optional<String> postClickAttributionWindowSize() {
        return Optional.ofNullable(this.postClickAttributionWindowSize);
    }
    public Optional<String> prebuiltReport() {
        return Optional.ofNullable(this.prebuiltReport);
    }
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }
    public List<String> primaryKeys() {
        return this.primaryKeys == null ? List.of() : this.primaryKeys;
    }
    public Optional<String> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }
    public List<String> profiles() {
        return this.profiles == null ? List.of() : this.profiles;
    }
    public List<ConnectorConfigProjectCredential> projectCredentials() {
        return this.projectCredentials == null ? List.of() : this.projectCredentials;
    }
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    public List<String> projects() {
        return this.projects == null ? List.of() : this.projects;
    }
    public List<String> properties() {
        return this.properties == null ? List.of() : this.properties;
    }
    public Optional<String> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }
    public Optional<String> publicationName() {
        return Optional.ofNullable(this.publicationName);
    }
    public Optional<String> queryId() {
        return Optional.ofNullable(this.queryId);
    }
    public Optional<String> queryParamValue() {
        return Optional.ofNullable(this.queryParamValue);
    }
    public Optional<String> refreshTokenExpiresAt() {
        return Optional.ofNullable(this.refreshTokenExpiresAt);
    }
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    public Optional<String> replicaId() {
        return Optional.ofNullable(this.replicaId);
    }
    public Optional<String> replicationSlot() {
        return Optional.ofNullable(this.replicationSlot);
    }
    public List<String> reportConfigurationIds() {
        return this.reportConfigurationIds == null ? List.of() : this.reportConfigurationIds;
    }
    public Optional<String> reportFormatType() {
        return Optional.ofNullable(this.reportFormatType);
    }
    public List<String> reportSuites() {
        return this.reportSuites == null ? List.of() : this.reportSuites;
    }
    public Optional<String> reportTimezone() {
        return Optional.ofNullable(this.reportTimezone);
    }
    public Optional<String> reportType() {
        return Optional.ofNullable(this.reportType);
    }
    public Optional<String> reportUrl() {
        return Optional.ofNullable(this.reportUrl);
    }
    public List<ConnectorConfigReport> reports() {
        return this.reports == null ? List.of() : this.reports;
    }
    public List<String> reportsLinkedinAds() {
        return this.reportsLinkedinAds == null ? List.of() : this.reportsLinkedinAds;
    }
    public List<String> repositories() {
        return this.repositories == null ? List.of() : this.repositories;
    }
    public Optional<String> resourceToken() {
        return Optional.ofNullable(this.resourceToken);
    }
    public Optional<String> resourceUrl() {
        return Optional.ofNullable(this.resourceUrl);
    }
    public Optional<String> restApiLimit() {
        return Optional.ofNullable(this.restApiLimit);
    }
    public Optional<String> rfcLibraryPath() {
        return Optional.ofNullable(this.rfcLibraryPath);
    }
    public Optional<String> role() {
        return Optional.ofNullable(this.role);
    }
    public Optional<String> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }
    public Optional<String> rollbackWindowSize() {
        return Optional.ofNullable(this.rollbackWindowSize);
    }
    public Optional<String> s3Bucket() {
        return Optional.ofNullable(this.s3Bucket);
    }
    public Optional<String> s3ExportBucket() {
        return Optional.ofNullable(this.s3ExportBucket);
    }
    public Optional<String> s3ExportFolder() {
        return Optional.ofNullable(this.s3ExportFolder);
    }
    public Optional<String> s3ExportRoleArn() {
        return Optional.ofNullable(this.s3ExportRoleArn);
    }
    public Optional<String> s3RoleArn() {
        return Optional.ofNullable(this.s3RoleArn);
    }
    public Optional<String> s3bucket() {
        return Optional.ofNullable(this.s3bucket);
    }
    public Optional<String> s3externalId() {
        return Optional.ofNullable(this.s3externalId);
    }
    public Optional<String> s3folder() {
        return Optional.ofNullable(this.s3folder);
    }
    public Optional<String> s3path() {
        return Optional.ofNullable(this.s3path);
    }
    public Optional<String> s3roleArn() {
        return Optional.ofNullable(this.s3roleArn);
    }
    public Optional<String> salesAccountSyncMode() {
        return Optional.ofNullable(this.salesAccountSyncMode);
    }
    public List<String> salesAccounts() {
        return this.salesAccounts == null ? List.of() : this.salesAccounts;
    }
    public Optional<String> salesforceSecurityToken() {
        return Optional.ofNullable(this.salesforceSecurityToken);
    }
    public Optional<String> sandboxAccount() {
        return Optional.ofNullable(this.sandboxAccount);
    }
    public Optional<String> sapSchema() {
        return Optional.ofNullable(this.sapSchema);
    }
    public Optional<String> sapUser() {
        return Optional.ofNullable(this.sapUser);
    }
    public Optional<String> saslMechanism() {
        return Optional.ofNullable(this.saslMechanism);
    }
    public Optional<String> saslPlainKey() {
        return Optional.ofNullable(this.saslPlainKey);
    }
    public Optional<String> saslPlainSecret() {
        return Optional.ofNullable(this.saslPlainSecret);
    }
    public Optional<String> saslScram256Key() {
        return Optional.ofNullable(this.saslScram256Key);
    }
    public Optional<String> saslScram256Secret() {
        return Optional.ofNullable(this.saslScram256Secret);
    }
    public Optional<String> saslScram512Key() {
        return Optional.ofNullable(this.saslScram512Key);
    }
    public Optional<String> saslScram512Secret() {
        return Optional.ofNullable(this.saslScram512Secret);
    }
    public Optional<String> schemaRegistryCredentialsSource() {
        return Optional.ofNullable(this.schemaRegistryCredentialsSource);
    }
    public Optional<String> schemaRegistryKey() {
        return Optional.ofNullable(this.schemaRegistryKey);
    }
    public Optional<String> schemaRegistrySecret() {
        return Optional.ofNullable(this.schemaRegistrySecret);
    }
    public List<String> schemaRegistryUrls() {
        return this.schemaRegistryUrls == null ? List.of() : this.schemaRegistryUrls;
    }
    public Optional<String> secret() {
        return Optional.ofNullable(this.secret);
    }
    public Optional<String> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }
    public Optional<String> secrets() {
        return Optional.ofNullable(this.secrets);
    }
    public List<ConnectorConfigSecretsList> secretsLists() {
        return this.secretsLists == null ? List.of() : this.secretsLists;
    }
    public Optional<String> securityProtocol() {
        return Optional.ofNullable(this.securityProtocol);
    }
    public List<String> segments() {
        return this.segments == null ? List.of() : this.segments;
    }
    public List<String> selectedExports() {
        return this.selectedExports == null ? List.of() : this.selectedExports;
    }
    public Optional<String> senderId() {
        return Optional.ofNullable(this.senderId);
    }
    public Optional<String> senderPassword() {
        return Optional.ofNullable(this.senderPassword);
    }
    public Optional<String> serverAddress() {
        return Optional.ofNullable(this.serverAddress);
    }
    public Optional<String> serverUrl() {
        return Optional.ofNullable(this.serverUrl);
    }
    public List<String> servers() {
        return this.servers == null ? List.of() : this.servers;
    }
    public Optional<String> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }
    public Optional<String> serviceAccountEmail() {
        return Optional.ofNullable(this.serviceAccountEmail);
    }
    public Optional<String> serviceAccountKey() {
        return Optional.ofNullable(this.serviceAccountKey);
    }
    public Optional<String> serviceVersion() {
        return Optional.ofNullable(this.serviceVersion);
    }
    public Optional<String> sftpHost() {
        return Optional.ofNullable(this.sftpHost);
    }
    public Optional<String> sftpIsKeyPair() {
        return Optional.ofNullable(this.sftpIsKeyPair);
    }
    public Optional<String> sftpPassword() {
        return Optional.ofNullable(this.sftpPassword);
    }
    public Optional<String> sftpPort() {
        return Optional.ofNullable(this.sftpPort);
    }
    public Optional<String> sftpPublicKey() {
        return Optional.ofNullable(this.sftpPublicKey);
    }
    public Optional<String> sftpUser() {
        return Optional.ofNullable(this.sftpUser);
    }
    public Optional<String> shareUrl() {
        return Optional.ofNullable(this.shareUrl);
    }
    public Optional<String> sheetId() {
        return Optional.ofNullable(this.sheetId);
    }
    public Optional<String> shop() {
        return Optional.ofNullable(this.shop);
    }
    public Optional<String> shortCode() {
        return Optional.ofNullable(this.shortCode);
    }
    public Optional<String> showRecordsWithNoMetrics() {
        return Optional.ofNullable(this.showRecordsWithNoMetrics);
    }
    public Optional<String> sid() {
        return Optional.ofNullable(this.sid);
    }
    public Optional<String> signerPublicKey() {
        return Optional.ofNullable(this.signerPublicKey);
    }
    public Optional<String> siteAddress() {
        return Optional.ofNullable(this.siteAddress);
    }
    public Optional<String> siteId() {
        return Optional.ofNullable(this.siteId);
    }
    public Optional<String> siteName() {
        return Optional.ofNullable(this.siteName);
    }
    public List<String> siteUrls() {
        return this.siteUrls == null ? List.of() : this.siteUrls;
    }
    public Optional<String> skipAfter() {
        return Optional.ofNullable(this.skipAfter);
    }
    public Optional<String> skipBefore() {
        return Optional.ofNullable(this.skipBefore);
    }
    public Optional<String> soapUri() {
        return Optional.ofNullable(this.soapUri);
    }
    public Optional<String> socialDataSyncTimeframe() {
        return Optional.ofNullable(this.socialDataSyncTimeframe);
    }
    public Optional<String> source() {
        return Optional.ofNullable(this.source);
    }
    public Optional<String> storeHash() {
        return Optional.ofNullable(this.storeHash);
    }
    public Optional<String> subDomain() {
        return Optional.ofNullable(this.subDomain);
    }
    public Optional<String> subdomain() {
        return Optional.ofNullable(this.subdomain);
    }
    public Optional<String> subscriberName() {
        return Optional.ofNullable(this.subscriberName);
    }
    public Optional<String> subscription() {
        return Optional.ofNullable(this.subscription);
    }
    public Optional<String> supportConnectedAccountsSync() {
        return Optional.ofNullable(this.supportConnectedAccountsSync);
    }
    public Optional<String> supportNestedColumns() {
        return Optional.ofNullable(this.supportNestedColumns);
    }
    public Optional<String> surveyIds() {
        return Optional.ofNullable(this.surveyIds);
    }
    public Optional<String> swipeAttributionWindow() {
        return Optional.ofNullable(this.swipeAttributionWindow);
    }
    public Optional<String> syncDataLocker() {
        return Optional.ofNullable(this.syncDataLocker);
    }
    public Optional<String> syncFormat() {
        return Optional.ofNullable(this.syncFormat);
    }
    public Optional<String> syncFormulaFields() {
        return Optional.ofNullable(this.syncFormulaFields);
    }
    public Optional<String> syncMetadata() {
        return Optional.ofNullable(this.syncMetadata);
    }
    public Optional<String> syncMethod() {
        return Optional.ofNullable(this.syncMethod);
    }
    public Optional<String> syncMode() {
        return Optional.ofNullable(this.syncMode);
    }
    public Optional<String> syncMultipleAccounts() {
        return Optional.ofNullable(this.syncMultipleAccounts);
    }
    public Optional<String> syncPackMode() {
        return Optional.ofNullable(this.syncPackMode);
    }
    public Optional<String> syncPullApi() {
        return Optional.ofNullable(this.syncPullApi);
    }
    public Optional<String> syncType() {
        return Optional.ofNullable(this.syncType);
    }
    public Optional<String> sysnr() {
        return Optional.ofNullable(this.sysnr);
    }
    public Optional<String> tableName() {
        return Optional.ofNullable(this.tableName);
    }
    public Optional<String> tdeCertificate() {
        return Optional.ofNullable(this.tdeCertificate);
    }
    public Optional<String> tdeCertificateName() {
        return Optional.ofNullable(this.tdeCertificateName);
    }
    public Optional<String> tdePassword() {
        return Optional.ofNullable(this.tdePassword);
    }
    public Optional<String> tdePrivateKey() {
        return Optional.ofNullable(this.tdePrivateKey);
    }
    public Optional<String> teamId() {
        return Optional.ofNullable(this.teamId);
    }
    public Optional<String> technicalAccountId() {
        return Optional.ofNullable(this.technicalAccountId);
    }
    public List<String> templateLabels() {
        return this.templateLabels == null ? List.of() : this.templateLabels;
    }
    public Optional<String> tenant() {
        return Optional.ofNullable(this.tenant);
    }
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }
    public Optional<String> testTableName() {
        return Optional.ofNullable(this.testTableName);
    }
    public Optional<String> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }
    public Optional<String> timeframeMonths() {
        return Optional.ofNullable(this.timeframeMonths);
    }
    public Optional<String> tns() {
        return Optional.ofNullable(this.tns);
    }
    public Optional<String> tokenAuthenticatedContainer() {
        return Optional.ofNullable(this.tokenAuthenticatedContainer);
    }
    public Optional<String> tokenAuthenticatedDatabase() {
        return Optional.ofNullable(this.tokenAuthenticatedDatabase);
    }
    public Optional<String> tokenId() {
        return Optional.ofNullable(this.tokenId);
    }
    public Optional<String> tokenKey() {
        return Optional.ofNullable(this.tokenKey);
    }
    public Optional<String> tokenSecret() {
        return Optional.ofNullable(this.tokenSecret);
    }
    public Optional<String> tokenSecretKey() {
        return Optional.ofNullable(this.tokenSecretKey);
    }
    public List<String> topics() {
        return this.topics == null ? List.of() : this.topics;
    }
    public Optional<String> trustStoreType() {
        return Optional.ofNullable(this.trustStoreType);
    }
    public Optional<String> trustedCert() {
        return Optional.ofNullable(this.trustedCert);
    }
    public Optional<String> truststore() {
        return Optional.ofNullable(this.truststore);
    }
    public Optional<String> tunnelHost() {
        return Optional.ofNullable(this.tunnelHost);
    }
    public Optional<String> tunnelPort() {
        return Optional.ofNullable(this.tunnelPort);
    }
    public Optional<String> tunnelUser() {
        return Optional.ofNullable(this.tunnelUser);
    }
    public Optional<String> uniqueId() {
        return Optional.ofNullable(this.uniqueId);
    }
    public Optional<String> updateConfigOnEachSync() {
        return Optional.ofNullable(this.updateConfigOnEachSync);
    }
    public Optional<String> updateMethod() {
        return Optional.ofNullable(this.updateMethod);
    }
    public Optional<String> uri() {
        return Optional.ofNullable(this.uri);
    }
    public Optional<String> useApiKeys() {
        return Optional.ofNullable(this.useApiKeys);
    }
    public Optional<String> useCustomerBucket() {
        return Optional.ofNullable(this.useCustomerBucket);
    }
    public Optional<String> useOracleRac() {
        return Optional.ofNullable(this.useOracleRac);
    }
    public Optional<String> usePgpEncryptionOptions() {
        return Optional.ofNullable(this.usePgpEncryptionOptions);
    }
    public Optional<String> useServiceAccount() {
        return Optional.ofNullable(this.useServiceAccount);
    }
    public Optional<String> useTemplateLabels() {
        return Optional.ofNullable(this.useTemplateLabels);
    }
    public Optional<String> useWebhooks() {
        return Optional.ofNullable(this.useWebhooks);
    }
    public Optional<String> useWorkspace() {
        return Optional.ofNullable(this.useWorkspace);
    }
    public Optional<String> user() {
        return Optional.ofNullable(this.user);
    }
    public Optional<String> userId() {
        return Optional.ofNullable(this.userId);
    }
    public Optional<String> userKey() {
        return Optional.ofNullable(this.userKey);
    }
    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }
    public List<String> userProfiles() {
        return this.userProfiles == null ? List.of() : this.userProfiles;
    }
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }
    public Optional<String> viewAttributionWindow() {
        return Optional.ofNullable(this.viewAttributionWindow);
    }
    public Optional<String> viewThroughAttributionWindowSize() {
        return Optional.ofNullable(this.viewThroughAttributionWindowSize);
    }
    public Optional<String> webhookEndpoint() {
        return Optional.ofNullable(this.webhookEndpoint);
    }
    public Optional<String> webhookKey() {
        return Optional.ofNullable(this.webhookKey);
    }
    public Optional<String> webhookUrl() {
        return Optional.ofNullable(this.webhookUrl);
    }
    public Optional<String> wordPressSiteIdOrWoocommerceDomainName() {
        return Optional.ofNullable(this.wordPressSiteIdOrWoocommerceDomainName);
    }
    public Optional<String> workspaceName() {
        return Optional.ofNullable(this.workspaceName);
    }
    public Optional<String> workspaceSameAsSource() {
        return Optional.ofNullable(this.workspaceSameAsSource);
    }
    public Optional<String> workspaceSchema() {
        return Optional.ofNullable(this.workspaceSchema);
    }
    public Optional<String> wsCertificate() {
        return Optional.ofNullable(this.wsCertificate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectorConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String absConnectionMethod;
        private @Nullable String absConnectionString;
        private @Nullable String absContainerAddress;
        private @Nullable String absContainerName;
        private @Nullable String absHostIp;
        private @Nullable String absHostUser;
        private @Nullable String absPrefix;
        private @Nullable String absPublicKey;
        private @Nullable String accessKey;
        private @Nullable String accessKeyId;
        private @Nullable String accessKeySecret;
        private @Nullable String accessToken;
        private @Nullable String accessType;
        private @Nullable String account;
        private @Nullable String accountId;
        private @Nullable List<String> accountIds;
        private @Nullable String accountKey;
        private @Nullable String accountName;
        private @Nullable String accountSyncMode;
        private @Nullable List<String> accounts;
        private @Nullable List<ConnectorConfigAccountsRedditAd> accountsRedditAds;
        private @Nullable String accountsSyncMode;
        private @Nullable List<String> actionBreakdowns;
        private @Nullable String actionReportTime;
        private @Nullable String adAnalytics;
        private @Nullable String adUnitView;
        private @Nullable String adminApiKey;
        private @Nullable List<ConnectorConfigAdobeAnalyticsConfiguration> adobeAnalyticsConfigurations;
        private @Nullable List<String> advertisables;
        private @Nullable List<String> advertisers;
        private @Nullable List<String> advertisersIds;
        private @Nullable String advertisersSyncMode;
        private @Nullable String agentHost;
        private @Nullable String agentOraHome;
        private @Nullable String agentPassword;
        private @Nullable String agentPort;
        private @Nullable String agentPublicCert;
        private @Nullable String agentUser;
        private @Nullable String aggregation;
        private @Nullable String alwaysEncrypted;
        private @Nullable String apiAccessToken;
        private @Nullable String apiId;
        private @Nullable String apiKey;
        private @Nullable String apiKeyApiSecret;
        private @Nullable List<String> apiKeys;
        private @Nullable String apiQuota;
        private @Nullable String apiRequestsPerMinute;
        private @Nullable String apiSecret;
        private @Nullable String apiSecretKey;
        private @Nullable String apiToken;
        private @Nullable String apiType;
        private @Nullable String apiUrl;
        private @Nullable String apiUsage;
        private @Nullable String apiUtilizationPercentage;
        private @Nullable String apiVersion;
        private @Nullable String appId;
        private @Nullable List<String> appIds;
        private @Nullable List<ConnectorConfigAppIdsAppsflyer> appIdsAppsflyers;
        private @Nullable String appKey;
        private @Nullable String appSpecificPassword;
        private @Nullable String appSyncMode;
        private @Nullable String appendFileOption;
        private @Nullable String applicationKey;
        private @Nullable List<String> apps;
        private @Nullable String archiveLogFormat;
        private @Nullable String archiveLogPath;
        private @Nullable String archivePattern;
        private @Nullable String areSoapCredentialsProvided;
        private @Nullable String asbIp;
        private @Nullable String asmOption;
        private @Nullable String asmOracleHome;
        private @Nullable String asmPassword;
        private @Nullable String asmTns;
        private @Nullable String asmUser;
        private @Nullable String attributionWindow;
        private @Nullable String attributionWindowSize;
        private @Nullable String auth;
        private @Nullable String authMethod;
        private @Nullable String authMode;
        private @Nullable String authType;
        private @Nullable String authorizationMethod;
        private @Nullable String awsRegionCode;
        private @Nullable String baseCurrency;
        private @Nullable String baseDomain;
        private @Nullable String baseId;
        private @Nullable String baseUrl;
        private @Nullable String bearerToken;
        private @Nullable String blobSasUrl;
        private @Nullable List<String> breakdowns;
        private @Nullable String bucket;
        private @Nullable String bucketName;
        private @Nullable String bucketService;
        private @Nullable String businessId;
        private @Nullable String businessUnitId;
        private @Nullable String certificate;
        private @Nullable String clickAttributionWindow;
        private @Nullable String client;
        private @Nullable String clientCert;
        private @Nullable String clientCertKey;
        private @Nullable String clientId;
        private @Nullable String clientKey;
        private @Nullable String clientName;
        private @Nullable String clientSecret;
        private @Nullable String cloudStorageType;
        private @Nullable List<String> columns;
        private @Nullable String companyId;
        private @Nullable String companyKey;
        private @Nullable String companyRequestToken;
        private @Nullable String companyUuid;
        private @Nullable String compression;
        private @Nullable String configMethod;
        private @Nullable String configRepositoryUrl;
        private @Nullable String configType;
        private @Nullable String connectingUser;
        private @Nullable String connectingUserEmail;
        private @Nullable String connectionMethod;
        private @Nullable String connectionString;
        private @Nullable String connectionType;
        private @Nullable String consumerGroup;
        private @Nullable String consumerKey;
        private @Nullable String consumerSecret;
        private @Nullable String containerAddress;
        private @Nullable String containerName;
        private @Nullable String contentOwnerId;
        private @Nullable String conversationWebhookUrl;
        private @Nullable List<String> conversionDimensions;
        private @Nullable String conversionReportTime;
        private @Nullable String conversionWindowSize;
        private @Nullable String csvDefinition;
        private @Nullable String currency;
        private @Nullable String customEventSyncMode;
        private @Nullable List<String> customEvents;
        private @Nullable List<String> customFieldIds;
        private @Nullable List<String> customFloodlightVariables;
        private @Nullable List<ConnectorConfigCustomReport> customReports;
        private @Nullable List<ConnectorConfigCustomTable> customTables;
        private @Nullable String customerId;
        private @Nullable String customerListId;
        private @Nullable String dailyApiCallLimit;
        private @Nullable String dataAccessMethod;
        private @Nullable String dataCenter;
        private @Nullable String dataSetName;
        private @Nullable String database;
        private @Nullable String datasetId;
        private @Nullable String datasource;
        private @Nullable String dateGranularity;
        private @Nullable String delimiter;
        private @Nullable List<String> dimensionAttributes;
        private @Nullable List<String> dimensions;
        private @Nullable String distributedConnectorClusterSize;
        private @Nullable String domain;
        private @Nullable String domainHostName;
        private @Nullable String domainName;
        private @Nullable String domainType;
        private @Nullable List<String> elements;
        private @Nullable String email;
        private @Nullable String emptyHeader;
        private @Nullable String enableAllDimensionCombinations;
        private @Nullable String enableArchiveLogOnly;
        private @Nullable String enableDataExtensionsSyncing;
        private @Nullable String enableDistributedConnectorMode;
        private @Nullable String enableEnrichments;
        private @Nullable String enableExports;
        private @Nullable String enableTde;
        private @Nullable String encodedPublicKey;
        private @Nullable String encryptionKey;
        private @Nullable String endpoint;
        private @Nullable String engagementAttributionWindow;
        private @Nullable String enrichedExport;
        private @Nullable String entityId;
        private @Nullable String environment;
        private @Nullable String escapeChar;
        private @Nullable String euRegion;
        private @Nullable List<String> events;
        private @Nullable String exportStorageType;
        private @Nullable String externalId;
        private @Nullable List<String> fields;
        private @Nullable String fileType;
        private @Nullable String filter;
        private @Nullable String financeAccountSyncMode;
        private @Nullable List<String> financeAccounts;
        private @Nullable String folder;
        private @Nullable String folderId;
        private @Nullable String folderPath;
        private @Nullable String forecastId;
        private @Nullable String ftpHost;
        private @Nullable String ftpPassword;
        private @Nullable String ftpPort;
        private @Nullable String ftpUser;
        private @Nullable String function;
        private @Nullable String functionApp;
        private @Nullable String functionKey;
        private @Nullable String functionName;
        private @Nullable String functionTrigger;
        private @Nullable String gcsBucket;
        private @Nullable String gcsFolder;
        private @Nullable String groupName;
        private @Nullable String hasManagePermissions;
        private @Nullable String homeFolder;
        private @Nullable String host;
        private @Nullable String hostIp;
        private @Nullable String hostUser;
        private @Nullable List<String> hosts;
        private @Nullable String identity;
        private @Nullable String includeOcapiEndpoints;
        private @Nullable String instance;
        private @Nullable String instanceNumber;
        private @Nullable String instanceUrl;
        private @Nullable String integrationKey;
        private @Nullable String isAccountLevelConnector;
        private @Nullable String isAuth2Enabled;
        private @Nullable String isCustomApiCredentials;
        private @Nullable String isExternalActivitiesEndpointSelected;
        private @Nullable String isFtps;
        private @Nullable String isKeypair;
        private @Nullable String isMultiEntityFeatureEnabled;
        private @Nullable String isNewPackage;
        private @Nullable String isPrivateKeyEncrypted;
        private @Nullable String isPrivateLinkRequired;
        private @Nullable String isPublic;
        private @Nullable String isSailthruConnectEnabled;
        private @Nullable String isSecure;
        private @Nullable String isSingleTableMode;
        private @Nullable String isVendor;
        private @Nullable String jsonDeliveryMode;
        private @Nullable String key;
        private @Nullable String keyPassword;
        private @Nullable String keyStoreType;
        private @Nullable String keystore;
        private @Nullable String keystorePassword;
        private @Nullable String lastSyncedChangesUtc_;
        private @Nullable String latestVersion;
        private @Nullable String limitForApiCallsToExternalActivitiesEndpoint;
        private @Nullable String lineSeparator;
        private @Nullable String listStrategy;
        private @Nullable String listSyncMode;
        private @Nullable String logJournal;
        private @Nullable String logJournalSchema;
        private @Nullable String login;
        private @Nullable String loginPassword;
        private @Nullable List<String> managerAccounts;
        private @Nullable String merchantId;
        private @Nullable String messageType;
        private @Nullable List<String> metrics;
        private @Nullable String namedRange;
        private @Nullable String namespace;
        private @Nullable String networkCode;
        private @Nullable String nullSequence;
        private @Nullable String oauthToken;
        private @Nullable String oauthTokenSecret;
        private @Nullable String ocapiClientId;
        private @Nullable String ocapiClientSecret;
        private @Nullable String ocapiCustomObjectTypes;
        private @Nullable String ocapiHostname;
        private @Nullable String onError;
        private @Nullable String onPremise;
        private @Nullable String organization;
        private @Nullable String organizationId;
        private @Nullable List<String> organizations;
        private @Nullable List<String> packedModeTables;
        private @Nullable String packingMode;
        private @Nullable List<String> pages;
        private @Nullable String partnerCode;
        private @Nullable List<String> partners;
        private @Nullable String passphrase;
        private @Nullable String password;
        private @Nullable String pat;
        private @Nullable String patName;
        private @Nullable String patSecret;
        private @Nullable String path;
        private @Nullable String pattern;
        private @Nullable String pdbName;
        private @Nullable String pemCertificate;
        private @Nullable String pemPrivateKey;
        private @Nullable List<String> perInteractionDimensions;
        private @Nullable String personalAccessToken;
        private @Nullable String pgpPassPhrase;
        private @Nullable String pgpSecretKey;
        private @Nullable String phoneNumber;
        private @Nullable String port;
        private @Nullable String postClickAttributionWindowSize;
        private @Nullable String prebuiltReport;
        private @Nullable String prefix;
        private @Nullable List<String> primaryKeys;
        private @Nullable String privateKey;
        private @Nullable List<String> profiles;
        private @Nullable List<ConnectorConfigProjectCredential> projectCredentials;
        private @Nullable String projectId;
        private @Nullable List<String> projects;
        private @Nullable List<String> properties;
        private @Nullable String publicKey;
        private @Nullable String publicationName;
        private @Nullable String queryId;
        private @Nullable String queryParamValue;
        private @Nullable String refreshTokenExpiresAt;
        private @Nullable String region;
        private @Nullable String replicaId;
        private @Nullable String replicationSlot;
        private @Nullable List<String> reportConfigurationIds;
        private @Nullable String reportFormatType;
        private @Nullable List<String> reportSuites;
        private @Nullable String reportTimezone;
        private @Nullable String reportType;
        private @Nullable String reportUrl;
        private @Nullable List<ConnectorConfigReport> reports;
        private @Nullable List<String> reportsLinkedinAds;
        private @Nullable List<String> repositories;
        private @Nullable String resourceToken;
        private @Nullable String resourceUrl;
        private @Nullable String restApiLimit;
        private @Nullable String rfcLibraryPath;
        private @Nullable String role;
        private @Nullable String roleArn;
        private @Nullable String rollbackWindowSize;
        private @Nullable String s3Bucket;
        private @Nullable String s3ExportBucket;
        private @Nullable String s3ExportFolder;
        private @Nullable String s3ExportRoleArn;
        private @Nullable String s3RoleArn;
        private @Nullable String s3bucket;
        private @Nullable String s3externalId;
        private @Nullable String s3folder;
        private @Nullable String s3path;
        private @Nullable String s3roleArn;
        private @Nullable String salesAccountSyncMode;
        private @Nullable List<String> salesAccounts;
        private @Nullable String salesforceSecurityToken;
        private @Nullable String sandboxAccount;
        private @Nullable String sapSchema;
        private @Nullable String sapUser;
        private @Nullable String saslMechanism;
        private @Nullable String saslPlainKey;
        private @Nullable String saslPlainSecret;
        private @Nullable String saslScram256Key;
        private @Nullable String saslScram256Secret;
        private @Nullable String saslScram512Key;
        private @Nullable String saslScram512Secret;
        private @Nullable String schemaRegistryCredentialsSource;
        private @Nullable String schemaRegistryKey;
        private @Nullable String schemaRegistrySecret;
        private @Nullable List<String> schemaRegistryUrls;
        private @Nullable String secret;
        private @Nullable String secretKey;
        private @Nullable String secrets;
        private @Nullable List<ConnectorConfigSecretsList> secretsLists;
        private @Nullable String securityProtocol;
        private @Nullable List<String> segments;
        private @Nullable List<String> selectedExports;
        private @Nullable String senderId;
        private @Nullable String senderPassword;
        private @Nullable String serverAddress;
        private @Nullable String serverUrl;
        private @Nullable List<String> servers;
        private @Nullable String serviceAccount;
        private @Nullable String serviceAccountEmail;
        private @Nullable String serviceAccountKey;
        private @Nullable String serviceVersion;
        private @Nullable String sftpHost;
        private @Nullable String sftpIsKeyPair;
        private @Nullable String sftpPassword;
        private @Nullable String sftpPort;
        private @Nullable String sftpPublicKey;
        private @Nullable String sftpUser;
        private @Nullable String shareUrl;
        private @Nullable String sheetId;
        private @Nullable String shop;
        private @Nullable String shortCode;
        private @Nullable String showRecordsWithNoMetrics;
        private @Nullable String sid;
        private @Nullable String signerPublicKey;
        private @Nullable String siteAddress;
        private @Nullable String siteId;
        private @Nullable String siteName;
        private @Nullable List<String> siteUrls;
        private @Nullable String skipAfter;
        private @Nullable String skipBefore;
        private @Nullable String soapUri;
        private @Nullable String socialDataSyncTimeframe;
        private @Nullable String source;
        private @Nullable String storeHash;
        private @Nullable String subDomain;
        private @Nullable String subdomain;
        private @Nullable String subscriberName;
        private @Nullable String subscription;
        private @Nullable String supportConnectedAccountsSync;
        private @Nullable String supportNestedColumns;
        private @Nullable String surveyIds;
        private @Nullable String swipeAttributionWindow;
        private @Nullable String syncDataLocker;
        private @Nullable String syncFormat;
        private @Nullable String syncFormulaFields;
        private @Nullable String syncMetadata;
        private @Nullable String syncMethod;
        private @Nullable String syncMode;
        private @Nullable String syncMultipleAccounts;
        private @Nullable String syncPackMode;
        private @Nullable String syncPullApi;
        private @Nullable String syncType;
        private @Nullable String sysnr;
        private @Nullable String tableName;
        private @Nullable String tdeCertificate;
        private @Nullable String tdeCertificateName;
        private @Nullable String tdePassword;
        private @Nullable String tdePrivateKey;
        private @Nullable String teamId;
        private @Nullable String technicalAccountId;
        private @Nullable List<String> templateLabels;
        private @Nullable String tenant;
        private @Nullable String tenantId;
        private @Nullable String testTableName;
        private @Nullable String timeZone;
        private @Nullable String timeframeMonths;
        private @Nullable String tns;
        private @Nullable String tokenAuthenticatedContainer;
        private @Nullable String tokenAuthenticatedDatabase;
        private @Nullable String tokenId;
        private @Nullable String tokenKey;
        private @Nullable String tokenSecret;
        private @Nullable String tokenSecretKey;
        private @Nullable List<String> topics;
        private @Nullable String trustStoreType;
        private @Nullable String trustedCert;
        private @Nullable String truststore;
        private @Nullable String tunnelHost;
        private @Nullable String tunnelPort;
        private @Nullable String tunnelUser;
        private @Nullable String uniqueId;
        private @Nullable String updateConfigOnEachSync;
        private @Nullable String updateMethod;
        private @Nullable String uri;
        private @Nullable String useApiKeys;
        private @Nullable String useCustomerBucket;
        private @Nullable String useOracleRac;
        private @Nullable String usePgpEncryptionOptions;
        private @Nullable String useServiceAccount;
        private @Nullable String useTemplateLabels;
        private @Nullable String useWebhooks;
        private @Nullable String useWorkspace;
        private @Nullable String user;
        private @Nullable String userId;
        private @Nullable String userKey;
        private @Nullable String userName;
        private @Nullable List<String> userProfiles;
        private @Nullable String username;
        private @Nullable String viewAttributionWindow;
        private @Nullable String viewThroughAttributionWindowSize;
        private @Nullable String webhookEndpoint;
        private @Nullable String webhookKey;
        private @Nullable String webhookUrl;
        private @Nullable String wordPressSiteIdOrWoocommerceDomainName;
        private @Nullable String workspaceName;
        private @Nullable String workspaceSameAsSource;
        private @Nullable String workspaceSchema;
        private @Nullable String wsCertificate;
        public Builder() {}
        public Builder(ConnectorConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.absConnectionMethod = defaults.absConnectionMethod;
    	      this.absConnectionString = defaults.absConnectionString;
    	      this.absContainerAddress = defaults.absContainerAddress;
    	      this.absContainerName = defaults.absContainerName;
    	      this.absHostIp = defaults.absHostIp;
    	      this.absHostUser = defaults.absHostUser;
    	      this.absPrefix = defaults.absPrefix;
    	      this.absPublicKey = defaults.absPublicKey;
    	      this.accessKey = defaults.accessKey;
    	      this.accessKeyId = defaults.accessKeyId;
    	      this.accessKeySecret = defaults.accessKeySecret;
    	      this.accessToken = defaults.accessToken;
    	      this.accessType = defaults.accessType;
    	      this.account = defaults.account;
    	      this.accountId = defaults.accountId;
    	      this.accountIds = defaults.accountIds;
    	      this.accountKey = defaults.accountKey;
    	      this.accountName = defaults.accountName;
    	      this.accountSyncMode = defaults.accountSyncMode;
    	      this.accounts = defaults.accounts;
    	      this.accountsRedditAds = defaults.accountsRedditAds;
    	      this.accountsSyncMode = defaults.accountsSyncMode;
    	      this.actionBreakdowns = defaults.actionBreakdowns;
    	      this.actionReportTime = defaults.actionReportTime;
    	      this.adAnalytics = defaults.adAnalytics;
    	      this.adUnitView = defaults.adUnitView;
    	      this.adminApiKey = defaults.adminApiKey;
    	      this.adobeAnalyticsConfigurations = defaults.adobeAnalyticsConfigurations;
    	      this.advertisables = defaults.advertisables;
    	      this.advertisers = defaults.advertisers;
    	      this.advertisersIds = defaults.advertisersIds;
    	      this.advertisersSyncMode = defaults.advertisersSyncMode;
    	      this.agentHost = defaults.agentHost;
    	      this.agentOraHome = defaults.agentOraHome;
    	      this.agentPassword = defaults.agentPassword;
    	      this.agentPort = defaults.agentPort;
    	      this.agentPublicCert = defaults.agentPublicCert;
    	      this.agentUser = defaults.agentUser;
    	      this.aggregation = defaults.aggregation;
    	      this.alwaysEncrypted = defaults.alwaysEncrypted;
    	      this.apiAccessToken = defaults.apiAccessToken;
    	      this.apiId = defaults.apiId;
    	      this.apiKey = defaults.apiKey;
    	      this.apiKeyApiSecret = defaults.apiKeyApiSecret;
    	      this.apiKeys = defaults.apiKeys;
    	      this.apiQuota = defaults.apiQuota;
    	      this.apiRequestsPerMinute = defaults.apiRequestsPerMinute;
    	      this.apiSecret = defaults.apiSecret;
    	      this.apiSecretKey = defaults.apiSecretKey;
    	      this.apiToken = defaults.apiToken;
    	      this.apiType = defaults.apiType;
    	      this.apiUrl = defaults.apiUrl;
    	      this.apiUsage = defaults.apiUsage;
    	      this.apiUtilizationPercentage = defaults.apiUtilizationPercentage;
    	      this.apiVersion = defaults.apiVersion;
    	      this.appId = defaults.appId;
    	      this.appIds = defaults.appIds;
    	      this.appIdsAppsflyers = defaults.appIdsAppsflyers;
    	      this.appKey = defaults.appKey;
    	      this.appSpecificPassword = defaults.appSpecificPassword;
    	      this.appSyncMode = defaults.appSyncMode;
    	      this.appendFileOption = defaults.appendFileOption;
    	      this.applicationKey = defaults.applicationKey;
    	      this.apps = defaults.apps;
    	      this.archiveLogFormat = defaults.archiveLogFormat;
    	      this.archiveLogPath = defaults.archiveLogPath;
    	      this.archivePattern = defaults.archivePattern;
    	      this.areSoapCredentialsProvided = defaults.areSoapCredentialsProvided;
    	      this.asbIp = defaults.asbIp;
    	      this.asmOption = defaults.asmOption;
    	      this.asmOracleHome = defaults.asmOracleHome;
    	      this.asmPassword = defaults.asmPassword;
    	      this.asmTns = defaults.asmTns;
    	      this.asmUser = defaults.asmUser;
    	      this.attributionWindow = defaults.attributionWindow;
    	      this.attributionWindowSize = defaults.attributionWindowSize;
    	      this.auth = defaults.auth;
    	      this.authMethod = defaults.authMethod;
    	      this.authMode = defaults.authMode;
    	      this.authType = defaults.authType;
    	      this.authorizationMethod = defaults.authorizationMethod;
    	      this.awsRegionCode = defaults.awsRegionCode;
    	      this.baseCurrency = defaults.baseCurrency;
    	      this.baseDomain = defaults.baseDomain;
    	      this.baseId = defaults.baseId;
    	      this.baseUrl = defaults.baseUrl;
    	      this.bearerToken = defaults.bearerToken;
    	      this.blobSasUrl = defaults.blobSasUrl;
    	      this.breakdowns = defaults.breakdowns;
    	      this.bucket = defaults.bucket;
    	      this.bucketName = defaults.bucketName;
    	      this.bucketService = defaults.bucketService;
    	      this.businessId = defaults.businessId;
    	      this.businessUnitId = defaults.businessUnitId;
    	      this.certificate = defaults.certificate;
    	      this.clickAttributionWindow = defaults.clickAttributionWindow;
    	      this.client = defaults.client;
    	      this.clientCert = defaults.clientCert;
    	      this.clientCertKey = defaults.clientCertKey;
    	      this.clientId = defaults.clientId;
    	      this.clientKey = defaults.clientKey;
    	      this.clientName = defaults.clientName;
    	      this.clientSecret = defaults.clientSecret;
    	      this.cloudStorageType = defaults.cloudStorageType;
    	      this.columns = defaults.columns;
    	      this.companyId = defaults.companyId;
    	      this.companyKey = defaults.companyKey;
    	      this.companyRequestToken = defaults.companyRequestToken;
    	      this.companyUuid = defaults.companyUuid;
    	      this.compression = defaults.compression;
    	      this.configMethod = defaults.configMethod;
    	      this.configRepositoryUrl = defaults.configRepositoryUrl;
    	      this.configType = defaults.configType;
    	      this.connectingUser = defaults.connectingUser;
    	      this.connectingUserEmail = defaults.connectingUserEmail;
    	      this.connectionMethod = defaults.connectionMethod;
    	      this.connectionString = defaults.connectionString;
    	      this.connectionType = defaults.connectionType;
    	      this.consumerGroup = defaults.consumerGroup;
    	      this.consumerKey = defaults.consumerKey;
    	      this.consumerSecret = defaults.consumerSecret;
    	      this.containerAddress = defaults.containerAddress;
    	      this.containerName = defaults.containerName;
    	      this.contentOwnerId = defaults.contentOwnerId;
    	      this.conversationWebhookUrl = defaults.conversationWebhookUrl;
    	      this.conversionDimensions = defaults.conversionDimensions;
    	      this.conversionReportTime = defaults.conversionReportTime;
    	      this.conversionWindowSize = defaults.conversionWindowSize;
    	      this.csvDefinition = defaults.csvDefinition;
    	      this.currency = defaults.currency;
    	      this.customEventSyncMode = defaults.customEventSyncMode;
    	      this.customEvents = defaults.customEvents;
    	      this.customFieldIds = defaults.customFieldIds;
    	      this.customFloodlightVariables = defaults.customFloodlightVariables;
    	      this.customReports = defaults.customReports;
    	      this.customTables = defaults.customTables;
    	      this.customerId = defaults.customerId;
    	      this.customerListId = defaults.customerListId;
    	      this.dailyApiCallLimit = defaults.dailyApiCallLimit;
    	      this.dataAccessMethod = defaults.dataAccessMethod;
    	      this.dataCenter = defaults.dataCenter;
    	      this.dataSetName = defaults.dataSetName;
    	      this.database = defaults.database;
    	      this.datasetId = defaults.datasetId;
    	      this.datasource = defaults.datasource;
    	      this.dateGranularity = defaults.dateGranularity;
    	      this.delimiter = defaults.delimiter;
    	      this.dimensionAttributes = defaults.dimensionAttributes;
    	      this.dimensions = defaults.dimensions;
    	      this.distributedConnectorClusterSize = defaults.distributedConnectorClusterSize;
    	      this.domain = defaults.domain;
    	      this.domainHostName = defaults.domainHostName;
    	      this.domainName = defaults.domainName;
    	      this.domainType = defaults.domainType;
    	      this.elements = defaults.elements;
    	      this.email = defaults.email;
    	      this.emptyHeader = defaults.emptyHeader;
    	      this.enableAllDimensionCombinations = defaults.enableAllDimensionCombinations;
    	      this.enableArchiveLogOnly = defaults.enableArchiveLogOnly;
    	      this.enableDataExtensionsSyncing = defaults.enableDataExtensionsSyncing;
    	      this.enableDistributedConnectorMode = defaults.enableDistributedConnectorMode;
    	      this.enableEnrichments = defaults.enableEnrichments;
    	      this.enableExports = defaults.enableExports;
    	      this.enableTde = defaults.enableTde;
    	      this.encodedPublicKey = defaults.encodedPublicKey;
    	      this.encryptionKey = defaults.encryptionKey;
    	      this.endpoint = defaults.endpoint;
    	      this.engagementAttributionWindow = defaults.engagementAttributionWindow;
    	      this.enrichedExport = defaults.enrichedExport;
    	      this.entityId = defaults.entityId;
    	      this.environment = defaults.environment;
    	      this.escapeChar = defaults.escapeChar;
    	      this.euRegion = defaults.euRegion;
    	      this.events = defaults.events;
    	      this.exportStorageType = defaults.exportStorageType;
    	      this.externalId = defaults.externalId;
    	      this.fields = defaults.fields;
    	      this.fileType = defaults.fileType;
    	      this.filter = defaults.filter;
    	      this.financeAccountSyncMode = defaults.financeAccountSyncMode;
    	      this.financeAccounts = defaults.financeAccounts;
    	      this.folder = defaults.folder;
    	      this.folderId = defaults.folderId;
    	      this.folderPath = defaults.folderPath;
    	      this.forecastId = defaults.forecastId;
    	      this.ftpHost = defaults.ftpHost;
    	      this.ftpPassword = defaults.ftpPassword;
    	      this.ftpPort = defaults.ftpPort;
    	      this.ftpUser = defaults.ftpUser;
    	      this.function = defaults.function;
    	      this.functionApp = defaults.functionApp;
    	      this.functionKey = defaults.functionKey;
    	      this.functionName = defaults.functionName;
    	      this.functionTrigger = defaults.functionTrigger;
    	      this.gcsBucket = defaults.gcsBucket;
    	      this.gcsFolder = defaults.gcsFolder;
    	      this.groupName = defaults.groupName;
    	      this.hasManagePermissions = defaults.hasManagePermissions;
    	      this.homeFolder = defaults.homeFolder;
    	      this.host = defaults.host;
    	      this.hostIp = defaults.hostIp;
    	      this.hostUser = defaults.hostUser;
    	      this.hosts = defaults.hosts;
    	      this.identity = defaults.identity;
    	      this.includeOcapiEndpoints = defaults.includeOcapiEndpoints;
    	      this.instance = defaults.instance;
    	      this.instanceNumber = defaults.instanceNumber;
    	      this.instanceUrl = defaults.instanceUrl;
    	      this.integrationKey = defaults.integrationKey;
    	      this.isAccountLevelConnector = defaults.isAccountLevelConnector;
    	      this.isAuth2Enabled = defaults.isAuth2Enabled;
    	      this.isCustomApiCredentials = defaults.isCustomApiCredentials;
    	      this.isExternalActivitiesEndpointSelected = defaults.isExternalActivitiesEndpointSelected;
    	      this.isFtps = defaults.isFtps;
    	      this.isKeypair = defaults.isKeypair;
    	      this.isMultiEntityFeatureEnabled = defaults.isMultiEntityFeatureEnabled;
    	      this.isNewPackage = defaults.isNewPackage;
    	      this.isPrivateKeyEncrypted = defaults.isPrivateKeyEncrypted;
    	      this.isPrivateLinkRequired = defaults.isPrivateLinkRequired;
    	      this.isPublic = defaults.isPublic;
    	      this.isSailthruConnectEnabled = defaults.isSailthruConnectEnabled;
    	      this.isSecure = defaults.isSecure;
    	      this.isSingleTableMode = defaults.isSingleTableMode;
    	      this.isVendor = defaults.isVendor;
    	      this.jsonDeliveryMode = defaults.jsonDeliveryMode;
    	      this.key = defaults.key;
    	      this.keyPassword = defaults.keyPassword;
    	      this.keyStoreType = defaults.keyStoreType;
    	      this.keystore = defaults.keystore;
    	      this.keystorePassword = defaults.keystorePassword;
    	      this.lastSyncedChangesUtc_ = defaults.lastSyncedChangesUtc_;
    	      this.latestVersion = defaults.latestVersion;
    	      this.limitForApiCallsToExternalActivitiesEndpoint = defaults.limitForApiCallsToExternalActivitiesEndpoint;
    	      this.lineSeparator = defaults.lineSeparator;
    	      this.listStrategy = defaults.listStrategy;
    	      this.listSyncMode = defaults.listSyncMode;
    	      this.logJournal = defaults.logJournal;
    	      this.logJournalSchema = defaults.logJournalSchema;
    	      this.login = defaults.login;
    	      this.loginPassword = defaults.loginPassword;
    	      this.managerAccounts = defaults.managerAccounts;
    	      this.merchantId = defaults.merchantId;
    	      this.messageType = defaults.messageType;
    	      this.metrics = defaults.metrics;
    	      this.namedRange = defaults.namedRange;
    	      this.namespace = defaults.namespace;
    	      this.networkCode = defaults.networkCode;
    	      this.nullSequence = defaults.nullSequence;
    	      this.oauthToken = defaults.oauthToken;
    	      this.oauthTokenSecret = defaults.oauthTokenSecret;
    	      this.ocapiClientId = defaults.ocapiClientId;
    	      this.ocapiClientSecret = defaults.ocapiClientSecret;
    	      this.ocapiCustomObjectTypes = defaults.ocapiCustomObjectTypes;
    	      this.ocapiHostname = defaults.ocapiHostname;
    	      this.onError = defaults.onError;
    	      this.onPremise = defaults.onPremise;
    	      this.organization = defaults.organization;
    	      this.organizationId = defaults.organizationId;
    	      this.organizations = defaults.organizations;
    	      this.packedModeTables = defaults.packedModeTables;
    	      this.packingMode = defaults.packingMode;
    	      this.pages = defaults.pages;
    	      this.partnerCode = defaults.partnerCode;
    	      this.partners = defaults.partners;
    	      this.passphrase = defaults.passphrase;
    	      this.password = defaults.password;
    	      this.pat = defaults.pat;
    	      this.patName = defaults.patName;
    	      this.patSecret = defaults.patSecret;
    	      this.path = defaults.path;
    	      this.pattern = defaults.pattern;
    	      this.pdbName = defaults.pdbName;
    	      this.pemCertificate = defaults.pemCertificate;
    	      this.pemPrivateKey = defaults.pemPrivateKey;
    	      this.perInteractionDimensions = defaults.perInteractionDimensions;
    	      this.personalAccessToken = defaults.personalAccessToken;
    	      this.pgpPassPhrase = defaults.pgpPassPhrase;
    	      this.pgpSecretKey = defaults.pgpSecretKey;
    	      this.phoneNumber = defaults.phoneNumber;
    	      this.port = defaults.port;
    	      this.postClickAttributionWindowSize = defaults.postClickAttributionWindowSize;
    	      this.prebuiltReport = defaults.prebuiltReport;
    	      this.prefix = defaults.prefix;
    	      this.primaryKeys = defaults.primaryKeys;
    	      this.privateKey = defaults.privateKey;
    	      this.profiles = defaults.profiles;
    	      this.projectCredentials = defaults.projectCredentials;
    	      this.projectId = defaults.projectId;
    	      this.projects = defaults.projects;
    	      this.properties = defaults.properties;
    	      this.publicKey = defaults.publicKey;
    	      this.publicationName = defaults.publicationName;
    	      this.queryId = defaults.queryId;
    	      this.queryParamValue = defaults.queryParamValue;
    	      this.refreshTokenExpiresAt = defaults.refreshTokenExpiresAt;
    	      this.region = defaults.region;
    	      this.replicaId = defaults.replicaId;
    	      this.replicationSlot = defaults.replicationSlot;
    	      this.reportConfigurationIds = defaults.reportConfigurationIds;
    	      this.reportFormatType = defaults.reportFormatType;
    	      this.reportSuites = defaults.reportSuites;
    	      this.reportTimezone = defaults.reportTimezone;
    	      this.reportType = defaults.reportType;
    	      this.reportUrl = defaults.reportUrl;
    	      this.reports = defaults.reports;
    	      this.reportsLinkedinAds = defaults.reportsLinkedinAds;
    	      this.repositories = defaults.repositories;
    	      this.resourceToken = defaults.resourceToken;
    	      this.resourceUrl = defaults.resourceUrl;
    	      this.restApiLimit = defaults.restApiLimit;
    	      this.rfcLibraryPath = defaults.rfcLibraryPath;
    	      this.role = defaults.role;
    	      this.roleArn = defaults.roleArn;
    	      this.rollbackWindowSize = defaults.rollbackWindowSize;
    	      this.s3Bucket = defaults.s3Bucket;
    	      this.s3ExportBucket = defaults.s3ExportBucket;
    	      this.s3ExportFolder = defaults.s3ExportFolder;
    	      this.s3ExportRoleArn = defaults.s3ExportRoleArn;
    	      this.s3RoleArn = defaults.s3RoleArn;
    	      this.s3bucket = defaults.s3bucket;
    	      this.s3externalId = defaults.s3externalId;
    	      this.s3folder = defaults.s3folder;
    	      this.s3path = defaults.s3path;
    	      this.s3roleArn = defaults.s3roleArn;
    	      this.salesAccountSyncMode = defaults.salesAccountSyncMode;
    	      this.salesAccounts = defaults.salesAccounts;
    	      this.salesforceSecurityToken = defaults.salesforceSecurityToken;
    	      this.sandboxAccount = defaults.sandboxAccount;
    	      this.sapSchema = defaults.sapSchema;
    	      this.sapUser = defaults.sapUser;
    	      this.saslMechanism = defaults.saslMechanism;
    	      this.saslPlainKey = defaults.saslPlainKey;
    	      this.saslPlainSecret = defaults.saslPlainSecret;
    	      this.saslScram256Key = defaults.saslScram256Key;
    	      this.saslScram256Secret = defaults.saslScram256Secret;
    	      this.saslScram512Key = defaults.saslScram512Key;
    	      this.saslScram512Secret = defaults.saslScram512Secret;
    	      this.schemaRegistryCredentialsSource = defaults.schemaRegistryCredentialsSource;
    	      this.schemaRegistryKey = defaults.schemaRegistryKey;
    	      this.schemaRegistrySecret = defaults.schemaRegistrySecret;
    	      this.schemaRegistryUrls = defaults.schemaRegistryUrls;
    	      this.secret = defaults.secret;
    	      this.secretKey = defaults.secretKey;
    	      this.secrets = defaults.secrets;
    	      this.secretsLists = defaults.secretsLists;
    	      this.securityProtocol = defaults.securityProtocol;
    	      this.segments = defaults.segments;
    	      this.selectedExports = defaults.selectedExports;
    	      this.senderId = defaults.senderId;
    	      this.senderPassword = defaults.senderPassword;
    	      this.serverAddress = defaults.serverAddress;
    	      this.serverUrl = defaults.serverUrl;
    	      this.servers = defaults.servers;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.serviceAccountEmail = defaults.serviceAccountEmail;
    	      this.serviceAccountKey = defaults.serviceAccountKey;
    	      this.serviceVersion = defaults.serviceVersion;
    	      this.sftpHost = defaults.sftpHost;
    	      this.sftpIsKeyPair = defaults.sftpIsKeyPair;
    	      this.sftpPassword = defaults.sftpPassword;
    	      this.sftpPort = defaults.sftpPort;
    	      this.sftpPublicKey = defaults.sftpPublicKey;
    	      this.sftpUser = defaults.sftpUser;
    	      this.shareUrl = defaults.shareUrl;
    	      this.sheetId = defaults.sheetId;
    	      this.shop = defaults.shop;
    	      this.shortCode = defaults.shortCode;
    	      this.showRecordsWithNoMetrics = defaults.showRecordsWithNoMetrics;
    	      this.sid = defaults.sid;
    	      this.signerPublicKey = defaults.signerPublicKey;
    	      this.siteAddress = defaults.siteAddress;
    	      this.siteId = defaults.siteId;
    	      this.siteName = defaults.siteName;
    	      this.siteUrls = defaults.siteUrls;
    	      this.skipAfter = defaults.skipAfter;
    	      this.skipBefore = defaults.skipBefore;
    	      this.soapUri = defaults.soapUri;
    	      this.socialDataSyncTimeframe = defaults.socialDataSyncTimeframe;
    	      this.source = defaults.source;
    	      this.storeHash = defaults.storeHash;
    	      this.subDomain = defaults.subDomain;
    	      this.subdomain = defaults.subdomain;
    	      this.subscriberName = defaults.subscriberName;
    	      this.subscription = defaults.subscription;
    	      this.supportConnectedAccountsSync = defaults.supportConnectedAccountsSync;
    	      this.supportNestedColumns = defaults.supportNestedColumns;
    	      this.surveyIds = defaults.surveyIds;
    	      this.swipeAttributionWindow = defaults.swipeAttributionWindow;
    	      this.syncDataLocker = defaults.syncDataLocker;
    	      this.syncFormat = defaults.syncFormat;
    	      this.syncFormulaFields = defaults.syncFormulaFields;
    	      this.syncMetadata = defaults.syncMetadata;
    	      this.syncMethod = defaults.syncMethod;
    	      this.syncMode = defaults.syncMode;
    	      this.syncMultipleAccounts = defaults.syncMultipleAccounts;
    	      this.syncPackMode = defaults.syncPackMode;
    	      this.syncPullApi = defaults.syncPullApi;
    	      this.syncType = defaults.syncType;
    	      this.sysnr = defaults.sysnr;
    	      this.tableName = defaults.tableName;
    	      this.tdeCertificate = defaults.tdeCertificate;
    	      this.tdeCertificateName = defaults.tdeCertificateName;
    	      this.tdePassword = defaults.tdePassword;
    	      this.tdePrivateKey = defaults.tdePrivateKey;
    	      this.teamId = defaults.teamId;
    	      this.technicalAccountId = defaults.technicalAccountId;
    	      this.templateLabels = defaults.templateLabels;
    	      this.tenant = defaults.tenant;
    	      this.tenantId = defaults.tenantId;
    	      this.testTableName = defaults.testTableName;
    	      this.timeZone = defaults.timeZone;
    	      this.timeframeMonths = defaults.timeframeMonths;
    	      this.tns = defaults.tns;
    	      this.tokenAuthenticatedContainer = defaults.tokenAuthenticatedContainer;
    	      this.tokenAuthenticatedDatabase = defaults.tokenAuthenticatedDatabase;
    	      this.tokenId = defaults.tokenId;
    	      this.tokenKey = defaults.tokenKey;
    	      this.tokenSecret = defaults.tokenSecret;
    	      this.tokenSecretKey = defaults.tokenSecretKey;
    	      this.topics = defaults.topics;
    	      this.trustStoreType = defaults.trustStoreType;
    	      this.trustedCert = defaults.trustedCert;
    	      this.truststore = defaults.truststore;
    	      this.tunnelHost = defaults.tunnelHost;
    	      this.tunnelPort = defaults.tunnelPort;
    	      this.tunnelUser = defaults.tunnelUser;
    	      this.uniqueId = defaults.uniqueId;
    	      this.updateConfigOnEachSync = defaults.updateConfigOnEachSync;
    	      this.updateMethod = defaults.updateMethod;
    	      this.uri = defaults.uri;
    	      this.useApiKeys = defaults.useApiKeys;
    	      this.useCustomerBucket = defaults.useCustomerBucket;
    	      this.useOracleRac = defaults.useOracleRac;
    	      this.usePgpEncryptionOptions = defaults.usePgpEncryptionOptions;
    	      this.useServiceAccount = defaults.useServiceAccount;
    	      this.useTemplateLabels = defaults.useTemplateLabels;
    	      this.useWebhooks = defaults.useWebhooks;
    	      this.useWorkspace = defaults.useWorkspace;
    	      this.user = defaults.user;
    	      this.userId = defaults.userId;
    	      this.userKey = defaults.userKey;
    	      this.userName = defaults.userName;
    	      this.userProfiles = defaults.userProfiles;
    	      this.username = defaults.username;
    	      this.viewAttributionWindow = defaults.viewAttributionWindow;
    	      this.viewThroughAttributionWindowSize = defaults.viewThroughAttributionWindowSize;
    	      this.webhookEndpoint = defaults.webhookEndpoint;
    	      this.webhookKey = defaults.webhookKey;
    	      this.webhookUrl = defaults.webhookUrl;
    	      this.wordPressSiteIdOrWoocommerceDomainName = defaults.wordPressSiteIdOrWoocommerceDomainName;
    	      this.workspaceName = defaults.workspaceName;
    	      this.workspaceSameAsSource = defaults.workspaceSameAsSource;
    	      this.workspaceSchema = defaults.workspaceSchema;
    	      this.wsCertificate = defaults.wsCertificate;
        }

        @CustomType.Setter
        public Builder absConnectionMethod(@Nullable String absConnectionMethod) {
            this.absConnectionMethod = absConnectionMethod;
            return this;
        }
        @CustomType.Setter
        public Builder absConnectionString(@Nullable String absConnectionString) {
            this.absConnectionString = absConnectionString;
            return this;
        }
        @CustomType.Setter
        public Builder absContainerAddress(@Nullable String absContainerAddress) {
            this.absContainerAddress = absContainerAddress;
            return this;
        }
        @CustomType.Setter
        public Builder absContainerName(@Nullable String absContainerName) {
            this.absContainerName = absContainerName;
            return this;
        }
        @CustomType.Setter
        public Builder absHostIp(@Nullable String absHostIp) {
            this.absHostIp = absHostIp;
            return this;
        }
        @CustomType.Setter
        public Builder absHostUser(@Nullable String absHostUser) {
            this.absHostUser = absHostUser;
            return this;
        }
        @CustomType.Setter
        public Builder absPrefix(@Nullable String absPrefix) {
            this.absPrefix = absPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder absPublicKey(@Nullable String absPublicKey) {
            this.absPublicKey = absPublicKey;
            return this;
        }
        @CustomType.Setter
        public Builder accessKey(@Nullable String accessKey) {
            this.accessKey = accessKey;
            return this;
        }
        @CustomType.Setter
        public Builder accessKeyId(@Nullable String accessKeyId) {
            this.accessKeyId = accessKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder accessKeySecret(@Nullable String accessKeySecret) {
            this.accessKeySecret = accessKeySecret;
            return this;
        }
        @CustomType.Setter
        public Builder accessToken(@Nullable String accessToken) {
            this.accessToken = accessToken;
            return this;
        }
        @CustomType.Setter
        public Builder accessType(@Nullable String accessType) {
            this.accessType = accessType;
            return this;
        }
        @CustomType.Setter
        public Builder account(@Nullable String account) {
            this.account = account;
            return this;
        }
        @CustomType.Setter
        public Builder accountId(@Nullable String accountId) {
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder accountIds(@Nullable List<String> accountIds) {
            this.accountIds = accountIds;
            return this;
        }
        public Builder accountIds(String... accountIds) {
            return accountIds(List.of(accountIds));
        }
        @CustomType.Setter
        public Builder accountKey(@Nullable String accountKey) {
            this.accountKey = accountKey;
            return this;
        }
        @CustomType.Setter
        public Builder accountName(@Nullable String accountName) {
            this.accountName = accountName;
            return this;
        }
        @CustomType.Setter
        public Builder accountSyncMode(@Nullable String accountSyncMode) {
            this.accountSyncMode = accountSyncMode;
            return this;
        }
        @CustomType.Setter
        public Builder accounts(@Nullable List<String> accounts) {
            this.accounts = accounts;
            return this;
        }
        public Builder accounts(String... accounts) {
            return accounts(List.of(accounts));
        }
        @CustomType.Setter
        public Builder accountsRedditAds(@Nullable List<ConnectorConfigAccountsRedditAd> accountsRedditAds) {
            this.accountsRedditAds = accountsRedditAds;
            return this;
        }
        public Builder accountsRedditAds(ConnectorConfigAccountsRedditAd... accountsRedditAds) {
            return accountsRedditAds(List.of(accountsRedditAds));
        }
        @CustomType.Setter
        public Builder accountsSyncMode(@Nullable String accountsSyncMode) {
            this.accountsSyncMode = accountsSyncMode;
            return this;
        }
        @CustomType.Setter
        public Builder actionBreakdowns(@Nullable List<String> actionBreakdowns) {
            this.actionBreakdowns = actionBreakdowns;
            return this;
        }
        public Builder actionBreakdowns(String... actionBreakdowns) {
            return actionBreakdowns(List.of(actionBreakdowns));
        }
        @CustomType.Setter
        public Builder actionReportTime(@Nullable String actionReportTime) {
            this.actionReportTime = actionReportTime;
            return this;
        }
        @CustomType.Setter
        public Builder adAnalytics(@Nullable String adAnalytics) {
            this.adAnalytics = adAnalytics;
            return this;
        }
        @CustomType.Setter
        public Builder adUnitView(@Nullable String adUnitView) {
            this.adUnitView = adUnitView;
            return this;
        }
        @CustomType.Setter
        public Builder adminApiKey(@Nullable String adminApiKey) {
            this.adminApiKey = adminApiKey;
            return this;
        }
        @CustomType.Setter
        public Builder adobeAnalyticsConfigurations(@Nullable List<ConnectorConfigAdobeAnalyticsConfiguration> adobeAnalyticsConfigurations) {
            this.adobeAnalyticsConfigurations = adobeAnalyticsConfigurations;
            return this;
        }
        public Builder adobeAnalyticsConfigurations(ConnectorConfigAdobeAnalyticsConfiguration... adobeAnalyticsConfigurations) {
            return adobeAnalyticsConfigurations(List.of(adobeAnalyticsConfigurations));
        }
        @CustomType.Setter
        public Builder advertisables(@Nullable List<String> advertisables) {
            this.advertisables = advertisables;
            return this;
        }
        public Builder advertisables(String... advertisables) {
            return advertisables(List.of(advertisables));
        }
        @CustomType.Setter
        public Builder advertisers(@Nullable List<String> advertisers) {
            this.advertisers = advertisers;
            return this;
        }
        public Builder advertisers(String... advertisers) {
            return advertisers(List.of(advertisers));
        }
        @CustomType.Setter
        public Builder advertisersIds(@Nullable List<String> advertisersIds) {
            this.advertisersIds = advertisersIds;
            return this;
        }
        public Builder advertisersIds(String... advertisersIds) {
            return advertisersIds(List.of(advertisersIds));
        }
        @CustomType.Setter
        public Builder advertisersSyncMode(@Nullable String advertisersSyncMode) {
            this.advertisersSyncMode = advertisersSyncMode;
            return this;
        }
        @CustomType.Setter
        public Builder agentHost(@Nullable String agentHost) {
            this.agentHost = agentHost;
            return this;
        }
        @CustomType.Setter
        public Builder agentOraHome(@Nullable String agentOraHome) {
            this.agentOraHome = agentOraHome;
            return this;
        }
        @CustomType.Setter
        public Builder agentPassword(@Nullable String agentPassword) {
            this.agentPassword = agentPassword;
            return this;
        }
        @CustomType.Setter
        public Builder agentPort(@Nullable String agentPort) {
            this.agentPort = agentPort;
            return this;
        }
        @CustomType.Setter
        public Builder agentPublicCert(@Nullable String agentPublicCert) {
            this.agentPublicCert = agentPublicCert;
            return this;
        }
        @CustomType.Setter
        public Builder agentUser(@Nullable String agentUser) {
            this.agentUser = agentUser;
            return this;
        }
        @CustomType.Setter
        public Builder aggregation(@Nullable String aggregation) {
            this.aggregation = aggregation;
            return this;
        }
        @CustomType.Setter
        public Builder alwaysEncrypted(@Nullable String alwaysEncrypted) {
            this.alwaysEncrypted = alwaysEncrypted;
            return this;
        }
        @CustomType.Setter
        public Builder apiAccessToken(@Nullable String apiAccessToken) {
            this.apiAccessToken = apiAccessToken;
            return this;
        }
        @CustomType.Setter
        public Builder apiId(@Nullable String apiId) {
            this.apiId = apiId;
            return this;
        }
        @CustomType.Setter
        public Builder apiKey(@Nullable String apiKey) {
            this.apiKey = apiKey;
            return this;
        }
        @CustomType.Setter
        public Builder apiKeyApiSecret(@Nullable String apiKeyApiSecret) {
            this.apiKeyApiSecret = apiKeyApiSecret;
            return this;
        }
        @CustomType.Setter
        public Builder apiKeys(@Nullable List<String> apiKeys) {
            this.apiKeys = apiKeys;
            return this;
        }
        public Builder apiKeys(String... apiKeys) {
            return apiKeys(List.of(apiKeys));
        }
        @CustomType.Setter
        public Builder apiQuota(@Nullable String apiQuota) {
            this.apiQuota = apiQuota;
            return this;
        }
        @CustomType.Setter
        public Builder apiRequestsPerMinute(@Nullable String apiRequestsPerMinute) {
            this.apiRequestsPerMinute = apiRequestsPerMinute;
            return this;
        }
        @CustomType.Setter
        public Builder apiSecret(@Nullable String apiSecret) {
            this.apiSecret = apiSecret;
            return this;
        }
        @CustomType.Setter
        public Builder apiSecretKey(@Nullable String apiSecretKey) {
            this.apiSecretKey = apiSecretKey;
            return this;
        }
        @CustomType.Setter
        public Builder apiToken(@Nullable String apiToken) {
            this.apiToken = apiToken;
            return this;
        }
        @CustomType.Setter
        public Builder apiType(@Nullable String apiType) {
            this.apiType = apiType;
            return this;
        }
        @CustomType.Setter
        public Builder apiUrl(@Nullable String apiUrl) {
            this.apiUrl = apiUrl;
            return this;
        }
        @CustomType.Setter
        public Builder apiUsage(@Nullable String apiUsage) {
            this.apiUsage = apiUsage;
            return this;
        }
        @CustomType.Setter
        public Builder apiUtilizationPercentage(@Nullable String apiUtilizationPercentage) {
            this.apiUtilizationPercentage = apiUtilizationPercentage;
            return this;
        }
        @CustomType.Setter
        public Builder apiVersion(@Nullable String apiVersion) {
            this.apiVersion = apiVersion;
            return this;
        }
        @CustomType.Setter
        public Builder appId(@Nullable String appId) {
            this.appId = appId;
            return this;
        }
        @CustomType.Setter
        public Builder appIds(@Nullable List<String> appIds) {
            this.appIds = appIds;
            return this;
        }
        public Builder appIds(String... appIds) {
            return appIds(List.of(appIds));
        }
        @CustomType.Setter
        public Builder appIdsAppsflyers(@Nullable List<ConnectorConfigAppIdsAppsflyer> appIdsAppsflyers) {
            this.appIdsAppsflyers = appIdsAppsflyers;
            return this;
        }
        public Builder appIdsAppsflyers(ConnectorConfigAppIdsAppsflyer... appIdsAppsflyers) {
            return appIdsAppsflyers(List.of(appIdsAppsflyers));
        }
        @CustomType.Setter
        public Builder appKey(@Nullable String appKey) {
            this.appKey = appKey;
            return this;
        }
        @CustomType.Setter
        public Builder appSpecificPassword(@Nullable String appSpecificPassword) {
            this.appSpecificPassword = appSpecificPassword;
            return this;
        }
        @CustomType.Setter
        public Builder appSyncMode(@Nullable String appSyncMode) {
            this.appSyncMode = appSyncMode;
            return this;
        }
        @CustomType.Setter
        public Builder appendFileOption(@Nullable String appendFileOption) {
            this.appendFileOption = appendFileOption;
            return this;
        }
        @CustomType.Setter
        public Builder applicationKey(@Nullable String applicationKey) {
            this.applicationKey = applicationKey;
            return this;
        }
        @CustomType.Setter
        public Builder apps(@Nullable List<String> apps) {
            this.apps = apps;
            return this;
        }
        public Builder apps(String... apps) {
            return apps(List.of(apps));
        }
        @CustomType.Setter
        public Builder archiveLogFormat(@Nullable String archiveLogFormat) {
            this.archiveLogFormat = archiveLogFormat;
            return this;
        }
        @CustomType.Setter
        public Builder archiveLogPath(@Nullable String archiveLogPath) {
            this.archiveLogPath = archiveLogPath;
            return this;
        }
        @CustomType.Setter
        public Builder archivePattern(@Nullable String archivePattern) {
            this.archivePattern = archivePattern;
            return this;
        }
        @CustomType.Setter
        public Builder areSoapCredentialsProvided(@Nullable String areSoapCredentialsProvided) {
            this.areSoapCredentialsProvided = areSoapCredentialsProvided;
            return this;
        }
        @CustomType.Setter
        public Builder asbIp(@Nullable String asbIp) {
            this.asbIp = asbIp;
            return this;
        }
        @CustomType.Setter
        public Builder asmOption(@Nullable String asmOption) {
            this.asmOption = asmOption;
            return this;
        }
        @CustomType.Setter
        public Builder asmOracleHome(@Nullable String asmOracleHome) {
            this.asmOracleHome = asmOracleHome;
            return this;
        }
        @CustomType.Setter
        public Builder asmPassword(@Nullable String asmPassword) {
            this.asmPassword = asmPassword;
            return this;
        }
        @CustomType.Setter
        public Builder asmTns(@Nullable String asmTns) {
            this.asmTns = asmTns;
            return this;
        }
        @CustomType.Setter
        public Builder asmUser(@Nullable String asmUser) {
            this.asmUser = asmUser;
            return this;
        }
        @CustomType.Setter
        public Builder attributionWindow(@Nullable String attributionWindow) {
            this.attributionWindow = attributionWindow;
            return this;
        }
        @CustomType.Setter
        public Builder attributionWindowSize(@Nullable String attributionWindowSize) {
            this.attributionWindowSize = attributionWindowSize;
            return this;
        }
        @CustomType.Setter
        public Builder auth(@Nullable String auth) {
            this.auth = auth;
            return this;
        }
        @CustomType.Setter
        public Builder authMethod(@Nullable String authMethod) {
            this.authMethod = authMethod;
            return this;
        }
        @CustomType.Setter
        public Builder authMode(@Nullable String authMode) {
            this.authMode = authMode;
            return this;
        }
        @CustomType.Setter
        public Builder authType(@Nullable String authType) {
            this.authType = authType;
            return this;
        }
        @CustomType.Setter
        public Builder authorizationMethod(@Nullable String authorizationMethod) {
            this.authorizationMethod = authorizationMethod;
            return this;
        }
        @CustomType.Setter
        public Builder awsRegionCode(@Nullable String awsRegionCode) {
            this.awsRegionCode = awsRegionCode;
            return this;
        }
        @CustomType.Setter
        public Builder baseCurrency(@Nullable String baseCurrency) {
            this.baseCurrency = baseCurrency;
            return this;
        }
        @CustomType.Setter
        public Builder baseDomain(@Nullable String baseDomain) {
            this.baseDomain = baseDomain;
            return this;
        }
        @CustomType.Setter
        public Builder baseId(@Nullable String baseId) {
            this.baseId = baseId;
            return this;
        }
        @CustomType.Setter
        public Builder baseUrl(@Nullable String baseUrl) {
            this.baseUrl = baseUrl;
            return this;
        }
        @CustomType.Setter
        public Builder bearerToken(@Nullable String bearerToken) {
            this.bearerToken = bearerToken;
            return this;
        }
        @CustomType.Setter
        public Builder blobSasUrl(@Nullable String blobSasUrl) {
            this.blobSasUrl = blobSasUrl;
            return this;
        }
        @CustomType.Setter
        public Builder breakdowns(@Nullable List<String> breakdowns) {
            this.breakdowns = breakdowns;
            return this;
        }
        public Builder breakdowns(String... breakdowns) {
            return breakdowns(List.of(breakdowns));
        }
        @CustomType.Setter
        public Builder bucket(@Nullable String bucket) {
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder bucketName(@Nullable String bucketName) {
            this.bucketName = bucketName;
            return this;
        }
        @CustomType.Setter
        public Builder bucketService(@Nullable String bucketService) {
            this.bucketService = bucketService;
            return this;
        }
        @CustomType.Setter
        public Builder businessId(@Nullable String businessId) {
            this.businessId = businessId;
            return this;
        }
        @CustomType.Setter
        public Builder businessUnitId(@Nullable String businessUnitId) {
            this.businessUnitId = businessUnitId;
            return this;
        }
        @CustomType.Setter
        public Builder certificate(@Nullable String certificate) {
            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder clickAttributionWindow(@Nullable String clickAttributionWindow) {
            this.clickAttributionWindow = clickAttributionWindow;
            return this;
        }
        @CustomType.Setter
        public Builder client(@Nullable String client) {
            this.client = client;
            return this;
        }
        @CustomType.Setter
        public Builder clientCert(@Nullable String clientCert) {
            this.clientCert = clientCert;
            return this;
        }
        @CustomType.Setter
        public Builder clientCertKey(@Nullable String clientCertKey) {
            this.clientCertKey = clientCertKey;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(@Nullable String clientId) {
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientKey(@Nullable String clientKey) {
            this.clientKey = clientKey;
            return this;
        }
        @CustomType.Setter
        public Builder clientName(@Nullable String clientName) {
            this.clientName = clientName;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(@Nullable String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder cloudStorageType(@Nullable String cloudStorageType) {
            this.cloudStorageType = cloudStorageType;
            return this;
        }
        @CustomType.Setter
        public Builder columns(@Nullable List<String> columns) {
            this.columns = columns;
            return this;
        }
        public Builder columns(String... columns) {
            return columns(List.of(columns));
        }
        @CustomType.Setter
        public Builder companyId(@Nullable String companyId) {
            this.companyId = companyId;
            return this;
        }
        @CustomType.Setter
        public Builder companyKey(@Nullable String companyKey) {
            this.companyKey = companyKey;
            return this;
        }
        @CustomType.Setter
        public Builder companyRequestToken(@Nullable String companyRequestToken) {
            this.companyRequestToken = companyRequestToken;
            return this;
        }
        @CustomType.Setter
        public Builder companyUuid(@Nullable String companyUuid) {
            this.companyUuid = companyUuid;
            return this;
        }
        @CustomType.Setter
        public Builder compression(@Nullable String compression) {
            this.compression = compression;
            return this;
        }
        @CustomType.Setter
        public Builder configMethod(@Nullable String configMethod) {
            this.configMethod = configMethod;
            return this;
        }
        @CustomType.Setter
        public Builder configRepositoryUrl(@Nullable String configRepositoryUrl) {
            this.configRepositoryUrl = configRepositoryUrl;
            return this;
        }
        @CustomType.Setter
        public Builder configType(@Nullable String configType) {
            this.configType = configType;
            return this;
        }
        @CustomType.Setter
        public Builder connectingUser(@Nullable String connectingUser) {
            this.connectingUser = connectingUser;
            return this;
        }
        @CustomType.Setter
        public Builder connectingUserEmail(@Nullable String connectingUserEmail) {
            this.connectingUserEmail = connectingUserEmail;
            return this;
        }
        @CustomType.Setter
        public Builder connectionMethod(@Nullable String connectionMethod) {
            this.connectionMethod = connectionMethod;
            return this;
        }
        @CustomType.Setter
        public Builder connectionString(@Nullable String connectionString) {
            this.connectionString = connectionString;
            return this;
        }
        @CustomType.Setter
        public Builder connectionType(@Nullable String connectionType) {
            this.connectionType = connectionType;
            return this;
        }
        @CustomType.Setter
        public Builder consumerGroup(@Nullable String consumerGroup) {
            this.consumerGroup = consumerGroup;
            return this;
        }
        @CustomType.Setter
        public Builder consumerKey(@Nullable String consumerKey) {
            this.consumerKey = consumerKey;
            return this;
        }
        @CustomType.Setter
        public Builder consumerSecret(@Nullable String consumerSecret) {
            this.consumerSecret = consumerSecret;
            return this;
        }
        @CustomType.Setter
        public Builder containerAddress(@Nullable String containerAddress) {
            this.containerAddress = containerAddress;
            return this;
        }
        @CustomType.Setter
        public Builder containerName(@Nullable String containerName) {
            this.containerName = containerName;
            return this;
        }
        @CustomType.Setter
        public Builder contentOwnerId(@Nullable String contentOwnerId) {
            this.contentOwnerId = contentOwnerId;
            return this;
        }
        @CustomType.Setter
        public Builder conversationWebhookUrl(@Nullable String conversationWebhookUrl) {
            this.conversationWebhookUrl = conversationWebhookUrl;
            return this;
        }
        @CustomType.Setter
        public Builder conversionDimensions(@Nullable List<String> conversionDimensions) {
            this.conversionDimensions = conversionDimensions;
            return this;
        }
        public Builder conversionDimensions(String... conversionDimensions) {
            return conversionDimensions(List.of(conversionDimensions));
        }
        @CustomType.Setter
        public Builder conversionReportTime(@Nullable String conversionReportTime) {
            this.conversionReportTime = conversionReportTime;
            return this;
        }
        @CustomType.Setter
        public Builder conversionWindowSize(@Nullable String conversionWindowSize) {
            this.conversionWindowSize = conversionWindowSize;
            return this;
        }
        @CustomType.Setter
        public Builder csvDefinition(@Nullable String csvDefinition) {
            this.csvDefinition = csvDefinition;
            return this;
        }
        @CustomType.Setter
        public Builder currency(@Nullable String currency) {
            this.currency = currency;
            return this;
        }
        @CustomType.Setter
        public Builder customEventSyncMode(@Nullable String customEventSyncMode) {
            this.customEventSyncMode = customEventSyncMode;
            return this;
        }
        @CustomType.Setter
        public Builder customEvents(@Nullable List<String> customEvents) {
            this.customEvents = customEvents;
            return this;
        }
        public Builder customEvents(String... customEvents) {
            return customEvents(List.of(customEvents));
        }
        @CustomType.Setter
        public Builder customFieldIds(@Nullable List<String> customFieldIds) {
            this.customFieldIds = customFieldIds;
            return this;
        }
        public Builder customFieldIds(String... customFieldIds) {
            return customFieldIds(List.of(customFieldIds));
        }
        @CustomType.Setter
        public Builder customFloodlightVariables(@Nullable List<String> customFloodlightVariables) {
            this.customFloodlightVariables = customFloodlightVariables;
            return this;
        }
        public Builder customFloodlightVariables(String... customFloodlightVariables) {
            return customFloodlightVariables(List.of(customFloodlightVariables));
        }
        @CustomType.Setter
        public Builder customReports(@Nullable List<ConnectorConfigCustomReport> customReports) {
            this.customReports = customReports;
            return this;
        }
        public Builder customReports(ConnectorConfigCustomReport... customReports) {
            return customReports(List.of(customReports));
        }
        @CustomType.Setter
        public Builder customTables(@Nullable List<ConnectorConfigCustomTable> customTables) {
            this.customTables = customTables;
            return this;
        }
        public Builder customTables(ConnectorConfigCustomTable... customTables) {
            return customTables(List.of(customTables));
        }
        @CustomType.Setter
        public Builder customerId(@Nullable String customerId) {
            this.customerId = customerId;
            return this;
        }
        @CustomType.Setter
        public Builder customerListId(@Nullable String customerListId) {
            this.customerListId = customerListId;
            return this;
        }
        @CustomType.Setter
        public Builder dailyApiCallLimit(@Nullable String dailyApiCallLimit) {
            this.dailyApiCallLimit = dailyApiCallLimit;
            return this;
        }
        @CustomType.Setter
        public Builder dataAccessMethod(@Nullable String dataAccessMethod) {
            this.dataAccessMethod = dataAccessMethod;
            return this;
        }
        @CustomType.Setter
        public Builder dataCenter(@Nullable String dataCenter) {
            this.dataCenter = dataCenter;
            return this;
        }
        @CustomType.Setter
        public Builder dataSetName(@Nullable String dataSetName) {
            this.dataSetName = dataSetName;
            return this;
        }
        @CustomType.Setter
        public Builder database(@Nullable String database) {
            this.database = database;
            return this;
        }
        @CustomType.Setter
        public Builder datasetId(@Nullable String datasetId) {
            this.datasetId = datasetId;
            return this;
        }
        @CustomType.Setter
        public Builder datasource(@Nullable String datasource) {
            this.datasource = datasource;
            return this;
        }
        @CustomType.Setter
        public Builder dateGranularity(@Nullable String dateGranularity) {
            this.dateGranularity = dateGranularity;
            return this;
        }
        @CustomType.Setter
        public Builder delimiter(@Nullable String delimiter) {
            this.delimiter = delimiter;
            return this;
        }
        @CustomType.Setter
        public Builder dimensionAttributes(@Nullable List<String> dimensionAttributes) {
            this.dimensionAttributes = dimensionAttributes;
            return this;
        }
        public Builder dimensionAttributes(String... dimensionAttributes) {
            return dimensionAttributes(List.of(dimensionAttributes));
        }
        @CustomType.Setter
        public Builder dimensions(@Nullable List<String> dimensions) {
            this.dimensions = dimensions;
            return this;
        }
        public Builder dimensions(String... dimensions) {
            return dimensions(List.of(dimensions));
        }
        @CustomType.Setter
        public Builder distributedConnectorClusterSize(@Nullable String distributedConnectorClusterSize) {
            this.distributedConnectorClusterSize = distributedConnectorClusterSize;
            return this;
        }
        @CustomType.Setter
        public Builder domain(@Nullable String domain) {
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder domainHostName(@Nullable String domainHostName) {
            this.domainHostName = domainHostName;
            return this;
        }
        @CustomType.Setter
        public Builder domainName(@Nullable String domainName) {
            this.domainName = domainName;
            return this;
        }
        @CustomType.Setter
        public Builder domainType(@Nullable String domainType) {
            this.domainType = domainType;
            return this;
        }
        @CustomType.Setter
        public Builder elements(@Nullable List<String> elements) {
            this.elements = elements;
            return this;
        }
        public Builder elements(String... elements) {
            return elements(List.of(elements));
        }
        @CustomType.Setter
        public Builder email(@Nullable String email) {
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder emptyHeader(@Nullable String emptyHeader) {
            this.emptyHeader = emptyHeader;
            return this;
        }
        @CustomType.Setter
        public Builder enableAllDimensionCombinations(@Nullable String enableAllDimensionCombinations) {
            this.enableAllDimensionCombinations = enableAllDimensionCombinations;
            return this;
        }
        @CustomType.Setter
        public Builder enableArchiveLogOnly(@Nullable String enableArchiveLogOnly) {
            this.enableArchiveLogOnly = enableArchiveLogOnly;
            return this;
        }
        @CustomType.Setter
        public Builder enableDataExtensionsSyncing(@Nullable String enableDataExtensionsSyncing) {
            this.enableDataExtensionsSyncing = enableDataExtensionsSyncing;
            return this;
        }
        @CustomType.Setter
        public Builder enableDistributedConnectorMode(@Nullable String enableDistributedConnectorMode) {
            this.enableDistributedConnectorMode = enableDistributedConnectorMode;
            return this;
        }
        @CustomType.Setter
        public Builder enableEnrichments(@Nullable String enableEnrichments) {
            this.enableEnrichments = enableEnrichments;
            return this;
        }
        @CustomType.Setter
        public Builder enableExports(@Nullable String enableExports) {
            this.enableExports = enableExports;
            return this;
        }
        @CustomType.Setter
        public Builder enableTde(@Nullable String enableTde) {
            this.enableTde = enableTde;
            return this;
        }
        @CustomType.Setter
        public Builder encodedPublicKey(@Nullable String encodedPublicKey) {
            this.encodedPublicKey = encodedPublicKey;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionKey(@Nullable String encryptionKey) {
            this.encryptionKey = encryptionKey;
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(@Nullable String endpoint) {
            this.endpoint = endpoint;
            return this;
        }
        @CustomType.Setter
        public Builder engagementAttributionWindow(@Nullable String engagementAttributionWindow) {
            this.engagementAttributionWindow = engagementAttributionWindow;
            return this;
        }
        @CustomType.Setter
        public Builder enrichedExport(@Nullable String enrichedExport) {
            this.enrichedExport = enrichedExport;
            return this;
        }
        @CustomType.Setter
        public Builder entityId(@Nullable String entityId) {
            this.entityId = entityId;
            return this;
        }
        @CustomType.Setter
        public Builder environment(@Nullable String environment) {
            this.environment = environment;
            return this;
        }
        @CustomType.Setter
        public Builder escapeChar(@Nullable String escapeChar) {
            this.escapeChar = escapeChar;
            return this;
        }
        @CustomType.Setter
        public Builder euRegion(@Nullable String euRegion) {
            this.euRegion = euRegion;
            return this;
        }
        @CustomType.Setter
        public Builder events(@Nullable List<String> events) {
            this.events = events;
            return this;
        }
        public Builder events(String... events) {
            return events(List.of(events));
        }
        @CustomType.Setter
        public Builder exportStorageType(@Nullable String exportStorageType) {
            this.exportStorageType = exportStorageType;
            return this;
        }
        @CustomType.Setter
        public Builder externalId(@Nullable String externalId) {
            this.externalId = externalId;
            return this;
        }
        @CustomType.Setter
        public Builder fields(@Nullable List<String> fields) {
            this.fields = fields;
            return this;
        }
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }
        @CustomType.Setter
        public Builder fileType(@Nullable String fileType) {
            this.fileType = fileType;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable String filter) {
            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder financeAccountSyncMode(@Nullable String financeAccountSyncMode) {
            this.financeAccountSyncMode = financeAccountSyncMode;
            return this;
        }
        @CustomType.Setter
        public Builder financeAccounts(@Nullable List<String> financeAccounts) {
            this.financeAccounts = financeAccounts;
            return this;
        }
        public Builder financeAccounts(String... financeAccounts) {
            return financeAccounts(List.of(financeAccounts));
        }
        @CustomType.Setter
        public Builder folder(@Nullable String folder) {
            this.folder = folder;
            return this;
        }
        @CustomType.Setter
        public Builder folderId(@Nullable String folderId) {
            this.folderId = folderId;
            return this;
        }
        @CustomType.Setter
        public Builder folderPath(@Nullable String folderPath) {
            this.folderPath = folderPath;
            return this;
        }
        @CustomType.Setter
        public Builder forecastId(@Nullable String forecastId) {
            this.forecastId = forecastId;
            return this;
        }
        @CustomType.Setter
        public Builder ftpHost(@Nullable String ftpHost) {
            this.ftpHost = ftpHost;
            return this;
        }
        @CustomType.Setter
        public Builder ftpPassword(@Nullable String ftpPassword) {
            this.ftpPassword = ftpPassword;
            return this;
        }
        @CustomType.Setter
        public Builder ftpPort(@Nullable String ftpPort) {
            this.ftpPort = ftpPort;
            return this;
        }
        @CustomType.Setter
        public Builder ftpUser(@Nullable String ftpUser) {
            this.ftpUser = ftpUser;
            return this;
        }
        @CustomType.Setter
        public Builder function(@Nullable String function) {
            this.function = function;
            return this;
        }
        @CustomType.Setter
        public Builder functionApp(@Nullable String functionApp) {
            this.functionApp = functionApp;
            return this;
        }
        @CustomType.Setter
        public Builder functionKey(@Nullable String functionKey) {
            this.functionKey = functionKey;
            return this;
        }
        @CustomType.Setter
        public Builder functionName(@Nullable String functionName) {
            this.functionName = functionName;
            return this;
        }
        @CustomType.Setter
        public Builder functionTrigger(@Nullable String functionTrigger) {
            this.functionTrigger = functionTrigger;
            return this;
        }
        @CustomType.Setter
        public Builder gcsBucket(@Nullable String gcsBucket) {
            this.gcsBucket = gcsBucket;
            return this;
        }
        @CustomType.Setter
        public Builder gcsFolder(@Nullable String gcsFolder) {
            this.gcsFolder = gcsFolder;
            return this;
        }
        @CustomType.Setter
        public Builder groupName(@Nullable String groupName) {
            this.groupName = groupName;
            return this;
        }
        @CustomType.Setter
        public Builder hasManagePermissions(@Nullable String hasManagePermissions) {
            this.hasManagePermissions = hasManagePermissions;
            return this;
        }
        @CustomType.Setter
        public Builder homeFolder(@Nullable String homeFolder) {
            this.homeFolder = homeFolder;
            return this;
        }
        @CustomType.Setter
        public Builder host(@Nullable String host) {
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder hostIp(@Nullable String hostIp) {
            this.hostIp = hostIp;
            return this;
        }
        @CustomType.Setter
        public Builder hostUser(@Nullable String hostUser) {
            this.hostUser = hostUser;
            return this;
        }
        @CustomType.Setter
        public Builder hosts(@Nullable List<String> hosts) {
            this.hosts = hosts;
            return this;
        }
        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }
        @CustomType.Setter
        public Builder identity(@Nullable String identity) {
            this.identity = identity;
            return this;
        }
        @CustomType.Setter
        public Builder includeOcapiEndpoints(@Nullable String includeOcapiEndpoints) {
            this.includeOcapiEndpoints = includeOcapiEndpoints;
            return this;
        }
        @CustomType.Setter
        public Builder instance(@Nullable String instance) {
            this.instance = instance;
            return this;
        }
        @CustomType.Setter
        public Builder instanceNumber(@Nullable String instanceNumber) {
            this.instanceNumber = instanceNumber;
            return this;
        }
        @CustomType.Setter
        public Builder instanceUrl(@Nullable String instanceUrl) {
            this.instanceUrl = instanceUrl;
            return this;
        }
        @CustomType.Setter
        public Builder integrationKey(@Nullable String integrationKey) {
            this.integrationKey = integrationKey;
            return this;
        }
        @CustomType.Setter
        public Builder isAccountLevelConnector(@Nullable String isAccountLevelConnector) {
            this.isAccountLevelConnector = isAccountLevelConnector;
            return this;
        }
        @CustomType.Setter
        public Builder isAuth2Enabled(@Nullable String isAuth2Enabled) {
            this.isAuth2Enabled = isAuth2Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder isCustomApiCredentials(@Nullable String isCustomApiCredentials) {
            this.isCustomApiCredentials = isCustomApiCredentials;
            return this;
        }
        @CustomType.Setter
        public Builder isExternalActivitiesEndpointSelected(@Nullable String isExternalActivitiesEndpointSelected) {
            this.isExternalActivitiesEndpointSelected = isExternalActivitiesEndpointSelected;
            return this;
        }
        @CustomType.Setter
        public Builder isFtps(@Nullable String isFtps) {
            this.isFtps = isFtps;
            return this;
        }
        @CustomType.Setter
        public Builder isKeypair(@Nullable String isKeypair) {
            this.isKeypair = isKeypair;
            return this;
        }
        @CustomType.Setter
        public Builder isMultiEntityFeatureEnabled(@Nullable String isMultiEntityFeatureEnabled) {
            this.isMultiEntityFeatureEnabled = isMultiEntityFeatureEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isNewPackage(@Nullable String isNewPackage) {
            this.isNewPackage = isNewPackage;
            return this;
        }
        @CustomType.Setter
        public Builder isPrivateKeyEncrypted(@Nullable String isPrivateKeyEncrypted) {
            this.isPrivateKeyEncrypted = isPrivateKeyEncrypted;
            return this;
        }
        @CustomType.Setter
        public Builder isPrivateLinkRequired(@Nullable String isPrivateLinkRequired) {
            this.isPrivateLinkRequired = isPrivateLinkRequired;
            return this;
        }
        @CustomType.Setter
        public Builder isPublic(@Nullable String isPublic) {
            this.isPublic = isPublic;
            return this;
        }
        @CustomType.Setter
        public Builder isSailthruConnectEnabled(@Nullable String isSailthruConnectEnabled) {
            this.isSailthruConnectEnabled = isSailthruConnectEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isSecure(@Nullable String isSecure) {
            this.isSecure = isSecure;
            return this;
        }
        @CustomType.Setter
        public Builder isSingleTableMode(@Nullable String isSingleTableMode) {
            this.isSingleTableMode = isSingleTableMode;
            return this;
        }
        @CustomType.Setter
        public Builder isVendor(@Nullable String isVendor) {
            this.isVendor = isVendor;
            return this;
        }
        @CustomType.Setter
        public Builder jsonDeliveryMode(@Nullable String jsonDeliveryMode) {
            this.jsonDeliveryMode = jsonDeliveryMode;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder keyPassword(@Nullable String keyPassword) {
            this.keyPassword = keyPassword;
            return this;
        }
        @CustomType.Setter
        public Builder keyStoreType(@Nullable String keyStoreType) {
            this.keyStoreType = keyStoreType;
            return this;
        }
        @CustomType.Setter
        public Builder keystore(@Nullable String keystore) {
            this.keystore = keystore;
            return this;
        }
        @CustomType.Setter
        public Builder keystorePassword(@Nullable String keystorePassword) {
            this.keystorePassword = keystorePassword;
            return this;
        }
        @CustomType.Setter
        public Builder lastSyncedChangesUtc_(@Nullable String lastSyncedChangesUtc_) {
            this.lastSyncedChangesUtc_ = lastSyncedChangesUtc_;
            return this;
        }
        @CustomType.Setter
        public Builder latestVersion(@Nullable String latestVersion) {
            this.latestVersion = latestVersion;
            return this;
        }
        @CustomType.Setter
        public Builder limitForApiCallsToExternalActivitiesEndpoint(@Nullable String limitForApiCallsToExternalActivitiesEndpoint) {
            this.limitForApiCallsToExternalActivitiesEndpoint = limitForApiCallsToExternalActivitiesEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder lineSeparator(@Nullable String lineSeparator) {
            this.lineSeparator = lineSeparator;
            return this;
        }
        @CustomType.Setter
        public Builder listStrategy(@Nullable String listStrategy) {
            this.listStrategy = listStrategy;
            return this;
        }
        @CustomType.Setter
        public Builder listSyncMode(@Nullable String listSyncMode) {
            this.listSyncMode = listSyncMode;
            return this;
        }
        @CustomType.Setter
        public Builder logJournal(@Nullable String logJournal) {
            this.logJournal = logJournal;
            return this;
        }
        @CustomType.Setter
        public Builder logJournalSchema(@Nullable String logJournalSchema) {
            this.logJournalSchema = logJournalSchema;
            return this;
        }
        @CustomType.Setter
        public Builder login(@Nullable String login) {
            this.login = login;
            return this;
        }
        @CustomType.Setter
        public Builder loginPassword(@Nullable String loginPassword) {
            this.loginPassword = loginPassword;
            return this;
        }
        @CustomType.Setter
        public Builder managerAccounts(@Nullable List<String> managerAccounts) {
            this.managerAccounts = managerAccounts;
            return this;
        }
        public Builder managerAccounts(String... managerAccounts) {
            return managerAccounts(List.of(managerAccounts));
        }
        @CustomType.Setter
        public Builder merchantId(@Nullable String merchantId) {
            this.merchantId = merchantId;
            return this;
        }
        @CustomType.Setter
        public Builder messageType(@Nullable String messageType) {
            this.messageType = messageType;
            return this;
        }
        @CustomType.Setter
        public Builder metrics(@Nullable List<String> metrics) {
            this.metrics = metrics;
            return this;
        }
        public Builder metrics(String... metrics) {
            return metrics(List.of(metrics));
        }
        @CustomType.Setter
        public Builder namedRange(@Nullable String namedRange) {
            this.namedRange = namedRange;
            return this;
        }
        @CustomType.Setter
        public Builder namespace(@Nullable String namespace) {
            this.namespace = namespace;
            return this;
        }
        @CustomType.Setter
        public Builder networkCode(@Nullable String networkCode) {
            this.networkCode = networkCode;
            return this;
        }
        @CustomType.Setter
        public Builder nullSequence(@Nullable String nullSequence) {
            this.nullSequence = nullSequence;
            return this;
        }
        @CustomType.Setter
        public Builder oauthToken(@Nullable String oauthToken) {
            this.oauthToken = oauthToken;
            return this;
        }
        @CustomType.Setter
        public Builder oauthTokenSecret(@Nullable String oauthTokenSecret) {
            this.oauthTokenSecret = oauthTokenSecret;
            return this;
        }
        @CustomType.Setter
        public Builder ocapiClientId(@Nullable String ocapiClientId) {
            this.ocapiClientId = ocapiClientId;
            return this;
        }
        @CustomType.Setter
        public Builder ocapiClientSecret(@Nullable String ocapiClientSecret) {
            this.ocapiClientSecret = ocapiClientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder ocapiCustomObjectTypes(@Nullable String ocapiCustomObjectTypes) {
            this.ocapiCustomObjectTypes = ocapiCustomObjectTypes;
            return this;
        }
        @CustomType.Setter
        public Builder ocapiHostname(@Nullable String ocapiHostname) {
            this.ocapiHostname = ocapiHostname;
            return this;
        }
        @CustomType.Setter
        public Builder onError(@Nullable String onError) {
            this.onError = onError;
            return this;
        }
        @CustomType.Setter
        public Builder onPremise(@Nullable String onPremise) {
            this.onPremise = onPremise;
            return this;
        }
        @CustomType.Setter
        public Builder organization(@Nullable String organization) {
            this.organization = organization;
            return this;
        }
        @CustomType.Setter
        public Builder organizationId(@Nullable String organizationId) {
            this.organizationId = organizationId;
            return this;
        }
        @CustomType.Setter
        public Builder organizations(@Nullable List<String> organizations) {
            this.organizations = organizations;
            return this;
        }
        public Builder organizations(String... organizations) {
            return organizations(List.of(organizations));
        }
        @CustomType.Setter
        public Builder packedModeTables(@Nullable List<String> packedModeTables) {
            this.packedModeTables = packedModeTables;
            return this;
        }
        public Builder packedModeTables(String... packedModeTables) {
            return packedModeTables(List.of(packedModeTables));
        }
        @CustomType.Setter
        public Builder packingMode(@Nullable String packingMode) {
            this.packingMode = packingMode;
            return this;
        }
        @CustomType.Setter
        public Builder pages(@Nullable List<String> pages) {
            this.pages = pages;
            return this;
        }
        public Builder pages(String... pages) {
            return pages(List.of(pages));
        }
        @CustomType.Setter
        public Builder partnerCode(@Nullable String partnerCode) {
            this.partnerCode = partnerCode;
            return this;
        }
        @CustomType.Setter
        public Builder partners(@Nullable List<String> partners) {
            this.partners = partners;
            return this;
        }
        public Builder partners(String... partners) {
            return partners(List.of(partners));
        }
        @CustomType.Setter
        public Builder passphrase(@Nullable String passphrase) {
            this.passphrase = passphrase;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder pat(@Nullable String pat) {
            this.pat = pat;
            return this;
        }
        @CustomType.Setter
        public Builder patName(@Nullable String patName) {
            this.patName = patName;
            return this;
        }
        @CustomType.Setter
        public Builder patSecret(@Nullable String patSecret) {
            this.patSecret = patSecret;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder pattern(@Nullable String pattern) {
            this.pattern = pattern;
            return this;
        }
        @CustomType.Setter
        public Builder pdbName(@Nullable String pdbName) {
            this.pdbName = pdbName;
            return this;
        }
        @CustomType.Setter
        public Builder pemCertificate(@Nullable String pemCertificate) {
            this.pemCertificate = pemCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder pemPrivateKey(@Nullable String pemPrivateKey) {
            this.pemPrivateKey = pemPrivateKey;
            return this;
        }
        @CustomType.Setter
        public Builder perInteractionDimensions(@Nullable List<String> perInteractionDimensions) {
            this.perInteractionDimensions = perInteractionDimensions;
            return this;
        }
        public Builder perInteractionDimensions(String... perInteractionDimensions) {
            return perInteractionDimensions(List.of(perInteractionDimensions));
        }
        @CustomType.Setter
        public Builder personalAccessToken(@Nullable String personalAccessToken) {
            this.personalAccessToken = personalAccessToken;
            return this;
        }
        @CustomType.Setter
        public Builder pgpPassPhrase(@Nullable String pgpPassPhrase) {
            this.pgpPassPhrase = pgpPassPhrase;
            return this;
        }
        @CustomType.Setter
        public Builder pgpSecretKey(@Nullable String pgpSecretKey) {
            this.pgpSecretKey = pgpSecretKey;
            return this;
        }
        @CustomType.Setter
        public Builder phoneNumber(@Nullable String phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable String port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder postClickAttributionWindowSize(@Nullable String postClickAttributionWindowSize) {
            this.postClickAttributionWindowSize = postClickAttributionWindowSize;
            return this;
        }
        @CustomType.Setter
        public Builder prebuiltReport(@Nullable String prebuiltReport) {
            this.prebuiltReport = prebuiltReport;
            return this;
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {
            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder primaryKeys(@Nullable List<String> primaryKeys) {
            this.primaryKeys = primaryKeys;
            return this;
        }
        public Builder primaryKeys(String... primaryKeys) {
            return primaryKeys(List.of(primaryKeys));
        }
        @CustomType.Setter
        public Builder privateKey(@Nullable String privateKey) {
            this.privateKey = privateKey;
            return this;
        }
        @CustomType.Setter
        public Builder profiles(@Nullable List<String> profiles) {
            this.profiles = profiles;
            return this;
        }
        public Builder profiles(String... profiles) {
            return profiles(List.of(profiles));
        }
        @CustomType.Setter
        public Builder projectCredentials(@Nullable List<ConnectorConfigProjectCredential> projectCredentials) {
            this.projectCredentials = projectCredentials;
            return this;
        }
        public Builder projectCredentials(ConnectorConfigProjectCredential... projectCredentials) {
            return projectCredentials(List.of(projectCredentials));
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder projects(@Nullable List<String> projects) {
            this.projects = projects;
            return this;
        }
        public Builder projects(String... projects) {
            return projects(List.of(projects));
        }
        @CustomType.Setter
        public Builder properties(@Nullable List<String> properties) {
            this.properties = properties;
            return this;
        }
        public Builder properties(String... properties) {
            return properties(List.of(properties));
        }
        @CustomType.Setter
        public Builder publicKey(@Nullable String publicKey) {
            this.publicKey = publicKey;
            return this;
        }
        @CustomType.Setter
        public Builder publicationName(@Nullable String publicationName) {
            this.publicationName = publicationName;
            return this;
        }
        @CustomType.Setter
        public Builder queryId(@Nullable String queryId) {
            this.queryId = queryId;
            return this;
        }
        @CustomType.Setter
        public Builder queryParamValue(@Nullable String queryParamValue) {
            this.queryParamValue = queryParamValue;
            return this;
        }
        @CustomType.Setter
        public Builder refreshTokenExpiresAt(@Nullable String refreshTokenExpiresAt) {
            this.refreshTokenExpiresAt = refreshTokenExpiresAt;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder replicaId(@Nullable String replicaId) {
            this.replicaId = replicaId;
            return this;
        }
        @CustomType.Setter
        public Builder replicationSlot(@Nullable String replicationSlot) {
            this.replicationSlot = replicationSlot;
            return this;
        }
        @CustomType.Setter
        public Builder reportConfigurationIds(@Nullable List<String> reportConfigurationIds) {
            this.reportConfigurationIds = reportConfigurationIds;
            return this;
        }
        public Builder reportConfigurationIds(String... reportConfigurationIds) {
            return reportConfigurationIds(List.of(reportConfigurationIds));
        }
        @CustomType.Setter
        public Builder reportFormatType(@Nullable String reportFormatType) {
            this.reportFormatType = reportFormatType;
            return this;
        }
        @CustomType.Setter
        public Builder reportSuites(@Nullable List<String> reportSuites) {
            this.reportSuites = reportSuites;
            return this;
        }
        public Builder reportSuites(String... reportSuites) {
            return reportSuites(List.of(reportSuites));
        }
        @CustomType.Setter
        public Builder reportTimezone(@Nullable String reportTimezone) {
            this.reportTimezone = reportTimezone;
            return this;
        }
        @CustomType.Setter
        public Builder reportType(@Nullable String reportType) {
            this.reportType = reportType;
            return this;
        }
        @CustomType.Setter
        public Builder reportUrl(@Nullable String reportUrl) {
            this.reportUrl = reportUrl;
            return this;
        }
        @CustomType.Setter
        public Builder reports(@Nullable List<ConnectorConfigReport> reports) {
            this.reports = reports;
            return this;
        }
        public Builder reports(ConnectorConfigReport... reports) {
            return reports(List.of(reports));
        }
        @CustomType.Setter
        public Builder reportsLinkedinAds(@Nullable List<String> reportsLinkedinAds) {
            this.reportsLinkedinAds = reportsLinkedinAds;
            return this;
        }
        public Builder reportsLinkedinAds(String... reportsLinkedinAds) {
            return reportsLinkedinAds(List.of(reportsLinkedinAds));
        }
        @CustomType.Setter
        public Builder repositories(@Nullable List<String> repositories) {
            this.repositories = repositories;
            return this;
        }
        public Builder repositories(String... repositories) {
            return repositories(List.of(repositories));
        }
        @CustomType.Setter
        public Builder resourceToken(@Nullable String resourceToken) {
            this.resourceToken = resourceToken;
            return this;
        }
        @CustomType.Setter
        public Builder resourceUrl(@Nullable String resourceUrl) {
            this.resourceUrl = resourceUrl;
            return this;
        }
        @CustomType.Setter
        public Builder restApiLimit(@Nullable String restApiLimit) {
            this.restApiLimit = restApiLimit;
            return this;
        }
        @CustomType.Setter
        public Builder rfcLibraryPath(@Nullable String rfcLibraryPath) {
            this.rfcLibraryPath = rfcLibraryPath;
            return this;
        }
        @CustomType.Setter
        public Builder role(@Nullable String role) {
            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder roleArn(@Nullable String roleArn) {
            this.roleArn = roleArn;
            return this;
        }
        @CustomType.Setter
        public Builder rollbackWindowSize(@Nullable String rollbackWindowSize) {
            this.rollbackWindowSize = rollbackWindowSize;
            return this;
        }
        @CustomType.Setter
        public Builder s3Bucket(@Nullable String s3Bucket) {
            this.s3Bucket = s3Bucket;
            return this;
        }
        @CustomType.Setter
        public Builder s3ExportBucket(@Nullable String s3ExportBucket) {
            this.s3ExportBucket = s3ExportBucket;
            return this;
        }
        @CustomType.Setter
        public Builder s3ExportFolder(@Nullable String s3ExportFolder) {
            this.s3ExportFolder = s3ExportFolder;
            return this;
        }
        @CustomType.Setter
        public Builder s3ExportRoleArn(@Nullable String s3ExportRoleArn) {
            this.s3ExportRoleArn = s3ExportRoleArn;
            return this;
        }
        @CustomType.Setter
        public Builder s3RoleArn(@Nullable String s3RoleArn) {
            this.s3RoleArn = s3RoleArn;
            return this;
        }
        @CustomType.Setter
        public Builder s3bucket(@Nullable String s3bucket) {
            this.s3bucket = s3bucket;
            return this;
        }
        @CustomType.Setter
        public Builder s3externalId(@Nullable String s3externalId) {
            this.s3externalId = s3externalId;
            return this;
        }
        @CustomType.Setter
        public Builder s3folder(@Nullable String s3folder) {
            this.s3folder = s3folder;
            return this;
        }
        @CustomType.Setter
        public Builder s3path(@Nullable String s3path) {
            this.s3path = s3path;
            return this;
        }
        @CustomType.Setter
        public Builder s3roleArn(@Nullable String s3roleArn) {
            this.s3roleArn = s3roleArn;
            return this;
        }
        @CustomType.Setter
        public Builder salesAccountSyncMode(@Nullable String salesAccountSyncMode) {
            this.salesAccountSyncMode = salesAccountSyncMode;
            return this;
        }
        @CustomType.Setter
        public Builder salesAccounts(@Nullable List<String> salesAccounts) {
            this.salesAccounts = salesAccounts;
            return this;
        }
        public Builder salesAccounts(String... salesAccounts) {
            return salesAccounts(List.of(salesAccounts));
        }
        @CustomType.Setter
        public Builder salesforceSecurityToken(@Nullable String salesforceSecurityToken) {
            this.salesforceSecurityToken = salesforceSecurityToken;
            return this;
        }
        @CustomType.Setter
        public Builder sandboxAccount(@Nullable String sandboxAccount) {
            this.sandboxAccount = sandboxAccount;
            return this;
        }
        @CustomType.Setter
        public Builder sapSchema(@Nullable String sapSchema) {
            this.sapSchema = sapSchema;
            return this;
        }
        @CustomType.Setter
        public Builder sapUser(@Nullable String sapUser) {
            this.sapUser = sapUser;
            return this;
        }
        @CustomType.Setter
        public Builder saslMechanism(@Nullable String saslMechanism) {
            this.saslMechanism = saslMechanism;
            return this;
        }
        @CustomType.Setter
        public Builder saslPlainKey(@Nullable String saslPlainKey) {
            this.saslPlainKey = saslPlainKey;
            return this;
        }
        @CustomType.Setter
        public Builder saslPlainSecret(@Nullable String saslPlainSecret) {
            this.saslPlainSecret = saslPlainSecret;
            return this;
        }
        @CustomType.Setter
        public Builder saslScram256Key(@Nullable String saslScram256Key) {
            this.saslScram256Key = saslScram256Key;
            return this;
        }
        @CustomType.Setter
        public Builder saslScram256Secret(@Nullable String saslScram256Secret) {
            this.saslScram256Secret = saslScram256Secret;
            return this;
        }
        @CustomType.Setter
        public Builder saslScram512Key(@Nullable String saslScram512Key) {
            this.saslScram512Key = saslScram512Key;
            return this;
        }
        @CustomType.Setter
        public Builder saslScram512Secret(@Nullable String saslScram512Secret) {
            this.saslScram512Secret = saslScram512Secret;
            return this;
        }
        @CustomType.Setter
        public Builder schemaRegistryCredentialsSource(@Nullable String schemaRegistryCredentialsSource) {
            this.schemaRegistryCredentialsSource = schemaRegistryCredentialsSource;
            return this;
        }
        @CustomType.Setter
        public Builder schemaRegistryKey(@Nullable String schemaRegistryKey) {
            this.schemaRegistryKey = schemaRegistryKey;
            return this;
        }
        @CustomType.Setter
        public Builder schemaRegistrySecret(@Nullable String schemaRegistrySecret) {
            this.schemaRegistrySecret = schemaRegistrySecret;
            return this;
        }
        @CustomType.Setter
        public Builder schemaRegistryUrls(@Nullable List<String> schemaRegistryUrls) {
            this.schemaRegistryUrls = schemaRegistryUrls;
            return this;
        }
        public Builder schemaRegistryUrls(String... schemaRegistryUrls) {
            return schemaRegistryUrls(List.of(schemaRegistryUrls));
        }
        @CustomType.Setter
        public Builder secret(@Nullable String secret) {
            this.secret = secret;
            return this;
        }
        @CustomType.Setter
        public Builder secretKey(@Nullable String secretKey) {
            this.secretKey = secretKey;
            return this;
        }
        @CustomType.Setter
        public Builder secrets(@Nullable String secrets) {
            this.secrets = secrets;
            return this;
        }
        @CustomType.Setter
        public Builder secretsLists(@Nullable List<ConnectorConfigSecretsList> secretsLists) {
            this.secretsLists = secretsLists;
            return this;
        }
        public Builder secretsLists(ConnectorConfigSecretsList... secretsLists) {
            return secretsLists(List.of(secretsLists));
        }
        @CustomType.Setter
        public Builder securityProtocol(@Nullable String securityProtocol) {
            this.securityProtocol = securityProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder segments(@Nullable List<String> segments) {
            this.segments = segments;
            return this;
        }
        public Builder segments(String... segments) {
            return segments(List.of(segments));
        }
        @CustomType.Setter
        public Builder selectedExports(@Nullable List<String> selectedExports) {
            this.selectedExports = selectedExports;
            return this;
        }
        public Builder selectedExports(String... selectedExports) {
            return selectedExports(List.of(selectedExports));
        }
        @CustomType.Setter
        public Builder senderId(@Nullable String senderId) {
            this.senderId = senderId;
            return this;
        }
        @CustomType.Setter
        public Builder senderPassword(@Nullable String senderPassword) {
            this.senderPassword = senderPassword;
            return this;
        }
        @CustomType.Setter
        public Builder serverAddress(@Nullable String serverAddress) {
            this.serverAddress = serverAddress;
            return this;
        }
        @CustomType.Setter
        public Builder serverUrl(@Nullable String serverUrl) {
            this.serverUrl = serverUrl;
            return this;
        }
        @CustomType.Setter
        public Builder servers(@Nullable List<String> servers) {
            this.servers = servers;
            return this;
        }
        public Builder servers(String... servers) {
            return servers(List.of(servers));
        }
        @CustomType.Setter
        public Builder serviceAccount(@Nullable String serviceAccount) {
            this.serviceAccount = serviceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountEmail(@Nullable String serviceAccountEmail) {
            this.serviceAccountEmail = serviceAccountEmail;
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountKey(@Nullable String serviceAccountKey) {
            this.serviceAccountKey = serviceAccountKey;
            return this;
        }
        @CustomType.Setter
        public Builder serviceVersion(@Nullable String serviceVersion) {
            this.serviceVersion = serviceVersion;
            return this;
        }
        @CustomType.Setter
        public Builder sftpHost(@Nullable String sftpHost) {
            this.sftpHost = sftpHost;
            return this;
        }
        @CustomType.Setter
        public Builder sftpIsKeyPair(@Nullable String sftpIsKeyPair) {
            this.sftpIsKeyPair = sftpIsKeyPair;
            return this;
        }
        @CustomType.Setter
        public Builder sftpPassword(@Nullable String sftpPassword) {
            this.sftpPassword = sftpPassword;
            return this;
        }
        @CustomType.Setter
        public Builder sftpPort(@Nullable String sftpPort) {
            this.sftpPort = sftpPort;
            return this;
        }
        @CustomType.Setter
        public Builder sftpPublicKey(@Nullable String sftpPublicKey) {
            this.sftpPublicKey = sftpPublicKey;
            return this;
        }
        @CustomType.Setter
        public Builder sftpUser(@Nullable String sftpUser) {
            this.sftpUser = sftpUser;
            return this;
        }
        @CustomType.Setter
        public Builder shareUrl(@Nullable String shareUrl) {
            this.shareUrl = shareUrl;
            return this;
        }
        @CustomType.Setter
        public Builder sheetId(@Nullable String sheetId) {
            this.sheetId = sheetId;
            return this;
        }
        @CustomType.Setter
        public Builder shop(@Nullable String shop) {
            this.shop = shop;
            return this;
        }
        @CustomType.Setter
        public Builder shortCode(@Nullable String shortCode) {
            this.shortCode = shortCode;
            return this;
        }
        @CustomType.Setter
        public Builder showRecordsWithNoMetrics(@Nullable String showRecordsWithNoMetrics) {
            this.showRecordsWithNoMetrics = showRecordsWithNoMetrics;
            return this;
        }
        @CustomType.Setter
        public Builder sid(@Nullable String sid) {
            this.sid = sid;
            return this;
        }
        @CustomType.Setter
        public Builder signerPublicKey(@Nullable String signerPublicKey) {
            this.signerPublicKey = signerPublicKey;
            return this;
        }
        @CustomType.Setter
        public Builder siteAddress(@Nullable String siteAddress) {
            this.siteAddress = siteAddress;
            return this;
        }
        @CustomType.Setter
        public Builder siteId(@Nullable String siteId) {
            this.siteId = siteId;
            return this;
        }
        @CustomType.Setter
        public Builder siteName(@Nullable String siteName) {
            this.siteName = siteName;
            return this;
        }
        @CustomType.Setter
        public Builder siteUrls(@Nullable List<String> siteUrls) {
            this.siteUrls = siteUrls;
            return this;
        }
        public Builder siteUrls(String... siteUrls) {
            return siteUrls(List.of(siteUrls));
        }
        @CustomType.Setter
        public Builder skipAfter(@Nullable String skipAfter) {
            this.skipAfter = skipAfter;
            return this;
        }
        @CustomType.Setter
        public Builder skipBefore(@Nullable String skipBefore) {
            this.skipBefore = skipBefore;
            return this;
        }
        @CustomType.Setter
        public Builder soapUri(@Nullable String soapUri) {
            this.soapUri = soapUri;
            return this;
        }
        @CustomType.Setter
        public Builder socialDataSyncTimeframe(@Nullable String socialDataSyncTimeframe) {
            this.socialDataSyncTimeframe = socialDataSyncTimeframe;
            return this;
        }
        @CustomType.Setter
        public Builder source(@Nullable String source) {
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder storeHash(@Nullable String storeHash) {
            this.storeHash = storeHash;
            return this;
        }
        @CustomType.Setter
        public Builder subDomain(@Nullable String subDomain) {
            this.subDomain = subDomain;
            return this;
        }
        @CustomType.Setter
        public Builder subdomain(@Nullable String subdomain) {
            this.subdomain = subdomain;
            return this;
        }
        @CustomType.Setter
        public Builder subscriberName(@Nullable String subscriberName) {
            this.subscriberName = subscriberName;
            return this;
        }
        @CustomType.Setter
        public Builder subscription(@Nullable String subscription) {
            this.subscription = subscription;
            return this;
        }
        @CustomType.Setter
        public Builder supportConnectedAccountsSync(@Nullable String supportConnectedAccountsSync) {
            this.supportConnectedAccountsSync = supportConnectedAccountsSync;
            return this;
        }
        @CustomType.Setter
        public Builder supportNestedColumns(@Nullable String supportNestedColumns) {
            this.supportNestedColumns = supportNestedColumns;
            return this;
        }
        @CustomType.Setter
        public Builder surveyIds(@Nullable String surveyIds) {
            this.surveyIds = surveyIds;
            return this;
        }
        @CustomType.Setter
        public Builder swipeAttributionWindow(@Nullable String swipeAttributionWindow) {
            this.swipeAttributionWindow = swipeAttributionWindow;
            return this;
        }
        @CustomType.Setter
        public Builder syncDataLocker(@Nullable String syncDataLocker) {
            this.syncDataLocker = syncDataLocker;
            return this;
        }
        @CustomType.Setter
        public Builder syncFormat(@Nullable String syncFormat) {
            this.syncFormat = syncFormat;
            return this;
        }
        @CustomType.Setter
        public Builder syncFormulaFields(@Nullable String syncFormulaFields) {
            this.syncFormulaFields = syncFormulaFields;
            return this;
        }
        @CustomType.Setter
        public Builder syncMetadata(@Nullable String syncMetadata) {
            this.syncMetadata = syncMetadata;
            return this;
        }
        @CustomType.Setter
        public Builder syncMethod(@Nullable String syncMethod) {
            this.syncMethod = syncMethod;
            return this;
        }
        @CustomType.Setter
        public Builder syncMode(@Nullable String syncMode) {
            this.syncMode = syncMode;
            return this;
        }
        @CustomType.Setter
        public Builder syncMultipleAccounts(@Nullable String syncMultipleAccounts) {
            this.syncMultipleAccounts = syncMultipleAccounts;
            return this;
        }
        @CustomType.Setter
        public Builder syncPackMode(@Nullable String syncPackMode) {
            this.syncPackMode = syncPackMode;
            return this;
        }
        @CustomType.Setter
        public Builder syncPullApi(@Nullable String syncPullApi) {
            this.syncPullApi = syncPullApi;
            return this;
        }
        @CustomType.Setter
        public Builder syncType(@Nullable String syncType) {
            this.syncType = syncType;
            return this;
        }
        @CustomType.Setter
        public Builder sysnr(@Nullable String sysnr) {
            this.sysnr = sysnr;
            return this;
        }
        @CustomType.Setter
        public Builder tableName(@Nullable String tableName) {
            this.tableName = tableName;
            return this;
        }
        @CustomType.Setter
        public Builder tdeCertificate(@Nullable String tdeCertificate) {
            this.tdeCertificate = tdeCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder tdeCertificateName(@Nullable String tdeCertificateName) {
            this.tdeCertificateName = tdeCertificateName;
            return this;
        }
        @CustomType.Setter
        public Builder tdePassword(@Nullable String tdePassword) {
            this.tdePassword = tdePassword;
            return this;
        }
        @CustomType.Setter
        public Builder tdePrivateKey(@Nullable String tdePrivateKey) {
            this.tdePrivateKey = tdePrivateKey;
            return this;
        }
        @CustomType.Setter
        public Builder teamId(@Nullable String teamId) {
            this.teamId = teamId;
            return this;
        }
        @CustomType.Setter
        public Builder technicalAccountId(@Nullable String technicalAccountId) {
            this.technicalAccountId = technicalAccountId;
            return this;
        }
        @CustomType.Setter
        public Builder templateLabels(@Nullable List<String> templateLabels) {
            this.templateLabels = templateLabels;
            return this;
        }
        public Builder templateLabels(String... templateLabels) {
            return templateLabels(List.of(templateLabels));
        }
        @CustomType.Setter
        public Builder tenant(@Nullable String tenant) {
            this.tenant = tenant;
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(@Nullable String tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        @CustomType.Setter
        public Builder testTableName(@Nullable String testTableName) {
            this.testTableName = testTableName;
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(@Nullable String timeZone) {
            this.timeZone = timeZone;
            return this;
        }
        @CustomType.Setter
        public Builder timeframeMonths(@Nullable String timeframeMonths) {
            this.timeframeMonths = timeframeMonths;
            return this;
        }
        @CustomType.Setter
        public Builder tns(@Nullable String tns) {
            this.tns = tns;
            return this;
        }
        @CustomType.Setter
        public Builder tokenAuthenticatedContainer(@Nullable String tokenAuthenticatedContainer) {
            this.tokenAuthenticatedContainer = tokenAuthenticatedContainer;
            return this;
        }
        @CustomType.Setter
        public Builder tokenAuthenticatedDatabase(@Nullable String tokenAuthenticatedDatabase) {
            this.tokenAuthenticatedDatabase = tokenAuthenticatedDatabase;
            return this;
        }
        @CustomType.Setter
        public Builder tokenId(@Nullable String tokenId) {
            this.tokenId = tokenId;
            return this;
        }
        @CustomType.Setter
        public Builder tokenKey(@Nullable String tokenKey) {
            this.tokenKey = tokenKey;
            return this;
        }
        @CustomType.Setter
        public Builder tokenSecret(@Nullable String tokenSecret) {
            this.tokenSecret = tokenSecret;
            return this;
        }
        @CustomType.Setter
        public Builder tokenSecretKey(@Nullable String tokenSecretKey) {
            this.tokenSecretKey = tokenSecretKey;
            return this;
        }
        @CustomType.Setter
        public Builder topics(@Nullable List<String> topics) {
            this.topics = topics;
            return this;
        }
        public Builder topics(String... topics) {
            return topics(List.of(topics));
        }
        @CustomType.Setter
        public Builder trustStoreType(@Nullable String trustStoreType) {
            this.trustStoreType = trustStoreType;
            return this;
        }
        @CustomType.Setter
        public Builder trustedCert(@Nullable String trustedCert) {
            this.trustedCert = trustedCert;
            return this;
        }
        @CustomType.Setter
        public Builder truststore(@Nullable String truststore) {
            this.truststore = truststore;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelHost(@Nullable String tunnelHost) {
            this.tunnelHost = tunnelHost;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelPort(@Nullable String tunnelPort) {
            this.tunnelPort = tunnelPort;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelUser(@Nullable String tunnelUser) {
            this.tunnelUser = tunnelUser;
            return this;
        }
        @CustomType.Setter
        public Builder uniqueId(@Nullable String uniqueId) {
            this.uniqueId = uniqueId;
            return this;
        }
        @CustomType.Setter
        public Builder updateConfigOnEachSync(@Nullable String updateConfigOnEachSync) {
            this.updateConfigOnEachSync = updateConfigOnEachSync;
            return this;
        }
        @CustomType.Setter
        public Builder updateMethod(@Nullable String updateMethod) {
            this.updateMethod = updateMethod;
            return this;
        }
        @CustomType.Setter
        public Builder uri(@Nullable String uri) {
            this.uri = uri;
            return this;
        }
        @CustomType.Setter
        public Builder useApiKeys(@Nullable String useApiKeys) {
            this.useApiKeys = useApiKeys;
            return this;
        }
        @CustomType.Setter
        public Builder useCustomerBucket(@Nullable String useCustomerBucket) {
            this.useCustomerBucket = useCustomerBucket;
            return this;
        }
        @CustomType.Setter
        public Builder useOracleRac(@Nullable String useOracleRac) {
            this.useOracleRac = useOracleRac;
            return this;
        }
        @CustomType.Setter
        public Builder usePgpEncryptionOptions(@Nullable String usePgpEncryptionOptions) {
            this.usePgpEncryptionOptions = usePgpEncryptionOptions;
            return this;
        }
        @CustomType.Setter
        public Builder useServiceAccount(@Nullable String useServiceAccount) {
            this.useServiceAccount = useServiceAccount;
            return this;
        }
        @CustomType.Setter
        public Builder useTemplateLabels(@Nullable String useTemplateLabels) {
            this.useTemplateLabels = useTemplateLabels;
            return this;
        }
        @CustomType.Setter
        public Builder useWebhooks(@Nullable String useWebhooks) {
            this.useWebhooks = useWebhooks;
            return this;
        }
        @CustomType.Setter
        public Builder useWorkspace(@Nullable String useWorkspace) {
            this.useWorkspace = useWorkspace;
            return this;
        }
        @CustomType.Setter
        public Builder user(@Nullable String user) {
            this.user = user;
            return this;
        }
        @CustomType.Setter
        public Builder userId(@Nullable String userId) {
            this.userId = userId;
            return this;
        }
        @CustomType.Setter
        public Builder userKey(@Nullable String userKey) {
            this.userKey = userKey;
            return this;
        }
        @CustomType.Setter
        public Builder userName(@Nullable String userName) {
            this.userName = userName;
            return this;
        }
        @CustomType.Setter
        public Builder userProfiles(@Nullable List<String> userProfiles) {
            this.userProfiles = userProfiles;
            return this;
        }
        public Builder userProfiles(String... userProfiles) {
            return userProfiles(List.of(userProfiles));
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {
            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder viewAttributionWindow(@Nullable String viewAttributionWindow) {
            this.viewAttributionWindow = viewAttributionWindow;
            return this;
        }
        @CustomType.Setter
        public Builder viewThroughAttributionWindowSize(@Nullable String viewThroughAttributionWindowSize) {
            this.viewThroughAttributionWindowSize = viewThroughAttributionWindowSize;
            return this;
        }
        @CustomType.Setter
        public Builder webhookEndpoint(@Nullable String webhookEndpoint) {
            this.webhookEndpoint = webhookEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder webhookKey(@Nullable String webhookKey) {
            this.webhookKey = webhookKey;
            return this;
        }
        @CustomType.Setter
        public Builder webhookUrl(@Nullable String webhookUrl) {
            this.webhookUrl = webhookUrl;
            return this;
        }
        @CustomType.Setter
        public Builder wordPressSiteIdOrWoocommerceDomainName(@Nullable String wordPressSiteIdOrWoocommerceDomainName) {
            this.wordPressSiteIdOrWoocommerceDomainName = wordPressSiteIdOrWoocommerceDomainName;
            return this;
        }
        @CustomType.Setter
        public Builder workspaceName(@Nullable String workspaceName) {
            this.workspaceName = workspaceName;
            return this;
        }
        @CustomType.Setter
        public Builder workspaceSameAsSource(@Nullable String workspaceSameAsSource) {
            this.workspaceSameAsSource = workspaceSameAsSource;
            return this;
        }
        @CustomType.Setter
        public Builder workspaceSchema(@Nullable String workspaceSchema) {
            this.workspaceSchema = workspaceSchema;
            return this;
        }
        @CustomType.Setter
        public Builder wsCertificate(@Nullable String wsCertificate) {
            this.wsCertificate = wsCertificate;
            return this;
        }
        public ConnectorConfig build() {
            final var o = new ConnectorConfig();
            o.absConnectionMethod = absConnectionMethod;
            o.absConnectionString = absConnectionString;
            o.absContainerAddress = absContainerAddress;
            o.absContainerName = absContainerName;
            o.absHostIp = absHostIp;
            o.absHostUser = absHostUser;
            o.absPrefix = absPrefix;
            o.absPublicKey = absPublicKey;
            o.accessKey = accessKey;
            o.accessKeyId = accessKeyId;
            o.accessKeySecret = accessKeySecret;
            o.accessToken = accessToken;
            o.accessType = accessType;
            o.account = account;
            o.accountId = accountId;
            o.accountIds = accountIds;
            o.accountKey = accountKey;
            o.accountName = accountName;
            o.accountSyncMode = accountSyncMode;
            o.accounts = accounts;
            o.accountsRedditAds = accountsRedditAds;
            o.accountsSyncMode = accountsSyncMode;
            o.actionBreakdowns = actionBreakdowns;
            o.actionReportTime = actionReportTime;
            o.adAnalytics = adAnalytics;
            o.adUnitView = adUnitView;
            o.adminApiKey = adminApiKey;
            o.adobeAnalyticsConfigurations = adobeAnalyticsConfigurations;
            o.advertisables = advertisables;
            o.advertisers = advertisers;
            o.advertisersIds = advertisersIds;
            o.advertisersSyncMode = advertisersSyncMode;
            o.agentHost = agentHost;
            o.agentOraHome = agentOraHome;
            o.agentPassword = agentPassword;
            o.agentPort = agentPort;
            o.agentPublicCert = agentPublicCert;
            o.agentUser = agentUser;
            o.aggregation = aggregation;
            o.alwaysEncrypted = alwaysEncrypted;
            o.apiAccessToken = apiAccessToken;
            o.apiId = apiId;
            o.apiKey = apiKey;
            o.apiKeyApiSecret = apiKeyApiSecret;
            o.apiKeys = apiKeys;
            o.apiQuota = apiQuota;
            o.apiRequestsPerMinute = apiRequestsPerMinute;
            o.apiSecret = apiSecret;
            o.apiSecretKey = apiSecretKey;
            o.apiToken = apiToken;
            o.apiType = apiType;
            o.apiUrl = apiUrl;
            o.apiUsage = apiUsage;
            o.apiUtilizationPercentage = apiUtilizationPercentage;
            o.apiVersion = apiVersion;
            o.appId = appId;
            o.appIds = appIds;
            o.appIdsAppsflyers = appIdsAppsflyers;
            o.appKey = appKey;
            o.appSpecificPassword = appSpecificPassword;
            o.appSyncMode = appSyncMode;
            o.appendFileOption = appendFileOption;
            o.applicationKey = applicationKey;
            o.apps = apps;
            o.archiveLogFormat = archiveLogFormat;
            o.archiveLogPath = archiveLogPath;
            o.archivePattern = archivePattern;
            o.areSoapCredentialsProvided = areSoapCredentialsProvided;
            o.asbIp = asbIp;
            o.asmOption = asmOption;
            o.asmOracleHome = asmOracleHome;
            o.asmPassword = asmPassword;
            o.asmTns = asmTns;
            o.asmUser = asmUser;
            o.attributionWindow = attributionWindow;
            o.attributionWindowSize = attributionWindowSize;
            o.auth = auth;
            o.authMethod = authMethod;
            o.authMode = authMode;
            o.authType = authType;
            o.authorizationMethod = authorizationMethod;
            o.awsRegionCode = awsRegionCode;
            o.baseCurrency = baseCurrency;
            o.baseDomain = baseDomain;
            o.baseId = baseId;
            o.baseUrl = baseUrl;
            o.bearerToken = bearerToken;
            o.blobSasUrl = blobSasUrl;
            o.breakdowns = breakdowns;
            o.bucket = bucket;
            o.bucketName = bucketName;
            o.bucketService = bucketService;
            o.businessId = businessId;
            o.businessUnitId = businessUnitId;
            o.certificate = certificate;
            o.clickAttributionWindow = clickAttributionWindow;
            o.client = client;
            o.clientCert = clientCert;
            o.clientCertKey = clientCertKey;
            o.clientId = clientId;
            o.clientKey = clientKey;
            o.clientName = clientName;
            o.clientSecret = clientSecret;
            o.cloudStorageType = cloudStorageType;
            o.columns = columns;
            o.companyId = companyId;
            o.companyKey = companyKey;
            o.companyRequestToken = companyRequestToken;
            o.companyUuid = companyUuid;
            o.compression = compression;
            o.configMethod = configMethod;
            o.configRepositoryUrl = configRepositoryUrl;
            o.configType = configType;
            o.connectingUser = connectingUser;
            o.connectingUserEmail = connectingUserEmail;
            o.connectionMethod = connectionMethod;
            o.connectionString = connectionString;
            o.connectionType = connectionType;
            o.consumerGroup = consumerGroup;
            o.consumerKey = consumerKey;
            o.consumerSecret = consumerSecret;
            o.containerAddress = containerAddress;
            o.containerName = containerName;
            o.contentOwnerId = contentOwnerId;
            o.conversationWebhookUrl = conversationWebhookUrl;
            o.conversionDimensions = conversionDimensions;
            o.conversionReportTime = conversionReportTime;
            o.conversionWindowSize = conversionWindowSize;
            o.csvDefinition = csvDefinition;
            o.currency = currency;
            o.customEventSyncMode = customEventSyncMode;
            o.customEvents = customEvents;
            o.customFieldIds = customFieldIds;
            o.customFloodlightVariables = customFloodlightVariables;
            o.customReports = customReports;
            o.customTables = customTables;
            o.customerId = customerId;
            o.customerListId = customerListId;
            o.dailyApiCallLimit = dailyApiCallLimit;
            o.dataAccessMethod = dataAccessMethod;
            o.dataCenter = dataCenter;
            o.dataSetName = dataSetName;
            o.database = database;
            o.datasetId = datasetId;
            o.datasource = datasource;
            o.dateGranularity = dateGranularity;
            o.delimiter = delimiter;
            o.dimensionAttributes = dimensionAttributes;
            o.dimensions = dimensions;
            o.distributedConnectorClusterSize = distributedConnectorClusterSize;
            o.domain = domain;
            o.domainHostName = domainHostName;
            o.domainName = domainName;
            o.domainType = domainType;
            o.elements = elements;
            o.email = email;
            o.emptyHeader = emptyHeader;
            o.enableAllDimensionCombinations = enableAllDimensionCombinations;
            o.enableArchiveLogOnly = enableArchiveLogOnly;
            o.enableDataExtensionsSyncing = enableDataExtensionsSyncing;
            o.enableDistributedConnectorMode = enableDistributedConnectorMode;
            o.enableEnrichments = enableEnrichments;
            o.enableExports = enableExports;
            o.enableTde = enableTde;
            o.encodedPublicKey = encodedPublicKey;
            o.encryptionKey = encryptionKey;
            o.endpoint = endpoint;
            o.engagementAttributionWindow = engagementAttributionWindow;
            o.enrichedExport = enrichedExport;
            o.entityId = entityId;
            o.environment = environment;
            o.escapeChar = escapeChar;
            o.euRegion = euRegion;
            o.events = events;
            o.exportStorageType = exportStorageType;
            o.externalId = externalId;
            o.fields = fields;
            o.fileType = fileType;
            o.filter = filter;
            o.financeAccountSyncMode = financeAccountSyncMode;
            o.financeAccounts = financeAccounts;
            o.folder = folder;
            o.folderId = folderId;
            o.folderPath = folderPath;
            o.forecastId = forecastId;
            o.ftpHost = ftpHost;
            o.ftpPassword = ftpPassword;
            o.ftpPort = ftpPort;
            o.ftpUser = ftpUser;
            o.function = function;
            o.functionApp = functionApp;
            o.functionKey = functionKey;
            o.functionName = functionName;
            o.functionTrigger = functionTrigger;
            o.gcsBucket = gcsBucket;
            o.gcsFolder = gcsFolder;
            o.groupName = groupName;
            o.hasManagePermissions = hasManagePermissions;
            o.homeFolder = homeFolder;
            o.host = host;
            o.hostIp = hostIp;
            o.hostUser = hostUser;
            o.hosts = hosts;
            o.identity = identity;
            o.includeOcapiEndpoints = includeOcapiEndpoints;
            o.instance = instance;
            o.instanceNumber = instanceNumber;
            o.instanceUrl = instanceUrl;
            o.integrationKey = integrationKey;
            o.isAccountLevelConnector = isAccountLevelConnector;
            o.isAuth2Enabled = isAuth2Enabled;
            o.isCustomApiCredentials = isCustomApiCredentials;
            o.isExternalActivitiesEndpointSelected = isExternalActivitiesEndpointSelected;
            o.isFtps = isFtps;
            o.isKeypair = isKeypair;
            o.isMultiEntityFeatureEnabled = isMultiEntityFeatureEnabled;
            o.isNewPackage = isNewPackage;
            o.isPrivateKeyEncrypted = isPrivateKeyEncrypted;
            o.isPrivateLinkRequired = isPrivateLinkRequired;
            o.isPublic = isPublic;
            o.isSailthruConnectEnabled = isSailthruConnectEnabled;
            o.isSecure = isSecure;
            o.isSingleTableMode = isSingleTableMode;
            o.isVendor = isVendor;
            o.jsonDeliveryMode = jsonDeliveryMode;
            o.key = key;
            o.keyPassword = keyPassword;
            o.keyStoreType = keyStoreType;
            o.keystore = keystore;
            o.keystorePassword = keystorePassword;
            o.lastSyncedChangesUtc_ = lastSyncedChangesUtc_;
            o.latestVersion = latestVersion;
            o.limitForApiCallsToExternalActivitiesEndpoint = limitForApiCallsToExternalActivitiesEndpoint;
            o.lineSeparator = lineSeparator;
            o.listStrategy = listStrategy;
            o.listSyncMode = listSyncMode;
            o.logJournal = logJournal;
            o.logJournalSchema = logJournalSchema;
            o.login = login;
            o.loginPassword = loginPassword;
            o.managerAccounts = managerAccounts;
            o.merchantId = merchantId;
            o.messageType = messageType;
            o.metrics = metrics;
            o.namedRange = namedRange;
            o.namespace = namespace;
            o.networkCode = networkCode;
            o.nullSequence = nullSequence;
            o.oauthToken = oauthToken;
            o.oauthTokenSecret = oauthTokenSecret;
            o.ocapiClientId = ocapiClientId;
            o.ocapiClientSecret = ocapiClientSecret;
            o.ocapiCustomObjectTypes = ocapiCustomObjectTypes;
            o.ocapiHostname = ocapiHostname;
            o.onError = onError;
            o.onPremise = onPremise;
            o.organization = organization;
            o.organizationId = organizationId;
            o.organizations = organizations;
            o.packedModeTables = packedModeTables;
            o.packingMode = packingMode;
            o.pages = pages;
            o.partnerCode = partnerCode;
            o.partners = partners;
            o.passphrase = passphrase;
            o.password = password;
            o.pat = pat;
            o.patName = patName;
            o.patSecret = patSecret;
            o.path = path;
            o.pattern = pattern;
            o.pdbName = pdbName;
            o.pemCertificate = pemCertificate;
            o.pemPrivateKey = pemPrivateKey;
            o.perInteractionDimensions = perInteractionDimensions;
            o.personalAccessToken = personalAccessToken;
            o.pgpPassPhrase = pgpPassPhrase;
            o.pgpSecretKey = pgpSecretKey;
            o.phoneNumber = phoneNumber;
            o.port = port;
            o.postClickAttributionWindowSize = postClickAttributionWindowSize;
            o.prebuiltReport = prebuiltReport;
            o.prefix = prefix;
            o.primaryKeys = primaryKeys;
            o.privateKey = privateKey;
            o.profiles = profiles;
            o.projectCredentials = projectCredentials;
            o.projectId = projectId;
            o.projects = projects;
            o.properties = properties;
            o.publicKey = publicKey;
            o.publicationName = publicationName;
            o.queryId = queryId;
            o.queryParamValue = queryParamValue;
            o.refreshTokenExpiresAt = refreshTokenExpiresAt;
            o.region = region;
            o.replicaId = replicaId;
            o.replicationSlot = replicationSlot;
            o.reportConfigurationIds = reportConfigurationIds;
            o.reportFormatType = reportFormatType;
            o.reportSuites = reportSuites;
            o.reportTimezone = reportTimezone;
            o.reportType = reportType;
            o.reportUrl = reportUrl;
            o.reports = reports;
            o.reportsLinkedinAds = reportsLinkedinAds;
            o.repositories = repositories;
            o.resourceToken = resourceToken;
            o.resourceUrl = resourceUrl;
            o.restApiLimit = restApiLimit;
            o.rfcLibraryPath = rfcLibraryPath;
            o.role = role;
            o.roleArn = roleArn;
            o.rollbackWindowSize = rollbackWindowSize;
            o.s3Bucket = s3Bucket;
            o.s3ExportBucket = s3ExportBucket;
            o.s3ExportFolder = s3ExportFolder;
            o.s3ExportRoleArn = s3ExportRoleArn;
            o.s3RoleArn = s3RoleArn;
            o.s3bucket = s3bucket;
            o.s3externalId = s3externalId;
            o.s3folder = s3folder;
            o.s3path = s3path;
            o.s3roleArn = s3roleArn;
            o.salesAccountSyncMode = salesAccountSyncMode;
            o.salesAccounts = salesAccounts;
            o.salesforceSecurityToken = salesforceSecurityToken;
            o.sandboxAccount = sandboxAccount;
            o.sapSchema = sapSchema;
            o.sapUser = sapUser;
            o.saslMechanism = saslMechanism;
            o.saslPlainKey = saslPlainKey;
            o.saslPlainSecret = saslPlainSecret;
            o.saslScram256Key = saslScram256Key;
            o.saslScram256Secret = saslScram256Secret;
            o.saslScram512Key = saslScram512Key;
            o.saslScram512Secret = saslScram512Secret;
            o.schemaRegistryCredentialsSource = schemaRegistryCredentialsSource;
            o.schemaRegistryKey = schemaRegistryKey;
            o.schemaRegistrySecret = schemaRegistrySecret;
            o.schemaRegistryUrls = schemaRegistryUrls;
            o.secret = secret;
            o.secretKey = secretKey;
            o.secrets = secrets;
            o.secretsLists = secretsLists;
            o.securityProtocol = securityProtocol;
            o.segments = segments;
            o.selectedExports = selectedExports;
            o.senderId = senderId;
            o.senderPassword = senderPassword;
            o.serverAddress = serverAddress;
            o.serverUrl = serverUrl;
            o.servers = servers;
            o.serviceAccount = serviceAccount;
            o.serviceAccountEmail = serviceAccountEmail;
            o.serviceAccountKey = serviceAccountKey;
            o.serviceVersion = serviceVersion;
            o.sftpHost = sftpHost;
            o.sftpIsKeyPair = sftpIsKeyPair;
            o.sftpPassword = sftpPassword;
            o.sftpPort = sftpPort;
            o.sftpPublicKey = sftpPublicKey;
            o.sftpUser = sftpUser;
            o.shareUrl = shareUrl;
            o.sheetId = sheetId;
            o.shop = shop;
            o.shortCode = shortCode;
            o.showRecordsWithNoMetrics = showRecordsWithNoMetrics;
            o.sid = sid;
            o.signerPublicKey = signerPublicKey;
            o.siteAddress = siteAddress;
            o.siteId = siteId;
            o.siteName = siteName;
            o.siteUrls = siteUrls;
            o.skipAfter = skipAfter;
            o.skipBefore = skipBefore;
            o.soapUri = soapUri;
            o.socialDataSyncTimeframe = socialDataSyncTimeframe;
            o.source = source;
            o.storeHash = storeHash;
            o.subDomain = subDomain;
            o.subdomain = subdomain;
            o.subscriberName = subscriberName;
            o.subscription = subscription;
            o.supportConnectedAccountsSync = supportConnectedAccountsSync;
            o.supportNestedColumns = supportNestedColumns;
            o.surveyIds = surveyIds;
            o.swipeAttributionWindow = swipeAttributionWindow;
            o.syncDataLocker = syncDataLocker;
            o.syncFormat = syncFormat;
            o.syncFormulaFields = syncFormulaFields;
            o.syncMetadata = syncMetadata;
            o.syncMethod = syncMethod;
            o.syncMode = syncMode;
            o.syncMultipleAccounts = syncMultipleAccounts;
            o.syncPackMode = syncPackMode;
            o.syncPullApi = syncPullApi;
            o.syncType = syncType;
            o.sysnr = sysnr;
            o.tableName = tableName;
            o.tdeCertificate = tdeCertificate;
            o.tdeCertificateName = tdeCertificateName;
            o.tdePassword = tdePassword;
            o.tdePrivateKey = tdePrivateKey;
            o.teamId = teamId;
            o.technicalAccountId = technicalAccountId;
            o.templateLabels = templateLabels;
            o.tenant = tenant;
            o.tenantId = tenantId;
            o.testTableName = testTableName;
            o.timeZone = timeZone;
            o.timeframeMonths = timeframeMonths;
            o.tns = tns;
            o.tokenAuthenticatedContainer = tokenAuthenticatedContainer;
            o.tokenAuthenticatedDatabase = tokenAuthenticatedDatabase;
            o.tokenId = tokenId;
            o.tokenKey = tokenKey;
            o.tokenSecret = tokenSecret;
            o.tokenSecretKey = tokenSecretKey;
            o.topics = topics;
            o.trustStoreType = trustStoreType;
            o.trustedCert = trustedCert;
            o.truststore = truststore;
            o.tunnelHost = tunnelHost;
            o.tunnelPort = tunnelPort;
            o.tunnelUser = tunnelUser;
            o.uniqueId = uniqueId;
            o.updateConfigOnEachSync = updateConfigOnEachSync;
            o.updateMethod = updateMethod;
            o.uri = uri;
            o.useApiKeys = useApiKeys;
            o.useCustomerBucket = useCustomerBucket;
            o.useOracleRac = useOracleRac;
            o.usePgpEncryptionOptions = usePgpEncryptionOptions;
            o.useServiceAccount = useServiceAccount;
            o.useTemplateLabels = useTemplateLabels;
            o.useWebhooks = useWebhooks;
            o.useWorkspace = useWorkspace;
            o.user = user;
            o.userId = userId;
            o.userKey = userKey;
            o.userName = userName;
            o.userProfiles = userProfiles;
            o.username = username;
            o.viewAttributionWindow = viewAttributionWindow;
            o.viewThroughAttributionWindowSize = viewThroughAttributionWindowSize;
            o.webhookEndpoint = webhookEndpoint;
            o.webhookKey = webhookKey;
            o.webhookUrl = webhookUrl;
            o.wordPressSiteIdOrWoocommerceDomainName = wordPressSiteIdOrWoocommerceDomainName;
            o.workspaceName = workspaceName;
            o.workspaceSameAsSource = workspaceSameAsSource;
            o.workspaceSchema = workspaceSchema;
            o.wsCertificate = wsCertificate;
            return o;
        }
    }
}
