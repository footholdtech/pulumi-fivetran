// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.footholdtech.fivetran.inputs.DbtTransformationScheduleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbtTransformationState extends com.pulumi.resources.ResourceArgs {

    public static final DbtTransformationState Empty = new DbtTransformationState();

    /**
     * Identifiers of related connectors.
     * 
     */
    @Import(name="connectorIds")
    private @Nullable Output<List<String>> connectorIds;

    /**
     * @return Identifiers of related connectors.
     * 
     */
    public Optional<Output<List<String>>> connectorIds() {
        return Optional.ofNullable(this.connectorIds);
    }

    /**
     * The timestamp of the dbt Transformation creation.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The timestamp of the dbt Transformation creation.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The unique identifier for the dbt Model within the Fivetran system.
     * 
     */
    @Import(name="dbtModelId")
    private @Nullable Output<String> dbtModelId;

    /**
     * @return The unique identifier for the dbt Model within the Fivetran system.
     * 
     */
    public Optional<Output<String>> dbtModelId() {
        return Optional.ofNullable(this.dbtModelId);
    }

    /**
     * Target dbt Model name.
     * 
     */
    @Import(name="dbtModelName")
    private @Nullable Output<String> dbtModelName;

    /**
     * @return Target dbt Model name.
     * 
     */
    public Optional<Output<String>> dbtModelName() {
        return Optional.ofNullable(this.dbtModelName);
    }

    /**
     * The unique identifier for the dbt Project within the Fivetran system.
     * 
     */
    @Import(name="dbtProjectId")
    private @Nullable Output<String> dbtProjectId;

    /**
     * @return The unique identifier for the dbt Project within the Fivetran system.
     * 
     */
    public Optional<Output<String>> dbtProjectId() {
        return Optional.ofNullable(this.dbtProjectId);
    }

    /**
     * Identifiers of related models.
     * 
     */
    @Import(name="modelIds")
    private @Nullable Output<List<String>> modelIds;

    /**
     * @return Identifiers of related models.
     * 
     */
    public Optional<Output<List<String>>> modelIds() {
        return Optional.ofNullable(this.modelIds);
    }

    /**
     * The dbt Model name.
     * 
     */
    @Import(name="outputModelName")
    private @Nullable Output<String> outputModelName;

    /**
     * @return The dbt Model name.
     * 
     */
    public Optional<Output<String>> outputModelName() {
        return Optional.ofNullable(this.outputModelName);
    }

    /**
     * The field indicating whether the transformation will be created in paused state. By default, the value is false.
     * 
     */
    @Import(name="paused")
    private @Nullable Output<Boolean> paused;

    /**
     * @return The field indicating whether the transformation will be created in paused state. By default, the value is false.
     * 
     */
    public Optional<Output<Boolean>> paused() {
        return Optional.ofNullable(this.paused);
    }

    /**
     * The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
     * 
     */
    @Import(name="runTests")
    private @Nullable Output<Boolean> runTests;

    /**
     * @return The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
     * 
     */
    public Optional<Output<Boolean>> runTests() {
        return Optional.ofNullable(this.runTests);
    }

    /**
     * dbt Transformation schedule parameters.
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<DbtTransformationScheduleArgs> schedule;

    /**
     * @return dbt Transformation schedule parameters.
     * 
     */
    public Optional<Output<DbtTransformationScheduleArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    private DbtTransformationState() {}

    private DbtTransformationState(DbtTransformationState $) {
        this.connectorIds = $.connectorIds;
        this.createdAt = $.createdAt;
        this.dbtModelId = $.dbtModelId;
        this.dbtModelName = $.dbtModelName;
        this.dbtProjectId = $.dbtProjectId;
        this.modelIds = $.modelIds;
        this.outputModelName = $.outputModelName;
        this.paused = $.paused;
        this.runTests = $.runTests;
        this.schedule = $.schedule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbtTransformationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbtTransformationState $;

        public Builder() {
            $ = new DbtTransformationState();
        }

        public Builder(DbtTransformationState defaults) {
            $ = new DbtTransformationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectorIds Identifiers of related connectors.
         * 
         * @return builder
         * 
         */
        public Builder connectorIds(@Nullable Output<List<String>> connectorIds) {
            $.connectorIds = connectorIds;
            return this;
        }

        /**
         * @param connectorIds Identifiers of related connectors.
         * 
         * @return builder
         * 
         */
        public Builder connectorIds(List<String> connectorIds) {
            return connectorIds(Output.of(connectorIds));
        }

        /**
         * @param connectorIds Identifiers of related connectors.
         * 
         * @return builder
         * 
         */
        public Builder connectorIds(String... connectorIds) {
            return connectorIds(List.of(connectorIds));
        }

        /**
         * @param createdAt The timestamp of the dbt Transformation creation.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The timestamp of the dbt Transformation creation.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param dbtModelId The unique identifier for the dbt Model within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder dbtModelId(@Nullable Output<String> dbtModelId) {
            $.dbtModelId = dbtModelId;
            return this;
        }

        /**
         * @param dbtModelId The unique identifier for the dbt Model within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder dbtModelId(String dbtModelId) {
            return dbtModelId(Output.of(dbtModelId));
        }

        /**
         * @param dbtModelName Target dbt Model name.
         * 
         * @return builder
         * 
         */
        public Builder dbtModelName(@Nullable Output<String> dbtModelName) {
            $.dbtModelName = dbtModelName;
            return this;
        }

        /**
         * @param dbtModelName Target dbt Model name.
         * 
         * @return builder
         * 
         */
        public Builder dbtModelName(String dbtModelName) {
            return dbtModelName(Output.of(dbtModelName));
        }

        /**
         * @param dbtProjectId The unique identifier for the dbt Project within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder dbtProjectId(@Nullable Output<String> dbtProjectId) {
            $.dbtProjectId = dbtProjectId;
            return this;
        }

        /**
         * @param dbtProjectId The unique identifier for the dbt Project within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder dbtProjectId(String dbtProjectId) {
            return dbtProjectId(Output.of(dbtProjectId));
        }

        /**
         * @param modelIds Identifiers of related models.
         * 
         * @return builder
         * 
         */
        public Builder modelIds(@Nullable Output<List<String>> modelIds) {
            $.modelIds = modelIds;
            return this;
        }

        /**
         * @param modelIds Identifiers of related models.
         * 
         * @return builder
         * 
         */
        public Builder modelIds(List<String> modelIds) {
            return modelIds(Output.of(modelIds));
        }

        /**
         * @param modelIds Identifiers of related models.
         * 
         * @return builder
         * 
         */
        public Builder modelIds(String... modelIds) {
            return modelIds(List.of(modelIds));
        }

        /**
         * @param outputModelName The dbt Model name.
         * 
         * @return builder
         * 
         */
        public Builder outputModelName(@Nullable Output<String> outputModelName) {
            $.outputModelName = outputModelName;
            return this;
        }

        /**
         * @param outputModelName The dbt Model name.
         * 
         * @return builder
         * 
         */
        public Builder outputModelName(String outputModelName) {
            return outputModelName(Output.of(outputModelName));
        }

        /**
         * @param paused The field indicating whether the transformation will be created in paused state. By default, the value is false.
         * 
         * @return builder
         * 
         */
        public Builder paused(@Nullable Output<Boolean> paused) {
            $.paused = paused;
            return this;
        }

        /**
         * @param paused The field indicating whether the transformation will be created in paused state. By default, the value is false.
         * 
         * @return builder
         * 
         */
        public Builder paused(Boolean paused) {
            return paused(Output.of(paused));
        }

        /**
         * @param runTests The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
         * 
         * @return builder
         * 
         */
        public Builder runTests(@Nullable Output<Boolean> runTests) {
            $.runTests = runTests;
            return this;
        }

        /**
         * @param runTests The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
         * 
         * @return builder
         * 
         */
        public Builder runTests(Boolean runTests) {
            return runTests(Output.of(runTests));
        }

        /**
         * @param schedule dbt Transformation schedule parameters.
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<DbtTransformationScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule dbt Transformation schedule parameters.
         * 
         * @return builder
         * 
         */
        public Builder schedule(DbtTransformationScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        public DbtTransformationState build() {
            return $;
        }
    }

}
