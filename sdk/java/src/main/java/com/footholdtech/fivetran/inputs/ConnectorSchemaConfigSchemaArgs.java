// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.footholdtech.fivetran.inputs.ConnectorSchemaConfigSchemaTableArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorSchemaConfigSchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorSchemaConfigSchemaArgs Empty = new ConnectorSchemaConfigSchemaArgs();

    /**
     * The boolean value specifying whether the sync for the schema into the destination is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<String> enabled;

    /**
     * @return The boolean value specifying whether the sync for the schema into the destination is enabled.
     * 
     */
    public Optional<Output<String>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The schema name within your destination in accordance with Fivetran conventional rules.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The schema name within your destination in accordance with Fivetran conventional rules.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    @Import(name="tables")
    private @Nullable Output<List<ConnectorSchemaConfigSchemaTableArgs>> tables;

    public Optional<Output<List<ConnectorSchemaConfigSchemaTableArgs>>> tables() {
        return Optional.ofNullable(this.tables);
    }

    private ConnectorSchemaConfigSchemaArgs() {}

    private ConnectorSchemaConfigSchemaArgs(ConnectorSchemaConfigSchemaArgs $) {
        this.enabled = $.enabled;
        this.name = $.name;
        this.tables = $.tables;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorSchemaConfigSchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorSchemaConfigSchemaArgs $;

        public Builder() {
            $ = new ConnectorSchemaConfigSchemaArgs();
        }

        public Builder(ConnectorSchemaConfigSchemaArgs defaults) {
            $ = new ConnectorSchemaConfigSchemaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled The boolean value specifying whether the sync for the schema into the destination is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<String> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled The boolean value specifying whether the sync for the schema into the destination is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(String enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param name The schema name within your destination in accordance with Fivetran conventional rules.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The schema name within your destination in accordance with Fivetran conventional rules.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder tables(@Nullable Output<List<ConnectorSchemaConfigSchemaTableArgs>> tables) {
            $.tables = tables;
            return this;
        }

        public Builder tables(List<ConnectorSchemaConfigSchemaTableArgs> tables) {
            return tables(Output.of(tables));
        }

        public Builder tables(ConnectorSchemaConfigSchemaTableArgs... tables) {
            return tables(List.of(tables));
        }

        public ConnectorSchemaConfigSchemaArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
