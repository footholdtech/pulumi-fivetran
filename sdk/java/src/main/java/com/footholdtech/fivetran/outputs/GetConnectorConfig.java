// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.outputs;

import com.footholdtech.fivetran.outputs.GetConnectorConfigAccountsRedditAd;
import com.footholdtech.fivetran.outputs.GetConnectorConfigAdobeAnalyticsConfiguration;
import com.footholdtech.fivetran.outputs.GetConnectorConfigAppIdsAppsflyer;
import com.footholdtech.fivetran.outputs.GetConnectorConfigCustomReport;
import com.footholdtech.fivetran.outputs.GetConnectorConfigCustomTable;
import com.footholdtech.fivetran.outputs.GetConnectorConfigProjectCredential;
import com.footholdtech.fivetran.outputs.GetConnectorConfigReport;
import com.footholdtech.fivetran.outputs.GetConnectorConfigSecretsList;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetConnectorConfig {
    private String absConnectionMethod;
    private String absConnectionString;
    private String absContainerAddress;
    private String absContainerName;
    private String absHostIp;
    private String absHostUser;
    private String absPrefix;
    private String absPublicKey;
    private String accessKey;
    private String accessKeyId;
    private String accessKeySecret;
    private String accessToken;
    private String accessType;
    private String account;
    private String accountId;
    private List<String> accountIds;
    private String accountKey;
    private String accountName;
    private String accountSyncMode;
    private List<String> accounts;
    private List<GetConnectorConfigAccountsRedditAd> accountsRedditAds;
    private String accountsSyncMode;
    private List<String> actionBreakdowns;
    private String actionReportTime;
    private String adAnalytics;
    private String adUnitView;
    private String adminApiKey;
    private List<GetConnectorConfigAdobeAnalyticsConfiguration> adobeAnalyticsConfigurations;
    private List<String> advertisables;
    private List<String> advertisers;
    private List<String> advertisersIds;
    private String advertisersSyncMode;
    private String agentHost;
    private String agentOraHome;
    private String agentPassword;
    private String agentPort;
    private String agentPublicCert;
    private String agentUser;
    private String aggregation;
    private String alwaysEncrypted;
    private String apiAccessToken;
    private String apiId;
    private String apiKey;
    private String apiKeyApiSecret;
    private List<String> apiKeys;
    private String apiQuota;
    private String apiRequestsPerMinute;
    private String apiSecret;
    private String apiSecretKey;
    private String apiToken;
    private String apiType;
    private String apiUrl;
    private String apiUsage;
    private String apiUtilizationPercentage;
    private String apiVersion;
    private String appId;
    private List<String> appIds;
    private List<GetConnectorConfigAppIdsAppsflyer> appIdsAppsflyers;
    private String appKey;
    private String appSpecificPassword;
    private String appSyncMode;
    private String appendFileOption;
    private String applicationKey;
    private List<String> apps;
    private String archiveLogFormat;
    private String archiveLogPath;
    private String archivePattern;
    private String areSoapCredentialsProvided;
    private String asbIp;
    private String asmOption;
    private String asmOracleHome;
    private String asmPassword;
    private String asmTns;
    private String asmUser;
    private String attributionWindow;
    private String attributionWindowSize;
    private String auth;
    private String authMethod;
    private String authMode;
    private String authType;
    private String authorizationMethod;
    private String awsRegionCode;
    private String baseCurrency;
    private String baseDomain;
    private String baseId;
    private String baseUrl;
    private String bearerToken;
    private String blobSasUrl;
    private List<String> breakdowns;
    private String bucket;
    private String bucketName;
    private String bucketService;
    private String businessId;
    private String businessUnitId;
    private String certificate;
    private String clickAttributionWindow;
    private String client;
    private String clientCert;
    private String clientCertKey;
    private String clientId;
    private String clientKey;
    private String clientName;
    private String clientSecret;
    private String cloudStorageType;
    private List<String> columns;
    private String companyId;
    private String companyKey;
    private String companyRequestToken;
    private String companyUuid;
    private String compression;
    private String configMethod;
    private String configRepositoryUrl;
    private String configType;
    private String connectingUser;
    private String connectingUserEmail;
    private String connectionMethod;
    private String connectionString;
    private String connectionType;
    private String consumerGroup;
    private String consumerKey;
    private String consumerSecret;
    private String containerAddress;
    private String containerName;
    private String contentOwnerId;
    private String conversationWebhookUrl;
    private List<String> conversionDimensions;
    private String conversionReportTime;
    private String conversionWindowSize;
    private String csvDefinition;
    private String currency;
    private String customEventSyncMode;
    private List<String> customEvents;
    private List<String> customFieldIds;
    private List<String> customFloodlightVariables;
    private List<GetConnectorConfigCustomReport> customReports;
    private List<GetConnectorConfigCustomTable> customTables;
    private String customerId;
    private String customerListId;
    private String dailyApiCallLimit;
    private String dataAccessMethod;
    private String dataCenter;
    private String dataSetName;
    private String database;
    private String datasetId;
    private String datasource;
    private String dateGranularity;
    private String delimiter;
    private List<String> dimensionAttributes;
    private List<String> dimensions;
    private String distributedConnectorClusterSize;
    private String domain;
    private String domainHostName;
    private String domainName;
    private String domainType;
    private List<String> elements;
    private String email;
    private String emptyHeader;
    private String enableAllDimensionCombinations;
    private String enableArchiveLogOnly;
    private String enableDataExtensionsSyncing;
    private String enableDistributedConnectorMode;
    private String enableEnrichments;
    private String enableExports;
    private String enableTde;
    private String encodedPublicKey;
    private String encryptionKey;
    private String endpoint;
    private String engagementAttributionWindow;
    private String enrichedExport;
    private String entityId;
    private String environment;
    private String escapeChar;
    private String euRegion;
    private List<String> events;
    private String exportStorageType;
    private String externalId;
    private List<String> fields;
    private String fileType;
    private String filter;
    private String financeAccountSyncMode;
    private List<String> financeAccounts;
    private String folder;
    private String folderId;
    private String folderPath;
    private String forecastId;
    private String ftpHost;
    private String ftpPassword;
    private String ftpPort;
    private String ftpUser;
    private String function;
    private String functionApp;
    private String functionKey;
    private String functionName;
    private String functionTrigger;
    private String gcsBucket;
    private String gcsFolder;
    private String groupName;
    private String hasManagePermissions;
    private String homeFolder;
    private String host;
    private String hostIp;
    private String hostUser;
    private List<String> hosts;
    private String identity;
    private String includeOcapiEndpoints;
    private String instance;
    private String instanceNumber;
    private String instanceUrl;
    private String integrationKey;
    private String isAccountLevelConnector;
    private String isAuth2Enabled;
    private String isCustomApiCredentials;
    private String isExternalActivitiesEndpointSelected;
    private String isFtps;
    private String isKeypair;
    private String isMultiEntityFeatureEnabled;
    private String isNewPackage;
    private String isPrivateKeyEncrypted;
    private String isPrivateLinkRequired;
    private String isPublic;
    private String isSailthruConnectEnabled;
    private String isSecure;
    private String isSingleTableMode;
    private String isVendor;
    private String jsonDeliveryMode;
    private String key;
    private String keyPassword;
    private String keyStoreType;
    private String keystore;
    private String keystorePassword;
    private String lastSyncedChangesUtc_;
    private String latestVersion;
    private String limitForApiCallsToExternalActivitiesEndpoint;
    private String lineSeparator;
    private String listStrategy;
    private String listSyncMode;
    private String logJournal;
    private String logJournalSchema;
    private String login;
    private String loginPassword;
    private List<String> managerAccounts;
    private String merchantId;
    private String messageType;
    private List<String> metrics;
    private String namedRange;
    private String namespace;
    private String networkCode;
    private String nullSequence;
    private String oauthToken;
    private String oauthTokenSecret;
    private String ocapiClientId;
    private String ocapiClientSecret;
    private String ocapiCustomObjectTypes;
    private String ocapiHostname;
    private String onError;
    private String onPremise;
    private String organization;
    private String organizationId;
    private List<String> organizations;
    private List<String> packedModeTables;
    private String packingMode;
    private List<String> pages;
    private String partnerCode;
    private List<String> partners;
    private String passphrase;
    private String password;
    private String pat;
    private String patName;
    private String patSecret;
    private String path;
    private String pattern;
    private String pdbName;
    private String pemCertificate;
    private String pemPrivateKey;
    private List<String> perInteractionDimensions;
    private String personalAccessToken;
    private String pgpPassPhrase;
    private String pgpSecretKey;
    private String phoneNumber;
    private String port;
    private String postClickAttributionWindowSize;
    private String prebuiltReport;
    private String prefix;
    private List<String> primaryKeys;
    private String privateKey;
    private List<String> profiles;
    private List<GetConnectorConfigProjectCredential> projectCredentials;
    private String projectId;
    private List<String> projects;
    private List<String> properties;
    private String publicKey;
    private String publicationName;
    private String queryId;
    private String queryParamValue;
    private String refreshTokenExpiresAt;
    private String region;
    private String replicaId;
    private String replicationSlot;
    private List<String> reportConfigurationIds;
    private String reportFormatType;
    private List<String> reportSuites;
    private String reportTimezone;
    private String reportType;
    private String reportUrl;
    private List<GetConnectorConfigReport> reports;
    private List<String> reportsLinkedinAds;
    private List<String> repositories;
    private String resourceToken;
    private String resourceUrl;
    private String restApiLimit;
    private String rfcLibraryPath;
    private String role;
    private String roleArn;
    private String rollbackWindowSize;
    private String s3Bucket;
    private String s3ExportBucket;
    private String s3ExportFolder;
    private String s3ExportRoleArn;
    private String s3RoleArn;
    private String s3bucket;
    private String s3externalId;
    private String s3folder;
    private String s3path;
    private String s3roleArn;
    private String salesAccountSyncMode;
    private List<String> salesAccounts;
    private String salesforceSecurityToken;
    private String sandboxAccount;
    private String sapSchema;
    private String sapUser;
    private String saslMechanism;
    private String saslPlainKey;
    private String saslPlainSecret;
    private String saslScram256Key;
    private String saslScram256Secret;
    private String saslScram512Key;
    private String saslScram512Secret;
    private String schemaRegistryCredentialsSource;
    private String schemaRegistryKey;
    private String schemaRegistrySecret;
    private List<String> schemaRegistryUrls;
    private String secret;
    private String secretKey;
    private String secrets;
    private List<GetConnectorConfigSecretsList> secretsLists;
    private String securityProtocol;
    private List<String> segments;
    private List<String> selectedExports;
    private String senderId;
    private String senderPassword;
    private String serverAddress;
    private String serverUrl;
    private List<String> servers;
    private String serviceAccount;
    private String serviceAccountEmail;
    private String serviceAccountKey;
    private String serviceVersion;
    private String sftpHost;
    private String sftpIsKeyPair;
    private String sftpPassword;
    private String sftpPort;
    private String sftpPublicKey;
    private String sftpUser;
    private String shareUrl;
    private String sheetId;
    private String shop;
    private String shortCode;
    private String showRecordsWithNoMetrics;
    private String sid;
    private String signerPublicKey;
    private String siteAddress;
    private String siteId;
    private String siteName;
    private List<String> siteUrls;
    private String skipAfter;
    private String skipBefore;
    private String soapUri;
    private String socialDataSyncTimeframe;
    private String source;
    private String storeHash;
    private String subDomain;
    private String subdomain;
    private String subscriberName;
    private String subscription;
    private String supportConnectedAccountsSync;
    private String supportNestedColumns;
    private String surveyIds;
    private String swipeAttributionWindow;
    private String syncDataLocker;
    private String syncFormat;
    private String syncFormulaFields;
    private String syncMetadata;
    private String syncMethod;
    private String syncMode;
    private String syncMultipleAccounts;
    private String syncPackMode;
    private String syncPullApi;
    private String syncType;
    private String sysnr;
    private String tableName;
    private String tdeCertificate;
    private String tdeCertificateName;
    private String tdePassword;
    private String tdePrivateKey;
    private String teamId;
    private String technicalAccountId;
    private List<String> templateLabels;
    private String tenant;
    private String tenantId;
    private String testTableName;
    private String timeZone;
    private String timeframeMonths;
    private String tns;
    private String tokenAuthenticatedContainer;
    private String tokenAuthenticatedDatabase;
    private String tokenId;
    private String tokenKey;
    private String tokenSecret;
    private String tokenSecretKey;
    private List<String> topics;
    private String trustStoreType;
    private String trustedCert;
    private String truststore;
    private String tunnelHost;
    private String tunnelPort;
    private String tunnelUser;
    private String uniqueId;
    private String updateConfigOnEachSync;
    private String updateMethod;
    private String uri;
    private String useApiKeys;
    private String useCustomerBucket;
    private String useOracleRac;
    private String usePgpEncryptionOptions;
    private String useServiceAccount;
    private String useTemplateLabels;
    private String useWebhooks;
    private String useWorkspace;
    private String user;
    private String userId;
    private String userKey;
    private String userName;
    private List<String> userProfiles;
    private String username;
    private String viewAttributionWindow;
    private String viewThroughAttributionWindowSize;
    private String webhookEndpoint;
    private String webhookKey;
    private String webhookUrl;
    private String wordPressSiteIdOrWoocommerceDomainName;
    private String workspaceName;
    private String workspaceSameAsSource;
    private String workspaceSchema;
    private String wsCertificate;

    private GetConnectorConfig() {}
    public String absConnectionMethod() {
        return this.absConnectionMethod;
    }
    public String absConnectionString() {
        return this.absConnectionString;
    }
    public String absContainerAddress() {
        return this.absContainerAddress;
    }
    public String absContainerName() {
        return this.absContainerName;
    }
    public String absHostIp() {
        return this.absHostIp;
    }
    public String absHostUser() {
        return this.absHostUser;
    }
    public String absPrefix() {
        return this.absPrefix;
    }
    public String absPublicKey() {
        return this.absPublicKey;
    }
    public String accessKey() {
        return this.accessKey;
    }
    public String accessKeyId() {
        return this.accessKeyId;
    }
    public String accessKeySecret() {
        return this.accessKeySecret;
    }
    public String accessToken() {
        return this.accessToken;
    }
    public String accessType() {
        return this.accessType;
    }
    public String account() {
        return this.account;
    }
    public String accountId() {
        return this.accountId;
    }
    public List<String> accountIds() {
        return this.accountIds;
    }
    public String accountKey() {
        return this.accountKey;
    }
    public String accountName() {
        return this.accountName;
    }
    public String accountSyncMode() {
        return this.accountSyncMode;
    }
    public List<String> accounts() {
        return this.accounts;
    }
    public List<GetConnectorConfigAccountsRedditAd> accountsRedditAds() {
        return this.accountsRedditAds;
    }
    public String accountsSyncMode() {
        return this.accountsSyncMode;
    }
    public List<String> actionBreakdowns() {
        return this.actionBreakdowns;
    }
    public String actionReportTime() {
        return this.actionReportTime;
    }
    public String adAnalytics() {
        return this.adAnalytics;
    }
    public String adUnitView() {
        return this.adUnitView;
    }
    public String adminApiKey() {
        return this.adminApiKey;
    }
    public List<GetConnectorConfigAdobeAnalyticsConfiguration> adobeAnalyticsConfigurations() {
        return this.adobeAnalyticsConfigurations;
    }
    public List<String> advertisables() {
        return this.advertisables;
    }
    public List<String> advertisers() {
        return this.advertisers;
    }
    public List<String> advertisersIds() {
        return this.advertisersIds;
    }
    public String advertisersSyncMode() {
        return this.advertisersSyncMode;
    }
    public String agentHost() {
        return this.agentHost;
    }
    public String agentOraHome() {
        return this.agentOraHome;
    }
    public String agentPassword() {
        return this.agentPassword;
    }
    public String agentPort() {
        return this.agentPort;
    }
    public String agentPublicCert() {
        return this.agentPublicCert;
    }
    public String agentUser() {
        return this.agentUser;
    }
    public String aggregation() {
        return this.aggregation;
    }
    public String alwaysEncrypted() {
        return this.alwaysEncrypted;
    }
    public String apiAccessToken() {
        return this.apiAccessToken;
    }
    public String apiId() {
        return this.apiId;
    }
    public String apiKey() {
        return this.apiKey;
    }
    public String apiKeyApiSecret() {
        return this.apiKeyApiSecret;
    }
    public List<String> apiKeys() {
        return this.apiKeys;
    }
    public String apiQuota() {
        return this.apiQuota;
    }
    public String apiRequestsPerMinute() {
        return this.apiRequestsPerMinute;
    }
    public String apiSecret() {
        return this.apiSecret;
    }
    public String apiSecretKey() {
        return this.apiSecretKey;
    }
    public String apiToken() {
        return this.apiToken;
    }
    public String apiType() {
        return this.apiType;
    }
    public String apiUrl() {
        return this.apiUrl;
    }
    public String apiUsage() {
        return this.apiUsage;
    }
    public String apiUtilizationPercentage() {
        return this.apiUtilizationPercentage;
    }
    public String apiVersion() {
        return this.apiVersion;
    }
    public String appId() {
        return this.appId;
    }
    public List<String> appIds() {
        return this.appIds;
    }
    public List<GetConnectorConfigAppIdsAppsflyer> appIdsAppsflyers() {
        return this.appIdsAppsflyers;
    }
    public String appKey() {
        return this.appKey;
    }
    public String appSpecificPassword() {
        return this.appSpecificPassword;
    }
    public String appSyncMode() {
        return this.appSyncMode;
    }
    public String appendFileOption() {
        return this.appendFileOption;
    }
    public String applicationKey() {
        return this.applicationKey;
    }
    public List<String> apps() {
        return this.apps;
    }
    public String archiveLogFormat() {
        return this.archiveLogFormat;
    }
    public String archiveLogPath() {
        return this.archiveLogPath;
    }
    public String archivePattern() {
        return this.archivePattern;
    }
    public String areSoapCredentialsProvided() {
        return this.areSoapCredentialsProvided;
    }
    public String asbIp() {
        return this.asbIp;
    }
    public String asmOption() {
        return this.asmOption;
    }
    public String asmOracleHome() {
        return this.asmOracleHome;
    }
    public String asmPassword() {
        return this.asmPassword;
    }
    public String asmTns() {
        return this.asmTns;
    }
    public String asmUser() {
        return this.asmUser;
    }
    public String attributionWindow() {
        return this.attributionWindow;
    }
    public String attributionWindowSize() {
        return this.attributionWindowSize;
    }
    public String auth() {
        return this.auth;
    }
    public String authMethod() {
        return this.authMethod;
    }
    public String authMode() {
        return this.authMode;
    }
    public String authType() {
        return this.authType;
    }
    public String authorizationMethod() {
        return this.authorizationMethod;
    }
    public String awsRegionCode() {
        return this.awsRegionCode;
    }
    public String baseCurrency() {
        return this.baseCurrency;
    }
    public String baseDomain() {
        return this.baseDomain;
    }
    public String baseId() {
        return this.baseId;
    }
    public String baseUrl() {
        return this.baseUrl;
    }
    public String bearerToken() {
        return this.bearerToken;
    }
    public String blobSasUrl() {
        return this.blobSasUrl;
    }
    public List<String> breakdowns() {
        return this.breakdowns;
    }
    public String bucket() {
        return this.bucket;
    }
    public String bucketName() {
        return this.bucketName;
    }
    public String bucketService() {
        return this.bucketService;
    }
    public String businessId() {
        return this.businessId;
    }
    public String businessUnitId() {
        return this.businessUnitId;
    }
    public String certificate() {
        return this.certificate;
    }
    public String clickAttributionWindow() {
        return this.clickAttributionWindow;
    }
    public String client() {
        return this.client;
    }
    public String clientCert() {
        return this.clientCert;
    }
    public String clientCertKey() {
        return this.clientCertKey;
    }
    public String clientId() {
        return this.clientId;
    }
    public String clientKey() {
        return this.clientKey;
    }
    public String clientName() {
        return this.clientName;
    }
    public String clientSecret() {
        return this.clientSecret;
    }
    public String cloudStorageType() {
        return this.cloudStorageType;
    }
    public List<String> columns() {
        return this.columns;
    }
    public String companyId() {
        return this.companyId;
    }
    public String companyKey() {
        return this.companyKey;
    }
    public String companyRequestToken() {
        return this.companyRequestToken;
    }
    public String companyUuid() {
        return this.companyUuid;
    }
    public String compression() {
        return this.compression;
    }
    public String configMethod() {
        return this.configMethod;
    }
    public String configRepositoryUrl() {
        return this.configRepositoryUrl;
    }
    public String configType() {
        return this.configType;
    }
    public String connectingUser() {
        return this.connectingUser;
    }
    public String connectingUserEmail() {
        return this.connectingUserEmail;
    }
    public String connectionMethod() {
        return this.connectionMethod;
    }
    public String connectionString() {
        return this.connectionString;
    }
    public String connectionType() {
        return this.connectionType;
    }
    public String consumerGroup() {
        return this.consumerGroup;
    }
    public String consumerKey() {
        return this.consumerKey;
    }
    public String consumerSecret() {
        return this.consumerSecret;
    }
    public String containerAddress() {
        return this.containerAddress;
    }
    public String containerName() {
        return this.containerName;
    }
    public String contentOwnerId() {
        return this.contentOwnerId;
    }
    public String conversationWebhookUrl() {
        return this.conversationWebhookUrl;
    }
    public List<String> conversionDimensions() {
        return this.conversionDimensions;
    }
    public String conversionReportTime() {
        return this.conversionReportTime;
    }
    public String conversionWindowSize() {
        return this.conversionWindowSize;
    }
    public String csvDefinition() {
        return this.csvDefinition;
    }
    public String currency() {
        return this.currency;
    }
    public String customEventSyncMode() {
        return this.customEventSyncMode;
    }
    public List<String> customEvents() {
        return this.customEvents;
    }
    public List<String> customFieldIds() {
        return this.customFieldIds;
    }
    public List<String> customFloodlightVariables() {
        return this.customFloodlightVariables;
    }
    public List<GetConnectorConfigCustomReport> customReports() {
        return this.customReports;
    }
    public List<GetConnectorConfigCustomTable> customTables() {
        return this.customTables;
    }
    public String customerId() {
        return this.customerId;
    }
    public String customerListId() {
        return this.customerListId;
    }
    public String dailyApiCallLimit() {
        return this.dailyApiCallLimit;
    }
    public String dataAccessMethod() {
        return this.dataAccessMethod;
    }
    public String dataCenter() {
        return this.dataCenter;
    }
    public String dataSetName() {
        return this.dataSetName;
    }
    public String database() {
        return this.database;
    }
    public String datasetId() {
        return this.datasetId;
    }
    public String datasource() {
        return this.datasource;
    }
    public String dateGranularity() {
        return this.dateGranularity;
    }
    public String delimiter() {
        return this.delimiter;
    }
    public List<String> dimensionAttributes() {
        return this.dimensionAttributes;
    }
    public List<String> dimensions() {
        return this.dimensions;
    }
    public String distributedConnectorClusterSize() {
        return this.distributedConnectorClusterSize;
    }
    public String domain() {
        return this.domain;
    }
    public String domainHostName() {
        return this.domainHostName;
    }
    public String domainName() {
        return this.domainName;
    }
    public String domainType() {
        return this.domainType;
    }
    public List<String> elements() {
        return this.elements;
    }
    public String email() {
        return this.email;
    }
    public String emptyHeader() {
        return this.emptyHeader;
    }
    public String enableAllDimensionCombinations() {
        return this.enableAllDimensionCombinations;
    }
    public String enableArchiveLogOnly() {
        return this.enableArchiveLogOnly;
    }
    public String enableDataExtensionsSyncing() {
        return this.enableDataExtensionsSyncing;
    }
    public String enableDistributedConnectorMode() {
        return this.enableDistributedConnectorMode;
    }
    public String enableEnrichments() {
        return this.enableEnrichments;
    }
    public String enableExports() {
        return this.enableExports;
    }
    public String enableTde() {
        return this.enableTde;
    }
    public String encodedPublicKey() {
        return this.encodedPublicKey;
    }
    public String encryptionKey() {
        return this.encryptionKey;
    }
    public String endpoint() {
        return this.endpoint;
    }
    public String engagementAttributionWindow() {
        return this.engagementAttributionWindow;
    }
    public String enrichedExport() {
        return this.enrichedExport;
    }
    public String entityId() {
        return this.entityId;
    }
    public String environment() {
        return this.environment;
    }
    public String escapeChar() {
        return this.escapeChar;
    }
    public String euRegion() {
        return this.euRegion;
    }
    public List<String> events() {
        return this.events;
    }
    public String exportStorageType() {
        return this.exportStorageType;
    }
    public String externalId() {
        return this.externalId;
    }
    public List<String> fields() {
        return this.fields;
    }
    public String fileType() {
        return this.fileType;
    }
    public String filter() {
        return this.filter;
    }
    public String financeAccountSyncMode() {
        return this.financeAccountSyncMode;
    }
    public List<String> financeAccounts() {
        return this.financeAccounts;
    }
    public String folder() {
        return this.folder;
    }
    public String folderId() {
        return this.folderId;
    }
    public String folderPath() {
        return this.folderPath;
    }
    public String forecastId() {
        return this.forecastId;
    }
    public String ftpHost() {
        return this.ftpHost;
    }
    public String ftpPassword() {
        return this.ftpPassword;
    }
    public String ftpPort() {
        return this.ftpPort;
    }
    public String ftpUser() {
        return this.ftpUser;
    }
    public String function() {
        return this.function;
    }
    public String functionApp() {
        return this.functionApp;
    }
    public String functionKey() {
        return this.functionKey;
    }
    public String functionName() {
        return this.functionName;
    }
    public String functionTrigger() {
        return this.functionTrigger;
    }
    public String gcsBucket() {
        return this.gcsBucket;
    }
    public String gcsFolder() {
        return this.gcsFolder;
    }
    public String groupName() {
        return this.groupName;
    }
    public String hasManagePermissions() {
        return this.hasManagePermissions;
    }
    public String homeFolder() {
        return this.homeFolder;
    }
    public String host() {
        return this.host;
    }
    public String hostIp() {
        return this.hostIp;
    }
    public String hostUser() {
        return this.hostUser;
    }
    public List<String> hosts() {
        return this.hosts;
    }
    public String identity() {
        return this.identity;
    }
    public String includeOcapiEndpoints() {
        return this.includeOcapiEndpoints;
    }
    public String instance() {
        return this.instance;
    }
    public String instanceNumber() {
        return this.instanceNumber;
    }
    public String instanceUrl() {
        return this.instanceUrl;
    }
    public String integrationKey() {
        return this.integrationKey;
    }
    public String isAccountLevelConnector() {
        return this.isAccountLevelConnector;
    }
    public String isAuth2Enabled() {
        return this.isAuth2Enabled;
    }
    public String isCustomApiCredentials() {
        return this.isCustomApiCredentials;
    }
    public String isExternalActivitiesEndpointSelected() {
        return this.isExternalActivitiesEndpointSelected;
    }
    public String isFtps() {
        return this.isFtps;
    }
    public String isKeypair() {
        return this.isKeypair;
    }
    public String isMultiEntityFeatureEnabled() {
        return this.isMultiEntityFeatureEnabled;
    }
    public String isNewPackage() {
        return this.isNewPackage;
    }
    public String isPrivateKeyEncrypted() {
        return this.isPrivateKeyEncrypted;
    }
    public String isPrivateLinkRequired() {
        return this.isPrivateLinkRequired;
    }
    public String isPublic() {
        return this.isPublic;
    }
    public String isSailthruConnectEnabled() {
        return this.isSailthruConnectEnabled;
    }
    public String isSecure() {
        return this.isSecure;
    }
    public String isSingleTableMode() {
        return this.isSingleTableMode;
    }
    public String isVendor() {
        return this.isVendor;
    }
    public String jsonDeliveryMode() {
        return this.jsonDeliveryMode;
    }
    public String key() {
        return this.key;
    }
    public String keyPassword() {
        return this.keyPassword;
    }
    public String keyStoreType() {
        return this.keyStoreType;
    }
    public String keystore() {
        return this.keystore;
    }
    public String keystorePassword() {
        return this.keystorePassword;
    }
    public String lastSyncedChangesUtc_() {
        return this.lastSyncedChangesUtc_;
    }
    public String latestVersion() {
        return this.latestVersion;
    }
    public String limitForApiCallsToExternalActivitiesEndpoint() {
        return this.limitForApiCallsToExternalActivitiesEndpoint;
    }
    public String lineSeparator() {
        return this.lineSeparator;
    }
    public String listStrategy() {
        return this.listStrategy;
    }
    public String listSyncMode() {
        return this.listSyncMode;
    }
    public String logJournal() {
        return this.logJournal;
    }
    public String logJournalSchema() {
        return this.logJournalSchema;
    }
    public String login() {
        return this.login;
    }
    public String loginPassword() {
        return this.loginPassword;
    }
    public List<String> managerAccounts() {
        return this.managerAccounts;
    }
    public String merchantId() {
        return this.merchantId;
    }
    public String messageType() {
        return this.messageType;
    }
    public List<String> metrics() {
        return this.metrics;
    }
    public String namedRange() {
        return this.namedRange;
    }
    public String namespace() {
        return this.namespace;
    }
    public String networkCode() {
        return this.networkCode;
    }
    public String nullSequence() {
        return this.nullSequence;
    }
    public String oauthToken() {
        return this.oauthToken;
    }
    public String oauthTokenSecret() {
        return this.oauthTokenSecret;
    }
    public String ocapiClientId() {
        return this.ocapiClientId;
    }
    public String ocapiClientSecret() {
        return this.ocapiClientSecret;
    }
    public String ocapiCustomObjectTypes() {
        return this.ocapiCustomObjectTypes;
    }
    public String ocapiHostname() {
        return this.ocapiHostname;
    }
    public String onError() {
        return this.onError;
    }
    public String onPremise() {
        return this.onPremise;
    }
    public String organization() {
        return this.organization;
    }
    public String organizationId() {
        return this.organizationId;
    }
    public List<String> organizations() {
        return this.organizations;
    }
    public List<String> packedModeTables() {
        return this.packedModeTables;
    }
    public String packingMode() {
        return this.packingMode;
    }
    public List<String> pages() {
        return this.pages;
    }
    public String partnerCode() {
        return this.partnerCode;
    }
    public List<String> partners() {
        return this.partners;
    }
    public String passphrase() {
        return this.passphrase;
    }
    public String password() {
        return this.password;
    }
    public String pat() {
        return this.pat;
    }
    public String patName() {
        return this.patName;
    }
    public String patSecret() {
        return this.patSecret;
    }
    public String path() {
        return this.path;
    }
    public String pattern() {
        return this.pattern;
    }
    public String pdbName() {
        return this.pdbName;
    }
    public String pemCertificate() {
        return this.pemCertificate;
    }
    public String pemPrivateKey() {
        return this.pemPrivateKey;
    }
    public List<String> perInteractionDimensions() {
        return this.perInteractionDimensions;
    }
    public String personalAccessToken() {
        return this.personalAccessToken;
    }
    public String pgpPassPhrase() {
        return this.pgpPassPhrase;
    }
    public String pgpSecretKey() {
        return this.pgpSecretKey;
    }
    public String phoneNumber() {
        return this.phoneNumber;
    }
    public String port() {
        return this.port;
    }
    public String postClickAttributionWindowSize() {
        return this.postClickAttributionWindowSize;
    }
    public String prebuiltReport() {
        return this.prebuiltReport;
    }
    public String prefix() {
        return this.prefix;
    }
    public List<String> primaryKeys() {
        return this.primaryKeys;
    }
    public String privateKey() {
        return this.privateKey;
    }
    public List<String> profiles() {
        return this.profiles;
    }
    public List<GetConnectorConfigProjectCredential> projectCredentials() {
        return this.projectCredentials;
    }
    public String projectId() {
        return this.projectId;
    }
    public List<String> projects() {
        return this.projects;
    }
    public List<String> properties() {
        return this.properties;
    }
    public String publicKey() {
        return this.publicKey;
    }
    public String publicationName() {
        return this.publicationName;
    }
    public String queryId() {
        return this.queryId;
    }
    public String queryParamValue() {
        return this.queryParamValue;
    }
    public String refreshTokenExpiresAt() {
        return this.refreshTokenExpiresAt;
    }
    public String region() {
        return this.region;
    }
    public String replicaId() {
        return this.replicaId;
    }
    public String replicationSlot() {
        return this.replicationSlot;
    }
    public List<String> reportConfigurationIds() {
        return this.reportConfigurationIds;
    }
    public String reportFormatType() {
        return this.reportFormatType;
    }
    public List<String> reportSuites() {
        return this.reportSuites;
    }
    public String reportTimezone() {
        return this.reportTimezone;
    }
    public String reportType() {
        return this.reportType;
    }
    public String reportUrl() {
        return this.reportUrl;
    }
    public List<GetConnectorConfigReport> reports() {
        return this.reports;
    }
    public List<String> reportsLinkedinAds() {
        return this.reportsLinkedinAds;
    }
    public List<String> repositories() {
        return this.repositories;
    }
    public String resourceToken() {
        return this.resourceToken;
    }
    public String resourceUrl() {
        return this.resourceUrl;
    }
    public String restApiLimit() {
        return this.restApiLimit;
    }
    public String rfcLibraryPath() {
        return this.rfcLibraryPath;
    }
    public String role() {
        return this.role;
    }
    public String roleArn() {
        return this.roleArn;
    }
    public String rollbackWindowSize() {
        return this.rollbackWindowSize;
    }
    public String s3Bucket() {
        return this.s3Bucket;
    }
    public String s3ExportBucket() {
        return this.s3ExportBucket;
    }
    public String s3ExportFolder() {
        return this.s3ExportFolder;
    }
    public String s3ExportRoleArn() {
        return this.s3ExportRoleArn;
    }
    public String s3RoleArn() {
        return this.s3RoleArn;
    }
    public String s3bucket() {
        return this.s3bucket;
    }
    public String s3externalId() {
        return this.s3externalId;
    }
    public String s3folder() {
        return this.s3folder;
    }
    public String s3path() {
        return this.s3path;
    }
    public String s3roleArn() {
        return this.s3roleArn;
    }
    public String salesAccountSyncMode() {
        return this.salesAccountSyncMode;
    }
    public List<String> salesAccounts() {
        return this.salesAccounts;
    }
    public String salesforceSecurityToken() {
        return this.salesforceSecurityToken;
    }
    public String sandboxAccount() {
        return this.sandboxAccount;
    }
    public String sapSchema() {
        return this.sapSchema;
    }
    public String sapUser() {
        return this.sapUser;
    }
    public String saslMechanism() {
        return this.saslMechanism;
    }
    public String saslPlainKey() {
        return this.saslPlainKey;
    }
    public String saslPlainSecret() {
        return this.saslPlainSecret;
    }
    public String saslScram256Key() {
        return this.saslScram256Key;
    }
    public String saslScram256Secret() {
        return this.saslScram256Secret;
    }
    public String saslScram512Key() {
        return this.saslScram512Key;
    }
    public String saslScram512Secret() {
        return this.saslScram512Secret;
    }
    public String schemaRegistryCredentialsSource() {
        return this.schemaRegistryCredentialsSource;
    }
    public String schemaRegistryKey() {
        return this.schemaRegistryKey;
    }
    public String schemaRegistrySecret() {
        return this.schemaRegistrySecret;
    }
    public List<String> schemaRegistryUrls() {
        return this.schemaRegistryUrls;
    }
    public String secret() {
        return this.secret;
    }
    public String secretKey() {
        return this.secretKey;
    }
    public String secrets() {
        return this.secrets;
    }
    public List<GetConnectorConfigSecretsList> secretsLists() {
        return this.secretsLists;
    }
    public String securityProtocol() {
        return this.securityProtocol;
    }
    public List<String> segments() {
        return this.segments;
    }
    public List<String> selectedExports() {
        return this.selectedExports;
    }
    public String senderId() {
        return this.senderId;
    }
    public String senderPassword() {
        return this.senderPassword;
    }
    public String serverAddress() {
        return this.serverAddress;
    }
    public String serverUrl() {
        return this.serverUrl;
    }
    public List<String> servers() {
        return this.servers;
    }
    public String serviceAccount() {
        return this.serviceAccount;
    }
    public String serviceAccountEmail() {
        return this.serviceAccountEmail;
    }
    public String serviceAccountKey() {
        return this.serviceAccountKey;
    }
    public String serviceVersion() {
        return this.serviceVersion;
    }
    public String sftpHost() {
        return this.sftpHost;
    }
    public String sftpIsKeyPair() {
        return this.sftpIsKeyPair;
    }
    public String sftpPassword() {
        return this.sftpPassword;
    }
    public String sftpPort() {
        return this.sftpPort;
    }
    public String sftpPublicKey() {
        return this.sftpPublicKey;
    }
    public String sftpUser() {
        return this.sftpUser;
    }
    public String shareUrl() {
        return this.shareUrl;
    }
    public String sheetId() {
        return this.sheetId;
    }
    public String shop() {
        return this.shop;
    }
    public String shortCode() {
        return this.shortCode;
    }
    public String showRecordsWithNoMetrics() {
        return this.showRecordsWithNoMetrics;
    }
    public String sid() {
        return this.sid;
    }
    public String signerPublicKey() {
        return this.signerPublicKey;
    }
    public String siteAddress() {
        return this.siteAddress;
    }
    public String siteId() {
        return this.siteId;
    }
    public String siteName() {
        return this.siteName;
    }
    public List<String> siteUrls() {
        return this.siteUrls;
    }
    public String skipAfter() {
        return this.skipAfter;
    }
    public String skipBefore() {
        return this.skipBefore;
    }
    public String soapUri() {
        return this.soapUri;
    }
    public String socialDataSyncTimeframe() {
        return this.socialDataSyncTimeframe;
    }
    public String source() {
        return this.source;
    }
    public String storeHash() {
        return this.storeHash;
    }
    public String subDomain() {
        return this.subDomain;
    }
    public String subdomain() {
        return this.subdomain;
    }
    public String subscriberName() {
        return this.subscriberName;
    }
    public String subscription() {
        return this.subscription;
    }
    public String supportConnectedAccountsSync() {
        return this.supportConnectedAccountsSync;
    }
    public String supportNestedColumns() {
        return this.supportNestedColumns;
    }
    public String surveyIds() {
        return this.surveyIds;
    }
    public String swipeAttributionWindow() {
        return this.swipeAttributionWindow;
    }
    public String syncDataLocker() {
        return this.syncDataLocker;
    }
    public String syncFormat() {
        return this.syncFormat;
    }
    public String syncFormulaFields() {
        return this.syncFormulaFields;
    }
    public String syncMetadata() {
        return this.syncMetadata;
    }
    public String syncMethod() {
        return this.syncMethod;
    }
    public String syncMode() {
        return this.syncMode;
    }
    public String syncMultipleAccounts() {
        return this.syncMultipleAccounts;
    }
    public String syncPackMode() {
        return this.syncPackMode;
    }
    public String syncPullApi() {
        return this.syncPullApi;
    }
    public String syncType() {
        return this.syncType;
    }
    public String sysnr() {
        return this.sysnr;
    }
    public String tableName() {
        return this.tableName;
    }
    public String tdeCertificate() {
        return this.tdeCertificate;
    }
    public String tdeCertificateName() {
        return this.tdeCertificateName;
    }
    public String tdePassword() {
        return this.tdePassword;
    }
    public String tdePrivateKey() {
        return this.tdePrivateKey;
    }
    public String teamId() {
        return this.teamId;
    }
    public String technicalAccountId() {
        return this.technicalAccountId;
    }
    public List<String> templateLabels() {
        return this.templateLabels;
    }
    public String tenant() {
        return this.tenant;
    }
    public String tenantId() {
        return this.tenantId;
    }
    public String testTableName() {
        return this.testTableName;
    }
    public String timeZone() {
        return this.timeZone;
    }
    public String timeframeMonths() {
        return this.timeframeMonths;
    }
    public String tns() {
        return this.tns;
    }
    public String tokenAuthenticatedContainer() {
        return this.tokenAuthenticatedContainer;
    }
    public String tokenAuthenticatedDatabase() {
        return this.tokenAuthenticatedDatabase;
    }
    public String tokenId() {
        return this.tokenId;
    }
    public String tokenKey() {
        return this.tokenKey;
    }
    public String tokenSecret() {
        return this.tokenSecret;
    }
    public String tokenSecretKey() {
        return this.tokenSecretKey;
    }
    public List<String> topics() {
        return this.topics;
    }
    public String trustStoreType() {
        return this.trustStoreType;
    }
    public String trustedCert() {
        return this.trustedCert;
    }
    public String truststore() {
        return this.truststore;
    }
    public String tunnelHost() {
        return this.tunnelHost;
    }
    public String tunnelPort() {
        return this.tunnelPort;
    }
    public String tunnelUser() {
        return this.tunnelUser;
    }
    public String uniqueId() {
        return this.uniqueId;
    }
    public String updateConfigOnEachSync() {
        return this.updateConfigOnEachSync;
    }
    public String updateMethod() {
        return this.updateMethod;
    }
    public String uri() {
        return this.uri;
    }
    public String useApiKeys() {
        return this.useApiKeys;
    }
    public String useCustomerBucket() {
        return this.useCustomerBucket;
    }
    public String useOracleRac() {
        return this.useOracleRac;
    }
    public String usePgpEncryptionOptions() {
        return this.usePgpEncryptionOptions;
    }
    public String useServiceAccount() {
        return this.useServiceAccount;
    }
    public String useTemplateLabels() {
        return this.useTemplateLabels;
    }
    public String useWebhooks() {
        return this.useWebhooks;
    }
    public String useWorkspace() {
        return this.useWorkspace;
    }
    public String user() {
        return this.user;
    }
    public String userId() {
        return this.userId;
    }
    public String userKey() {
        return this.userKey;
    }
    public String userName() {
        return this.userName;
    }
    public List<String> userProfiles() {
        return this.userProfiles;
    }
    public String username() {
        return this.username;
    }
    public String viewAttributionWindow() {
        return this.viewAttributionWindow;
    }
    public String viewThroughAttributionWindowSize() {
        return this.viewThroughAttributionWindowSize;
    }
    public String webhookEndpoint() {
        return this.webhookEndpoint;
    }
    public String webhookKey() {
        return this.webhookKey;
    }
    public String webhookUrl() {
        return this.webhookUrl;
    }
    public String wordPressSiteIdOrWoocommerceDomainName() {
        return this.wordPressSiteIdOrWoocommerceDomainName;
    }
    public String workspaceName() {
        return this.workspaceName;
    }
    public String workspaceSameAsSource() {
        return this.workspaceSameAsSource;
    }
    public String workspaceSchema() {
        return this.workspaceSchema;
    }
    public String wsCertificate() {
        return this.wsCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConnectorConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String absConnectionMethod;
        private String absConnectionString;
        private String absContainerAddress;
        private String absContainerName;
        private String absHostIp;
        private String absHostUser;
        private String absPrefix;
        private String absPublicKey;
        private String accessKey;
        private String accessKeyId;
        private String accessKeySecret;
        private String accessToken;
        private String accessType;
        private String account;
        private String accountId;
        private List<String> accountIds;
        private String accountKey;
        private String accountName;
        private String accountSyncMode;
        private List<String> accounts;
        private List<GetConnectorConfigAccountsRedditAd> accountsRedditAds;
        private String accountsSyncMode;
        private List<String> actionBreakdowns;
        private String actionReportTime;
        private String adAnalytics;
        private String adUnitView;
        private String adminApiKey;
        private List<GetConnectorConfigAdobeAnalyticsConfiguration> adobeAnalyticsConfigurations;
        private List<String> advertisables;
        private List<String> advertisers;
        private List<String> advertisersIds;
        private String advertisersSyncMode;
        private String agentHost;
        private String agentOraHome;
        private String agentPassword;
        private String agentPort;
        private String agentPublicCert;
        private String agentUser;
        private String aggregation;
        private String alwaysEncrypted;
        private String apiAccessToken;
        private String apiId;
        private String apiKey;
        private String apiKeyApiSecret;
        private List<String> apiKeys;
        private String apiQuota;
        private String apiRequestsPerMinute;
        private String apiSecret;
        private String apiSecretKey;
        private String apiToken;
        private String apiType;
        private String apiUrl;
        private String apiUsage;
        private String apiUtilizationPercentage;
        private String apiVersion;
        private String appId;
        private List<String> appIds;
        private List<GetConnectorConfigAppIdsAppsflyer> appIdsAppsflyers;
        private String appKey;
        private String appSpecificPassword;
        private String appSyncMode;
        private String appendFileOption;
        private String applicationKey;
        private List<String> apps;
        private String archiveLogFormat;
        private String archiveLogPath;
        private String archivePattern;
        private String areSoapCredentialsProvided;
        private String asbIp;
        private String asmOption;
        private String asmOracleHome;
        private String asmPassword;
        private String asmTns;
        private String asmUser;
        private String attributionWindow;
        private String attributionWindowSize;
        private String auth;
        private String authMethod;
        private String authMode;
        private String authType;
        private String authorizationMethod;
        private String awsRegionCode;
        private String baseCurrency;
        private String baseDomain;
        private String baseId;
        private String baseUrl;
        private String bearerToken;
        private String blobSasUrl;
        private List<String> breakdowns;
        private String bucket;
        private String bucketName;
        private String bucketService;
        private String businessId;
        private String businessUnitId;
        private String certificate;
        private String clickAttributionWindow;
        private String client;
        private String clientCert;
        private String clientCertKey;
        private String clientId;
        private String clientKey;
        private String clientName;
        private String clientSecret;
        private String cloudStorageType;
        private List<String> columns;
        private String companyId;
        private String companyKey;
        private String companyRequestToken;
        private String companyUuid;
        private String compression;
        private String configMethod;
        private String configRepositoryUrl;
        private String configType;
        private String connectingUser;
        private String connectingUserEmail;
        private String connectionMethod;
        private String connectionString;
        private String connectionType;
        private String consumerGroup;
        private String consumerKey;
        private String consumerSecret;
        private String containerAddress;
        private String containerName;
        private String contentOwnerId;
        private String conversationWebhookUrl;
        private List<String> conversionDimensions;
        private String conversionReportTime;
        private String conversionWindowSize;
        private String csvDefinition;
        private String currency;
        private String customEventSyncMode;
        private List<String> customEvents;
        private List<String> customFieldIds;
        private List<String> customFloodlightVariables;
        private List<GetConnectorConfigCustomReport> customReports;
        private List<GetConnectorConfigCustomTable> customTables;
        private String customerId;
        private String customerListId;
        private String dailyApiCallLimit;
        private String dataAccessMethod;
        private String dataCenter;
        private String dataSetName;
        private String database;
        private String datasetId;
        private String datasource;
        private String dateGranularity;
        private String delimiter;
        private List<String> dimensionAttributes;
        private List<String> dimensions;
        private String distributedConnectorClusterSize;
        private String domain;
        private String domainHostName;
        private String domainName;
        private String domainType;
        private List<String> elements;
        private String email;
        private String emptyHeader;
        private String enableAllDimensionCombinations;
        private String enableArchiveLogOnly;
        private String enableDataExtensionsSyncing;
        private String enableDistributedConnectorMode;
        private String enableEnrichments;
        private String enableExports;
        private String enableTde;
        private String encodedPublicKey;
        private String encryptionKey;
        private String endpoint;
        private String engagementAttributionWindow;
        private String enrichedExport;
        private String entityId;
        private String environment;
        private String escapeChar;
        private String euRegion;
        private List<String> events;
        private String exportStorageType;
        private String externalId;
        private List<String> fields;
        private String fileType;
        private String filter;
        private String financeAccountSyncMode;
        private List<String> financeAccounts;
        private String folder;
        private String folderId;
        private String folderPath;
        private String forecastId;
        private String ftpHost;
        private String ftpPassword;
        private String ftpPort;
        private String ftpUser;
        private String function;
        private String functionApp;
        private String functionKey;
        private String functionName;
        private String functionTrigger;
        private String gcsBucket;
        private String gcsFolder;
        private String groupName;
        private String hasManagePermissions;
        private String homeFolder;
        private String host;
        private String hostIp;
        private String hostUser;
        private List<String> hosts;
        private String identity;
        private String includeOcapiEndpoints;
        private String instance;
        private String instanceNumber;
        private String instanceUrl;
        private String integrationKey;
        private String isAccountLevelConnector;
        private String isAuth2Enabled;
        private String isCustomApiCredentials;
        private String isExternalActivitiesEndpointSelected;
        private String isFtps;
        private String isKeypair;
        private String isMultiEntityFeatureEnabled;
        private String isNewPackage;
        private String isPrivateKeyEncrypted;
        private String isPrivateLinkRequired;
        private String isPublic;
        private String isSailthruConnectEnabled;
        private String isSecure;
        private String isSingleTableMode;
        private String isVendor;
        private String jsonDeliveryMode;
        private String key;
        private String keyPassword;
        private String keyStoreType;
        private String keystore;
        private String keystorePassword;
        private String lastSyncedChangesUtc_;
        private String latestVersion;
        private String limitForApiCallsToExternalActivitiesEndpoint;
        private String lineSeparator;
        private String listStrategy;
        private String listSyncMode;
        private String logJournal;
        private String logJournalSchema;
        private String login;
        private String loginPassword;
        private List<String> managerAccounts;
        private String merchantId;
        private String messageType;
        private List<String> metrics;
        private String namedRange;
        private String namespace;
        private String networkCode;
        private String nullSequence;
        private String oauthToken;
        private String oauthTokenSecret;
        private String ocapiClientId;
        private String ocapiClientSecret;
        private String ocapiCustomObjectTypes;
        private String ocapiHostname;
        private String onError;
        private String onPremise;
        private String organization;
        private String organizationId;
        private List<String> organizations;
        private List<String> packedModeTables;
        private String packingMode;
        private List<String> pages;
        private String partnerCode;
        private List<String> partners;
        private String passphrase;
        private String password;
        private String pat;
        private String patName;
        private String patSecret;
        private String path;
        private String pattern;
        private String pdbName;
        private String pemCertificate;
        private String pemPrivateKey;
        private List<String> perInteractionDimensions;
        private String personalAccessToken;
        private String pgpPassPhrase;
        private String pgpSecretKey;
        private String phoneNumber;
        private String port;
        private String postClickAttributionWindowSize;
        private String prebuiltReport;
        private String prefix;
        private List<String> primaryKeys;
        private String privateKey;
        private List<String> profiles;
        private List<GetConnectorConfigProjectCredential> projectCredentials;
        private String projectId;
        private List<String> projects;
        private List<String> properties;
        private String publicKey;
        private String publicationName;
        private String queryId;
        private String queryParamValue;
        private String refreshTokenExpiresAt;
        private String region;
        private String replicaId;
        private String replicationSlot;
        private List<String> reportConfigurationIds;
        private String reportFormatType;
        private List<String> reportSuites;
        private String reportTimezone;
        private String reportType;
        private String reportUrl;
        private List<GetConnectorConfigReport> reports;
        private List<String> reportsLinkedinAds;
        private List<String> repositories;
        private String resourceToken;
        private String resourceUrl;
        private String restApiLimit;
        private String rfcLibraryPath;
        private String role;
        private String roleArn;
        private String rollbackWindowSize;
        private String s3Bucket;
        private String s3ExportBucket;
        private String s3ExportFolder;
        private String s3ExportRoleArn;
        private String s3RoleArn;
        private String s3bucket;
        private String s3externalId;
        private String s3folder;
        private String s3path;
        private String s3roleArn;
        private String salesAccountSyncMode;
        private List<String> salesAccounts;
        private String salesforceSecurityToken;
        private String sandboxAccount;
        private String sapSchema;
        private String sapUser;
        private String saslMechanism;
        private String saslPlainKey;
        private String saslPlainSecret;
        private String saslScram256Key;
        private String saslScram256Secret;
        private String saslScram512Key;
        private String saslScram512Secret;
        private String schemaRegistryCredentialsSource;
        private String schemaRegistryKey;
        private String schemaRegistrySecret;
        private List<String> schemaRegistryUrls;
        private String secret;
        private String secretKey;
        private String secrets;
        private List<GetConnectorConfigSecretsList> secretsLists;
        private String securityProtocol;
        private List<String> segments;
        private List<String> selectedExports;
        private String senderId;
        private String senderPassword;
        private String serverAddress;
        private String serverUrl;
        private List<String> servers;
        private String serviceAccount;
        private String serviceAccountEmail;
        private String serviceAccountKey;
        private String serviceVersion;
        private String sftpHost;
        private String sftpIsKeyPair;
        private String sftpPassword;
        private String sftpPort;
        private String sftpPublicKey;
        private String sftpUser;
        private String shareUrl;
        private String sheetId;
        private String shop;
        private String shortCode;
        private String showRecordsWithNoMetrics;
        private String sid;
        private String signerPublicKey;
        private String siteAddress;
        private String siteId;
        private String siteName;
        private List<String> siteUrls;
        private String skipAfter;
        private String skipBefore;
        private String soapUri;
        private String socialDataSyncTimeframe;
        private String source;
        private String storeHash;
        private String subDomain;
        private String subdomain;
        private String subscriberName;
        private String subscription;
        private String supportConnectedAccountsSync;
        private String supportNestedColumns;
        private String surveyIds;
        private String swipeAttributionWindow;
        private String syncDataLocker;
        private String syncFormat;
        private String syncFormulaFields;
        private String syncMetadata;
        private String syncMethod;
        private String syncMode;
        private String syncMultipleAccounts;
        private String syncPackMode;
        private String syncPullApi;
        private String syncType;
        private String sysnr;
        private String tableName;
        private String tdeCertificate;
        private String tdeCertificateName;
        private String tdePassword;
        private String tdePrivateKey;
        private String teamId;
        private String technicalAccountId;
        private List<String> templateLabels;
        private String tenant;
        private String tenantId;
        private String testTableName;
        private String timeZone;
        private String timeframeMonths;
        private String tns;
        private String tokenAuthenticatedContainer;
        private String tokenAuthenticatedDatabase;
        private String tokenId;
        private String tokenKey;
        private String tokenSecret;
        private String tokenSecretKey;
        private List<String> topics;
        private String trustStoreType;
        private String trustedCert;
        private String truststore;
        private String tunnelHost;
        private String tunnelPort;
        private String tunnelUser;
        private String uniqueId;
        private String updateConfigOnEachSync;
        private String updateMethod;
        private String uri;
        private String useApiKeys;
        private String useCustomerBucket;
        private String useOracleRac;
        private String usePgpEncryptionOptions;
        private String useServiceAccount;
        private String useTemplateLabels;
        private String useWebhooks;
        private String useWorkspace;
        private String user;
        private String userId;
        private String userKey;
        private String userName;
        private List<String> userProfiles;
        private String username;
        private String viewAttributionWindow;
        private String viewThroughAttributionWindowSize;
        private String webhookEndpoint;
        private String webhookKey;
        private String webhookUrl;
        private String wordPressSiteIdOrWoocommerceDomainName;
        private String workspaceName;
        private String workspaceSameAsSource;
        private String workspaceSchema;
        private String wsCertificate;
        public Builder() {}
        public Builder(GetConnectorConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.absConnectionMethod = defaults.absConnectionMethod;
    	      this.absConnectionString = defaults.absConnectionString;
    	      this.absContainerAddress = defaults.absContainerAddress;
    	      this.absContainerName = defaults.absContainerName;
    	      this.absHostIp = defaults.absHostIp;
    	      this.absHostUser = defaults.absHostUser;
    	      this.absPrefix = defaults.absPrefix;
    	      this.absPublicKey = defaults.absPublicKey;
    	      this.accessKey = defaults.accessKey;
    	      this.accessKeyId = defaults.accessKeyId;
    	      this.accessKeySecret = defaults.accessKeySecret;
    	      this.accessToken = defaults.accessToken;
    	      this.accessType = defaults.accessType;
    	      this.account = defaults.account;
    	      this.accountId = defaults.accountId;
    	      this.accountIds = defaults.accountIds;
    	      this.accountKey = defaults.accountKey;
    	      this.accountName = defaults.accountName;
    	      this.accountSyncMode = defaults.accountSyncMode;
    	      this.accounts = defaults.accounts;
    	      this.accountsRedditAds = defaults.accountsRedditAds;
    	      this.accountsSyncMode = defaults.accountsSyncMode;
    	      this.actionBreakdowns = defaults.actionBreakdowns;
    	      this.actionReportTime = defaults.actionReportTime;
    	      this.adAnalytics = defaults.adAnalytics;
    	      this.adUnitView = defaults.adUnitView;
    	      this.adminApiKey = defaults.adminApiKey;
    	      this.adobeAnalyticsConfigurations = defaults.adobeAnalyticsConfigurations;
    	      this.advertisables = defaults.advertisables;
    	      this.advertisers = defaults.advertisers;
    	      this.advertisersIds = defaults.advertisersIds;
    	      this.advertisersSyncMode = defaults.advertisersSyncMode;
    	      this.agentHost = defaults.agentHost;
    	      this.agentOraHome = defaults.agentOraHome;
    	      this.agentPassword = defaults.agentPassword;
    	      this.agentPort = defaults.agentPort;
    	      this.agentPublicCert = defaults.agentPublicCert;
    	      this.agentUser = defaults.agentUser;
    	      this.aggregation = defaults.aggregation;
    	      this.alwaysEncrypted = defaults.alwaysEncrypted;
    	      this.apiAccessToken = defaults.apiAccessToken;
    	      this.apiId = defaults.apiId;
    	      this.apiKey = defaults.apiKey;
    	      this.apiKeyApiSecret = defaults.apiKeyApiSecret;
    	      this.apiKeys = defaults.apiKeys;
    	      this.apiQuota = defaults.apiQuota;
    	      this.apiRequestsPerMinute = defaults.apiRequestsPerMinute;
    	      this.apiSecret = defaults.apiSecret;
    	      this.apiSecretKey = defaults.apiSecretKey;
    	      this.apiToken = defaults.apiToken;
    	      this.apiType = defaults.apiType;
    	      this.apiUrl = defaults.apiUrl;
    	      this.apiUsage = defaults.apiUsage;
    	      this.apiUtilizationPercentage = defaults.apiUtilizationPercentage;
    	      this.apiVersion = defaults.apiVersion;
    	      this.appId = defaults.appId;
    	      this.appIds = defaults.appIds;
    	      this.appIdsAppsflyers = defaults.appIdsAppsflyers;
    	      this.appKey = defaults.appKey;
    	      this.appSpecificPassword = defaults.appSpecificPassword;
    	      this.appSyncMode = defaults.appSyncMode;
    	      this.appendFileOption = defaults.appendFileOption;
    	      this.applicationKey = defaults.applicationKey;
    	      this.apps = defaults.apps;
    	      this.archiveLogFormat = defaults.archiveLogFormat;
    	      this.archiveLogPath = defaults.archiveLogPath;
    	      this.archivePattern = defaults.archivePattern;
    	      this.areSoapCredentialsProvided = defaults.areSoapCredentialsProvided;
    	      this.asbIp = defaults.asbIp;
    	      this.asmOption = defaults.asmOption;
    	      this.asmOracleHome = defaults.asmOracleHome;
    	      this.asmPassword = defaults.asmPassword;
    	      this.asmTns = defaults.asmTns;
    	      this.asmUser = defaults.asmUser;
    	      this.attributionWindow = defaults.attributionWindow;
    	      this.attributionWindowSize = defaults.attributionWindowSize;
    	      this.auth = defaults.auth;
    	      this.authMethod = defaults.authMethod;
    	      this.authMode = defaults.authMode;
    	      this.authType = defaults.authType;
    	      this.authorizationMethod = defaults.authorizationMethod;
    	      this.awsRegionCode = defaults.awsRegionCode;
    	      this.baseCurrency = defaults.baseCurrency;
    	      this.baseDomain = defaults.baseDomain;
    	      this.baseId = defaults.baseId;
    	      this.baseUrl = defaults.baseUrl;
    	      this.bearerToken = defaults.bearerToken;
    	      this.blobSasUrl = defaults.blobSasUrl;
    	      this.breakdowns = defaults.breakdowns;
    	      this.bucket = defaults.bucket;
    	      this.bucketName = defaults.bucketName;
    	      this.bucketService = defaults.bucketService;
    	      this.businessId = defaults.businessId;
    	      this.businessUnitId = defaults.businessUnitId;
    	      this.certificate = defaults.certificate;
    	      this.clickAttributionWindow = defaults.clickAttributionWindow;
    	      this.client = defaults.client;
    	      this.clientCert = defaults.clientCert;
    	      this.clientCertKey = defaults.clientCertKey;
    	      this.clientId = defaults.clientId;
    	      this.clientKey = defaults.clientKey;
    	      this.clientName = defaults.clientName;
    	      this.clientSecret = defaults.clientSecret;
    	      this.cloudStorageType = defaults.cloudStorageType;
    	      this.columns = defaults.columns;
    	      this.companyId = defaults.companyId;
    	      this.companyKey = defaults.companyKey;
    	      this.companyRequestToken = defaults.companyRequestToken;
    	      this.companyUuid = defaults.companyUuid;
    	      this.compression = defaults.compression;
    	      this.configMethod = defaults.configMethod;
    	      this.configRepositoryUrl = defaults.configRepositoryUrl;
    	      this.configType = defaults.configType;
    	      this.connectingUser = defaults.connectingUser;
    	      this.connectingUserEmail = defaults.connectingUserEmail;
    	      this.connectionMethod = defaults.connectionMethod;
    	      this.connectionString = defaults.connectionString;
    	      this.connectionType = defaults.connectionType;
    	      this.consumerGroup = defaults.consumerGroup;
    	      this.consumerKey = defaults.consumerKey;
    	      this.consumerSecret = defaults.consumerSecret;
    	      this.containerAddress = defaults.containerAddress;
    	      this.containerName = defaults.containerName;
    	      this.contentOwnerId = defaults.contentOwnerId;
    	      this.conversationWebhookUrl = defaults.conversationWebhookUrl;
    	      this.conversionDimensions = defaults.conversionDimensions;
    	      this.conversionReportTime = defaults.conversionReportTime;
    	      this.conversionWindowSize = defaults.conversionWindowSize;
    	      this.csvDefinition = defaults.csvDefinition;
    	      this.currency = defaults.currency;
    	      this.customEventSyncMode = defaults.customEventSyncMode;
    	      this.customEvents = defaults.customEvents;
    	      this.customFieldIds = defaults.customFieldIds;
    	      this.customFloodlightVariables = defaults.customFloodlightVariables;
    	      this.customReports = defaults.customReports;
    	      this.customTables = defaults.customTables;
    	      this.customerId = defaults.customerId;
    	      this.customerListId = defaults.customerListId;
    	      this.dailyApiCallLimit = defaults.dailyApiCallLimit;
    	      this.dataAccessMethod = defaults.dataAccessMethod;
    	      this.dataCenter = defaults.dataCenter;
    	      this.dataSetName = defaults.dataSetName;
    	      this.database = defaults.database;
    	      this.datasetId = defaults.datasetId;
    	      this.datasource = defaults.datasource;
    	      this.dateGranularity = defaults.dateGranularity;
    	      this.delimiter = defaults.delimiter;
    	      this.dimensionAttributes = defaults.dimensionAttributes;
    	      this.dimensions = defaults.dimensions;
    	      this.distributedConnectorClusterSize = defaults.distributedConnectorClusterSize;
    	      this.domain = defaults.domain;
    	      this.domainHostName = defaults.domainHostName;
    	      this.domainName = defaults.domainName;
    	      this.domainType = defaults.domainType;
    	      this.elements = defaults.elements;
    	      this.email = defaults.email;
    	      this.emptyHeader = defaults.emptyHeader;
    	      this.enableAllDimensionCombinations = defaults.enableAllDimensionCombinations;
    	      this.enableArchiveLogOnly = defaults.enableArchiveLogOnly;
    	      this.enableDataExtensionsSyncing = defaults.enableDataExtensionsSyncing;
    	      this.enableDistributedConnectorMode = defaults.enableDistributedConnectorMode;
    	      this.enableEnrichments = defaults.enableEnrichments;
    	      this.enableExports = defaults.enableExports;
    	      this.enableTde = defaults.enableTde;
    	      this.encodedPublicKey = defaults.encodedPublicKey;
    	      this.encryptionKey = defaults.encryptionKey;
    	      this.endpoint = defaults.endpoint;
    	      this.engagementAttributionWindow = defaults.engagementAttributionWindow;
    	      this.enrichedExport = defaults.enrichedExport;
    	      this.entityId = defaults.entityId;
    	      this.environment = defaults.environment;
    	      this.escapeChar = defaults.escapeChar;
    	      this.euRegion = defaults.euRegion;
    	      this.events = defaults.events;
    	      this.exportStorageType = defaults.exportStorageType;
    	      this.externalId = defaults.externalId;
    	      this.fields = defaults.fields;
    	      this.fileType = defaults.fileType;
    	      this.filter = defaults.filter;
    	      this.financeAccountSyncMode = defaults.financeAccountSyncMode;
    	      this.financeAccounts = defaults.financeAccounts;
    	      this.folder = defaults.folder;
    	      this.folderId = defaults.folderId;
    	      this.folderPath = defaults.folderPath;
    	      this.forecastId = defaults.forecastId;
    	      this.ftpHost = defaults.ftpHost;
    	      this.ftpPassword = defaults.ftpPassword;
    	      this.ftpPort = defaults.ftpPort;
    	      this.ftpUser = defaults.ftpUser;
    	      this.function = defaults.function;
    	      this.functionApp = defaults.functionApp;
    	      this.functionKey = defaults.functionKey;
    	      this.functionName = defaults.functionName;
    	      this.functionTrigger = defaults.functionTrigger;
    	      this.gcsBucket = defaults.gcsBucket;
    	      this.gcsFolder = defaults.gcsFolder;
    	      this.groupName = defaults.groupName;
    	      this.hasManagePermissions = defaults.hasManagePermissions;
    	      this.homeFolder = defaults.homeFolder;
    	      this.host = defaults.host;
    	      this.hostIp = defaults.hostIp;
    	      this.hostUser = defaults.hostUser;
    	      this.hosts = defaults.hosts;
    	      this.identity = defaults.identity;
    	      this.includeOcapiEndpoints = defaults.includeOcapiEndpoints;
    	      this.instance = defaults.instance;
    	      this.instanceNumber = defaults.instanceNumber;
    	      this.instanceUrl = defaults.instanceUrl;
    	      this.integrationKey = defaults.integrationKey;
    	      this.isAccountLevelConnector = defaults.isAccountLevelConnector;
    	      this.isAuth2Enabled = defaults.isAuth2Enabled;
    	      this.isCustomApiCredentials = defaults.isCustomApiCredentials;
    	      this.isExternalActivitiesEndpointSelected = defaults.isExternalActivitiesEndpointSelected;
    	      this.isFtps = defaults.isFtps;
    	      this.isKeypair = defaults.isKeypair;
    	      this.isMultiEntityFeatureEnabled = defaults.isMultiEntityFeatureEnabled;
    	      this.isNewPackage = defaults.isNewPackage;
    	      this.isPrivateKeyEncrypted = defaults.isPrivateKeyEncrypted;
    	      this.isPrivateLinkRequired = defaults.isPrivateLinkRequired;
    	      this.isPublic = defaults.isPublic;
    	      this.isSailthruConnectEnabled = defaults.isSailthruConnectEnabled;
    	      this.isSecure = defaults.isSecure;
    	      this.isSingleTableMode = defaults.isSingleTableMode;
    	      this.isVendor = defaults.isVendor;
    	      this.jsonDeliveryMode = defaults.jsonDeliveryMode;
    	      this.key = defaults.key;
    	      this.keyPassword = defaults.keyPassword;
    	      this.keyStoreType = defaults.keyStoreType;
    	      this.keystore = defaults.keystore;
    	      this.keystorePassword = defaults.keystorePassword;
    	      this.lastSyncedChangesUtc_ = defaults.lastSyncedChangesUtc_;
    	      this.latestVersion = defaults.latestVersion;
    	      this.limitForApiCallsToExternalActivitiesEndpoint = defaults.limitForApiCallsToExternalActivitiesEndpoint;
    	      this.lineSeparator = defaults.lineSeparator;
    	      this.listStrategy = defaults.listStrategy;
    	      this.listSyncMode = defaults.listSyncMode;
    	      this.logJournal = defaults.logJournal;
    	      this.logJournalSchema = defaults.logJournalSchema;
    	      this.login = defaults.login;
    	      this.loginPassword = defaults.loginPassword;
    	      this.managerAccounts = defaults.managerAccounts;
    	      this.merchantId = defaults.merchantId;
    	      this.messageType = defaults.messageType;
    	      this.metrics = defaults.metrics;
    	      this.namedRange = defaults.namedRange;
    	      this.namespace = defaults.namespace;
    	      this.networkCode = defaults.networkCode;
    	      this.nullSequence = defaults.nullSequence;
    	      this.oauthToken = defaults.oauthToken;
    	      this.oauthTokenSecret = defaults.oauthTokenSecret;
    	      this.ocapiClientId = defaults.ocapiClientId;
    	      this.ocapiClientSecret = defaults.ocapiClientSecret;
    	      this.ocapiCustomObjectTypes = defaults.ocapiCustomObjectTypes;
    	      this.ocapiHostname = defaults.ocapiHostname;
    	      this.onError = defaults.onError;
    	      this.onPremise = defaults.onPremise;
    	      this.organization = defaults.organization;
    	      this.organizationId = defaults.organizationId;
    	      this.organizations = defaults.organizations;
    	      this.packedModeTables = defaults.packedModeTables;
    	      this.packingMode = defaults.packingMode;
    	      this.pages = defaults.pages;
    	      this.partnerCode = defaults.partnerCode;
    	      this.partners = defaults.partners;
    	      this.passphrase = defaults.passphrase;
    	      this.password = defaults.password;
    	      this.pat = defaults.pat;
    	      this.patName = defaults.patName;
    	      this.patSecret = defaults.patSecret;
    	      this.path = defaults.path;
    	      this.pattern = defaults.pattern;
    	      this.pdbName = defaults.pdbName;
    	      this.pemCertificate = defaults.pemCertificate;
    	      this.pemPrivateKey = defaults.pemPrivateKey;
    	      this.perInteractionDimensions = defaults.perInteractionDimensions;
    	      this.personalAccessToken = defaults.personalAccessToken;
    	      this.pgpPassPhrase = defaults.pgpPassPhrase;
    	      this.pgpSecretKey = defaults.pgpSecretKey;
    	      this.phoneNumber = defaults.phoneNumber;
    	      this.port = defaults.port;
    	      this.postClickAttributionWindowSize = defaults.postClickAttributionWindowSize;
    	      this.prebuiltReport = defaults.prebuiltReport;
    	      this.prefix = defaults.prefix;
    	      this.primaryKeys = defaults.primaryKeys;
    	      this.privateKey = defaults.privateKey;
    	      this.profiles = defaults.profiles;
    	      this.projectCredentials = defaults.projectCredentials;
    	      this.projectId = defaults.projectId;
    	      this.projects = defaults.projects;
    	      this.properties = defaults.properties;
    	      this.publicKey = defaults.publicKey;
    	      this.publicationName = defaults.publicationName;
    	      this.queryId = defaults.queryId;
    	      this.queryParamValue = defaults.queryParamValue;
    	      this.refreshTokenExpiresAt = defaults.refreshTokenExpiresAt;
    	      this.region = defaults.region;
    	      this.replicaId = defaults.replicaId;
    	      this.replicationSlot = defaults.replicationSlot;
    	      this.reportConfigurationIds = defaults.reportConfigurationIds;
    	      this.reportFormatType = defaults.reportFormatType;
    	      this.reportSuites = defaults.reportSuites;
    	      this.reportTimezone = defaults.reportTimezone;
    	      this.reportType = defaults.reportType;
    	      this.reportUrl = defaults.reportUrl;
    	      this.reports = defaults.reports;
    	      this.reportsLinkedinAds = defaults.reportsLinkedinAds;
    	      this.repositories = defaults.repositories;
    	      this.resourceToken = defaults.resourceToken;
    	      this.resourceUrl = defaults.resourceUrl;
    	      this.restApiLimit = defaults.restApiLimit;
    	      this.rfcLibraryPath = defaults.rfcLibraryPath;
    	      this.role = defaults.role;
    	      this.roleArn = defaults.roleArn;
    	      this.rollbackWindowSize = defaults.rollbackWindowSize;
    	      this.s3Bucket = defaults.s3Bucket;
    	      this.s3ExportBucket = defaults.s3ExportBucket;
    	      this.s3ExportFolder = defaults.s3ExportFolder;
    	      this.s3ExportRoleArn = defaults.s3ExportRoleArn;
    	      this.s3RoleArn = defaults.s3RoleArn;
    	      this.s3bucket = defaults.s3bucket;
    	      this.s3externalId = defaults.s3externalId;
    	      this.s3folder = defaults.s3folder;
    	      this.s3path = defaults.s3path;
    	      this.s3roleArn = defaults.s3roleArn;
    	      this.salesAccountSyncMode = defaults.salesAccountSyncMode;
    	      this.salesAccounts = defaults.salesAccounts;
    	      this.salesforceSecurityToken = defaults.salesforceSecurityToken;
    	      this.sandboxAccount = defaults.sandboxAccount;
    	      this.sapSchema = defaults.sapSchema;
    	      this.sapUser = defaults.sapUser;
    	      this.saslMechanism = defaults.saslMechanism;
    	      this.saslPlainKey = defaults.saslPlainKey;
    	      this.saslPlainSecret = defaults.saslPlainSecret;
    	      this.saslScram256Key = defaults.saslScram256Key;
    	      this.saslScram256Secret = defaults.saslScram256Secret;
    	      this.saslScram512Key = defaults.saslScram512Key;
    	      this.saslScram512Secret = defaults.saslScram512Secret;
    	      this.schemaRegistryCredentialsSource = defaults.schemaRegistryCredentialsSource;
    	      this.schemaRegistryKey = defaults.schemaRegistryKey;
    	      this.schemaRegistrySecret = defaults.schemaRegistrySecret;
    	      this.schemaRegistryUrls = defaults.schemaRegistryUrls;
    	      this.secret = defaults.secret;
    	      this.secretKey = defaults.secretKey;
    	      this.secrets = defaults.secrets;
    	      this.secretsLists = defaults.secretsLists;
    	      this.securityProtocol = defaults.securityProtocol;
    	      this.segments = defaults.segments;
    	      this.selectedExports = defaults.selectedExports;
    	      this.senderId = defaults.senderId;
    	      this.senderPassword = defaults.senderPassword;
    	      this.serverAddress = defaults.serverAddress;
    	      this.serverUrl = defaults.serverUrl;
    	      this.servers = defaults.servers;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.serviceAccountEmail = defaults.serviceAccountEmail;
    	      this.serviceAccountKey = defaults.serviceAccountKey;
    	      this.serviceVersion = defaults.serviceVersion;
    	      this.sftpHost = defaults.sftpHost;
    	      this.sftpIsKeyPair = defaults.sftpIsKeyPair;
    	      this.sftpPassword = defaults.sftpPassword;
    	      this.sftpPort = defaults.sftpPort;
    	      this.sftpPublicKey = defaults.sftpPublicKey;
    	      this.sftpUser = defaults.sftpUser;
    	      this.shareUrl = defaults.shareUrl;
    	      this.sheetId = defaults.sheetId;
    	      this.shop = defaults.shop;
    	      this.shortCode = defaults.shortCode;
    	      this.showRecordsWithNoMetrics = defaults.showRecordsWithNoMetrics;
    	      this.sid = defaults.sid;
    	      this.signerPublicKey = defaults.signerPublicKey;
    	      this.siteAddress = defaults.siteAddress;
    	      this.siteId = defaults.siteId;
    	      this.siteName = defaults.siteName;
    	      this.siteUrls = defaults.siteUrls;
    	      this.skipAfter = defaults.skipAfter;
    	      this.skipBefore = defaults.skipBefore;
    	      this.soapUri = defaults.soapUri;
    	      this.socialDataSyncTimeframe = defaults.socialDataSyncTimeframe;
    	      this.source = defaults.source;
    	      this.storeHash = defaults.storeHash;
    	      this.subDomain = defaults.subDomain;
    	      this.subdomain = defaults.subdomain;
    	      this.subscriberName = defaults.subscriberName;
    	      this.subscription = defaults.subscription;
    	      this.supportConnectedAccountsSync = defaults.supportConnectedAccountsSync;
    	      this.supportNestedColumns = defaults.supportNestedColumns;
    	      this.surveyIds = defaults.surveyIds;
    	      this.swipeAttributionWindow = defaults.swipeAttributionWindow;
    	      this.syncDataLocker = defaults.syncDataLocker;
    	      this.syncFormat = defaults.syncFormat;
    	      this.syncFormulaFields = defaults.syncFormulaFields;
    	      this.syncMetadata = defaults.syncMetadata;
    	      this.syncMethod = defaults.syncMethod;
    	      this.syncMode = defaults.syncMode;
    	      this.syncMultipleAccounts = defaults.syncMultipleAccounts;
    	      this.syncPackMode = defaults.syncPackMode;
    	      this.syncPullApi = defaults.syncPullApi;
    	      this.syncType = defaults.syncType;
    	      this.sysnr = defaults.sysnr;
    	      this.tableName = defaults.tableName;
    	      this.tdeCertificate = defaults.tdeCertificate;
    	      this.tdeCertificateName = defaults.tdeCertificateName;
    	      this.tdePassword = defaults.tdePassword;
    	      this.tdePrivateKey = defaults.tdePrivateKey;
    	      this.teamId = defaults.teamId;
    	      this.technicalAccountId = defaults.technicalAccountId;
    	      this.templateLabels = defaults.templateLabels;
    	      this.tenant = defaults.tenant;
    	      this.tenantId = defaults.tenantId;
    	      this.testTableName = defaults.testTableName;
    	      this.timeZone = defaults.timeZone;
    	      this.timeframeMonths = defaults.timeframeMonths;
    	      this.tns = defaults.tns;
    	      this.tokenAuthenticatedContainer = defaults.tokenAuthenticatedContainer;
    	      this.tokenAuthenticatedDatabase = defaults.tokenAuthenticatedDatabase;
    	      this.tokenId = defaults.tokenId;
    	      this.tokenKey = defaults.tokenKey;
    	      this.tokenSecret = defaults.tokenSecret;
    	      this.tokenSecretKey = defaults.tokenSecretKey;
    	      this.topics = defaults.topics;
    	      this.trustStoreType = defaults.trustStoreType;
    	      this.trustedCert = defaults.trustedCert;
    	      this.truststore = defaults.truststore;
    	      this.tunnelHost = defaults.tunnelHost;
    	      this.tunnelPort = defaults.tunnelPort;
    	      this.tunnelUser = defaults.tunnelUser;
    	      this.uniqueId = defaults.uniqueId;
    	      this.updateConfigOnEachSync = defaults.updateConfigOnEachSync;
    	      this.updateMethod = defaults.updateMethod;
    	      this.uri = defaults.uri;
    	      this.useApiKeys = defaults.useApiKeys;
    	      this.useCustomerBucket = defaults.useCustomerBucket;
    	      this.useOracleRac = defaults.useOracleRac;
    	      this.usePgpEncryptionOptions = defaults.usePgpEncryptionOptions;
    	      this.useServiceAccount = defaults.useServiceAccount;
    	      this.useTemplateLabels = defaults.useTemplateLabels;
    	      this.useWebhooks = defaults.useWebhooks;
    	      this.useWorkspace = defaults.useWorkspace;
    	      this.user = defaults.user;
    	      this.userId = defaults.userId;
    	      this.userKey = defaults.userKey;
    	      this.userName = defaults.userName;
    	      this.userProfiles = defaults.userProfiles;
    	      this.username = defaults.username;
    	      this.viewAttributionWindow = defaults.viewAttributionWindow;
    	      this.viewThroughAttributionWindowSize = defaults.viewThroughAttributionWindowSize;
    	      this.webhookEndpoint = defaults.webhookEndpoint;
    	      this.webhookKey = defaults.webhookKey;
    	      this.webhookUrl = defaults.webhookUrl;
    	      this.wordPressSiteIdOrWoocommerceDomainName = defaults.wordPressSiteIdOrWoocommerceDomainName;
    	      this.workspaceName = defaults.workspaceName;
    	      this.workspaceSameAsSource = defaults.workspaceSameAsSource;
    	      this.workspaceSchema = defaults.workspaceSchema;
    	      this.wsCertificate = defaults.wsCertificate;
        }

        @CustomType.Setter
        public Builder absConnectionMethod(String absConnectionMethod) {
            this.absConnectionMethod = Objects.requireNonNull(absConnectionMethod);
            return this;
        }
        @CustomType.Setter
        public Builder absConnectionString(String absConnectionString) {
            this.absConnectionString = Objects.requireNonNull(absConnectionString);
            return this;
        }
        @CustomType.Setter
        public Builder absContainerAddress(String absContainerAddress) {
            this.absContainerAddress = Objects.requireNonNull(absContainerAddress);
            return this;
        }
        @CustomType.Setter
        public Builder absContainerName(String absContainerName) {
            this.absContainerName = Objects.requireNonNull(absContainerName);
            return this;
        }
        @CustomType.Setter
        public Builder absHostIp(String absHostIp) {
            this.absHostIp = Objects.requireNonNull(absHostIp);
            return this;
        }
        @CustomType.Setter
        public Builder absHostUser(String absHostUser) {
            this.absHostUser = Objects.requireNonNull(absHostUser);
            return this;
        }
        @CustomType.Setter
        public Builder absPrefix(String absPrefix) {
            this.absPrefix = Objects.requireNonNull(absPrefix);
            return this;
        }
        @CustomType.Setter
        public Builder absPublicKey(String absPublicKey) {
            this.absPublicKey = Objects.requireNonNull(absPublicKey);
            return this;
        }
        @CustomType.Setter
        public Builder accessKey(String accessKey) {
            this.accessKey = Objects.requireNonNull(accessKey);
            return this;
        }
        @CustomType.Setter
        public Builder accessKeyId(String accessKeyId) {
            this.accessKeyId = Objects.requireNonNull(accessKeyId);
            return this;
        }
        @CustomType.Setter
        public Builder accessKeySecret(String accessKeySecret) {
            this.accessKeySecret = Objects.requireNonNull(accessKeySecret);
            return this;
        }
        @CustomType.Setter
        public Builder accessToken(String accessToken) {
            this.accessToken = Objects.requireNonNull(accessToken);
            return this;
        }
        @CustomType.Setter
        public Builder accessType(String accessType) {
            this.accessType = Objects.requireNonNull(accessType);
            return this;
        }
        @CustomType.Setter
        public Builder account(String account) {
            this.account = Objects.requireNonNull(account);
            return this;
        }
        @CustomType.Setter
        public Builder accountId(String accountId) {
            this.accountId = Objects.requireNonNull(accountId);
            return this;
        }
        @CustomType.Setter
        public Builder accountIds(List<String> accountIds) {
            this.accountIds = Objects.requireNonNull(accountIds);
            return this;
        }
        public Builder accountIds(String... accountIds) {
            return accountIds(List.of(accountIds));
        }
        @CustomType.Setter
        public Builder accountKey(String accountKey) {
            this.accountKey = Objects.requireNonNull(accountKey);
            return this;
        }
        @CustomType.Setter
        public Builder accountName(String accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }
        @CustomType.Setter
        public Builder accountSyncMode(String accountSyncMode) {
            this.accountSyncMode = Objects.requireNonNull(accountSyncMode);
            return this;
        }
        @CustomType.Setter
        public Builder accounts(List<String> accounts) {
            this.accounts = Objects.requireNonNull(accounts);
            return this;
        }
        public Builder accounts(String... accounts) {
            return accounts(List.of(accounts));
        }
        @CustomType.Setter
        public Builder accountsRedditAds(List<GetConnectorConfigAccountsRedditAd> accountsRedditAds) {
            this.accountsRedditAds = Objects.requireNonNull(accountsRedditAds);
            return this;
        }
        public Builder accountsRedditAds(GetConnectorConfigAccountsRedditAd... accountsRedditAds) {
            return accountsRedditAds(List.of(accountsRedditAds));
        }
        @CustomType.Setter
        public Builder accountsSyncMode(String accountsSyncMode) {
            this.accountsSyncMode = Objects.requireNonNull(accountsSyncMode);
            return this;
        }
        @CustomType.Setter
        public Builder actionBreakdowns(List<String> actionBreakdowns) {
            this.actionBreakdowns = Objects.requireNonNull(actionBreakdowns);
            return this;
        }
        public Builder actionBreakdowns(String... actionBreakdowns) {
            return actionBreakdowns(List.of(actionBreakdowns));
        }
        @CustomType.Setter
        public Builder actionReportTime(String actionReportTime) {
            this.actionReportTime = Objects.requireNonNull(actionReportTime);
            return this;
        }
        @CustomType.Setter
        public Builder adAnalytics(String adAnalytics) {
            this.adAnalytics = Objects.requireNonNull(adAnalytics);
            return this;
        }
        @CustomType.Setter
        public Builder adUnitView(String adUnitView) {
            this.adUnitView = Objects.requireNonNull(adUnitView);
            return this;
        }
        @CustomType.Setter
        public Builder adminApiKey(String adminApiKey) {
            this.adminApiKey = Objects.requireNonNull(adminApiKey);
            return this;
        }
        @CustomType.Setter
        public Builder adobeAnalyticsConfigurations(List<GetConnectorConfigAdobeAnalyticsConfiguration> adobeAnalyticsConfigurations) {
            this.adobeAnalyticsConfigurations = Objects.requireNonNull(adobeAnalyticsConfigurations);
            return this;
        }
        public Builder adobeAnalyticsConfigurations(GetConnectorConfigAdobeAnalyticsConfiguration... adobeAnalyticsConfigurations) {
            return adobeAnalyticsConfigurations(List.of(adobeAnalyticsConfigurations));
        }
        @CustomType.Setter
        public Builder advertisables(List<String> advertisables) {
            this.advertisables = Objects.requireNonNull(advertisables);
            return this;
        }
        public Builder advertisables(String... advertisables) {
            return advertisables(List.of(advertisables));
        }
        @CustomType.Setter
        public Builder advertisers(List<String> advertisers) {
            this.advertisers = Objects.requireNonNull(advertisers);
            return this;
        }
        public Builder advertisers(String... advertisers) {
            return advertisers(List.of(advertisers));
        }
        @CustomType.Setter
        public Builder advertisersIds(List<String> advertisersIds) {
            this.advertisersIds = Objects.requireNonNull(advertisersIds);
            return this;
        }
        public Builder advertisersIds(String... advertisersIds) {
            return advertisersIds(List.of(advertisersIds));
        }
        @CustomType.Setter
        public Builder advertisersSyncMode(String advertisersSyncMode) {
            this.advertisersSyncMode = Objects.requireNonNull(advertisersSyncMode);
            return this;
        }
        @CustomType.Setter
        public Builder agentHost(String agentHost) {
            this.agentHost = Objects.requireNonNull(agentHost);
            return this;
        }
        @CustomType.Setter
        public Builder agentOraHome(String agentOraHome) {
            this.agentOraHome = Objects.requireNonNull(agentOraHome);
            return this;
        }
        @CustomType.Setter
        public Builder agentPassword(String agentPassword) {
            this.agentPassword = Objects.requireNonNull(agentPassword);
            return this;
        }
        @CustomType.Setter
        public Builder agentPort(String agentPort) {
            this.agentPort = Objects.requireNonNull(agentPort);
            return this;
        }
        @CustomType.Setter
        public Builder agentPublicCert(String agentPublicCert) {
            this.agentPublicCert = Objects.requireNonNull(agentPublicCert);
            return this;
        }
        @CustomType.Setter
        public Builder agentUser(String agentUser) {
            this.agentUser = Objects.requireNonNull(agentUser);
            return this;
        }
        @CustomType.Setter
        public Builder aggregation(String aggregation) {
            this.aggregation = Objects.requireNonNull(aggregation);
            return this;
        }
        @CustomType.Setter
        public Builder alwaysEncrypted(String alwaysEncrypted) {
            this.alwaysEncrypted = Objects.requireNonNull(alwaysEncrypted);
            return this;
        }
        @CustomType.Setter
        public Builder apiAccessToken(String apiAccessToken) {
            this.apiAccessToken = Objects.requireNonNull(apiAccessToken);
            return this;
        }
        @CustomType.Setter
        public Builder apiId(String apiId) {
            this.apiId = Objects.requireNonNull(apiId);
            return this;
        }
        @CustomType.Setter
        public Builder apiKey(String apiKey) {
            this.apiKey = Objects.requireNonNull(apiKey);
            return this;
        }
        @CustomType.Setter
        public Builder apiKeyApiSecret(String apiKeyApiSecret) {
            this.apiKeyApiSecret = Objects.requireNonNull(apiKeyApiSecret);
            return this;
        }
        @CustomType.Setter
        public Builder apiKeys(List<String> apiKeys) {
            this.apiKeys = Objects.requireNonNull(apiKeys);
            return this;
        }
        public Builder apiKeys(String... apiKeys) {
            return apiKeys(List.of(apiKeys));
        }
        @CustomType.Setter
        public Builder apiQuota(String apiQuota) {
            this.apiQuota = Objects.requireNonNull(apiQuota);
            return this;
        }
        @CustomType.Setter
        public Builder apiRequestsPerMinute(String apiRequestsPerMinute) {
            this.apiRequestsPerMinute = Objects.requireNonNull(apiRequestsPerMinute);
            return this;
        }
        @CustomType.Setter
        public Builder apiSecret(String apiSecret) {
            this.apiSecret = Objects.requireNonNull(apiSecret);
            return this;
        }
        @CustomType.Setter
        public Builder apiSecretKey(String apiSecretKey) {
            this.apiSecretKey = Objects.requireNonNull(apiSecretKey);
            return this;
        }
        @CustomType.Setter
        public Builder apiToken(String apiToken) {
            this.apiToken = Objects.requireNonNull(apiToken);
            return this;
        }
        @CustomType.Setter
        public Builder apiType(String apiType) {
            this.apiType = Objects.requireNonNull(apiType);
            return this;
        }
        @CustomType.Setter
        public Builder apiUrl(String apiUrl) {
            this.apiUrl = Objects.requireNonNull(apiUrl);
            return this;
        }
        @CustomType.Setter
        public Builder apiUsage(String apiUsage) {
            this.apiUsage = Objects.requireNonNull(apiUsage);
            return this;
        }
        @CustomType.Setter
        public Builder apiUtilizationPercentage(String apiUtilizationPercentage) {
            this.apiUtilizationPercentage = Objects.requireNonNull(apiUtilizationPercentage);
            return this;
        }
        @CustomType.Setter
        public Builder apiVersion(String apiVersion) {
            this.apiVersion = Objects.requireNonNull(apiVersion);
            return this;
        }
        @CustomType.Setter
        public Builder appId(String appId) {
            this.appId = Objects.requireNonNull(appId);
            return this;
        }
        @CustomType.Setter
        public Builder appIds(List<String> appIds) {
            this.appIds = Objects.requireNonNull(appIds);
            return this;
        }
        public Builder appIds(String... appIds) {
            return appIds(List.of(appIds));
        }
        @CustomType.Setter
        public Builder appIdsAppsflyers(List<GetConnectorConfigAppIdsAppsflyer> appIdsAppsflyers) {
            this.appIdsAppsflyers = Objects.requireNonNull(appIdsAppsflyers);
            return this;
        }
        public Builder appIdsAppsflyers(GetConnectorConfigAppIdsAppsflyer... appIdsAppsflyers) {
            return appIdsAppsflyers(List.of(appIdsAppsflyers));
        }
        @CustomType.Setter
        public Builder appKey(String appKey) {
            this.appKey = Objects.requireNonNull(appKey);
            return this;
        }
        @CustomType.Setter
        public Builder appSpecificPassword(String appSpecificPassword) {
            this.appSpecificPassword = Objects.requireNonNull(appSpecificPassword);
            return this;
        }
        @CustomType.Setter
        public Builder appSyncMode(String appSyncMode) {
            this.appSyncMode = Objects.requireNonNull(appSyncMode);
            return this;
        }
        @CustomType.Setter
        public Builder appendFileOption(String appendFileOption) {
            this.appendFileOption = Objects.requireNonNull(appendFileOption);
            return this;
        }
        @CustomType.Setter
        public Builder applicationKey(String applicationKey) {
            this.applicationKey = Objects.requireNonNull(applicationKey);
            return this;
        }
        @CustomType.Setter
        public Builder apps(List<String> apps) {
            this.apps = Objects.requireNonNull(apps);
            return this;
        }
        public Builder apps(String... apps) {
            return apps(List.of(apps));
        }
        @CustomType.Setter
        public Builder archiveLogFormat(String archiveLogFormat) {
            this.archiveLogFormat = Objects.requireNonNull(archiveLogFormat);
            return this;
        }
        @CustomType.Setter
        public Builder archiveLogPath(String archiveLogPath) {
            this.archiveLogPath = Objects.requireNonNull(archiveLogPath);
            return this;
        }
        @CustomType.Setter
        public Builder archivePattern(String archivePattern) {
            this.archivePattern = Objects.requireNonNull(archivePattern);
            return this;
        }
        @CustomType.Setter
        public Builder areSoapCredentialsProvided(String areSoapCredentialsProvided) {
            this.areSoapCredentialsProvided = Objects.requireNonNull(areSoapCredentialsProvided);
            return this;
        }
        @CustomType.Setter
        public Builder asbIp(String asbIp) {
            this.asbIp = Objects.requireNonNull(asbIp);
            return this;
        }
        @CustomType.Setter
        public Builder asmOption(String asmOption) {
            this.asmOption = Objects.requireNonNull(asmOption);
            return this;
        }
        @CustomType.Setter
        public Builder asmOracleHome(String asmOracleHome) {
            this.asmOracleHome = Objects.requireNonNull(asmOracleHome);
            return this;
        }
        @CustomType.Setter
        public Builder asmPassword(String asmPassword) {
            this.asmPassword = Objects.requireNonNull(asmPassword);
            return this;
        }
        @CustomType.Setter
        public Builder asmTns(String asmTns) {
            this.asmTns = Objects.requireNonNull(asmTns);
            return this;
        }
        @CustomType.Setter
        public Builder asmUser(String asmUser) {
            this.asmUser = Objects.requireNonNull(asmUser);
            return this;
        }
        @CustomType.Setter
        public Builder attributionWindow(String attributionWindow) {
            this.attributionWindow = Objects.requireNonNull(attributionWindow);
            return this;
        }
        @CustomType.Setter
        public Builder attributionWindowSize(String attributionWindowSize) {
            this.attributionWindowSize = Objects.requireNonNull(attributionWindowSize);
            return this;
        }
        @CustomType.Setter
        public Builder auth(String auth) {
            this.auth = Objects.requireNonNull(auth);
            return this;
        }
        @CustomType.Setter
        public Builder authMethod(String authMethod) {
            this.authMethod = Objects.requireNonNull(authMethod);
            return this;
        }
        @CustomType.Setter
        public Builder authMode(String authMode) {
            this.authMode = Objects.requireNonNull(authMode);
            return this;
        }
        @CustomType.Setter
        public Builder authType(String authType) {
            this.authType = Objects.requireNonNull(authType);
            return this;
        }
        @CustomType.Setter
        public Builder authorizationMethod(String authorizationMethod) {
            this.authorizationMethod = Objects.requireNonNull(authorizationMethod);
            return this;
        }
        @CustomType.Setter
        public Builder awsRegionCode(String awsRegionCode) {
            this.awsRegionCode = Objects.requireNonNull(awsRegionCode);
            return this;
        }
        @CustomType.Setter
        public Builder baseCurrency(String baseCurrency) {
            this.baseCurrency = Objects.requireNonNull(baseCurrency);
            return this;
        }
        @CustomType.Setter
        public Builder baseDomain(String baseDomain) {
            this.baseDomain = Objects.requireNonNull(baseDomain);
            return this;
        }
        @CustomType.Setter
        public Builder baseId(String baseId) {
            this.baseId = Objects.requireNonNull(baseId);
            return this;
        }
        @CustomType.Setter
        public Builder baseUrl(String baseUrl) {
            this.baseUrl = Objects.requireNonNull(baseUrl);
            return this;
        }
        @CustomType.Setter
        public Builder bearerToken(String bearerToken) {
            this.bearerToken = Objects.requireNonNull(bearerToken);
            return this;
        }
        @CustomType.Setter
        public Builder blobSasUrl(String blobSasUrl) {
            this.blobSasUrl = Objects.requireNonNull(blobSasUrl);
            return this;
        }
        @CustomType.Setter
        public Builder breakdowns(List<String> breakdowns) {
            this.breakdowns = Objects.requireNonNull(breakdowns);
            return this;
        }
        public Builder breakdowns(String... breakdowns) {
            return breakdowns(List.of(breakdowns));
        }
        @CustomType.Setter
        public Builder bucket(String bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }
        @CustomType.Setter
        public Builder bucketName(String bucketName) {
            this.bucketName = Objects.requireNonNull(bucketName);
            return this;
        }
        @CustomType.Setter
        public Builder bucketService(String bucketService) {
            this.bucketService = Objects.requireNonNull(bucketService);
            return this;
        }
        @CustomType.Setter
        public Builder businessId(String businessId) {
            this.businessId = Objects.requireNonNull(businessId);
            return this;
        }
        @CustomType.Setter
        public Builder businessUnitId(String businessUnitId) {
            this.businessUnitId = Objects.requireNonNull(businessUnitId);
            return this;
        }
        @CustomType.Setter
        public Builder certificate(String certificate) {
            this.certificate = Objects.requireNonNull(certificate);
            return this;
        }
        @CustomType.Setter
        public Builder clickAttributionWindow(String clickAttributionWindow) {
            this.clickAttributionWindow = Objects.requireNonNull(clickAttributionWindow);
            return this;
        }
        @CustomType.Setter
        public Builder client(String client) {
            this.client = Objects.requireNonNull(client);
            return this;
        }
        @CustomType.Setter
        public Builder clientCert(String clientCert) {
            this.clientCert = Objects.requireNonNull(clientCert);
            return this;
        }
        @CustomType.Setter
        public Builder clientCertKey(String clientCertKey) {
            this.clientCertKey = Objects.requireNonNull(clientCertKey);
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            this.clientId = Objects.requireNonNull(clientId);
            return this;
        }
        @CustomType.Setter
        public Builder clientKey(String clientKey) {
            this.clientKey = Objects.requireNonNull(clientKey);
            return this;
        }
        @CustomType.Setter
        public Builder clientName(String clientName) {
            this.clientName = Objects.requireNonNull(clientName);
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(String clientSecret) {
            this.clientSecret = Objects.requireNonNull(clientSecret);
            return this;
        }
        @CustomType.Setter
        public Builder cloudStorageType(String cloudStorageType) {
            this.cloudStorageType = Objects.requireNonNull(cloudStorageType);
            return this;
        }
        @CustomType.Setter
        public Builder columns(List<String> columns) {
            this.columns = Objects.requireNonNull(columns);
            return this;
        }
        public Builder columns(String... columns) {
            return columns(List.of(columns));
        }
        @CustomType.Setter
        public Builder companyId(String companyId) {
            this.companyId = Objects.requireNonNull(companyId);
            return this;
        }
        @CustomType.Setter
        public Builder companyKey(String companyKey) {
            this.companyKey = Objects.requireNonNull(companyKey);
            return this;
        }
        @CustomType.Setter
        public Builder companyRequestToken(String companyRequestToken) {
            this.companyRequestToken = Objects.requireNonNull(companyRequestToken);
            return this;
        }
        @CustomType.Setter
        public Builder companyUuid(String companyUuid) {
            this.companyUuid = Objects.requireNonNull(companyUuid);
            return this;
        }
        @CustomType.Setter
        public Builder compression(String compression) {
            this.compression = Objects.requireNonNull(compression);
            return this;
        }
        @CustomType.Setter
        public Builder configMethod(String configMethod) {
            this.configMethod = Objects.requireNonNull(configMethod);
            return this;
        }
        @CustomType.Setter
        public Builder configRepositoryUrl(String configRepositoryUrl) {
            this.configRepositoryUrl = Objects.requireNonNull(configRepositoryUrl);
            return this;
        }
        @CustomType.Setter
        public Builder configType(String configType) {
            this.configType = Objects.requireNonNull(configType);
            return this;
        }
        @CustomType.Setter
        public Builder connectingUser(String connectingUser) {
            this.connectingUser = Objects.requireNonNull(connectingUser);
            return this;
        }
        @CustomType.Setter
        public Builder connectingUserEmail(String connectingUserEmail) {
            this.connectingUserEmail = Objects.requireNonNull(connectingUserEmail);
            return this;
        }
        @CustomType.Setter
        public Builder connectionMethod(String connectionMethod) {
            this.connectionMethod = Objects.requireNonNull(connectionMethod);
            return this;
        }
        @CustomType.Setter
        public Builder connectionString(String connectionString) {
            this.connectionString = Objects.requireNonNull(connectionString);
            return this;
        }
        @CustomType.Setter
        public Builder connectionType(String connectionType) {
            this.connectionType = Objects.requireNonNull(connectionType);
            return this;
        }
        @CustomType.Setter
        public Builder consumerGroup(String consumerGroup) {
            this.consumerGroup = Objects.requireNonNull(consumerGroup);
            return this;
        }
        @CustomType.Setter
        public Builder consumerKey(String consumerKey) {
            this.consumerKey = Objects.requireNonNull(consumerKey);
            return this;
        }
        @CustomType.Setter
        public Builder consumerSecret(String consumerSecret) {
            this.consumerSecret = Objects.requireNonNull(consumerSecret);
            return this;
        }
        @CustomType.Setter
        public Builder containerAddress(String containerAddress) {
            this.containerAddress = Objects.requireNonNull(containerAddress);
            return this;
        }
        @CustomType.Setter
        public Builder containerName(String containerName) {
            this.containerName = Objects.requireNonNull(containerName);
            return this;
        }
        @CustomType.Setter
        public Builder contentOwnerId(String contentOwnerId) {
            this.contentOwnerId = Objects.requireNonNull(contentOwnerId);
            return this;
        }
        @CustomType.Setter
        public Builder conversationWebhookUrl(String conversationWebhookUrl) {
            this.conversationWebhookUrl = Objects.requireNonNull(conversationWebhookUrl);
            return this;
        }
        @CustomType.Setter
        public Builder conversionDimensions(List<String> conversionDimensions) {
            this.conversionDimensions = Objects.requireNonNull(conversionDimensions);
            return this;
        }
        public Builder conversionDimensions(String... conversionDimensions) {
            return conversionDimensions(List.of(conversionDimensions));
        }
        @CustomType.Setter
        public Builder conversionReportTime(String conversionReportTime) {
            this.conversionReportTime = Objects.requireNonNull(conversionReportTime);
            return this;
        }
        @CustomType.Setter
        public Builder conversionWindowSize(String conversionWindowSize) {
            this.conversionWindowSize = Objects.requireNonNull(conversionWindowSize);
            return this;
        }
        @CustomType.Setter
        public Builder csvDefinition(String csvDefinition) {
            this.csvDefinition = Objects.requireNonNull(csvDefinition);
            return this;
        }
        @CustomType.Setter
        public Builder currency(String currency) {
            this.currency = Objects.requireNonNull(currency);
            return this;
        }
        @CustomType.Setter
        public Builder customEventSyncMode(String customEventSyncMode) {
            this.customEventSyncMode = Objects.requireNonNull(customEventSyncMode);
            return this;
        }
        @CustomType.Setter
        public Builder customEvents(List<String> customEvents) {
            this.customEvents = Objects.requireNonNull(customEvents);
            return this;
        }
        public Builder customEvents(String... customEvents) {
            return customEvents(List.of(customEvents));
        }
        @CustomType.Setter
        public Builder customFieldIds(List<String> customFieldIds) {
            this.customFieldIds = Objects.requireNonNull(customFieldIds);
            return this;
        }
        public Builder customFieldIds(String... customFieldIds) {
            return customFieldIds(List.of(customFieldIds));
        }
        @CustomType.Setter
        public Builder customFloodlightVariables(List<String> customFloodlightVariables) {
            this.customFloodlightVariables = Objects.requireNonNull(customFloodlightVariables);
            return this;
        }
        public Builder customFloodlightVariables(String... customFloodlightVariables) {
            return customFloodlightVariables(List.of(customFloodlightVariables));
        }
        @CustomType.Setter
        public Builder customReports(List<GetConnectorConfigCustomReport> customReports) {
            this.customReports = Objects.requireNonNull(customReports);
            return this;
        }
        public Builder customReports(GetConnectorConfigCustomReport... customReports) {
            return customReports(List.of(customReports));
        }
        @CustomType.Setter
        public Builder customTables(List<GetConnectorConfigCustomTable> customTables) {
            this.customTables = Objects.requireNonNull(customTables);
            return this;
        }
        public Builder customTables(GetConnectorConfigCustomTable... customTables) {
            return customTables(List.of(customTables));
        }
        @CustomType.Setter
        public Builder customerId(String customerId) {
            this.customerId = Objects.requireNonNull(customerId);
            return this;
        }
        @CustomType.Setter
        public Builder customerListId(String customerListId) {
            this.customerListId = Objects.requireNonNull(customerListId);
            return this;
        }
        @CustomType.Setter
        public Builder dailyApiCallLimit(String dailyApiCallLimit) {
            this.dailyApiCallLimit = Objects.requireNonNull(dailyApiCallLimit);
            return this;
        }
        @CustomType.Setter
        public Builder dataAccessMethod(String dataAccessMethod) {
            this.dataAccessMethod = Objects.requireNonNull(dataAccessMethod);
            return this;
        }
        @CustomType.Setter
        public Builder dataCenter(String dataCenter) {
            this.dataCenter = Objects.requireNonNull(dataCenter);
            return this;
        }
        @CustomType.Setter
        public Builder dataSetName(String dataSetName) {
            this.dataSetName = Objects.requireNonNull(dataSetName);
            return this;
        }
        @CustomType.Setter
        public Builder database(String database) {
            this.database = Objects.requireNonNull(database);
            return this;
        }
        @CustomType.Setter
        public Builder datasetId(String datasetId) {
            this.datasetId = Objects.requireNonNull(datasetId);
            return this;
        }
        @CustomType.Setter
        public Builder datasource(String datasource) {
            this.datasource = Objects.requireNonNull(datasource);
            return this;
        }
        @CustomType.Setter
        public Builder dateGranularity(String dateGranularity) {
            this.dateGranularity = Objects.requireNonNull(dateGranularity);
            return this;
        }
        @CustomType.Setter
        public Builder delimiter(String delimiter) {
            this.delimiter = Objects.requireNonNull(delimiter);
            return this;
        }
        @CustomType.Setter
        public Builder dimensionAttributes(List<String> dimensionAttributes) {
            this.dimensionAttributes = Objects.requireNonNull(dimensionAttributes);
            return this;
        }
        public Builder dimensionAttributes(String... dimensionAttributes) {
            return dimensionAttributes(List.of(dimensionAttributes));
        }
        @CustomType.Setter
        public Builder dimensions(List<String> dimensions) {
            this.dimensions = Objects.requireNonNull(dimensions);
            return this;
        }
        public Builder dimensions(String... dimensions) {
            return dimensions(List.of(dimensions));
        }
        @CustomType.Setter
        public Builder distributedConnectorClusterSize(String distributedConnectorClusterSize) {
            this.distributedConnectorClusterSize = Objects.requireNonNull(distributedConnectorClusterSize);
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            this.domain = Objects.requireNonNull(domain);
            return this;
        }
        @CustomType.Setter
        public Builder domainHostName(String domainHostName) {
            this.domainHostName = Objects.requireNonNull(domainHostName);
            return this;
        }
        @CustomType.Setter
        public Builder domainName(String domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }
        @CustomType.Setter
        public Builder domainType(String domainType) {
            this.domainType = Objects.requireNonNull(domainType);
            return this;
        }
        @CustomType.Setter
        public Builder elements(List<String> elements) {
            this.elements = Objects.requireNonNull(elements);
            return this;
        }
        public Builder elements(String... elements) {
            return elements(List.of(elements));
        }
        @CustomType.Setter
        public Builder email(String email) {
            this.email = Objects.requireNonNull(email);
            return this;
        }
        @CustomType.Setter
        public Builder emptyHeader(String emptyHeader) {
            this.emptyHeader = Objects.requireNonNull(emptyHeader);
            return this;
        }
        @CustomType.Setter
        public Builder enableAllDimensionCombinations(String enableAllDimensionCombinations) {
            this.enableAllDimensionCombinations = Objects.requireNonNull(enableAllDimensionCombinations);
            return this;
        }
        @CustomType.Setter
        public Builder enableArchiveLogOnly(String enableArchiveLogOnly) {
            this.enableArchiveLogOnly = Objects.requireNonNull(enableArchiveLogOnly);
            return this;
        }
        @CustomType.Setter
        public Builder enableDataExtensionsSyncing(String enableDataExtensionsSyncing) {
            this.enableDataExtensionsSyncing = Objects.requireNonNull(enableDataExtensionsSyncing);
            return this;
        }
        @CustomType.Setter
        public Builder enableDistributedConnectorMode(String enableDistributedConnectorMode) {
            this.enableDistributedConnectorMode = Objects.requireNonNull(enableDistributedConnectorMode);
            return this;
        }
        @CustomType.Setter
        public Builder enableEnrichments(String enableEnrichments) {
            this.enableEnrichments = Objects.requireNonNull(enableEnrichments);
            return this;
        }
        @CustomType.Setter
        public Builder enableExports(String enableExports) {
            this.enableExports = Objects.requireNonNull(enableExports);
            return this;
        }
        @CustomType.Setter
        public Builder enableTde(String enableTde) {
            this.enableTde = Objects.requireNonNull(enableTde);
            return this;
        }
        @CustomType.Setter
        public Builder encodedPublicKey(String encodedPublicKey) {
            this.encodedPublicKey = Objects.requireNonNull(encodedPublicKey);
            return this;
        }
        @CustomType.Setter
        public Builder encryptionKey(String encryptionKey) {
            this.encryptionKey = Objects.requireNonNull(encryptionKey);
            return this;
        }
        @CustomType.Setter
        public Builder endpoint(String endpoint) {
            this.endpoint = Objects.requireNonNull(endpoint);
            return this;
        }
        @CustomType.Setter
        public Builder engagementAttributionWindow(String engagementAttributionWindow) {
            this.engagementAttributionWindow = Objects.requireNonNull(engagementAttributionWindow);
            return this;
        }
        @CustomType.Setter
        public Builder enrichedExport(String enrichedExport) {
            this.enrichedExport = Objects.requireNonNull(enrichedExport);
            return this;
        }
        @CustomType.Setter
        public Builder entityId(String entityId) {
            this.entityId = Objects.requireNonNull(entityId);
            return this;
        }
        @CustomType.Setter
        public Builder environment(String environment) {
            this.environment = Objects.requireNonNull(environment);
            return this;
        }
        @CustomType.Setter
        public Builder escapeChar(String escapeChar) {
            this.escapeChar = Objects.requireNonNull(escapeChar);
            return this;
        }
        @CustomType.Setter
        public Builder euRegion(String euRegion) {
            this.euRegion = Objects.requireNonNull(euRegion);
            return this;
        }
        @CustomType.Setter
        public Builder events(List<String> events) {
            this.events = Objects.requireNonNull(events);
            return this;
        }
        public Builder events(String... events) {
            return events(List.of(events));
        }
        @CustomType.Setter
        public Builder exportStorageType(String exportStorageType) {
            this.exportStorageType = Objects.requireNonNull(exportStorageType);
            return this;
        }
        @CustomType.Setter
        public Builder externalId(String externalId) {
            this.externalId = Objects.requireNonNull(externalId);
            return this;
        }
        @CustomType.Setter
        public Builder fields(List<String> fields) {
            this.fields = Objects.requireNonNull(fields);
            return this;
        }
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }
        @CustomType.Setter
        public Builder fileType(String fileType) {
            this.fileType = Objects.requireNonNull(fileType);
            return this;
        }
        @CustomType.Setter
        public Builder filter(String filter) {
            this.filter = Objects.requireNonNull(filter);
            return this;
        }
        @CustomType.Setter
        public Builder financeAccountSyncMode(String financeAccountSyncMode) {
            this.financeAccountSyncMode = Objects.requireNonNull(financeAccountSyncMode);
            return this;
        }
        @CustomType.Setter
        public Builder financeAccounts(List<String> financeAccounts) {
            this.financeAccounts = Objects.requireNonNull(financeAccounts);
            return this;
        }
        public Builder financeAccounts(String... financeAccounts) {
            return financeAccounts(List.of(financeAccounts));
        }
        @CustomType.Setter
        public Builder folder(String folder) {
            this.folder = Objects.requireNonNull(folder);
            return this;
        }
        @CustomType.Setter
        public Builder folderId(String folderId) {
            this.folderId = Objects.requireNonNull(folderId);
            return this;
        }
        @CustomType.Setter
        public Builder folderPath(String folderPath) {
            this.folderPath = Objects.requireNonNull(folderPath);
            return this;
        }
        @CustomType.Setter
        public Builder forecastId(String forecastId) {
            this.forecastId = Objects.requireNonNull(forecastId);
            return this;
        }
        @CustomType.Setter
        public Builder ftpHost(String ftpHost) {
            this.ftpHost = Objects.requireNonNull(ftpHost);
            return this;
        }
        @CustomType.Setter
        public Builder ftpPassword(String ftpPassword) {
            this.ftpPassword = Objects.requireNonNull(ftpPassword);
            return this;
        }
        @CustomType.Setter
        public Builder ftpPort(String ftpPort) {
            this.ftpPort = Objects.requireNonNull(ftpPort);
            return this;
        }
        @CustomType.Setter
        public Builder ftpUser(String ftpUser) {
            this.ftpUser = Objects.requireNonNull(ftpUser);
            return this;
        }
        @CustomType.Setter
        public Builder function(String function) {
            this.function = Objects.requireNonNull(function);
            return this;
        }
        @CustomType.Setter
        public Builder functionApp(String functionApp) {
            this.functionApp = Objects.requireNonNull(functionApp);
            return this;
        }
        @CustomType.Setter
        public Builder functionKey(String functionKey) {
            this.functionKey = Objects.requireNonNull(functionKey);
            return this;
        }
        @CustomType.Setter
        public Builder functionName(String functionName) {
            this.functionName = Objects.requireNonNull(functionName);
            return this;
        }
        @CustomType.Setter
        public Builder functionTrigger(String functionTrigger) {
            this.functionTrigger = Objects.requireNonNull(functionTrigger);
            return this;
        }
        @CustomType.Setter
        public Builder gcsBucket(String gcsBucket) {
            this.gcsBucket = Objects.requireNonNull(gcsBucket);
            return this;
        }
        @CustomType.Setter
        public Builder gcsFolder(String gcsFolder) {
            this.gcsFolder = Objects.requireNonNull(gcsFolder);
            return this;
        }
        @CustomType.Setter
        public Builder groupName(String groupName) {
            this.groupName = Objects.requireNonNull(groupName);
            return this;
        }
        @CustomType.Setter
        public Builder hasManagePermissions(String hasManagePermissions) {
            this.hasManagePermissions = Objects.requireNonNull(hasManagePermissions);
            return this;
        }
        @CustomType.Setter
        public Builder homeFolder(String homeFolder) {
            this.homeFolder = Objects.requireNonNull(homeFolder);
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            this.host = Objects.requireNonNull(host);
            return this;
        }
        @CustomType.Setter
        public Builder hostIp(String hostIp) {
            this.hostIp = Objects.requireNonNull(hostIp);
            return this;
        }
        @CustomType.Setter
        public Builder hostUser(String hostUser) {
            this.hostUser = Objects.requireNonNull(hostUser);
            return this;
        }
        @CustomType.Setter
        public Builder hosts(List<String> hosts) {
            this.hosts = Objects.requireNonNull(hosts);
            return this;
        }
        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }
        @CustomType.Setter
        public Builder identity(String identity) {
            this.identity = Objects.requireNonNull(identity);
            return this;
        }
        @CustomType.Setter
        public Builder includeOcapiEndpoints(String includeOcapiEndpoints) {
            this.includeOcapiEndpoints = Objects.requireNonNull(includeOcapiEndpoints);
            return this;
        }
        @CustomType.Setter
        public Builder instance(String instance) {
            this.instance = Objects.requireNonNull(instance);
            return this;
        }
        @CustomType.Setter
        public Builder instanceNumber(String instanceNumber) {
            this.instanceNumber = Objects.requireNonNull(instanceNumber);
            return this;
        }
        @CustomType.Setter
        public Builder instanceUrl(String instanceUrl) {
            this.instanceUrl = Objects.requireNonNull(instanceUrl);
            return this;
        }
        @CustomType.Setter
        public Builder integrationKey(String integrationKey) {
            this.integrationKey = Objects.requireNonNull(integrationKey);
            return this;
        }
        @CustomType.Setter
        public Builder isAccountLevelConnector(String isAccountLevelConnector) {
            this.isAccountLevelConnector = Objects.requireNonNull(isAccountLevelConnector);
            return this;
        }
        @CustomType.Setter
        public Builder isAuth2Enabled(String isAuth2Enabled) {
            this.isAuth2Enabled = Objects.requireNonNull(isAuth2Enabled);
            return this;
        }
        @CustomType.Setter
        public Builder isCustomApiCredentials(String isCustomApiCredentials) {
            this.isCustomApiCredentials = Objects.requireNonNull(isCustomApiCredentials);
            return this;
        }
        @CustomType.Setter
        public Builder isExternalActivitiesEndpointSelected(String isExternalActivitiesEndpointSelected) {
            this.isExternalActivitiesEndpointSelected = Objects.requireNonNull(isExternalActivitiesEndpointSelected);
            return this;
        }
        @CustomType.Setter
        public Builder isFtps(String isFtps) {
            this.isFtps = Objects.requireNonNull(isFtps);
            return this;
        }
        @CustomType.Setter
        public Builder isKeypair(String isKeypair) {
            this.isKeypair = Objects.requireNonNull(isKeypair);
            return this;
        }
        @CustomType.Setter
        public Builder isMultiEntityFeatureEnabled(String isMultiEntityFeatureEnabled) {
            this.isMultiEntityFeatureEnabled = Objects.requireNonNull(isMultiEntityFeatureEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder isNewPackage(String isNewPackage) {
            this.isNewPackage = Objects.requireNonNull(isNewPackage);
            return this;
        }
        @CustomType.Setter
        public Builder isPrivateKeyEncrypted(String isPrivateKeyEncrypted) {
            this.isPrivateKeyEncrypted = Objects.requireNonNull(isPrivateKeyEncrypted);
            return this;
        }
        @CustomType.Setter
        public Builder isPrivateLinkRequired(String isPrivateLinkRequired) {
            this.isPrivateLinkRequired = Objects.requireNonNull(isPrivateLinkRequired);
            return this;
        }
        @CustomType.Setter
        public Builder isPublic(String isPublic) {
            this.isPublic = Objects.requireNonNull(isPublic);
            return this;
        }
        @CustomType.Setter
        public Builder isSailthruConnectEnabled(String isSailthruConnectEnabled) {
            this.isSailthruConnectEnabled = Objects.requireNonNull(isSailthruConnectEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder isSecure(String isSecure) {
            this.isSecure = Objects.requireNonNull(isSecure);
            return this;
        }
        @CustomType.Setter
        public Builder isSingleTableMode(String isSingleTableMode) {
            this.isSingleTableMode = Objects.requireNonNull(isSingleTableMode);
            return this;
        }
        @CustomType.Setter
        public Builder isVendor(String isVendor) {
            this.isVendor = Objects.requireNonNull(isVendor);
            return this;
        }
        @CustomType.Setter
        public Builder jsonDeliveryMode(String jsonDeliveryMode) {
            this.jsonDeliveryMode = Objects.requireNonNull(jsonDeliveryMode);
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        @CustomType.Setter
        public Builder keyPassword(String keyPassword) {
            this.keyPassword = Objects.requireNonNull(keyPassword);
            return this;
        }
        @CustomType.Setter
        public Builder keyStoreType(String keyStoreType) {
            this.keyStoreType = Objects.requireNonNull(keyStoreType);
            return this;
        }
        @CustomType.Setter
        public Builder keystore(String keystore) {
            this.keystore = Objects.requireNonNull(keystore);
            return this;
        }
        @CustomType.Setter
        public Builder keystorePassword(String keystorePassword) {
            this.keystorePassword = Objects.requireNonNull(keystorePassword);
            return this;
        }
        @CustomType.Setter
        public Builder lastSyncedChangesUtc_(String lastSyncedChangesUtc_) {
            this.lastSyncedChangesUtc_ = Objects.requireNonNull(lastSyncedChangesUtc_);
            return this;
        }
        @CustomType.Setter
        public Builder latestVersion(String latestVersion) {
            this.latestVersion = Objects.requireNonNull(latestVersion);
            return this;
        }
        @CustomType.Setter
        public Builder limitForApiCallsToExternalActivitiesEndpoint(String limitForApiCallsToExternalActivitiesEndpoint) {
            this.limitForApiCallsToExternalActivitiesEndpoint = Objects.requireNonNull(limitForApiCallsToExternalActivitiesEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder lineSeparator(String lineSeparator) {
            this.lineSeparator = Objects.requireNonNull(lineSeparator);
            return this;
        }
        @CustomType.Setter
        public Builder listStrategy(String listStrategy) {
            this.listStrategy = Objects.requireNonNull(listStrategy);
            return this;
        }
        @CustomType.Setter
        public Builder listSyncMode(String listSyncMode) {
            this.listSyncMode = Objects.requireNonNull(listSyncMode);
            return this;
        }
        @CustomType.Setter
        public Builder logJournal(String logJournal) {
            this.logJournal = Objects.requireNonNull(logJournal);
            return this;
        }
        @CustomType.Setter
        public Builder logJournalSchema(String logJournalSchema) {
            this.logJournalSchema = Objects.requireNonNull(logJournalSchema);
            return this;
        }
        @CustomType.Setter
        public Builder login(String login) {
            this.login = Objects.requireNonNull(login);
            return this;
        }
        @CustomType.Setter
        public Builder loginPassword(String loginPassword) {
            this.loginPassword = Objects.requireNonNull(loginPassword);
            return this;
        }
        @CustomType.Setter
        public Builder managerAccounts(List<String> managerAccounts) {
            this.managerAccounts = Objects.requireNonNull(managerAccounts);
            return this;
        }
        public Builder managerAccounts(String... managerAccounts) {
            return managerAccounts(List.of(managerAccounts));
        }
        @CustomType.Setter
        public Builder merchantId(String merchantId) {
            this.merchantId = Objects.requireNonNull(merchantId);
            return this;
        }
        @CustomType.Setter
        public Builder messageType(String messageType) {
            this.messageType = Objects.requireNonNull(messageType);
            return this;
        }
        @CustomType.Setter
        public Builder metrics(List<String> metrics) {
            this.metrics = Objects.requireNonNull(metrics);
            return this;
        }
        public Builder metrics(String... metrics) {
            return metrics(List.of(metrics));
        }
        @CustomType.Setter
        public Builder namedRange(String namedRange) {
            this.namedRange = Objects.requireNonNull(namedRange);
            return this;
        }
        @CustomType.Setter
        public Builder namespace(String namespace) {
            this.namespace = Objects.requireNonNull(namespace);
            return this;
        }
        @CustomType.Setter
        public Builder networkCode(String networkCode) {
            this.networkCode = Objects.requireNonNull(networkCode);
            return this;
        }
        @CustomType.Setter
        public Builder nullSequence(String nullSequence) {
            this.nullSequence = Objects.requireNonNull(nullSequence);
            return this;
        }
        @CustomType.Setter
        public Builder oauthToken(String oauthToken) {
            this.oauthToken = Objects.requireNonNull(oauthToken);
            return this;
        }
        @CustomType.Setter
        public Builder oauthTokenSecret(String oauthTokenSecret) {
            this.oauthTokenSecret = Objects.requireNonNull(oauthTokenSecret);
            return this;
        }
        @CustomType.Setter
        public Builder ocapiClientId(String ocapiClientId) {
            this.ocapiClientId = Objects.requireNonNull(ocapiClientId);
            return this;
        }
        @CustomType.Setter
        public Builder ocapiClientSecret(String ocapiClientSecret) {
            this.ocapiClientSecret = Objects.requireNonNull(ocapiClientSecret);
            return this;
        }
        @CustomType.Setter
        public Builder ocapiCustomObjectTypes(String ocapiCustomObjectTypes) {
            this.ocapiCustomObjectTypes = Objects.requireNonNull(ocapiCustomObjectTypes);
            return this;
        }
        @CustomType.Setter
        public Builder ocapiHostname(String ocapiHostname) {
            this.ocapiHostname = Objects.requireNonNull(ocapiHostname);
            return this;
        }
        @CustomType.Setter
        public Builder onError(String onError) {
            this.onError = Objects.requireNonNull(onError);
            return this;
        }
        @CustomType.Setter
        public Builder onPremise(String onPremise) {
            this.onPremise = Objects.requireNonNull(onPremise);
            return this;
        }
        @CustomType.Setter
        public Builder organization(String organization) {
            this.organization = Objects.requireNonNull(organization);
            return this;
        }
        @CustomType.Setter
        public Builder organizationId(String organizationId) {
            this.organizationId = Objects.requireNonNull(organizationId);
            return this;
        }
        @CustomType.Setter
        public Builder organizations(List<String> organizations) {
            this.organizations = Objects.requireNonNull(organizations);
            return this;
        }
        public Builder organizations(String... organizations) {
            return organizations(List.of(organizations));
        }
        @CustomType.Setter
        public Builder packedModeTables(List<String> packedModeTables) {
            this.packedModeTables = Objects.requireNonNull(packedModeTables);
            return this;
        }
        public Builder packedModeTables(String... packedModeTables) {
            return packedModeTables(List.of(packedModeTables));
        }
        @CustomType.Setter
        public Builder packingMode(String packingMode) {
            this.packingMode = Objects.requireNonNull(packingMode);
            return this;
        }
        @CustomType.Setter
        public Builder pages(List<String> pages) {
            this.pages = Objects.requireNonNull(pages);
            return this;
        }
        public Builder pages(String... pages) {
            return pages(List.of(pages));
        }
        @CustomType.Setter
        public Builder partnerCode(String partnerCode) {
            this.partnerCode = Objects.requireNonNull(partnerCode);
            return this;
        }
        @CustomType.Setter
        public Builder partners(List<String> partners) {
            this.partners = Objects.requireNonNull(partners);
            return this;
        }
        public Builder partners(String... partners) {
            return partners(List.of(partners));
        }
        @CustomType.Setter
        public Builder passphrase(String passphrase) {
            this.passphrase = Objects.requireNonNull(passphrase);
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        @CustomType.Setter
        public Builder pat(String pat) {
            this.pat = Objects.requireNonNull(pat);
            return this;
        }
        @CustomType.Setter
        public Builder patName(String patName) {
            this.patName = Objects.requireNonNull(patName);
            return this;
        }
        @CustomType.Setter
        public Builder patSecret(String patSecret) {
            this.patSecret = Objects.requireNonNull(patSecret);
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        @CustomType.Setter
        public Builder pattern(String pattern) {
            this.pattern = Objects.requireNonNull(pattern);
            return this;
        }
        @CustomType.Setter
        public Builder pdbName(String pdbName) {
            this.pdbName = Objects.requireNonNull(pdbName);
            return this;
        }
        @CustomType.Setter
        public Builder pemCertificate(String pemCertificate) {
            this.pemCertificate = Objects.requireNonNull(pemCertificate);
            return this;
        }
        @CustomType.Setter
        public Builder pemPrivateKey(String pemPrivateKey) {
            this.pemPrivateKey = Objects.requireNonNull(pemPrivateKey);
            return this;
        }
        @CustomType.Setter
        public Builder perInteractionDimensions(List<String> perInteractionDimensions) {
            this.perInteractionDimensions = Objects.requireNonNull(perInteractionDimensions);
            return this;
        }
        public Builder perInteractionDimensions(String... perInteractionDimensions) {
            return perInteractionDimensions(List.of(perInteractionDimensions));
        }
        @CustomType.Setter
        public Builder personalAccessToken(String personalAccessToken) {
            this.personalAccessToken = Objects.requireNonNull(personalAccessToken);
            return this;
        }
        @CustomType.Setter
        public Builder pgpPassPhrase(String pgpPassPhrase) {
            this.pgpPassPhrase = Objects.requireNonNull(pgpPassPhrase);
            return this;
        }
        @CustomType.Setter
        public Builder pgpSecretKey(String pgpSecretKey) {
            this.pgpSecretKey = Objects.requireNonNull(pgpSecretKey);
            return this;
        }
        @CustomType.Setter
        public Builder phoneNumber(String phoneNumber) {
            this.phoneNumber = Objects.requireNonNull(phoneNumber);
            return this;
        }
        @CustomType.Setter
        public Builder port(String port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder postClickAttributionWindowSize(String postClickAttributionWindowSize) {
            this.postClickAttributionWindowSize = Objects.requireNonNull(postClickAttributionWindowSize);
            return this;
        }
        @CustomType.Setter
        public Builder prebuiltReport(String prebuiltReport) {
            this.prebuiltReport = Objects.requireNonNull(prebuiltReport);
            return this;
        }
        @CustomType.Setter
        public Builder prefix(String prefix) {
            this.prefix = Objects.requireNonNull(prefix);
            return this;
        }
        @CustomType.Setter
        public Builder primaryKeys(List<String> primaryKeys) {
            this.primaryKeys = Objects.requireNonNull(primaryKeys);
            return this;
        }
        public Builder primaryKeys(String... primaryKeys) {
            return primaryKeys(List.of(primaryKeys));
        }
        @CustomType.Setter
        public Builder privateKey(String privateKey) {
            this.privateKey = Objects.requireNonNull(privateKey);
            return this;
        }
        @CustomType.Setter
        public Builder profiles(List<String> profiles) {
            this.profiles = Objects.requireNonNull(profiles);
            return this;
        }
        public Builder profiles(String... profiles) {
            return profiles(List.of(profiles));
        }
        @CustomType.Setter
        public Builder projectCredentials(List<GetConnectorConfigProjectCredential> projectCredentials) {
            this.projectCredentials = Objects.requireNonNull(projectCredentials);
            return this;
        }
        public Builder projectCredentials(GetConnectorConfigProjectCredential... projectCredentials) {
            return projectCredentials(List.of(projectCredentials));
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        @CustomType.Setter
        public Builder projects(List<String> projects) {
            this.projects = Objects.requireNonNull(projects);
            return this;
        }
        public Builder projects(String... projects) {
            return projects(List.of(projects));
        }
        @CustomType.Setter
        public Builder properties(List<String> properties) {
            this.properties = Objects.requireNonNull(properties);
            return this;
        }
        public Builder properties(String... properties) {
            return properties(List.of(properties));
        }
        @CustomType.Setter
        public Builder publicKey(String publicKey) {
            this.publicKey = Objects.requireNonNull(publicKey);
            return this;
        }
        @CustomType.Setter
        public Builder publicationName(String publicationName) {
            this.publicationName = Objects.requireNonNull(publicationName);
            return this;
        }
        @CustomType.Setter
        public Builder queryId(String queryId) {
            this.queryId = Objects.requireNonNull(queryId);
            return this;
        }
        @CustomType.Setter
        public Builder queryParamValue(String queryParamValue) {
            this.queryParamValue = Objects.requireNonNull(queryParamValue);
            return this;
        }
        @CustomType.Setter
        public Builder refreshTokenExpiresAt(String refreshTokenExpiresAt) {
            this.refreshTokenExpiresAt = Objects.requireNonNull(refreshTokenExpiresAt);
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder replicaId(String replicaId) {
            this.replicaId = Objects.requireNonNull(replicaId);
            return this;
        }
        @CustomType.Setter
        public Builder replicationSlot(String replicationSlot) {
            this.replicationSlot = Objects.requireNonNull(replicationSlot);
            return this;
        }
        @CustomType.Setter
        public Builder reportConfigurationIds(List<String> reportConfigurationIds) {
            this.reportConfigurationIds = Objects.requireNonNull(reportConfigurationIds);
            return this;
        }
        public Builder reportConfigurationIds(String... reportConfigurationIds) {
            return reportConfigurationIds(List.of(reportConfigurationIds));
        }
        @CustomType.Setter
        public Builder reportFormatType(String reportFormatType) {
            this.reportFormatType = Objects.requireNonNull(reportFormatType);
            return this;
        }
        @CustomType.Setter
        public Builder reportSuites(List<String> reportSuites) {
            this.reportSuites = Objects.requireNonNull(reportSuites);
            return this;
        }
        public Builder reportSuites(String... reportSuites) {
            return reportSuites(List.of(reportSuites));
        }
        @CustomType.Setter
        public Builder reportTimezone(String reportTimezone) {
            this.reportTimezone = Objects.requireNonNull(reportTimezone);
            return this;
        }
        @CustomType.Setter
        public Builder reportType(String reportType) {
            this.reportType = Objects.requireNonNull(reportType);
            return this;
        }
        @CustomType.Setter
        public Builder reportUrl(String reportUrl) {
            this.reportUrl = Objects.requireNonNull(reportUrl);
            return this;
        }
        @CustomType.Setter
        public Builder reports(List<GetConnectorConfigReport> reports) {
            this.reports = Objects.requireNonNull(reports);
            return this;
        }
        public Builder reports(GetConnectorConfigReport... reports) {
            return reports(List.of(reports));
        }
        @CustomType.Setter
        public Builder reportsLinkedinAds(List<String> reportsLinkedinAds) {
            this.reportsLinkedinAds = Objects.requireNonNull(reportsLinkedinAds);
            return this;
        }
        public Builder reportsLinkedinAds(String... reportsLinkedinAds) {
            return reportsLinkedinAds(List.of(reportsLinkedinAds));
        }
        @CustomType.Setter
        public Builder repositories(List<String> repositories) {
            this.repositories = Objects.requireNonNull(repositories);
            return this;
        }
        public Builder repositories(String... repositories) {
            return repositories(List.of(repositories));
        }
        @CustomType.Setter
        public Builder resourceToken(String resourceToken) {
            this.resourceToken = Objects.requireNonNull(resourceToken);
            return this;
        }
        @CustomType.Setter
        public Builder resourceUrl(String resourceUrl) {
            this.resourceUrl = Objects.requireNonNull(resourceUrl);
            return this;
        }
        @CustomType.Setter
        public Builder restApiLimit(String restApiLimit) {
            this.restApiLimit = Objects.requireNonNull(restApiLimit);
            return this;
        }
        @CustomType.Setter
        public Builder rfcLibraryPath(String rfcLibraryPath) {
            this.rfcLibraryPath = Objects.requireNonNull(rfcLibraryPath);
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        @CustomType.Setter
        public Builder roleArn(String roleArn) {
            this.roleArn = Objects.requireNonNull(roleArn);
            return this;
        }
        @CustomType.Setter
        public Builder rollbackWindowSize(String rollbackWindowSize) {
            this.rollbackWindowSize = Objects.requireNonNull(rollbackWindowSize);
            return this;
        }
        @CustomType.Setter
        public Builder s3Bucket(String s3Bucket) {
            this.s3Bucket = Objects.requireNonNull(s3Bucket);
            return this;
        }
        @CustomType.Setter
        public Builder s3ExportBucket(String s3ExportBucket) {
            this.s3ExportBucket = Objects.requireNonNull(s3ExportBucket);
            return this;
        }
        @CustomType.Setter
        public Builder s3ExportFolder(String s3ExportFolder) {
            this.s3ExportFolder = Objects.requireNonNull(s3ExportFolder);
            return this;
        }
        @CustomType.Setter
        public Builder s3ExportRoleArn(String s3ExportRoleArn) {
            this.s3ExportRoleArn = Objects.requireNonNull(s3ExportRoleArn);
            return this;
        }
        @CustomType.Setter
        public Builder s3RoleArn(String s3RoleArn) {
            this.s3RoleArn = Objects.requireNonNull(s3RoleArn);
            return this;
        }
        @CustomType.Setter
        public Builder s3bucket(String s3bucket) {
            this.s3bucket = Objects.requireNonNull(s3bucket);
            return this;
        }
        @CustomType.Setter
        public Builder s3externalId(String s3externalId) {
            this.s3externalId = Objects.requireNonNull(s3externalId);
            return this;
        }
        @CustomType.Setter
        public Builder s3folder(String s3folder) {
            this.s3folder = Objects.requireNonNull(s3folder);
            return this;
        }
        @CustomType.Setter
        public Builder s3path(String s3path) {
            this.s3path = Objects.requireNonNull(s3path);
            return this;
        }
        @CustomType.Setter
        public Builder s3roleArn(String s3roleArn) {
            this.s3roleArn = Objects.requireNonNull(s3roleArn);
            return this;
        }
        @CustomType.Setter
        public Builder salesAccountSyncMode(String salesAccountSyncMode) {
            this.salesAccountSyncMode = Objects.requireNonNull(salesAccountSyncMode);
            return this;
        }
        @CustomType.Setter
        public Builder salesAccounts(List<String> salesAccounts) {
            this.salesAccounts = Objects.requireNonNull(salesAccounts);
            return this;
        }
        public Builder salesAccounts(String... salesAccounts) {
            return salesAccounts(List.of(salesAccounts));
        }
        @CustomType.Setter
        public Builder salesforceSecurityToken(String salesforceSecurityToken) {
            this.salesforceSecurityToken = Objects.requireNonNull(salesforceSecurityToken);
            return this;
        }
        @CustomType.Setter
        public Builder sandboxAccount(String sandboxAccount) {
            this.sandboxAccount = Objects.requireNonNull(sandboxAccount);
            return this;
        }
        @CustomType.Setter
        public Builder sapSchema(String sapSchema) {
            this.sapSchema = Objects.requireNonNull(sapSchema);
            return this;
        }
        @CustomType.Setter
        public Builder sapUser(String sapUser) {
            this.sapUser = Objects.requireNonNull(sapUser);
            return this;
        }
        @CustomType.Setter
        public Builder saslMechanism(String saslMechanism) {
            this.saslMechanism = Objects.requireNonNull(saslMechanism);
            return this;
        }
        @CustomType.Setter
        public Builder saslPlainKey(String saslPlainKey) {
            this.saslPlainKey = Objects.requireNonNull(saslPlainKey);
            return this;
        }
        @CustomType.Setter
        public Builder saslPlainSecret(String saslPlainSecret) {
            this.saslPlainSecret = Objects.requireNonNull(saslPlainSecret);
            return this;
        }
        @CustomType.Setter
        public Builder saslScram256Key(String saslScram256Key) {
            this.saslScram256Key = Objects.requireNonNull(saslScram256Key);
            return this;
        }
        @CustomType.Setter
        public Builder saslScram256Secret(String saslScram256Secret) {
            this.saslScram256Secret = Objects.requireNonNull(saslScram256Secret);
            return this;
        }
        @CustomType.Setter
        public Builder saslScram512Key(String saslScram512Key) {
            this.saslScram512Key = Objects.requireNonNull(saslScram512Key);
            return this;
        }
        @CustomType.Setter
        public Builder saslScram512Secret(String saslScram512Secret) {
            this.saslScram512Secret = Objects.requireNonNull(saslScram512Secret);
            return this;
        }
        @CustomType.Setter
        public Builder schemaRegistryCredentialsSource(String schemaRegistryCredentialsSource) {
            this.schemaRegistryCredentialsSource = Objects.requireNonNull(schemaRegistryCredentialsSource);
            return this;
        }
        @CustomType.Setter
        public Builder schemaRegistryKey(String schemaRegistryKey) {
            this.schemaRegistryKey = Objects.requireNonNull(schemaRegistryKey);
            return this;
        }
        @CustomType.Setter
        public Builder schemaRegistrySecret(String schemaRegistrySecret) {
            this.schemaRegistrySecret = Objects.requireNonNull(schemaRegistrySecret);
            return this;
        }
        @CustomType.Setter
        public Builder schemaRegistryUrls(List<String> schemaRegistryUrls) {
            this.schemaRegistryUrls = Objects.requireNonNull(schemaRegistryUrls);
            return this;
        }
        public Builder schemaRegistryUrls(String... schemaRegistryUrls) {
            return schemaRegistryUrls(List.of(schemaRegistryUrls));
        }
        @CustomType.Setter
        public Builder secret(String secret) {
            this.secret = Objects.requireNonNull(secret);
            return this;
        }
        @CustomType.Setter
        public Builder secretKey(String secretKey) {
            this.secretKey = Objects.requireNonNull(secretKey);
            return this;
        }
        @CustomType.Setter
        public Builder secrets(String secrets) {
            this.secrets = Objects.requireNonNull(secrets);
            return this;
        }
        @CustomType.Setter
        public Builder secretsLists(List<GetConnectorConfigSecretsList> secretsLists) {
            this.secretsLists = Objects.requireNonNull(secretsLists);
            return this;
        }
        public Builder secretsLists(GetConnectorConfigSecretsList... secretsLists) {
            return secretsLists(List.of(secretsLists));
        }
        @CustomType.Setter
        public Builder securityProtocol(String securityProtocol) {
            this.securityProtocol = Objects.requireNonNull(securityProtocol);
            return this;
        }
        @CustomType.Setter
        public Builder segments(List<String> segments) {
            this.segments = Objects.requireNonNull(segments);
            return this;
        }
        public Builder segments(String... segments) {
            return segments(List.of(segments));
        }
        @CustomType.Setter
        public Builder selectedExports(List<String> selectedExports) {
            this.selectedExports = Objects.requireNonNull(selectedExports);
            return this;
        }
        public Builder selectedExports(String... selectedExports) {
            return selectedExports(List.of(selectedExports));
        }
        @CustomType.Setter
        public Builder senderId(String senderId) {
            this.senderId = Objects.requireNonNull(senderId);
            return this;
        }
        @CustomType.Setter
        public Builder senderPassword(String senderPassword) {
            this.senderPassword = Objects.requireNonNull(senderPassword);
            return this;
        }
        @CustomType.Setter
        public Builder serverAddress(String serverAddress) {
            this.serverAddress = Objects.requireNonNull(serverAddress);
            return this;
        }
        @CustomType.Setter
        public Builder serverUrl(String serverUrl) {
            this.serverUrl = Objects.requireNonNull(serverUrl);
            return this;
        }
        @CustomType.Setter
        public Builder servers(List<String> servers) {
            this.servers = Objects.requireNonNull(servers);
            return this;
        }
        public Builder servers(String... servers) {
            return servers(List.of(servers));
        }
        @CustomType.Setter
        public Builder serviceAccount(String serviceAccount) {
            this.serviceAccount = Objects.requireNonNull(serviceAccount);
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountEmail(String serviceAccountEmail) {
            this.serviceAccountEmail = Objects.requireNonNull(serviceAccountEmail);
            return this;
        }
        @CustomType.Setter
        public Builder serviceAccountKey(String serviceAccountKey) {
            this.serviceAccountKey = Objects.requireNonNull(serviceAccountKey);
            return this;
        }
        @CustomType.Setter
        public Builder serviceVersion(String serviceVersion) {
            this.serviceVersion = Objects.requireNonNull(serviceVersion);
            return this;
        }
        @CustomType.Setter
        public Builder sftpHost(String sftpHost) {
            this.sftpHost = Objects.requireNonNull(sftpHost);
            return this;
        }
        @CustomType.Setter
        public Builder sftpIsKeyPair(String sftpIsKeyPair) {
            this.sftpIsKeyPair = Objects.requireNonNull(sftpIsKeyPair);
            return this;
        }
        @CustomType.Setter
        public Builder sftpPassword(String sftpPassword) {
            this.sftpPassword = Objects.requireNonNull(sftpPassword);
            return this;
        }
        @CustomType.Setter
        public Builder sftpPort(String sftpPort) {
            this.sftpPort = Objects.requireNonNull(sftpPort);
            return this;
        }
        @CustomType.Setter
        public Builder sftpPublicKey(String sftpPublicKey) {
            this.sftpPublicKey = Objects.requireNonNull(sftpPublicKey);
            return this;
        }
        @CustomType.Setter
        public Builder sftpUser(String sftpUser) {
            this.sftpUser = Objects.requireNonNull(sftpUser);
            return this;
        }
        @CustomType.Setter
        public Builder shareUrl(String shareUrl) {
            this.shareUrl = Objects.requireNonNull(shareUrl);
            return this;
        }
        @CustomType.Setter
        public Builder sheetId(String sheetId) {
            this.sheetId = Objects.requireNonNull(sheetId);
            return this;
        }
        @CustomType.Setter
        public Builder shop(String shop) {
            this.shop = Objects.requireNonNull(shop);
            return this;
        }
        @CustomType.Setter
        public Builder shortCode(String shortCode) {
            this.shortCode = Objects.requireNonNull(shortCode);
            return this;
        }
        @CustomType.Setter
        public Builder showRecordsWithNoMetrics(String showRecordsWithNoMetrics) {
            this.showRecordsWithNoMetrics = Objects.requireNonNull(showRecordsWithNoMetrics);
            return this;
        }
        @CustomType.Setter
        public Builder sid(String sid) {
            this.sid = Objects.requireNonNull(sid);
            return this;
        }
        @CustomType.Setter
        public Builder signerPublicKey(String signerPublicKey) {
            this.signerPublicKey = Objects.requireNonNull(signerPublicKey);
            return this;
        }
        @CustomType.Setter
        public Builder siteAddress(String siteAddress) {
            this.siteAddress = Objects.requireNonNull(siteAddress);
            return this;
        }
        @CustomType.Setter
        public Builder siteId(String siteId) {
            this.siteId = Objects.requireNonNull(siteId);
            return this;
        }
        @CustomType.Setter
        public Builder siteName(String siteName) {
            this.siteName = Objects.requireNonNull(siteName);
            return this;
        }
        @CustomType.Setter
        public Builder siteUrls(List<String> siteUrls) {
            this.siteUrls = Objects.requireNonNull(siteUrls);
            return this;
        }
        public Builder siteUrls(String... siteUrls) {
            return siteUrls(List.of(siteUrls));
        }
        @CustomType.Setter
        public Builder skipAfter(String skipAfter) {
            this.skipAfter = Objects.requireNonNull(skipAfter);
            return this;
        }
        @CustomType.Setter
        public Builder skipBefore(String skipBefore) {
            this.skipBefore = Objects.requireNonNull(skipBefore);
            return this;
        }
        @CustomType.Setter
        public Builder soapUri(String soapUri) {
            this.soapUri = Objects.requireNonNull(soapUri);
            return this;
        }
        @CustomType.Setter
        public Builder socialDataSyncTimeframe(String socialDataSyncTimeframe) {
            this.socialDataSyncTimeframe = Objects.requireNonNull(socialDataSyncTimeframe);
            return this;
        }
        @CustomType.Setter
        public Builder source(String source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }
        @CustomType.Setter
        public Builder storeHash(String storeHash) {
            this.storeHash = Objects.requireNonNull(storeHash);
            return this;
        }
        @CustomType.Setter
        public Builder subDomain(String subDomain) {
            this.subDomain = Objects.requireNonNull(subDomain);
            return this;
        }
        @CustomType.Setter
        public Builder subdomain(String subdomain) {
            this.subdomain = Objects.requireNonNull(subdomain);
            return this;
        }
        @CustomType.Setter
        public Builder subscriberName(String subscriberName) {
            this.subscriberName = Objects.requireNonNull(subscriberName);
            return this;
        }
        @CustomType.Setter
        public Builder subscription(String subscription) {
            this.subscription = Objects.requireNonNull(subscription);
            return this;
        }
        @CustomType.Setter
        public Builder supportConnectedAccountsSync(String supportConnectedAccountsSync) {
            this.supportConnectedAccountsSync = Objects.requireNonNull(supportConnectedAccountsSync);
            return this;
        }
        @CustomType.Setter
        public Builder supportNestedColumns(String supportNestedColumns) {
            this.supportNestedColumns = Objects.requireNonNull(supportNestedColumns);
            return this;
        }
        @CustomType.Setter
        public Builder surveyIds(String surveyIds) {
            this.surveyIds = Objects.requireNonNull(surveyIds);
            return this;
        }
        @CustomType.Setter
        public Builder swipeAttributionWindow(String swipeAttributionWindow) {
            this.swipeAttributionWindow = Objects.requireNonNull(swipeAttributionWindow);
            return this;
        }
        @CustomType.Setter
        public Builder syncDataLocker(String syncDataLocker) {
            this.syncDataLocker = Objects.requireNonNull(syncDataLocker);
            return this;
        }
        @CustomType.Setter
        public Builder syncFormat(String syncFormat) {
            this.syncFormat = Objects.requireNonNull(syncFormat);
            return this;
        }
        @CustomType.Setter
        public Builder syncFormulaFields(String syncFormulaFields) {
            this.syncFormulaFields = Objects.requireNonNull(syncFormulaFields);
            return this;
        }
        @CustomType.Setter
        public Builder syncMetadata(String syncMetadata) {
            this.syncMetadata = Objects.requireNonNull(syncMetadata);
            return this;
        }
        @CustomType.Setter
        public Builder syncMethod(String syncMethod) {
            this.syncMethod = Objects.requireNonNull(syncMethod);
            return this;
        }
        @CustomType.Setter
        public Builder syncMode(String syncMode) {
            this.syncMode = Objects.requireNonNull(syncMode);
            return this;
        }
        @CustomType.Setter
        public Builder syncMultipleAccounts(String syncMultipleAccounts) {
            this.syncMultipleAccounts = Objects.requireNonNull(syncMultipleAccounts);
            return this;
        }
        @CustomType.Setter
        public Builder syncPackMode(String syncPackMode) {
            this.syncPackMode = Objects.requireNonNull(syncPackMode);
            return this;
        }
        @CustomType.Setter
        public Builder syncPullApi(String syncPullApi) {
            this.syncPullApi = Objects.requireNonNull(syncPullApi);
            return this;
        }
        @CustomType.Setter
        public Builder syncType(String syncType) {
            this.syncType = Objects.requireNonNull(syncType);
            return this;
        }
        @CustomType.Setter
        public Builder sysnr(String sysnr) {
            this.sysnr = Objects.requireNonNull(sysnr);
            return this;
        }
        @CustomType.Setter
        public Builder tableName(String tableName) {
            this.tableName = Objects.requireNonNull(tableName);
            return this;
        }
        @CustomType.Setter
        public Builder tdeCertificate(String tdeCertificate) {
            this.tdeCertificate = Objects.requireNonNull(tdeCertificate);
            return this;
        }
        @CustomType.Setter
        public Builder tdeCertificateName(String tdeCertificateName) {
            this.tdeCertificateName = Objects.requireNonNull(tdeCertificateName);
            return this;
        }
        @CustomType.Setter
        public Builder tdePassword(String tdePassword) {
            this.tdePassword = Objects.requireNonNull(tdePassword);
            return this;
        }
        @CustomType.Setter
        public Builder tdePrivateKey(String tdePrivateKey) {
            this.tdePrivateKey = Objects.requireNonNull(tdePrivateKey);
            return this;
        }
        @CustomType.Setter
        public Builder teamId(String teamId) {
            this.teamId = Objects.requireNonNull(teamId);
            return this;
        }
        @CustomType.Setter
        public Builder technicalAccountId(String technicalAccountId) {
            this.technicalAccountId = Objects.requireNonNull(technicalAccountId);
            return this;
        }
        @CustomType.Setter
        public Builder templateLabels(List<String> templateLabels) {
            this.templateLabels = Objects.requireNonNull(templateLabels);
            return this;
        }
        public Builder templateLabels(String... templateLabels) {
            return templateLabels(List.of(templateLabels));
        }
        @CustomType.Setter
        public Builder tenant(String tenant) {
            this.tenant = Objects.requireNonNull(tenant);
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            this.tenantId = Objects.requireNonNull(tenantId);
            return this;
        }
        @CustomType.Setter
        public Builder testTableName(String testTableName) {
            this.testTableName = Objects.requireNonNull(testTableName);
            return this;
        }
        @CustomType.Setter
        public Builder timeZone(String timeZone) {
            this.timeZone = Objects.requireNonNull(timeZone);
            return this;
        }
        @CustomType.Setter
        public Builder timeframeMonths(String timeframeMonths) {
            this.timeframeMonths = Objects.requireNonNull(timeframeMonths);
            return this;
        }
        @CustomType.Setter
        public Builder tns(String tns) {
            this.tns = Objects.requireNonNull(tns);
            return this;
        }
        @CustomType.Setter
        public Builder tokenAuthenticatedContainer(String tokenAuthenticatedContainer) {
            this.tokenAuthenticatedContainer = Objects.requireNonNull(tokenAuthenticatedContainer);
            return this;
        }
        @CustomType.Setter
        public Builder tokenAuthenticatedDatabase(String tokenAuthenticatedDatabase) {
            this.tokenAuthenticatedDatabase = Objects.requireNonNull(tokenAuthenticatedDatabase);
            return this;
        }
        @CustomType.Setter
        public Builder tokenId(String tokenId) {
            this.tokenId = Objects.requireNonNull(tokenId);
            return this;
        }
        @CustomType.Setter
        public Builder tokenKey(String tokenKey) {
            this.tokenKey = Objects.requireNonNull(tokenKey);
            return this;
        }
        @CustomType.Setter
        public Builder tokenSecret(String tokenSecret) {
            this.tokenSecret = Objects.requireNonNull(tokenSecret);
            return this;
        }
        @CustomType.Setter
        public Builder tokenSecretKey(String tokenSecretKey) {
            this.tokenSecretKey = Objects.requireNonNull(tokenSecretKey);
            return this;
        }
        @CustomType.Setter
        public Builder topics(List<String> topics) {
            this.topics = Objects.requireNonNull(topics);
            return this;
        }
        public Builder topics(String... topics) {
            return topics(List.of(topics));
        }
        @CustomType.Setter
        public Builder trustStoreType(String trustStoreType) {
            this.trustStoreType = Objects.requireNonNull(trustStoreType);
            return this;
        }
        @CustomType.Setter
        public Builder trustedCert(String trustedCert) {
            this.trustedCert = Objects.requireNonNull(trustedCert);
            return this;
        }
        @CustomType.Setter
        public Builder truststore(String truststore) {
            this.truststore = Objects.requireNonNull(truststore);
            return this;
        }
        @CustomType.Setter
        public Builder tunnelHost(String tunnelHost) {
            this.tunnelHost = Objects.requireNonNull(tunnelHost);
            return this;
        }
        @CustomType.Setter
        public Builder tunnelPort(String tunnelPort) {
            this.tunnelPort = Objects.requireNonNull(tunnelPort);
            return this;
        }
        @CustomType.Setter
        public Builder tunnelUser(String tunnelUser) {
            this.tunnelUser = Objects.requireNonNull(tunnelUser);
            return this;
        }
        @CustomType.Setter
        public Builder uniqueId(String uniqueId) {
            this.uniqueId = Objects.requireNonNull(uniqueId);
            return this;
        }
        @CustomType.Setter
        public Builder updateConfigOnEachSync(String updateConfigOnEachSync) {
            this.updateConfigOnEachSync = Objects.requireNonNull(updateConfigOnEachSync);
            return this;
        }
        @CustomType.Setter
        public Builder updateMethod(String updateMethod) {
            this.updateMethod = Objects.requireNonNull(updateMethod);
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            this.uri = Objects.requireNonNull(uri);
            return this;
        }
        @CustomType.Setter
        public Builder useApiKeys(String useApiKeys) {
            this.useApiKeys = Objects.requireNonNull(useApiKeys);
            return this;
        }
        @CustomType.Setter
        public Builder useCustomerBucket(String useCustomerBucket) {
            this.useCustomerBucket = Objects.requireNonNull(useCustomerBucket);
            return this;
        }
        @CustomType.Setter
        public Builder useOracleRac(String useOracleRac) {
            this.useOracleRac = Objects.requireNonNull(useOracleRac);
            return this;
        }
        @CustomType.Setter
        public Builder usePgpEncryptionOptions(String usePgpEncryptionOptions) {
            this.usePgpEncryptionOptions = Objects.requireNonNull(usePgpEncryptionOptions);
            return this;
        }
        @CustomType.Setter
        public Builder useServiceAccount(String useServiceAccount) {
            this.useServiceAccount = Objects.requireNonNull(useServiceAccount);
            return this;
        }
        @CustomType.Setter
        public Builder useTemplateLabels(String useTemplateLabels) {
            this.useTemplateLabels = Objects.requireNonNull(useTemplateLabels);
            return this;
        }
        @CustomType.Setter
        public Builder useWebhooks(String useWebhooks) {
            this.useWebhooks = Objects.requireNonNull(useWebhooks);
            return this;
        }
        @CustomType.Setter
        public Builder useWorkspace(String useWorkspace) {
            this.useWorkspace = Objects.requireNonNull(useWorkspace);
            return this;
        }
        @CustomType.Setter
        public Builder user(String user) {
            this.user = Objects.requireNonNull(user);
            return this;
        }
        @CustomType.Setter
        public Builder userId(String userId) {
            this.userId = Objects.requireNonNull(userId);
            return this;
        }
        @CustomType.Setter
        public Builder userKey(String userKey) {
            this.userKey = Objects.requireNonNull(userKey);
            return this;
        }
        @CustomType.Setter
        public Builder userName(String userName) {
            this.userName = Objects.requireNonNull(userName);
            return this;
        }
        @CustomType.Setter
        public Builder userProfiles(List<String> userProfiles) {
            this.userProfiles = Objects.requireNonNull(userProfiles);
            return this;
        }
        public Builder userProfiles(String... userProfiles) {
            return userProfiles(List.of(userProfiles));
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        @CustomType.Setter
        public Builder viewAttributionWindow(String viewAttributionWindow) {
            this.viewAttributionWindow = Objects.requireNonNull(viewAttributionWindow);
            return this;
        }
        @CustomType.Setter
        public Builder viewThroughAttributionWindowSize(String viewThroughAttributionWindowSize) {
            this.viewThroughAttributionWindowSize = Objects.requireNonNull(viewThroughAttributionWindowSize);
            return this;
        }
        @CustomType.Setter
        public Builder webhookEndpoint(String webhookEndpoint) {
            this.webhookEndpoint = Objects.requireNonNull(webhookEndpoint);
            return this;
        }
        @CustomType.Setter
        public Builder webhookKey(String webhookKey) {
            this.webhookKey = Objects.requireNonNull(webhookKey);
            return this;
        }
        @CustomType.Setter
        public Builder webhookUrl(String webhookUrl) {
            this.webhookUrl = Objects.requireNonNull(webhookUrl);
            return this;
        }
        @CustomType.Setter
        public Builder wordPressSiteIdOrWoocommerceDomainName(String wordPressSiteIdOrWoocommerceDomainName) {
            this.wordPressSiteIdOrWoocommerceDomainName = Objects.requireNonNull(wordPressSiteIdOrWoocommerceDomainName);
            return this;
        }
        @CustomType.Setter
        public Builder workspaceName(String workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }
        @CustomType.Setter
        public Builder workspaceSameAsSource(String workspaceSameAsSource) {
            this.workspaceSameAsSource = Objects.requireNonNull(workspaceSameAsSource);
            return this;
        }
        @CustomType.Setter
        public Builder workspaceSchema(String workspaceSchema) {
            this.workspaceSchema = Objects.requireNonNull(workspaceSchema);
            return this;
        }
        @CustomType.Setter
        public Builder wsCertificate(String wsCertificate) {
            this.wsCertificate = Objects.requireNonNull(wsCertificate);
            return this;
        }
        public GetConnectorConfig build() {
            final var o = new GetConnectorConfig();
            o.absConnectionMethod = absConnectionMethod;
            o.absConnectionString = absConnectionString;
            o.absContainerAddress = absContainerAddress;
            o.absContainerName = absContainerName;
            o.absHostIp = absHostIp;
            o.absHostUser = absHostUser;
            o.absPrefix = absPrefix;
            o.absPublicKey = absPublicKey;
            o.accessKey = accessKey;
            o.accessKeyId = accessKeyId;
            o.accessKeySecret = accessKeySecret;
            o.accessToken = accessToken;
            o.accessType = accessType;
            o.account = account;
            o.accountId = accountId;
            o.accountIds = accountIds;
            o.accountKey = accountKey;
            o.accountName = accountName;
            o.accountSyncMode = accountSyncMode;
            o.accounts = accounts;
            o.accountsRedditAds = accountsRedditAds;
            o.accountsSyncMode = accountsSyncMode;
            o.actionBreakdowns = actionBreakdowns;
            o.actionReportTime = actionReportTime;
            o.adAnalytics = adAnalytics;
            o.adUnitView = adUnitView;
            o.adminApiKey = adminApiKey;
            o.adobeAnalyticsConfigurations = adobeAnalyticsConfigurations;
            o.advertisables = advertisables;
            o.advertisers = advertisers;
            o.advertisersIds = advertisersIds;
            o.advertisersSyncMode = advertisersSyncMode;
            o.agentHost = agentHost;
            o.agentOraHome = agentOraHome;
            o.agentPassword = agentPassword;
            o.agentPort = agentPort;
            o.agentPublicCert = agentPublicCert;
            o.agentUser = agentUser;
            o.aggregation = aggregation;
            o.alwaysEncrypted = alwaysEncrypted;
            o.apiAccessToken = apiAccessToken;
            o.apiId = apiId;
            o.apiKey = apiKey;
            o.apiKeyApiSecret = apiKeyApiSecret;
            o.apiKeys = apiKeys;
            o.apiQuota = apiQuota;
            o.apiRequestsPerMinute = apiRequestsPerMinute;
            o.apiSecret = apiSecret;
            o.apiSecretKey = apiSecretKey;
            o.apiToken = apiToken;
            o.apiType = apiType;
            o.apiUrl = apiUrl;
            o.apiUsage = apiUsage;
            o.apiUtilizationPercentage = apiUtilizationPercentage;
            o.apiVersion = apiVersion;
            o.appId = appId;
            o.appIds = appIds;
            o.appIdsAppsflyers = appIdsAppsflyers;
            o.appKey = appKey;
            o.appSpecificPassword = appSpecificPassword;
            o.appSyncMode = appSyncMode;
            o.appendFileOption = appendFileOption;
            o.applicationKey = applicationKey;
            o.apps = apps;
            o.archiveLogFormat = archiveLogFormat;
            o.archiveLogPath = archiveLogPath;
            o.archivePattern = archivePattern;
            o.areSoapCredentialsProvided = areSoapCredentialsProvided;
            o.asbIp = asbIp;
            o.asmOption = asmOption;
            o.asmOracleHome = asmOracleHome;
            o.asmPassword = asmPassword;
            o.asmTns = asmTns;
            o.asmUser = asmUser;
            o.attributionWindow = attributionWindow;
            o.attributionWindowSize = attributionWindowSize;
            o.auth = auth;
            o.authMethod = authMethod;
            o.authMode = authMode;
            o.authType = authType;
            o.authorizationMethod = authorizationMethod;
            o.awsRegionCode = awsRegionCode;
            o.baseCurrency = baseCurrency;
            o.baseDomain = baseDomain;
            o.baseId = baseId;
            o.baseUrl = baseUrl;
            o.bearerToken = bearerToken;
            o.blobSasUrl = blobSasUrl;
            o.breakdowns = breakdowns;
            o.bucket = bucket;
            o.bucketName = bucketName;
            o.bucketService = bucketService;
            o.businessId = businessId;
            o.businessUnitId = businessUnitId;
            o.certificate = certificate;
            o.clickAttributionWindow = clickAttributionWindow;
            o.client = client;
            o.clientCert = clientCert;
            o.clientCertKey = clientCertKey;
            o.clientId = clientId;
            o.clientKey = clientKey;
            o.clientName = clientName;
            o.clientSecret = clientSecret;
            o.cloudStorageType = cloudStorageType;
            o.columns = columns;
            o.companyId = companyId;
            o.companyKey = companyKey;
            o.companyRequestToken = companyRequestToken;
            o.companyUuid = companyUuid;
            o.compression = compression;
            o.configMethod = configMethod;
            o.configRepositoryUrl = configRepositoryUrl;
            o.configType = configType;
            o.connectingUser = connectingUser;
            o.connectingUserEmail = connectingUserEmail;
            o.connectionMethod = connectionMethod;
            o.connectionString = connectionString;
            o.connectionType = connectionType;
            o.consumerGroup = consumerGroup;
            o.consumerKey = consumerKey;
            o.consumerSecret = consumerSecret;
            o.containerAddress = containerAddress;
            o.containerName = containerName;
            o.contentOwnerId = contentOwnerId;
            o.conversationWebhookUrl = conversationWebhookUrl;
            o.conversionDimensions = conversionDimensions;
            o.conversionReportTime = conversionReportTime;
            o.conversionWindowSize = conversionWindowSize;
            o.csvDefinition = csvDefinition;
            o.currency = currency;
            o.customEventSyncMode = customEventSyncMode;
            o.customEvents = customEvents;
            o.customFieldIds = customFieldIds;
            o.customFloodlightVariables = customFloodlightVariables;
            o.customReports = customReports;
            o.customTables = customTables;
            o.customerId = customerId;
            o.customerListId = customerListId;
            o.dailyApiCallLimit = dailyApiCallLimit;
            o.dataAccessMethod = dataAccessMethod;
            o.dataCenter = dataCenter;
            o.dataSetName = dataSetName;
            o.database = database;
            o.datasetId = datasetId;
            o.datasource = datasource;
            o.dateGranularity = dateGranularity;
            o.delimiter = delimiter;
            o.dimensionAttributes = dimensionAttributes;
            o.dimensions = dimensions;
            o.distributedConnectorClusterSize = distributedConnectorClusterSize;
            o.domain = domain;
            o.domainHostName = domainHostName;
            o.domainName = domainName;
            o.domainType = domainType;
            o.elements = elements;
            o.email = email;
            o.emptyHeader = emptyHeader;
            o.enableAllDimensionCombinations = enableAllDimensionCombinations;
            o.enableArchiveLogOnly = enableArchiveLogOnly;
            o.enableDataExtensionsSyncing = enableDataExtensionsSyncing;
            o.enableDistributedConnectorMode = enableDistributedConnectorMode;
            o.enableEnrichments = enableEnrichments;
            o.enableExports = enableExports;
            o.enableTde = enableTde;
            o.encodedPublicKey = encodedPublicKey;
            o.encryptionKey = encryptionKey;
            o.endpoint = endpoint;
            o.engagementAttributionWindow = engagementAttributionWindow;
            o.enrichedExport = enrichedExport;
            o.entityId = entityId;
            o.environment = environment;
            o.escapeChar = escapeChar;
            o.euRegion = euRegion;
            o.events = events;
            o.exportStorageType = exportStorageType;
            o.externalId = externalId;
            o.fields = fields;
            o.fileType = fileType;
            o.filter = filter;
            o.financeAccountSyncMode = financeAccountSyncMode;
            o.financeAccounts = financeAccounts;
            o.folder = folder;
            o.folderId = folderId;
            o.folderPath = folderPath;
            o.forecastId = forecastId;
            o.ftpHost = ftpHost;
            o.ftpPassword = ftpPassword;
            o.ftpPort = ftpPort;
            o.ftpUser = ftpUser;
            o.function = function;
            o.functionApp = functionApp;
            o.functionKey = functionKey;
            o.functionName = functionName;
            o.functionTrigger = functionTrigger;
            o.gcsBucket = gcsBucket;
            o.gcsFolder = gcsFolder;
            o.groupName = groupName;
            o.hasManagePermissions = hasManagePermissions;
            o.homeFolder = homeFolder;
            o.host = host;
            o.hostIp = hostIp;
            o.hostUser = hostUser;
            o.hosts = hosts;
            o.identity = identity;
            o.includeOcapiEndpoints = includeOcapiEndpoints;
            o.instance = instance;
            o.instanceNumber = instanceNumber;
            o.instanceUrl = instanceUrl;
            o.integrationKey = integrationKey;
            o.isAccountLevelConnector = isAccountLevelConnector;
            o.isAuth2Enabled = isAuth2Enabled;
            o.isCustomApiCredentials = isCustomApiCredentials;
            o.isExternalActivitiesEndpointSelected = isExternalActivitiesEndpointSelected;
            o.isFtps = isFtps;
            o.isKeypair = isKeypair;
            o.isMultiEntityFeatureEnabled = isMultiEntityFeatureEnabled;
            o.isNewPackage = isNewPackage;
            o.isPrivateKeyEncrypted = isPrivateKeyEncrypted;
            o.isPrivateLinkRequired = isPrivateLinkRequired;
            o.isPublic = isPublic;
            o.isSailthruConnectEnabled = isSailthruConnectEnabled;
            o.isSecure = isSecure;
            o.isSingleTableMode = isSingleTableMode;
            o.isVendor = isVendor;
            o.jsonDeliveryMode = jsonDeliveryMode;
            o.key = key;
            o.keyPassword = keyPassword;
            o.keyStoreType = keyStoreType;
            o.keystore = keystore;
            o.keystorePassword = keystorePassword;
            o.lastSyncedChangesUtc_ = lastSyncedChangesUtc_;
            o.latestVersion = latestVersion;
            o.limitForApiCallsToExternalActivitiesEndpoint = limitForApiCallsToExternalActivitiesEndpoint;
            o.lineSeparator = lineSeparator;
            o.listStrategy = listStrategy;
            o.listSyncMode = listSyncMode;
            o.logJournal = logJournal;
            o.logJournalSchema = logJournalSchema;
            o.login = login;
            o.loginPassword = loginPassword;
            o.managerAccounts = managerAccounts;
            o.merchantId = merchantId;
            o.messageType = messageType;
            o.metrics = metrics;
            o.namedRange = namedRange;
            o.namespace = namespace;
            o.networkCode = networkCode;
            o.nullSequence = nullSequence;
            o.oauthToken = oauthToken;
            o.oauthTokenSecret = oauthTokenSecret;
            o.ocapiClientId = ocapiClientId;
            o.ocapiClientSecret = ocapiClientSecret;
            o.ocapiCustomObjectTypes = ocapiCustomObjectTypes;
            o.ocapiHostname = ocapiHostname;
            o.onError = onError;
            o.onPremise = onPremise;
            o.organization = organization;
            o.organizationId = organizationId;
            o.organizations = organizations;
            o.packedModeTables = packedModeTables;
            o.packingMode = packingMode;
            o.pages = pages;
            o.partnerCode = partnerCode;
            o.partners = partners;
            o.passphrase = passphrase;
            o.password = password;
            o.pat = pat;
            o.patName = patName;
            o.patSecret = patSecret;
            o.path = path;
            o.pattern = pattern;
            o.pdbName = pdbName;
            o.pemCertificate = pemCertificate;
            o.pemPrivateKey = pemPrivateKey;
            o.perInteractionDimensions = perInteractionDimensions;
            o.personalAccessToken = personalAccessToken;
            o.pgpPassPhrase = pgpPassPhrase;
            o.pgpSecretKey = pgpSecretKey;
            o.phoneNumber = phoneNumber;
            o.port = port;
            o.postClickAttributionWindowSize = postClickAttributionWindowSize;
            o.prebuiltReport = prebuiltReport;
            o.prefix = prefix;
            o.primaryKeys = primaryKeys;
            o.privateKey = privateKey;
            o.profiles = profiles;
            o.projectCredentials = projectCredentials;
            o.projectId = projectId;
            o.projects = projects;
            o.properties = properties;
            o.publicKey = publicKey;
            o.publicationName = publicationName;
            o.queryId = queryId;
            o.queryParamValue = queryParamValue;
            o.refreshTokenExpiresAt = refreshTokenExpiresAt;
            o.region = region;
            o.replicaId = replicaId;
            o.replicationSlot = replicationSlot;
            o.reportConfigurationIds = reportConfigurationIds;
            o.reportFormatType = reportFormatType;
            o.reportSuites = reportSuites;
            o.reportTimezone = reportTimezone;
            o.reportType = reportType;
            o.reportUrl = reportUrl;
            o.reports = reports;
            o.reportsLinkedinAds = reportsLinkedinAds;
            o.repositories = repositories;
            o.resourceToken = resourceToken;
            o.resourceUrl = resourceUrl;
            o.restApiLimit = restApiLimit;
            o.rfcLibraryPath = rfcLibraryPath;
            o.role = role;
            o.roleArn = roleArn;
            o.rollbackWindowSize = rollbackWindowSize;
            o.s3Bucket = s3Bucket;
            o.s3ExportBucket = s3ExportBucket;
            o.s3ExportFolder = s3ExportFolder;
            o.s3ExportRoleArn = s3ExportRoleArn;
            o.s3RoleArn = s3RoleArn;
            o.s3bucket = s3bucket;
            o.s3externalId = s3externalId;
            o.s3folder = s3folder;
            o.s3path = s3path;
            o.s3roleArn = s3roleArn;
            o.salesAccountSyncMode = salesAccountSyncMode;
            o.salesAccounts = salesAccounts;
            o.salesforceSecurityToken = salesforceSecurityToken;
            o.sandboxAccount = sandboxAccount;
            o.sapSchema = sapSchema;
            o.sapUser = sapUser;
            o.saslMechanism = saslMechanism;
            o.saslPlainKey = saslPlainKey;
            o.saslPlainSecret = saslPlainSecret;
            o.saslScram256Key = saslScram256Key;
            o.saslScram256Secret = saslScram256Secret;
            o.saslScram512Key = saslScram512Key;
            o.saslScram512Secret = saslScram512Secret;
            o.schemaRegistryCredentialsSource = schemaRegistryCredentialsSource;
            o.schemaRegistryKey = schemaRegistryKey;
            o.schemaRegistrySecret = schemaRegistrySecret;
            o.schemaRegistryUrls = schemaRegistryUrls;
            o.secret = secret;
            o.secretKey = secretKey;
            o.secrets = secrets;
            o.secretsLists = secretsLists;
            o.securityProtocol = securityProtocol;
            o.segments = segments;
            o.selectedExports = selectedExports;
            o.senderId = senderId;
            o.senderPassword = senderPassword;
            o.serverAddress = serverAddress;
            o.serverUrl = serverUrl;
            o.servers = servers;
            o.serviceAccount = serviceAccount;
            o.serviceAccountEmail = serviceAccountEmail;
            o.serviceAccountKey = serviceAccountKey;
            o.serviceVersion = serviceVersion;
            o.sftpHost = sftpHost;
            o.sftpIsKeyPair = sftpIsKeyPair;
            o.sftpPassword = sftpPassword;
            o.sftpPort = sftpPort;
            o.sftpPublicKey = sftpPublicKey;
            o.sftpUser = sftpUser;
            o.shareUrl = shareUrl;
            o.sheetId = sheetId;
            o.shop = shop;
            o.shortCode = shortCode;
            o.showRecordsWithNoMetrics = showRecordsWithNoMetrics;
            o.sid = sid;
            o.signerPublicKey = signerPublicKey;
            o.siteAddress = siteAddress;
            o.siteId = siteId;
            o.siteName = siteName;
            o.siteUrls = siteUrls;
            o.skipAfter = skipAfter;
            o.skipBefore = skipBefore;
            o.soapUri = soapUri;
            o.socialDataSyncTimeframe = socialDataSyncTimeframe;
            o.source = source;
            o.storeHash = storeHash;
            o.subDomain = subDomain;
            o.subdomain = subdomain;
            o.subscriberName = subscriberName;
            o.subscription = subscription;
            o.supportConnectedAccountsSync = supportConnectedAccountsSync;
            o.supportNestedColumns = supportNestedColumns;
            o.surveyIds = surveyIds;
            o.swipeAttributionWindow = swipeAttributionWindow;
            o.syncDataLocker = syncDataLocker;
            o.syncFormat = syncFormat;
            o.syncFormulaFields = syncFormulaFields;
            o.syncMetadata = syncMetadata;
            o.syncMethod = syncMethod;
            o.syncMode = syncMode;
            o.syncMultipleAccounts = syncMultipleAccounts;
            o.syncPackMode = syncPackMode;
            o.syncPullApi = syncPullApi;
            o.syncType = syncType;
            o.sysnr = sysnr;
            o.tableName = tableName;
            o.tdeCertificate = tdeCertificate;
            o.tdeCertificateName = tdeCertificateName;
            o.tdePassword = tdePassword;
            o.tdePrivateKey = tdePrivateKey;
            o.teamId = teamId;
            o.technicalAccountId = technicalAccountId;
            o.templateLabels = templateLabels;
            o.tenant = tenant;
            o.tenantId = tenantId;
            o.testTableName = testTableName;
            o.timeZone = timeZone;
            o.timeframeMonths = timeframeMonths;
            o.tns = tns;
            o.tokenAuthenticatedContainer = tokenAuthenticatedContainer;
            o.tokenAuthenticatedDatabase = tokenAuthenticatedDatabase;
            o.tokenId = tokenId;
            o.tokenKey = tokenKey;
            o.tokenSecret = tokenSecret;
            o.tokenSecretKey = tokenSecretKey;
            o.topics = topics;
            o.trustStoreType = trustStoreType;
            o.trustedCert = trustedCert;
            o.truststore = truststore;
            o.tunnelHost = tunnelHost;
            o.tunnelPort = tunnelPort;
            o.tunnelUser = tunnelUser;
            o.uniqueId = uniqueId;
            o.updateConfigOnEachSync = updateConfigOnEachSync;
            o.updateMethod = updateMethod;
            o.uri = uri;
            o.useApiKeys = useApiKeys;
            o.useCustomerBucket = useCustomerBucket;
            o.useOracleRac = useOracleRac;
            o.usePgpEncryptionOptions = usePgpEncryptionOptions;
            o.useServiceAccount = useServiceAccount;
            o.useTemplateLabels = useTemplateLabels;
            o.useWebhooks = useWebhooks;
            o.useWorkspace = useWorkspace;
            o.user = user;
            o.userId = userId;
            o.userKey = userKey;
            o.userName = userName;
            o.userProfiles = userProfiles;
            o.username = username;
            o.viewAttributionWindow = viewAttributionWindow;
            o.viewThroughAttributionWindowSize = viewThroughAttributionWindowSize;
            o.webhookEndpoint = webhookEndpoint;
            o.webhookKey = webhookKey;
            o.webhookUrl = webhookUrl;
            o.wordPressSiteIdOrWoocommerceDomainName = wordPressSiteIdOrWoocommerceDomainName;
            o.workspaceName = workspaceName;
            o.workspaceSameAsSource = workspaceSameAsSource;
            o.workspaceSchema = workspaceSchema;
            o.wsCertificate = wsCertificate;
            return o;
        }
    }
}
