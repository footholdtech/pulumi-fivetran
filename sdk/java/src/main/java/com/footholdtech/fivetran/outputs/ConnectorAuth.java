// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.outputs;

import com.footholdtech.fivetran.outputs.ConnectorAuthClientAccess;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectorAuth {
    private @Nullable String accessToken;
    private @Nullable String awsAccessKey;
    private @Nullable String awsSecretKey;
    private @Nullable ConnectorAuthClientAccess clientAccess;
    private @Nullable String clientId;
    private @Nullable String clientSecret;
    private @Nullable String consumerKey;
    private @Nullable String consumerSecret;
    private @Nullable String keyId;
    private @Nullable String oauthToken;
    private @Nullable String oauthTokenSecret;
    private @Nullable String previousRefreshToken;
    private @Nullable String realmId;
    private @Nullable String refreshToken;
    private @Nullable String roleArn;
    private @Nullable String teamId;
    private @Nullable String userAccessToken;

    private ConnectorAuth() {}
    public Optional<String> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }
    public Optional<String> awsAccessKey() {
        return Optional.ofNullable(this.awsAccessKey);
    }
    public Optional<String> awsSecretKey() {
        return Optional.ofNullable(this.awsSecretKey);
    }
    public Optional<ConnectorAuthClientAccess> clientAccess() {
        return Optional.ofNullable(this.clientAccess);
    }
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }
    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }
    public Optional<String> consumerKey() {
        return Optional.ofNullable(this.consumerKey);
    }
    public Optional<String> consumerSecret() {
        return Optional.ofNullable(this.consumerSecret);
    }
    public Optional<String> keyId() {
        return Optional.ofNullable(this.keyId);
    }
    public Optional<String> oauthToken() {
        return Optional.ofNullable(this.oauthToken);
    }
    public Optional<String> oauthTokenSecret() {
        return Optional.ofNullable(this.oauthTokenSecret);
    }
    public Optional<String> previousRefreshToken() {
        return Optional.ofNullable(this.previousRefreshToken);
    }
    public Optional<String> realmId() {
        return Optional.ofNullable(this.realmId);
    }
    public Optional<String> refreshToken() {
        return Optional.ofNullable(this.refreshToken);
    }
    public Optional<String> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }
    public Optional<String> teamId() {
        return Optional.ofNullable(this.teamId);
    }
    public Optional<String> userAccessToken() {
        return Optional.ofNullable(this.userAccessToken);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectorAuth defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accessToken;
        private @Nullable String awsAccessKey;
        private @Nullable String awsSecretKey;
        private @Nullable ConnectorAuthClientAccess clientAccess;
        private @Nullable String clientId;
        private @Nullable String clientSecret;
        private @Nullable String consumerKey;
        private @Nullable String consumerSecret;
        private @Nullable String keyId;
        private @Nullable String oauthToken;
        private @Nullable String oauthTokenSecret;
        private @Nullable String previousRefreshToken;
        private @Nullable String realmId;
        private @Nullable String refreshToken;
        private @Nullable String roleArn;
        private @Nullable String teamId;
        private @Nullable String userAccessToken;
        public Builder() {}
        public Builder(ConnectorAuth defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessToken = defaults.accessToken;
    	      this.awsAccessKey = defaults.awsAccessKey;
    	      this.awsSecretKey = defaults.awsSecretKey;
    	      this.clientAccess = defaults.clientAccess;
    	      this.clientId = defaults.clientId;
    	      this.clientSecret = defaults.clientSecret;
    	      this.consumerKey = defaults.consumerKey;
    	      this.consumerSecret = defaults.consumerSecret;
    	      this.keyId = defaults.keyId;
    	      this.oauthToken = defaults.oauthToken;
    	      this.oauthTokenSecret = defaults.oauthTokenSecret;
    	      this.previousRefreshToken = defaults.previousRefreshToken;
    	      this.realmId = defaults.realmId;
    	      this.refreshToken = defaults.refreshToken;
    	      this.roleArn = defaults.roleArn;
    	      this.teamId = defaults.teamId;
    	      this.userAccessToken = defaults.userAccessToken;
        }

        @CustomType.Setter
        public Builder accessToken(@Nullable String accessToken) {
            this.accessToken = accessToken;
            return this;
        }
        @CustomType.Setter
        public Builder awsAccessKey(@Nullable String awsAccessKey) {
            this.awsAccessKey = awsAccessKey;
            return this;
        }
        @CustomType.Setter
        public Builder awsSecretKey(@Nullable String awsSecretKey) {
            this.awsSecretKey = awsSecretKey;
            return this;
        }
        @CustomType.Setter
        public Builder clientAccess(@Nullable ConnectorAuthClientAccess clientAccess) {
            this.clientAccess = clientAccess;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(@Nullable String clientId) {
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder clientSecret(@Nullable String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        @CustomType.Setter
        public Builder consumerKey(@Nullable String consumerKey) {
            this.consumerKey = consumerKey;
            return this;
        }
        @CustomType.Setter
        public Builder consumerSecret(@Nullable String consumerSecret) {
            this.consumerSecret = consumerSecret;
            return this;
        }
        @CustomType.Setter
        public Builder keyId(@Nullable String keyId) {
            this.keyId = keyId;
            return this;
        }
        @CustomType.Setter
        public Builder oauthToken(@Nullable String oauthToken) {
            this.oauthToken = oauthToken;
            return this;
        }
        @CustomType.Setter
        public Builder oauthTokenSecret(@Nullable String oauthTokenSecret) {
            this.oauthTokenSecret = oauthTokenSecret;
            return this;
        }
        @CustomType.Setter
        public Builder previousRefreshToken(@Nullable String previousRefreshToken) {
            this.previousRefreshToken = previousRefreshToken;
            return this;
        }
        @CustomType.Setter
        public Builder realmId(@Nullable String realmId) {
            this.realmId = realmId;
            return this;
        }
        @CustomType.Setter
        public Builder refreshToken(@Nullable String refreshToken) {
            this.refreshToken = refreshToken;
            return this;
        }
        @CustomType.Setter
        public Builder roleArn(@Nullable String roleArn) {
            this.roleArn = roleArn;
            return this;
        }
        @CustomType.Setter
        public Builder teamId(@Nullable String teamId) {
            this.teamId = teamId;
            return this;
        }
        @CustomType.Setter
        public Builder userAccessToken(@Nullable String userAccessToken) {
            this.userAccessToken = userAccessToken;
            return this;
        }
        public ConnectorAuth build() {
            final var o = new ConnectorAuth();
            o.accessToken = accessToken;
            o.awsAccessKey = awsAccessKey;
            o.awsSecretKey = awsSecretKey;
            o.clientAccess = clientAccess;
            o.clientId = clientId;
            o.clientSecret = clientSecret;
            o.consumerKey = consumerKey;
            o.consumerSecret = consumerSecret;
            o.keyId = keyId;
            o.oauthToken = oauthToken;
            o.oauthTokenSecret = oauthTokenSecret;
            o.previousRefreshToken = previousRefreshToken;
            o.realmId = realmId;
            o.refreshToken = refreshToken;
            o.roleArn = roleArn;
            o.teamId = teamId;
            o.userAccessToken = userAccessToken;
            return o;
        }
    }
}
