// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran;

import com.footholdtech.fivetran.inputs.ConnectorSchemaConfigSchemaArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorSchemaConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorSchemaConfigArgs Empty = new ConnectorSchemaConfigArgs();

    /**
     * The unique identifier for the connector within the Fivetran system.
     * 
     */
    @Import(name="connectorId", required=true)
    private Output<String> connectorId;

    /**
     * @return The unique identifier for the connector within the Fivetran system.
     * 
     */
    public Output<String> connectorId() {
        return this.connectorId;
    }

    @Import(name="schemaChangeHandling", required=true)
    private Output<String> schemaChangeHandling;

    public Output<String> schemaChangeHandling() {
        return this.schemaChangeHandling;
    }

    @Import(name="schemas")
    private @Nullable Output<List<ConnectorSchemaConfigSchemaArgs>> schemas;

    public Optional<Output<List<ConnectorSchemaConfigSchemaArgs>>> schemas() {
        return Optional.ofNullable(this.schemas);
    }

    private ConnectorSchemaConfigArgs() {}

    private ConnectorSchemaConfigArgs(ConnectorSchemaConfigArgs $) {
        this.connectorId = $.connectorId;
        this.schemaChangeHandling = $.schemaChangeHandling;
        this.schemas = $.schemas;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorSchemaConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorSchemaConfigArgs $;

        public Builder() {
            $ = new ConnectorSchemaConfigArgs();
        }

        public Builder(ConnectorSchemaConfigArgs defaults) {
            $ = new ConnectorSchemaConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectorId The unique identifier for the connector within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder connectorId(Output<String> connectorId) {
            $.connectorId = connectorId;
            return this;
        }

        /**
         * @param connectorId The unique identifier for the connector within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder connectorId(String connectorId) {
            return connectorId(Output.of(connectorId));
        }

        public Builder schemaChangeHandling(Output<String> schemaChangeHandling) {
            $.schemaChangeHandling = schemaChangeHandling;
            return this;
        }

        public Builder schemaChangeHandling(String schemaChangeHandling) {
            return schemaChangeHandling(Output.of(schemaChangeHandling));
        }

        public Builder schemas(@Nullable Output<List<ConnectorSchemaConfigSchemaArgs>> schemas) {
            $.schemas = schemas;
            return this;
        }

        public Builder schemas(List<ConnectorSchemaConfigSchemaArgs> schemas) {
            return schemas(Output.of(schemas));
        }

        public Builder schemas(ConnectorSchemaConfigSchemaArgs... schemas) {
            return schemas(List.of(schemas));
        }

        public ConnectorSchemaConfigArgs build() {
            $.connectorId = Objects.requireNonNull($.connectorId, "expected parameter 'connectorId' to be non-null");
            $.schemaChangeHandling = Objects.requireNonNull($.schemaChangeHandling, "expected parameter 'schemaChangeHandling' to be non-null");
            return $;
        }
    }

}
