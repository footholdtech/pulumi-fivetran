// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran;

import com.footholdtech.fivetran.DbtProjectArgs;
import com.footholdtech.fivetran.Utilities;
import com.footholdtech.fivetran.inputs.DbtProjectState;
import com.footholdtech.fivetran.outputs.DbtProjectModel;
import com.footholdtech.fivetran.outputs.DbtProjectProjectConfig;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Resource is in ALPHA state.
 * 
 * This resource allows you to add, manage and delete dbt Projects in your account.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.fivetran.DbtProject;
 * import com.pulumi.fivetran.DbtProjectArgs;
 * import com.pulumi.fivetran.inputs.DbtProjectProjectConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var project = new DbtProject(&#34;project&#34;, DbtProjectArgs.builder()        
 *             .dbtVersion(&#34;1.4.1&#34;)
 *             .defaultSchema(&#34;default_schema&#34;)
 *             .environmentVars(&#34;environment_var=value&#34;)
 *             .groupId(&#34;group_id&#34;)
 *             .projectConfig(DbtProjectProjectConfigArgs.builder()
 *                 .folderPath(&#34;/dbt/project/folder/path&#34;)
 *                 .gitBranch(&#34;main&#34;)
 *                 .gitRemoteUrl(&#34;your_git_remote_url&#34;)
 *                 .build())
 *             .targetName(&#34;target_name&#34;)
 *             .threads(8)
 *             .type(&#34;GIT&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * 1. To import an existing `fivetran_dbt_project` resource into your Terraform state, you need to get **Dbt Project ID** via API call `GET https://api.fivetran.com/v1/dbt/projects` to retrieve available projects. 2. Fetch project details for particular `project-id` using `GET https://api.fivetran.com/v1/dbt/projects/{project-id}` to ensure that this is the project you want to import. 3. Define an empty resource in your `.tf` configurationhcl resource &#34;fivetran_dbt_project&#34; &#34;my_imported_fivetran_dbt_project&#34; { }
 * 
 * ```sh
 *  $ pulumi import fivetran:index/dbtProject:DbtProject
 * 
 * Run the `terraform import` command
 * ```
 * 
 * ```sh
 *  $ pulumi import fivetran:index/dbtProject:DbtProject my_imported_fivetran_dbt_project {Dbt Project ID}
 * ```
 * 
 *  4. Use the `terraform state show` command to get the values from the stateterraform state show &#39;fivetran_dbt_project.my_imported_fivetran_dbt_project&#39; 5. Copy the values and paste them to your `.tf` configuration.
 * 
 */
@ResourceType(type="fivetran:index/dbtProject:DbtProject")
public class DbtProject extends com.pulumi.resources.CustomResource {
    /**
     * The timestamp of the dbt Project creation.
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return The timestamp of the dbt Project creation.
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * The unique identifier for the User within the Fivetran system who created the dbt Project.
     * 
     */
    @Export(name="createdById", refs={String.class}, tree="[0]")
    private Output<String> createdById;

    /**
     * @return The unique identifier for the User within the Fivetran system who created the dbt Project.
     * 
     */
    public Output<String> createdById() {
        return this.createdById;
    }
    /**
     * The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
     * 
     */
    @Export(name="dbtVersion", refs={String.class}, tree="[0]")
    private Output<String> dbtVersion;

    /**
     * @return The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
     * 
     */
    public Output<String> dbtVersion() {
        return this.dbtVersion;
    }
    /**
     * Default schema in destination. This production schema will contain your transformed data.
     * 
     */
    @Export(name="defaultSchema", refs={String.class}, tree="[0]")
    private Output<String> defaultSchema;

    /**
     * @return Default schema in destination. This production schema will contain your transformed data.
     * 
     */
    public Output<String> defaultSchema() {
        return this.defaultSchema;
    }
    /**
     * Should resource wait for project to finish initialization. Default value: true.
     * 
     */
    @Export(name="ensureReadiness", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ensureReadiness;

    /**
     * @return Should resource wait for project to finish initialization. Default value: true.
     * 
     */
    public Output<Optional<Boolean>> ensureReadiness() {
        return Codegen.optional(this.ensureReadiness);
    }
    @Export(name="environmentVars", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> environmentVars;

    public Output<Optional<List<String>>> environmentVars() {
        return Codegen.optional(this.environmentVars);
    }
    /**
     * The unique identifier for the group within the Fivetran system.
     * 
     */
    @Export(name="groupId", refs={String.class}, tree="[0]")
    private Output<String> groupId;

    /**
     * @return The unique identifier for the group within the Fivetran system.
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }
    /**
     * The collection of dbt Models.
     * 
     */
    @Export(name="models", refs={List.class,DbtProjectModel.class}, tree="[0,1]")
    private Output<List<DbtProjectModel>> models;

    /**
     * @return The collection of dbt Models.
     * 
     */
    public Output<List<DbtProjectModel>> models() {
        return this.models;
    }
    /**
     * Type specific dbt Project configuration parameters.
     * 
     */
    @Export(name="projectConfig", refs={DbtProjectProjectConfig.class}, tree="[0]")
    private Output<DbtProjectProjectConfig> projectConfig;

    /**
     * @return Type specific dbt Project configuration parameters.
     * 
     */
    public Output<DbtProjectProjectConfig> projectConfig() {
        return this.projectConfig;
    }
    /**
     * Public key to grant Fivetran SSH access to git repository.
     * 
     */
    @Export(name="publicKey", refs={String.class}, tree="[0]")
    private Output<String> publicKey;

    /**
     * @return Public key to grant Fivetran SSH access to git repository.
     * 
     */
    public Output<String> publicKey() {
        return this.publicKey;
    }
    /**
     * Status of dbt Project (NOT_READY, READY, ERROR).
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return Status of dbt Project (NOT_READY, READY, ERROR).
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * Target name to set or override the value from the deployment.yaml
     * 
     */
    @Export(name="targetName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> targetName;

    /**
     * @return Target name to set or override the value from the deployment.yaml
     * 
     */
    public Output<Optional<String>> targetName() {
        return Codegen.optional(this.targetName);
    }
    /**
     * The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
     * 
     */
    @Export(name="threads", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> threads;

    /**
     * @return The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
     * 
     */
    public Output<Optional<Integer>> threads() {
        return Codegen.optional(this.threads);
    }
    /**
     * Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DbtProject(String name) {
        this(name, DbtProjectArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DbtProject(String name, DbtProjectArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DbtProject(String name, DbtProjectArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fivetran:index/dbtProject:DbtProject", name, args == null ? DbtProjectArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private DbtProject(String name, Output<String> id, @Nullable DbtProjectState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fivetran:index/dbtProject:DbtProject", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DbtProject get(String name, Output<String> id, @Nullable DbtProjectState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DbtProject(name, id, state, options);
    }
}
