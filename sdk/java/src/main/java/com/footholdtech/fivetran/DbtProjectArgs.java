// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran;

import com.footholdtech.fivetran.inputs.DbtProjectModelArgs;
import com.footholdtech.fivetran.inputs.DbtProjectProjectConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbtProjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final DbtProjectArgs Empty = new DbtProjectArgs();

    /**
     * The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
     * 
     */
    @Import(name="dbtVersion", required=true)
    private Output<String> dbtVersion;

    /**
     * @return The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
     * 
     */
    public Output<String> dbtVersion() {
        return this.dbtVersion;
    }

    /**
     * Default schema in destination. This production schema will contain your transformed data.
     * 
     */
    @Import(name="defaultSchema", required=true)
    private Output<String> defaultSchema;

    /**
     * @return Default schema in destination. This production schema will contain your transformed data.
     * 
     */
    public Output<String> defaultSchema() {
        return this.defaultSchema;
    }

    /**
     * Should resource wait for project to finish initialization. Default value: true.
     * 
     */
    @Import(name="ensureReadiness")
    private @Nullable Output<Boolean> ensureReadiness;

    /**
     * @return Should resource wait for project to finish initialization. Default value: true.
     * 
     */
    public Optional<Output<Boolean>> ensureReadiness() {
        return Optional.ofNullable(this.ensureReadiness);
    }

    @Import(name="environmentVars")
    private @Nullable Output<List<String>> environmentVars;

    public Optional<Output<List<String>>> environmentVars() {
        return Optional.ofNullable(this.environmentVars);
    }

    /**
     * The unique identifier for the group within the Fivetran system.
     * 
     */
    @Import(name="groupId", required=true)
    private Output<String> groupId;

    /**
     * @return The unique identifier for the group within the Fivetran system.
     * 
     */
    public Output<String> groupId() {
        return this.groupId;
    }

    /**
     * The collection of dbt Models.
     * 
     */
    @Import(name="models")
    private @Nullable Output<List<DbtProjectModelArgs>> models;

    /**
     * @return The collection of dbt Models.
     * 
     */
    public Optional<Output<List<DbtProjectModelArgs>>> models() {
        return Optional.ofNullable(this.models);
    }

    /**
     * Type specific dbt Project configuration parameters.
     * 
     */
    @Import(name="projectConfig", required=true)
    private Output<DbtProjectProjectConfigArgs> projectConfig;

    /**
     * @return Type specific dbt Project configuration parameters.
     * 
     */
    public Output<DbtProjectProjectConfigArgs> projectConfig() {
        return this.projectConfig;
    }

    /**
     * Target name to set or override the value from the deployment.yaml
     * 
     */
    @Import(name="targetName")
    private @Nullable Output<String> targetName;

    /**
     * @return Target name to set or override the value from the deployment.yaml
     * 
     */
    public Optional<Output<String>> targetName() {
        return Optional.ofNullable(this.targetName);
    }

    /**
     * The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
     * 
     */
    @Import(name="threads")
    private @Nullable Output<Integer> threads;

    /**
     * @return The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
     * 
     */
    public Optional<Output<Integer>> threads() {
        return Optional.ofNullable(this.threads);
    }

    /**
     * Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private DbtProjectArgs() {}

    private DbtProjectArgs(DbtProjectArgs $) {
        this.dbtVersion = $.dbtVersion;
        this.defaultSchema = $.defaultSchema;
        this.ensureReadiness = $.ensureReadiness;
        this.environmentVars = $.environmentVars;
        this.groupId = $.groupId;
        this.models = $.models;
        this.projectConfig = $.projectConfig;
        this.targetName = $.targetName;
        this.threads = $.threads;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbtProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbtProjectArgs $;

        public Builder() {
            $ = new DbtProjectArgs();
        }

        public Builder(DbtProjectArgs defaults) {
            $ = new DbtProjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dbtVersion The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
         * 
         * @return builder
         * 
         */
        public Builder dbtVersion(Output<String> dbtVersion) {
            $.dbtVersion = dbtVersion;
            return this;
        }

        /**
         * @param dbtVersion The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
         * 
         * @return builder
         * 
         */
        public Builder dbtVersion(String dbtVersion) {
            return dbtVersion(Output.of(dbtVersion));
        }

        /**
         * @param defaultSchema Default schema in destination. This production schema will contain your transformed data.
         * 
         * @return builder
         * 
         */
        public Builder defaultSchema(Output<String> defaultSchema) {
            $.defaultSchema = defaultSchema;
            return this;
        }

        /**
         * @param defaultSchema Default schema in destination. This production schema will contain your transformed data.
         * 
         * @return builder
         * 
         */
        public Builder defaultSchema(String defaultSchema) {
            return defaultSchema(Output.of(defaultSchema));
        }

        /**
         * @param ensureReadiness Should resource wait for project to finish initialization. Default value: true.
         * 
         * @return builder
         * 
         */
        public Builder ensureReadiness(@Nullable Output<Boolean> ensureReadiness) {
            $.ensureReadiness = ensureReadiness;
            return this;
        }

        /**
         * @param ensureReadiness Should resource wait for project to finish initialization. Default value: true.
         * 
         * @return builder
         * 
         */
        public Builder ensureReadiness(Boolean ensureReadiness) {
            return ensureReadiness(Output.of(ensureReadiness));
        }

        public Builder environmentVars(@Nullable Output<List<String>> environmentVars) {
            $.environmentVars = environmentVars;
            return this;
        }

        public Builder environmentVars(List<String> environmentVars) {
            return environmentVars(Output.of(environmentVars));
        }

        public Builder environmentVars(String... environmentVars) {
            return environmentVars(List.of(environmentVars));
        }

        /**
         * @param groupId The unique identifier for the group within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder groupId(Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The unique identifier for the group within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        /**
         * @param models The collection of dbt Models.
         * 
         * @return builder
         * 
         */
        public Builder models(@Nullable Output<List<DbtProjectModelArgs>> models) {
            $.models = models;
            return this;
        }

        /**
         * @param models The collection of dbt Models.
         * 
         * @return builder
         * 
         */
        public Builder models(List<DbtProjectModelArgs> models) {
            return models(Output.of(models));
        }

        /**
         * @param models The collection of dbt Models.
         * 
         * @return builder
         * 
         */
        public Builder models(DbtProjectModelArgs... models) {
            return models(List.of(models));
        }

        /**
         * @param projectConfig Type specific dbt Project configuration parameters.
         * 
         * @return builder
         * 
         */
        public Builder projectConfig(Output<DbtProjectProjectConfigArgs> projectConfig) {
            $.projectConfig = projectConfig;
            return this;
        }

        /**
         * @param projectConfig Type specific dbt Project configuration parameters.
         * 
         * @return builder
         * 
         */
        public Builder projectConfig(DbtProjectProjectConfigArgs projectConfig) {
            return projectConfig(Output.of(projectConfig));
        }

        /**
         * @param targetName Target name to set or override the value from the deployment.yaml
         * 
         * @return builder
         * 
         */
        public Builder targetName(@Nullable Output<String> targetName) {
            $.targetName = targetName;
            return this;
        }

        /**
         * @param targetName Target name to set or override the value from the deployment.yaml
         * 
         * @return builder
         * 
         */
        public Builder targetName(String targetName) {
            return targetName(Output.of(targetName));
        }

        /**
         * @param threads The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
         * 
         * @return builder
         * 
         */
        public Builder threads(@Nullable Output<Integer> threads) {
            $.threads = threads;
            return this;
        }

        /**
         * @param threads The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
         * 
         * @return builder
         * 
         */
        public Builder threads(Integer threads) {
            return threads(Output.of(threads));
        }

        /**
         * @param type Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DbtProjectArgs build() {
            $.dbtVersion = Objects.requireNonNull($.dbtVersion, "expected parameter 'dbtVersion' to be non-null");
            $.defaultSchema = Objects.requireNonNull($.defaultSchema, "expected parameter 'defaultSchema' to be non-null");
            $.groupId = Objects.requireNonNull($.groupId, "expected parameter 'groupId' to be non-null");
            $.projectConfig = Objects.requireNonNull($.projectConfig, "expected parameter 'projectConfig' to be non-null");
            return $;
        }
    }

}
