// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetConnectorsMetadataSource extends com.pulumi.resources.InvokeArgs {

    public static final GetConnectorsMetadataSource Empty = new GetConnectorsMetadataSource();

    /**
     * The description characterizing the purpose of the connector.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    /**
     * @return The description characterizing the purpose of the connector.
     * 
     */
    public String description() {
        return this.description;
    }

    /**
     * The icon resource URL.
     * 
     */
    @Import(name="iconUrl", required=true)
    private String iconUrl;

    /**
     * @return The icon resource URL.
     * 
     */
    public String iconUrl() {
        return this.iconUrl;
    }

    /**
     * The unique identifier for the connector within the Fivetran system
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return The unique identifier for the connector within the Fivetran system
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * The link to the connector documentation.
     * 
     */
    @Import(name="linkToDocs", required=true)
    private String linkToDocs;

    /**
     * @return The link to the connector documentation.
     * 
     */
    public String linkToDocs() {
        return this.linkToDocs;
    }

    /**
     * The link to the connector ERD (entity–relationship diagram).
     * 
     */
    @Import(name="linkToErd", required=true)
    private String linkToErd;

    /**
     * @return The link to the connector ERD (entity–relationship diagram).
     * 
     */
    public String linkToErd() {
        return this.linkToErd;
    }

    /**
     * The connector service name within the Fivetran system.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The connector service name within the Fivetran system.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The connector service type within the Fivetran system.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The connector service type within the Fivetran system.
     * 
     */
    public String type() {
        return this.type;
    }

    private GetConnectorsMetadataSource() {}

    private GetConnectorsMetadataSource(GetConnectorsMetadataSource $) {
        this.description = $.description;
        this.iconUrl = $.iconUrl;
        this.id = $.id;
        this.linkToDocs = $.linkToDocs;
        this.linkToErd = $.linkToErd;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetConnectorsMetadataSource defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetConnectorsMetadataSource $;

        public Builder() {
            $ = new GetConnectorsMetadataSource();
        }

        public Builder(GetConnectorsMetadataSource defaults) {
            $ = new GetConnectorsMetadataSource(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description characterizing the purpose of the connector.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            $.description = description;
            return this;
        }

        /**
         * @param iconUrl The icon resource URL.
         * 
         * @return builder
         * 
         */
        public Builder iconUrl(String iconUrl) {
            $.iconUrl = iconUrl;
            return this;
        }

        /**
         * @param id The unique identifier for the connector within the Fivetran system
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param linkToDocs The link to the connector documentation.
         * 
         * @return builder
         * 
         */
        public Builder linkToDocs(String linkToDocs) {
            $.linkToDocs = linkToDocs;
            return this;
        }

        /**
         * @param linkToErd The link to the connector ERD (entity–relationship diagram).
         * 
         * @return builder
         * 
         */
        public Builder linkToErd(String linkToErd) {
            $.linkToErd = linkToErd;
            return this;
        }

        /**
         * @param name The connector service name within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param type The connector service type within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public GetConnectorsMetadataSource build() {
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.iconUrl = Objects.requireNonNull($.iconUrl, "expected parameter 'iconUrl' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.linkToDocs = Objects.requireNonNull($.linkToDocs, "expected parameter 'linkToDocs' to be non-null");
            $.linkToErd = Objects.requireNonNull($.linkToErd, "expected parameter 'linkToErd' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
