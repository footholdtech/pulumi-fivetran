// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetMetadataSchemasMetadataSchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetMetadataSchemasMetadataSchemaArgs Empty = new GetMetadataSchemasMetadataSchemaArgs();

    /**
     * The unique schema identifier
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique schema identifier
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * The schema name in the destination
     * 
     */
    @Import(name="nameInDestination", required=true)
    private Output<String> nameInDestination;

    /**
     * @return The schema name in the destination
     * 
     */
    public Output<String> nameInDestination() {
        return this.nameInDestination;
    }

    /**
     * The schema name in the source
     * 
     */
    @Import(name="nameInSource", required=true)
    private Output<String> nameInSource;

    /**
     * @return The schema name in the source
     * 
     */
    public Output<String> nameInSource() {
        return this.nameInSource;
    }

    private GetMetadataSchemasMetadataSchemaArgs() {}

    private GetMetadataSchemasMetadataSchemaArgs(GetMetadataSchemasMetadataSchemaArgs $) {
        this.id = $.id;
        this.nameInDestination = $.nameInDestination;
        this.nameInSource = $.nameInSource;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMetadataSchemasMetadataSchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMetadataSchemasMetadataSchemaArgs $;

        public Builder() {
            $ = new GetMetadataSchemasMetadataSchemaArgs();
        }

        public Builder(GetMetadataSchemasMetadataSchemaArgs defaults) {
            $ = new GetMetadataSchemasMetadataSchemaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id The unique schema identifier
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique schema identifier
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param nameInDestination The schema name in the destination
         * 
         * @return builder
         * 
         */
        public Builder nameInDestination(Output<String> nameInDestination) {
            $.nameInDestination = nameInDestination;
            return this;
        }

        /**
         * @param nameInDestination The schema name in the destination
         * 
         * @return builder
         * 
         */
        public Builder nameInDestination(String nameInDestination) {
            return nameInDestination(Output.of(nameInDestination));
        }

        /**
         * @param nameInSource The schema name in the source
         * 
         * @return builder
         * 
         */
        public Builder nameInSource(Output<String> nameInSource) {
            $.nameInSource = nameInSource;
            return this;
        }

        /**
         * @param nameInSource The schema name in the source
         * 
         * @return builder
         * 
         */
        public Builder nameInSource(String nameInSource) {
            return nameInSource(Output.of(nameInSource));
        }

        public GetMetadataSchemasMetadataSchemaArgs build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.nameInDestination = Objects.requireNonNull($.nameInDestination, "expected parameter 'nameInDestination' to be non-null");
            $.nameInSource = Objects.requireNonNull($.nameInSource, "expected parameter 'nameInSource' to be non-null");
            return $;
        }
    }

}
