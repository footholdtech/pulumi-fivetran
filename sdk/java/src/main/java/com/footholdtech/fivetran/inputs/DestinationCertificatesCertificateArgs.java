// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DestinationCertificatesCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final DestinationCertificatesCertificateArgs Empty = new DestinationCertificatesCertificateArgs();

    /**
     * Base64 encoded certificate.
     * 
     */
    @Import(name="encodedCert", required=true)
    private Output<String> encodedCert;

    /**
     * @return Base64 encoded certificate.
     * 
     */
    public Output<String> encodedCert() {
        return this.encodedCert;
    }

    /**
     * Hash of the fingerprint.
     * 
     */
    @Import(name="hash", required=true)
    private Output<String> hash;

    /**
     * @return Hash of the fingerprint.
     * 
     */
    public Output<String> hash() {
        return this.hash;
    }

    /**
     * Certificate name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Certificate name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Certificate public key.
     * 
     */
    @Import(name="publicKey")
    private @Nullable Output<String> publicKey;

    /**
     * @return Certificate public key.
     * 
     */
    public Optional<Output<String>> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    /**
     * Certificate sha1.
     * 
     */
    @Import(name="sha1")
    private @Nullable Output<String> sha1;

    /**
     * @return Certificate sha1.
     * 
     */
    public Optional<Output<String>> sha1() {
        return Optional.ofNullable(this.sha1);
    }

    /**
     * Certificate sha256.
     * 
     */
    @Import(name="sha256")
    private @Nullable Output<String> sha256;

    /**
     * @return Certificate sha256.
     * 
     */
    public Optional<Output<String>> sha256() {
        return Optional.ofNullable(this.sha256);
    }

    /**
     * Certificate type.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Certificate type.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * User name who validated the certificate.
     * 
     */
    @Import(name="validatedBy")
    private @Nullable Output<String> validatedBy;

    /**
     * @return User name who validated the certificate.
     * 
     */
    public Optional<Output<String>> validatedBy() {
        return Optional.ofNullable(this.validatedBy);
    }

    /**
     * The date when the certificate was approved.
     * 
     */
    @Import(name="validatedDate")
    private @Nullable Output<String> validatedDate;

    /**
     * @return The date when the certificate was approved.
     * 
     */
    public Optional<Output<String>> validatedDate() {
        return Optional.ofNullable(this.validatedDate);
    }

    private DestinationCertificatesCertificateArgs() {}

    private DestinationCertificatesCertificateArgs(DestinationCertificatesCertificateArgs $) {
        this.encodedCert = $.encodedCert;
        this.hash = $.hash;
        this.name = $.name;
        this.publicKey = $.publicKey;
        this.sha1 = $.sha1;
        this.sha256 = $.sha256;
        this.type = $.type;
        this.validatedBy = $.validatedBy;
        this.validatedDate = $.validatedDate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DestinationCertificatesCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DestinationCertificatesCertificateArgs $;

        public Builder() {
            $ = new DestinationCertificatesCertificateArgs();
        }

        public Builder(DestinationCertificatesCertificateArgs defaults) {
            $ = new DestinationCertificatesCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param encodedCert Base64 encoded certificate.
         * 
         * @return builder
         * 
         */
        public Builder encodedCert(Output<String> encodedCert) {
            $.encodedCert = encodedCert;
            return this;
        }

        /**
         * @param encodedCert Base64 encoded certificate.
         * 
         * @return builder
         * 
         */
        public Builder encodedCert(String encodedCert) {
            return encodedCert(Output.of(encodedCert));
        }

        /**
         * @param hash Hash of the fingerprint.
         * 
         * @return builder
         * 
         */
        public Builder hash(Output<String> hash) {
            $.hash = hash;
            return this;
        }

        /**
         * @param hash Hash of the fingerprint.
         * 
         * @return builder
         * 
         */
        public Builder hash(String hash) {
            return hash(Output.of(hash));
        }

        /**
         * @param name Certificate name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Certificate name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param publicKey Certificate public key.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(@Nullable Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param publicKey Certificate public key.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        /**
         * @param sha1 Certificate sha1.
         * 
         * @return builder
         * 
         */
        public Builder sha1(@Nullable Output<String> sha1) {
            $.sha1 = sha1;
            return this;
        }

        /**
         * @param sha1 Certificate sha1.
         * 
         * @return builder
         * 
         */
        public Builder sha1(String sha1) {
            return sha1(Output.of(sha1));
        }

        /**
         * @param sha256 Certificate sha256.
         * 
         * @return builder
         * 
         */
        public Builder sha256(@Nullable Output<String> sha256) {
            $.sha256 = sha256;
            return this;
        }

        /**
         * @param sha256 Certificate sha256.
         * 
         * @return builder
         * 
         */
        public Builder sha256(String sha256) {
            return sha256(Output.of(sha256));
        }

        /**
         * @param type Certificate type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Certificate type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param validatedBy User name who validated the certificate.
         * 
         * @return builder
         * 
         */
        public Builder validatedBy(@Nullable Output<String> validatedBy) {
            $.validatedBy = validatedBy;
            return this;
        }

        /**
         * @param validatedBy User name who validated the certificate.
         * 
         * @return builder
         * 
         */
        public Builder validatedBy(String validatedBy) {
            return validatedBy(Output.of(validatedBy));
        }

        /**
         * @param validatedDate The date when the certificate was approved.
         * 
         * @return builder
         * 
         */
        public Builder validatedDate(@Nullable Output<String> validatedDate) {
            $.validatedDate = validatedDate;
            return this;
        }

        /**
         * @param validatedDate The date when the certificate was approved.
         * 
         * @return builder
         * 
         */
        public Builder validatedDate(String validatedDate) {
            return validatedDate(Output.of(validatedDate));
        }

        public DestinationCertificatesCertificateArgs build() {
            $.encodedCert = Objects.requireNonNull($.encodedCert, "expected parameter 'encodedCert' to be non-null");
            $.hash = Objects.requireNonNull($.hash, "expected parameter 'hash' to be non-null");
            return $;
        }
    }

}
