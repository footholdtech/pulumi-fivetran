// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorConfigReportArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorConfigReportArgs Empty = new ConnectorConfigReportArgs();

    @Import(name="aggregation")
    private @Nullable Output<String> aggregation;

    public Optional<Output<String>> aggregation() {
        return Optional.ofNullable(this.aggregation);
    }

    @Import(name="attributes")
    private @Nullable Output<List<String>> attributes;

    public Optional<Output<List<String>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    @Import(name="configType")
    private @Nullable Output<String> configType;

    public Optional<Output<String>> configType() {
        return Optional.ofNullable(this.configType);
    }

    @Import(name="dimensions")
    private @Nullable Output<List<String>> dimensions;

    public Optional<Output<List<String>>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    @Import(name="fields")
    private @Nullable Output<List<String>> fields;

    public Optional<Output<List<String>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    @Import(name="filter")
    private @Nullable Output<String> filter;

    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    @Import(name="filterFieldName")
    private @Nullable Output<String> filterFieldName;

    public Optional<Output<String>> filterFieldName() {
        return Optional.ofNullable(this.filterFieldName);
    }

    @Import(name="filterType")
    private @Nullable Output<String> filterType;

    public Optional<Output<String>> filterType() {
        return Optional.ofNullable(this.filterType);
    }

    @Import(name="filterValue")
    private @Nullable Output<String> filterValue;

    public Optional<Output<String>> filterValue() {
        return Optional.ofNullable(this.filterValue);
    }

    @Import(name="metrics")
    private @Nullable Output<List<String>> metrics;

    public Optional<Output<List<String>>> metrics() {
        return Optional.ofNullable(this.metrics);
    }

    @Import(name="prebuiltReport")
    private @Nullable Output<String> prebuiltReport;

    public Optional<Output<String>> prebuiltReport() {
        return Optional.ofNullable(this.prebuiltReport);
    }

    @Import(name="reportType")
    private @Nullable Output<String> reportType;

    public Optional<Output<String>> reportType() {
        return Optional.ofNullable(this.reportType);
    }

    @Import(name="rollbackWindow")
    private @Nullable Output<String> rollbackWindow;

    public Optional<Output<String>> rollbackWindow() {
        return Optional.ofNullable(this.rollbackWindow);
    }

    @Import(name="searchTypes")
    private @Nullable Output<List<String>> searchTypes;

    public Optional<Output<List<String>>> searchTypes() {
        return Optional.ofNullable(this.searchTypes);
    }

    @Import(name="segmentIds")
    private @Nullable Output<List<String>> segmentIds;

    public Optional<Output<List<String>>> segmentIds() {
        return Optional.ofNullable(this.segmentIds);
    }

    @Import(name="segments")
    private @Nullable Output<List<String>> segments;

    public Optional<Output<List<String>>> segments() {
        return Optional.ofNullable(this.segments);
    }

    @Import(name="table")
    private @Nullable Output<String> table;

    public Optional<Output<String>> table() {
        return Optional.ofNullable(this.table);
    }

    private ConnectorConfigReportArgs() {}

    private ConnectorConfigReportArgs(ConnectorConfigReportArgs $) {
        this.aggregation = $.aggregation;
        this.attributes = $.attributes;
        this.configType = $.configType;
        this.dimensions = $.dimensions;
        this.fields = $.fields;
        this.filter = $.filter;
        this.filterFieldName = $.filterFieldName;
        this.filterType = $.filterType;
        this.filterValue = $.filterValue;
        this.metrics = $.metrics;
        this.prebuiltReport = $.prebuiltReport;
        this.reportType = $.reportType;
        this.rollbackWindow = $.rollbackWindow;
        this.searchTypes = $.searchTypes;
        this.segmentIds = $.segmentIds;
        this.segments = $.segments;
        this.table = $.table;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorConfigReportArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorConfigReportArgs $;

        public Builder() {
            $ = new ConnectorConfigReportArgs();
        }

        public Builder(ConnectorConfigReportArgs defaults) {
            $ = new ConnectorConfigReportArgs(Objects.requireNonNull(defaults));
        }

        public Builder aggregation(@Nullable Output<String> aggregation) {
            $.aggregation = aggregation;
            return this;
        }

        public Builder aggregation(String aggregation) {
            return aggregation(Output.of(aggregation));
        }

        public Builder attributes(@Nullable Output<List<String>> attributes) {
            $.attributes = attributes;
            return this;
        }

        public Builder attributes(List<String> attributes) {
            return attributes(Output.of(attributes));
        }

        public Builder attributes(String... attributes) {
            return attributes(List.of(attributes));
        }

        public Builder configType(@Nullable Output<String> configType) {
            $.configType = configType;
            return this;
        }

        public Builder configType(String configType) {
            return configType(Output.of(configType));
        }

        public Builder dimensions(@Nullable Output<List<String>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        public Builder dimensions(List<String> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        public Builder dimensions(String... dimensions) {
            return dimensions(List.of(dimensions));
        }

        public Builder fields(@Nullable Output<List<String>> fields) {
            $.fields = fields;
            return this;
        }

        public Builder fields(List<String> fields) {
            return fields(Output.of(fields));
        }

        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        public Builder filterFieldName(@Nullable Output<String> filterFieldName) {
            $.filterFieldName = filterFieldName;
            return this;
        }

        public Builder filterFieldName(String filterFieldName) {
            return filterFieldName(Output.of(filterFieldName));
        }

        public Builder filterType(@Nullable Output<String> filterType) {
            $.filterType = filterType;
            return this;
        }

        public Builder filterType(String filterType) {
            return filterType(Output.of(filterType));
        }

        public Builder filterValue(@Nullable Output<String> filterValue) {
            $.filterValue = filterValue;
            return this;
        }

        public Builder filterValue(String filterValue) {
            return filterValue(Output.of(filterValue));
        }

        public Builder metrics(@Nullable Output<List<String>> metrics) {
            $.metrics = metrics;
            return this;
        }

        public Builder metrics(List<String> metrics) {
            return metrics(Output.of(metrics));
        }

        public Builder metrics(String... metrics) {
            return metrics(List.of(metrics));
        }

        public Builder prebuiltReport(@Nullable Output<String> prebuiltReport) {
            $.prebuiltReport = prebuiltReport;
            return this;
        }

        public Builder prebuiltReport(String prebuiltReport) {
            return prebuiltReport(Output.of(prebuiltReport));
        }

        public Builder reportType(@Nullable Output<String> reportType) {
            $.reportType = reportType;
            return this;
        }

        public Builder reportType(String reportType) {
            return reportType(Output.of(reportType));
        }

        public Builder rollbackWindow(@Nullable Output<String> rollbackWindow) {
            $.rollbackWindow = rollbackWindow;
            return this;
        }

        public Builder rollbackWindow(String rollbackWindow) {
            return rollbackWindow(Output.of(rollbackWindow));
        }

        public Builder searchTypes(@Nullable Output<List<String>> searchTypes) {
            $.searchTypes = searchTypes;
            return this;
        }

        public Builder searchTypes(List<String> searchTypes) {
            return searchTypes(Output.of(searchTypes));
        }

        public Builder searchTypes(String... searchTypes) {
            return searchTypes(List.of(searchTypes));
        }

        public Builder segmentIds(@Nullable Output<List<String>> segmentIds) {
            $.segmentIds = segmentIds;
            return this;
        }

        public Builder segmentIds(List<String> segmentIds) {
            return segmentIds(Output.of(segmentIds));
        }

        public Builder segmentIds(String... segmentIds) {
            return segmentIds(List.of(segmentIds));
        }

        public Builder segments(@Nullable Output<List<String>> segments) {
            $.segments = segments;
            return this;
        }

        public Builder segments(List<String> segments) {
            return segments(Output.of(segments));
        }

        public Builder segments(String... segments) {
            return segments(List.of(segments));
        }

        public Builder table(@Nullable Output<String> table) {
            $.table = table;
            return this;
        }

        public Builder table(String table) {
            return table(Output.of(table));
        }

        public ConnectorConfigReportArgs build() {
            return $;
        }
    }

}
