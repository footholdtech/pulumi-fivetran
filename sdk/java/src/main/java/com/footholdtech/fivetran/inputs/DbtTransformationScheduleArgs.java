// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DbtTransformationScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final DbtTransformationScheduleArgs Empty = new DbtTransformationScheduleArgs();

    /**
     * The set of the days of the week the transformation should be launched on. The following values are supported: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
     * 
     */
    @Import(name="daysOfWeeks")
    private @Nullable Output<List<String>> daysOfWeeks;

    /**
     * @return The set of the days of the week the transformation should be launched on. The following values are supported: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
     * 
     */
    public Optional<Output<List<String>>> daysOfWeeks() {
        return Optional.ofNullable(this.daysOfWeeks);
    }

    /**
     * The time interval in minutes between subsequent transformation runs.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    /**
     * @return The time interval in minutes between subsequent transformation runs.
     * 
     */
    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * The type of the schedule to run the dbt Transformation on. The following values are supported: INTEGRATED, TIME*OF*DAY, INTERVAL. For INTEGRATED schedule type, interval and time*of*day values are ignored and only the days*of*week parameter values are taken into account (but may be empty or null). For TIME*OF*DAY schedule type, the interval parameter value is ignored and the time*of*day values is taken into account along with days*of*week value. For INTERVAL schedule type, time*of*day value is ignored and the interval parameter value is taken into account along with days*of*week value.
     * 
     */
    @Import(name="scheduleType", required=true)
    private Output<String> scheduleType;

    /**
     * @return The type of the schedule to run the dbt Transformation on. The following values are supported: INTEGRATED, TIME*OF*DAY, INTERVAL. For INTEGRATED schedule type, interval and time*of*day values are ignored and only the days*of*week parameter values are taken into account (but may be empty or null). For TIME*OF*DAY schedule type, the interval parameter value is ignored and the time*of*day values is taken into account along with days*of*week value. For INTERVAL schedule type, time*of*day value is ignored and the interval parameter value is taken into account along with days*of*week value.
     * 
     */
    public Output<String> scheduleType() {
        return this.scheduleType;
    }

    /**
     * The time of the day the transformation should be launched at. Supported values are: &#34;00:00&#34;, &#34;01:00&#34;, &#34;02:00&#34;, &#34;03:00&#34;, &#34;04:00&#34;, &#34;05:00&#34;, &#34;06:00&#34;, &#34;07:00&#34;, &#34;08:00&#34;, &#34;09:00&#34;, &#34;10:00&#34;, &#34;11:00&#34;, &#34;12:00&#34;, &#34;13:00&#34;, &#34;14:00&#34;, &#34;15:00&#34;, &#34;16:00&#34;, &#34;17:00&#34;, &#34;18:00&#34;, &#34;19:00&#34;, &#34;20:00&#34;, &#34;21:00&#34;, &#34;22:00&#34;, &#34;23:00&#34;
     * 
     */
    @Import(name="timeOfDay")
    private @Nullable Output<String> timeOfDay;

    /**
     * @return The time of the day the transformation should be launched at. Supported values are: &#34;00:00&#34;, &#34;01:00&#34;, &#34;02:00&#34;, &#34;03:00&#34;, &#34;04:00&#34;, &#34;05:00&#34;, &#34;06:00&#34;, &#34;07:00&#34;, &#34;08:00&#34;, &#34;09:00&#34;, &#34;10:00&#34;, &#34;11:00&#34;, &#34;12:00&#34;, &#34;13:00&#34;, &#34;14:00&#34;, &#34;15:00&#34;, &#34;16:00&#34;, &#34;17:00&#34;, &#34;18:00&#34;, &#34;19:00&#34;, &#34;20:00&#34;, &#34;21:00&#34;, &#34;22:00&#34;, &#34;23:00&#34;
     * 
     */
    public Optional<Output<String>> timeOfDay() {
        return Optional.ofNullable(this.timeOfDay);
    }

    private DbtTransformationScheduleArgs() {}

    private DbtTransformationScheduleArgs(DbtTransformationScheduleArgs $) {
        this.daysOfWeeks = $.daysOfWeeks;
        this.interval = $.interval;
        this.scheduleType = $.scheduleType;
        this.timeOfDay = $.timeOfDay;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DbtTransformationScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DbtTransformationScheduleArgs $;

        public Builder() {
            $ = new DbtTransformationScheduleArgs();
        }

        public Builder(DbtTransformationScheduleArgs defaults) {
            $ = new DbtTransformationScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param daysOfWeeks The set of the days of the week the transformation should be launched on. The following values are supported: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(@Nullable Output<List<String>> daysOfWeeks) {
            $.daysOfWeeks = daysOfWeeks;
            return this;
        }

        /**
         * @param daysOfWeeks The set of the days of the week the transformation should be launched on. The following values are supported: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(List<String> daysOfWeeks) {
            return daysOfWeeks(Output.of(daysOfWeeks));
        }

        /**
         * @param daysOfWeeks The set of the days of the week the transformation should be launched on. The following values are supported: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeeks(String... daysOfWeeks) {
            return daysOfWeeks(List.of(daysOfWeeks));
        }

        /**
         * @param interval The time interval in minutes between subsequent transformation runs.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval The time interval in minutes between subsequent transformation runs.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param scheduleType The type of the schedule to run the dbt Transformation on. The following values are supported: INTEGRATED, TIME*OF*DAY, INTERVAL. For INTEGRATED schedule type, interval and time*of*day values are ignored and only the days*of*week parameter values are taken into account (but may be empty or null). For TIME*OF*DAY schedule type, the interval parameter value is ignored and the time*of*day values is taken into account along with days*of*week value. For INTERVAL schedule type, time*of*day value is ignored and the interval parameter value is taken into account along with days*of*week value.
         * 
         * @return builder
         * 
         */
        public Builder scheduleType(Output<String> scheduleType) {
            $.scheduleType = scheduleType;
            return this;
        }

        /**
         * @param scheduleType The type of the schedule to run the dbt Transformation on. The following values are supported: INTEGRATED, TIME*OF*DAY, INTERVAL. For INTEGRATED schedule type, interval and time*of*day values are ignored and only the days*of*week parameter values are taken into account (but may be empty or null). For TIME*OF*DAY schedule type, the interval parameter value is ignored and the time*of*day values is taken into account along with days*of*week value. For INTERVAL schedule type, time*of*day value is ignored and the interval parameter value is taken into account along with days*of*week value.
         * 
         * @return builder
         * 
         */
        public Builder scheduleType(String scheduleType) {
            return scheduleType(Output.of(scheduleType));
        }

        /**
         * @param timeOfDay The time of the day the transformation should be launched at. Supported values are: &#34;00:00&#34;, &#34;01:00&#34;, &#34;02:00&#34;, &#34;03:00&#34;, &#34;04:00&#34;, &#34;05:00&#34;, &#34;06:00&#34;, &#34;07:00&#34;, &#34;08:00&#34;, &#34;09:00&#34;, &#34;10:00&#34;, &#34;11:00&#34;, &#34;12:00&#34;, &#34;13:00&#34;, &#34;14:00&#34;, &#34;15:00&#34;, &#34;16:00&#34;, &#34;17:00&#34;, &#34;18:00&#34;, &#34;19:00&#34;, &#34;20:00&#34;, &#34;21:00&#34;, &#34;22:00&#34;, &#34;23:00&#34;
         * 
         * @return builder
         * 
         */
        public Builder timeOfDay(@Nullable Output<String> timeOfDay) {
            $.timeOfDay = timeOfDay;
            return this;
        }

        /**
         * @param timeOfDay The time of the day the transformation should be launched at. Supported values are: &#34;00:00&#34;, &#34;01:00&#34;, &#34;02:00&#34;, &#34;03:00&#34;, &#34;04:00&#34;, &#34;05:00&#34;, &#34;06:00&#34;, &#34;07:00&#34;, &#34;08:00&#34;, &#34;09:00&#34;, &#34;10:00&#34;, &#34;11:00&#34;, &#34;12:00&#34;, &#34;13:00&#34;, &#34;14:00&#34;, &#34;15:00&#34;, &#34;16:00&#34;, &#34;17:00&#34;, &#34;18:00&#34;, &#34;19:00&#34;, &#34;20:00&#34;, &#34;21:00&#34;, &#34;22:00&#34;, &#34;23:00&#34;
         * 
         * @return builder
         * 
         */
        public Builder timeOfDay(String timeOfDay) {
            return timeOfDay(Output.of(timeOfDay));
        }

        public DbtTransformationScheduleArgs build() {
            $.scheduleType = Objects.requireNonNull($.scheduleType, "expected parameter 'scheduleType' to be non-null");
            return $;
        }
    }

}
