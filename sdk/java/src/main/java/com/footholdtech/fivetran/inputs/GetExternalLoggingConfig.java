// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetExternalLoggingConfig extends com.pulumi.resources.InvokeArgs {

    public static final GetExternalLoggingConfig Empty = new GetExternalLoggingConfig();

    /**
     * API Key
     * 
     */
    @Import(name="apiKey")
    private @Nullable String apiKey;

    /**
     * @return API Key
     * 
     */
    public Optional<String> apiKey() {
        return Optional.ofNullable(this.apiKey);
    }

    /**
     * Channel
     * 
     */
    @Import(name="channel")
    private @Nullable String channel;

    /**
     * @return Channel
     * 
     */
    public Optional<String> channel() {
        return Optional.ofNullable(this.channel);
    }

    /**
     * Enable SSL
     * 
     */
    @Import(name="enableSsl")
    private @Nullable Boolean enableSsl;

    /**
     * @return Enable SSL
     * 
     */
    public Optional<Boolean> enableSsl() {
        return Optional.ofNullable(this.enableSsl);
    }

    /**
     * external_id
     * 
     */
    @Import(name="externalId")
    private @Nullable String externalId;

    /**
     * @return external_id
     * 
     */
    public Optional<String> externalId() {
        return Optional.ofNullable(this.externalId);
    }

    /**
     * Server name
     * 
     */
    @Import(name="host")
    private @Nullable String host;

    /**
     * @return Server name
     * 
     */
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * Server name
     * 
     */
    @Import(name="hostname")
    private @Nullable String hostname;

    /**
     * @return Server name
     * 
     */
    public Optional<String> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * Log Group Name
     * 
     */
    @Import(name="logGroupName")
    private @Nullable String logGroupName;

    /**
     * @return Log Group Name
     * 
     */
    public Optional<String> logGroupName() {
        return Optional.ofNullable(this.logGroupName);
    }

    /**
     * Port
     * 
     */
    @Import(name="port")
    private @Nullable Integer port;

    /**
     * @return Port
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Primary Key
     * 
     */
    @Import(name="primaryKey")
    private @Nullable String primaryKey;

    /**
     * @return Primary Key
     * 
     */
    public Optional<String> primaryKey() {
        return Optional.ofNullable(this.primaryKey);
    }

    /**
     * Region
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return Region
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Role Arn
     * 
     */
    @Import(name="roleArn")
    private @Nullable String roleArn;

    /**
     * @return Role Arn
     * 
     */
    public Optional<String> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    /**
     * Sub Domain
     * 
     */
    @Import(name="subDomain")
    private @Nullable String subDomain;

    /**
     * @return Sub Domain
     * 
     */
    public Optional<String> subDomain() {
        return Optional.ofNullable(this.subDomain);
    }

    /**
     * Token
     * 
     */
    @Import(name="token")
    private @Nullable String token;

    /**
     * @return Token
     * 
     */
    public Optional<String> token() {
        return Optional.ofNullable(this.token);
    }

    /**
     * Workspace ID
     * 
     */
    @Import(name="workspaceId")
    private @Nullable String workspaceId;

    /**
     * @return Workspace ID
     * 
     */
    public Optional<String> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private GetExternalLoggingConfig() {}

    private GetExternalLoggingConfig(GetExternalLoggingConfig $) {
        this.apiKey = $.apiKey;
        this.channel = $.channel;
        this.enableSsl = $.enableSsl;
        this.externalId = $.externalId;
        this.host = $.host;
        this.hostname = $.hostname;
        this.logGroupName = $.logGroupName;
        this.port = $.port;
        this.primaryKey = $.primaryKey;
        this.region = $.region;
        this.roleArn = $.roleArn;
        this.subDomain = $.subDomain;
        this.token = $.token;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetExternalLoggingConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetExternalLoggingConfig $;

        public Builder() {
            $ = new GetExternalLoggingConfig();
        }

        public Builder(GetExternalLoggingConfig defaults) {
            $ = new GetExternalLoggingConfig(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKey API Key
         * 
         * @return builder
         * 
         */
        public Builder apiKey(@Nullable String apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        /**
         * @param channel Channel
         * 
         * @return builder
         * 
         */
        public Builder channel(@Nullable String channel) {
            $.channel = channel;
            return this;
        }

        /**
         * @param enableSsl Enable SSL
         * 
         * @return builder
         * 
         */
        public Builder enableSsl(@Nullable Boolean enableSsl) {
            $.enableSsl = enableSsl;
            return this;
        }

        /**
         * @param externalId external_id
         * 
         * @return builder
         * 
         */
        public Builder externalId(@Nullable String externalId) {
            $.externalId = externalId;
            return this;
        }

        /**
         * @param host Server name
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable String host) {
            $.host = host;
            return this;
        }

        /**
         * @param hostname Server name
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable String hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param logGroupName Log Group Name
         * 
         * @return builder
         * 
         */
        public Builder logGroupName(@Nullable String logGroupName) {
            $.logGroupName = logGroupName;
            return this;
        }

        /**
         * @param port Port
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Integer port) {
            $.port = port;
            return this;
        }

        /**
         * @param primaryKey Primary Key
         * 
         * @return builder
         * 
         */
        public Builder primaryKey(@Nullable String primaryKey) {
            $.primaryKey = primaryKey;
            return this;
        }

        /**
         * @param region Region
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        /**
         * @param roleArn Role Arn
         * 
         * @return builder
         * 
         */
        public Builder roleArn(@Nullable String roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param subDomain Sub Domain
         * 
         * @return builder
         * 
         */
        public Builder subDomain(@Nullable String subDomain) {
            $.subDomain = subDomain;
            return this;
        }

        /**
         * @param token Token
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable String token) {
            $.token = token;
            return this;
        }

        /**
         * @param workspaceId Workspace ID
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable String workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        public GetExternalLoggingConfig build() {
            return $;
        }
    }

}
