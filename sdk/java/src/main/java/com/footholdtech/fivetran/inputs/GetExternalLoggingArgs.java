// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.footholdtech.fivetran.inputs.GetExternalLoggingConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetExternalLoggingArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetExternalLoggingArgs Empty = new GetExternalLoggingArgs();

    @Import(name="configs")
    private @Nullable Output<List<GetExternalLoggingConfigArgs>> configs;

    public Optional<Output<List<GetExternalLoggingConfigArgs>>> configs() {
        return Optional.ofNullable(this.configs);
    }

    /**
     * The unique identifier for the log service within the Fivetran system.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique identifier for the log service within the Fivetran system.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Specifies whether the setup tests should be run automatically. The default value is TRUE.
     * 
     */
    @Import(name="runSetupTests")
    private @Nullable Output<Boolean> runSetupTests;

    /**
     * @return Specifies whether the setup tests should be run automatically. The default value is TRUE.
     * 
     */
    public Optional<Output<Boolean>> runSetupTests() {
        return Optional.ofNullable(this.runSetupTests);
    }

    private GetExternalLoggingArgs() {}

    private GetExternalLoggingArgs(GetExternalLoggingArgs $) {
        this.configs = $.configs;
        this.id = $.id;
        this.runSetupTests = $.runSetupTests;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetExternalLoggingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetExternalLoggingArgs $;

        public Builder() {
            $ = new GetExternalLoggingArgs();
        }

        public Builder(GetExternalLoggingArgs defaults) {
            $ = new GetExternalLoggingArgs(Objects.requireNonNull(defaults));
        }

        public Builder configs(@Nullable Output<List<GetExternalLoggingConfigArgs>> configs) {
            $.configs = configs;
            return this;
        }

        public Builder configs(List<GetExternalLoggingConfigArgs> configs) {
            return configs(Output.of(configs));
        }

        public Builder configs(GetExternalLoggingConfigArgs... configs) {
            return configs(List.of(configs));
        }

        /**
         * @param id The unique identifier for the log service within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique identifier for the log service within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param runSetupTests Specifies whether the setup tests should be run automatically. The default value is TRUE.
         * 
         * @return builder
         * 
         */
        public Builder runSetupTests(@Nullable Output<Boolean> runSetupTests) {
            $.runSetupTests = runSetupTests;
            return this;
        }

        /**
         * @param runSetupTests Specifies whether the setup tests should be run automatically. The default value is TRUE.
         * 
         * @return builder
         * 
         */
        public Builder runSetupTests(Boolean runSetupTests) {
            return runSetupTests(Output.of(runSetupTests));
        }

        public GetExternalLoggingArgs build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            return $;
        }
    }

}
