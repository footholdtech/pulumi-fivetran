// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetConnectorFingerprintsFingerprint extends com.pulumi.resources.InvokeArgs {

    public static final GetConnectorFingerprintsFingerprint Empty = new GetConnectorFingerprintsFingerprint();

    /**
     * Hash of the fingerprint.
     * 
     */
    @Import(name="hash", required=true)
    private String hash;

    /**
     * @return Hash of the fingerprint.
     * 
     */
    public String hash() {
        return this.hash;
    }

    /**
     * The SSH public key.
     * 
     */
    @Import(name="publicKey", required=true)
    private String publicKey;

    /**
     * @return The SSH public key.
     * 
     */
    public String publicKey() {
        return this.publicKey;
    }

    /**
     * User name who validated the fingerprint.
     * 
     */
    @Import(name="validatedBy", required=true)
    private String validatedBy;

    /**
     * @return User name who validated the fingerprint.
     * 
     */
    public String validatedBy() {
        return this.validatedBy;
    }

    /**
     * The date when SSH fingerprint was approved.
     * 
     */
    @Import(name="validatedDate", required=true)
    private String validatedDate;

    /**
     * @return The date when SSH fingerprint was approved.
     * 
     */
    public String validatedDate() {
        return this.validatedDate;
    }

    private GetConnectorFingerprintsFingerprint() {}

    private GetConnectorFingerprintsFingerprint(GetConnectorFingerprintsFingerprint $) {
        this.hash = $.hash;
        this.publicKey = $.publicKey;
        this.validatedBy = $.validatedBy;
        this.validatedDate = $.validatedDate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetConnectorFingerprintsFingerprint defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetConnectorFingerprintsFingerprint $;

        public Builder() {
            $ = new GetConnectorFingerprintsFingerprint();
        }

        public Builder(GetConnectorFingerprintsFingerprint defaults) {
            $ = new GetConnectorFingerprintsFingerprint(Objects.requireNonNull(defaults));
        }

        /**
         * @param hash Hash of the fingerprint.
         * 
         * @return builder
         * 
         */
        public Builder hash(String hash) {
            $.hash = hash;
            return this;
        }

        /**
         * @param publicKey The SSH public key.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param validatedBy User name who validated the fingerprint.
         * 
         * @return builder
         * 
         */
        public Builder validatedBy(String validatedBy) {
            $.validatedBy = validatedBy;
            return this;
        }

        /**
         * @param validatedDate The date when SSH fingerprint was approved.
         * 
         * @return builder
         * 
         */
        public Builder validatedDate(String validatedDate) {
            $.validatedDate = validatedDate;
            return this;
        }

        public GetConnectorFingerprintsFingerprint build() {
            $.hash = Objects.requireNonNull($.hash, "expected parameter 'hash' to be non-null");
            $.publicKey = Objects.requireNonNull($.publicKey, "expected parameter 'publicKey' to be non-null");
            $.validatedBy = Objects.requireNonNull($.validatedBy, "expected parameter 'validatedBy' to be non-null");
            $.validatedDate = Objects.requireNonNull($.validatedDate, "expected parameter 'validatedDate' to be non-null");
            return $;
        }
    }

}
