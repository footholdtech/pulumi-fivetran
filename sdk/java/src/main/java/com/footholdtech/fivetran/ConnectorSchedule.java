// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran;

import com.footholdtech.fivetran.ConnectorScheduleArgs;
import com.footholdtech.fivetran.Utilities;
import com.footholdtech.fivetran.inputs.ConnectorScheduleState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * -This resource allows you to manage connectors schedule: pause/unpause connector, set daily_sync_time and sync_frequency.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.fivetran.ConnectorSchedule;
 * import com.pulumi.fivetran.ConnectorScheduleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myConnectorSchedule = new ConnectorSchedule(&#34;myConnectorSchedule&#34;, ConnectorScheduleArgs.builder()        
 *             .connectorId(fivetran_connector.my_connector().id())
 *             .syncFrequency(&#34;1440&#34;)
 *             .dailySyncTime(&#34;03:00&#34;)
 *             .paused(false)
 *             .pauseAfterTrial(true)
 *             .scheduleType(&#34;auto&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * You don&#39;t need to import this resource as it is synthetic.
 * 
 * To fetch schedule values from existing connector use `fivetran_connector` data sourcehcl data &#34;fivetran_connector&#34; &#34;my_connector&#34; {
 * 
 *  id = &#34;my_connector_id&#34; } now you can use schedule values from this data_source:
 * 
 *  sync_frequency = data.fivetran_connector.my_connector.sync_frequency
 * 
 *  paused = data.fivetran_connector.my_connector.paused This resource manages settings for already existing connector instance and doesn&#39;t create a new one. If you already have an existing connector with id = `my_connector_id` just define `fivetran_connector_schedule` resourcehcl resource &#34;fivetran_connector_schedule&#34; &#34;my_connector_schedule&#34; {
 * 
 *  connector_id = &#34;my_connector_id&#34;
 * 
 *  sync_frequency
 * 
 *  = &#34;360&#34;
 * 
 *  paused
 * 
 *  = false
 * 
 *  pause_after_trial
 * 
 * = true
 * 
 *  schedule_type
 * 
 * = &#34;auto&#34; } -&gt; NOTEYou can&#39;t have several resources managing the same `connector_id`. They will be in conflict ater each `apply`.
 * 
 */
@ResourceType(type="fivetran:index/connectorSchedule:ConnectorSchedule")
public class ConnectorSchedule extends com.pulumi.resources.CustomResource {
    /**
     * The unique identifier for the connector
     * 
     */
    @Export(name="connectorId", refs={String.class}, tree="[0]")
    private Output<String> connectorId;

    /**
     * @return The unique identifier for the connector
     * 
     */
    public Output<String> connectorId() {
        return this.connectorId;
    }
    /**
     * The optional parameter that defines the sync start time when the sync frequency is already set or being set by the current request to 1440. It can be specified in one hour increments starting from 00:00 to 23:00. If not specified, we will use [the baseline sync start time](https://fivetran.com/docs/getting-started/syncoverview#syncfrequencyandscheduling). This parameter has no effect on the [0 to 60 minutes offset](https://fivetran.com/docs/getting-started/syncoverview#syncstarttimesandoffsets) used to determine the actual sync start time
     * 
     */
    @Export(name="dailySyncTime", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dailySyncTime;

    /**
     * @return The optional parameter that defines the sync start time when the sync frequency is already set or being set by the current request to 1440. It can be specified in one hour increments starting from 00:00 to 23:00. If not specified, we will use [the baseline sync start time](https://fivetran.com/docs/getting-started/syncoverview#syncfrequencyandscheduling). This parameter has no effect on the [0 to 60 minutes offset](https://fivetran.com/docs/getting-started/syncoverview#syncstarttimesandoffsets) used to determine the actual sync start time
     * 
     */
    public Output<Optional<String>> dailySyncTime() {
        return Codegen.optional(this.dailySyncTime);
    }
    /**
     * Specifies whether the connector should be paused after the free trial period has ended
     * 
     */
    @Export(name="pauseAfterTrial", refs={String.class}, tree="[0]")
    private Output<String> pauseAfterTrial;

    /**
     * @return Specifies whether the connector should be paused after the free trial period has ended
     * 
     */
    public Output<String> pauseAfterTrial() {
        return this.pauseAfterTrial;
    }
    /**
     * Specifies whether the connector is paused
     * 
     */
    @Export(name="paused", refs={String.class}, tree="[0]")
    private Output<String> paused;

    /**
     * @return Specifies whether the connector is paused
     * 
     */
    public Output<String> paused() {
        return this.paused;
    }
    /**
     * The connector schedule configuration type. Supported values: auto, manual
     * 
     */
    @Export(name="scheduleType", refs={String.class}, tree="[0]")
    private Output<String> scheduleType;

    /**
     * @return The connector schedule configuration type. Supported values: auto, manual
     * 
     */
    public Output<String> scheduleType() {
        return this.scheduleType;
    }
    /**
     * The connector sync frequency in minutes. Supported values: 1, 5, 15, 30, 60, 120, 180, 360, 480, 720, 1440.
     * 
     */
    @Export(name="syncFrequency", refs={String.class}, tree="[0]")
    private Output<String> syncFrequency;

    /**
     * @return The connector sync frequency in minutes. Supported values: 1, 5, 15, 30, 60, 120, 180, 360, 480, 720, 1440.
     * 
     */
    public Output<String> syncFrequency() {
        return this.syncFrequency;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ConnectorSchedule(String name) {
        this(name, ConnectorScheduleArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ConnectorSchedule(String name, ConnectorScheduleArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ConnectorSchedule(String name, ConnectorScheduleArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fivetran:index/connectorSchedule:ConnectorSchedule", name, args == null ? ConnectorScheduleArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ConnectorSchedule(String name, Output<String> id, @Nullable ConnectorScheduleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fivetran:index/connectorSchedule:ConnectorSchedule", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ConnectorSchedule get(String name, Output<String> id, @Nullable ConnectorScheduleState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ConnectorSchedule(name, id, state, options);
    }
}
