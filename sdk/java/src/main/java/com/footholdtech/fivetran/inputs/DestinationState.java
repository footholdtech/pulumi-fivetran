// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.footholdtech.fivetran.inputs.DestinationConfigArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DestinationState extends com.pulumi.resources.ResourceArgs {

    public static final DestinationState Empty = new DestinationState();

    @Import(name="config")
    private @Nullable Output<DestinationConfigArgs> config;

    public Optional<Output<DestinationConfigArgs>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * The unique identifier for the Group within the Fivetran system.
     * 
     */
    @Import(name="groupId")
    private @Nullable Output<String> groupId;

    /**
     * @return The unique identifier for the Group within the Fivetran system.
     * 
     */
    public Optional<Output<String>> groupId() {
        return Optional.ofNullable(this.groupId);
    }

    @Import(name="lastUpdated")
    private @Nullable Output<String> lastUpdated;

    public Optional<Output<String>> lastUpdated() {
        return Optional.ofNullable(this.lastUpdated);
    }

    /**
     * Region of your AWS S3 bucket
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region of your AWS S3 bucket
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Specifies whether the setup tests should be run automatically. The default value is TRUE.
     * 
     */
    @Import(name="runSetupTests")
    private @Nullable Output<Boolean> runSetupTests;

    /**
     * @return Specifies whether the setup tests should be run automatically. The default value is TRUE.
     * 
     */
    public Optional<Output<Boolean>> runSetupTests() {
        return Optional.ofNullable(this.runSetupTests);
    }

    /**
     * The destination type name within the Fivetran system.
     * 
     */
    @Import(name="service")
    private @Nullable Output<String> service;

    /**
     * @return The destination type name within the Fivetran system.
     * 
     */
    public Optional<Output<String>> service() {
        return Optional.ofNullable(this.service);
    }

    /**
     * Destination setup status
     * 
     */
    @Import(name="setupStatus")
    private @Nullable Output<String> setupStatus;

    /**
     * @return Destination setup status
     * 
     */
    public Optional<Output<String>> setupStatus() {
        return Optional.ofNullable(this.setupStatus);
    }

    /**
     * Determines the time zone for the Fivetran sync schedule.
     * 
     */
    @Import(name="timeZoneOffset")
    private @Nullable Output<String> timeZoneOffset;

    /**
     * @return Determines the time zone for the Fivetran sync schedule.
     * 
     */
    public Optional<Output<String>> timeZoneOffset() {
        return Optional.ofNullable(this.timeZoneOffset);
    }

    /**
     * Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
     * 
     */
    @Import(name="trustCertificates")
    private @Nullable Output<Boolean> trustCertificates;

    /**
     * @return Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
     * 
     */
    public Optional<Output<Boolean>> trustCertificates() {
        return Optional.ofNullable(this.trustCertificates);
    }

    /**
     * Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
     * 
     */
    @Import(name="trustFingerprints")
    private @Nullable Output<Boolean> trustFingerprints;

    /**
     * @return Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
     * 
     */
    public Optional<Output<Boolean>> trustFingerprints() {
        return Optional.ofNullable(this.trustFingerprints);
    }

    private DestinationState() {}

    private DestinationState(DestinationState $) {
        this.config = $.config;
        this.groupId = $.groupId;
        this.lastUpdated = $.lastUpdated;
        this.region = $.region;
        this.runSetupTests = $.runSetupTests;
        this.service = $.service;
        this.setupStatus = $.setupStatus;
        this.timeZoneOffset = $.timeZoneOffset;
        this.trustCertificates = $.trustCertificates;
        this.trustFingerprints = $.trustFingerprints;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DestinationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DestinationState $;

        public Builder() {
            $ = new DestinationState();
        }

        public Builder(DestinationState defaults) {
            $ = new DestinationState(Objects.requireNonNull(defaults));
        }

        public Builder config(@Nullable Output<DestinationConfigArgs> config) {
            $.config = config;
            return this;
        }

        public Builder config(DestinationConfigArgs config) {
            return config(Output.of(config));
        }

        /**
         * @param groupId The unique identifier for the Group within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder groupId(@Nullable Output<String> groupId) {
            $.groupId = groupId;
            return this;
        }

        /**
         * @param groupId The unique identifier for the Group within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder groupId(String groupId) {
            return groupId(Output.of(groupId));
        }

        public Builder lastUpdated(@Nullable Output<String> lastUpdated) {
            $.lastUpdated = lastUpdated;
            return this;
        }

        public Builder lastUpdated(String lastUpdated) {
            return lastUpdated(Output.of(lastUpdated));
        }

        /**
         * @param region Region of your AWS S3 bucket
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region of your AWS S3 bucket
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param runSetupTests Specifies whether the setup tests should be run automatically. The default value is TRUE.
         * 
         * @return builder
         * 
         */
        public Builder runSetupTests(@Nullable Output<Boolean> runSetupTests) {
            $.runSetupTests = runSetupTests;
            return this;
        }

        /**
         * @param runSetupTests Specifies whether the setup tests should be run automatically. The default value is TRUE.
         * 
         * @return builder
         * 
         */
        public Builder runSetupTests(Boolean runSetupTests) {
            return runSetupTests(Output.of(runSetupTests));
        }

        /**
         * @param service The destination type name within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder service(@Nullable Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service The destination type name within the Fivetran system.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param setupStatus Destination setup status
         * 
         * @return builder
         * 
         */
        public Builder setupStatus(@Nullable Output<String> setupStatus) {
            $.setupStatus = setupStatus;
            return this;
        }

        /**
         * @param setupStatus Destination setup status
         * 
         * @return builder
         * 
         */
        public Builder setupStatus(String setupStatus) {
            return setupStatus(Output.of(setupStatus));
        }

        /**
         * @param timeZoneOffset Determines the time zone for the Fivetran sync schedule.
         * 
         * @return builder
         * 
         */
        public Builder timeZoneOffset(@Nullable Output<String> timeZoneOffset) {
            $.timeZoneOffset = timeZoneOffset;
            return this;
        }

        /**
         * @param timeZoneOffset Determines the time zone for the Fivetran sync schedule.
         * 
         * @return builder
         * 
         */
        public Builder timeZoneOffset(String timeZoneOffset) {
            return timeZoneOffset(Output.of(timeZoneOffset));
        }

        /**
         * @param trustCertificates Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
         * 
         * @return builder
         * 
         */
        public Builder trustCertificates(@Nullable Output<Boolean> trustCertificates) {
            $.trustCertificates = trustCertificates;
            return this;
        }

        /**
         * @param trustCertificates Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
         * 
         * @return builder
         * 
         */
        public Builder trustCertificates(Boolean trustCertificates) {
            return trustCertificates(Output.of(trustCertificates));
        }

        /**
         * @param trustFingerprints Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
         * 
         * @return builder
         * 
         */
        public Builder trustFingerprints(@Nullable Output<Boolean> trustFingerprints) {
            $.trustFingerprints = trustFingerprints;
            return this;
        }

        /**
         * @param trustFingerprints Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
         * 
         * @return builder
         * 
         */
        public Builder trustFingerprints(Boolean trustFingerprints) {
            return trustFingerprints(Output.of(trustFingerprints));
        }

        public DestinationState build() {
            return $;
        }
    }

}
