// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDestinationConfig extends com.pulumi.resources.InvokeArgs {

    public static final GetDestinationConfig Empty = new GetDestinationConfig();

    /**
     * The connector authorization settings. Check possible config formats in [create method](https://www.terraform.io/openapi/reference/v1/operation/create_connector/)
     * 
     */
    @Import(name="auth")
    private @Nullable String auth;

    /**
     * @return The connector authorization settings. Check possible config formats in [create method](https://www.terraform.io/openapi/reference/v1/operation/create_connector/)
     * 
     */
    public Optional<String> auth() {
        return Optional.ofNullable(this.auth);
    }

    /**
     * Authentication type. Default value: `PASSWORD`.
     * 
     */
    @Import(name="authType")
    private @Nullable String authType;

    /**
     * @return Authentication type. Default value: `PASSWORD`.
     * 
     */
    public Optional<String> authType() {
        return Optional.ofNullable(this.authType);
    }

    /**
     * Customer bucket. If specified, your GCS bucket will be used to process the data instead of a Fivetran-managed bucket. The bucket must be present in the same location as the dataset location.
     * 
     */
    @Import(name="bucket")
    private @Nullable String bucket;

    /**
     * @return Customer bucket. If specified, your GCS bucket will be used to process the data instead of a Fivetran-managed bucket. The bucket must be present in the same location as the dataset location.
     * 
     */
    public Optional<String> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    /**
     * Catalog name
     * 
     */
    @Import(name="catalog")
    private @Nullable String catalog;

    /**
     * @return Catalog name
     * 
     */
    public Optional<String> catalog() {
        return Optional.ofNullable(this.catalog);
    }

    /**
     * ClientId of your Azure Data Lake Storage
     * 
     */
    @Import(name="clientId")
    private @Nullable String clientId;

    /**
     * @return ClientId of your Azure Data Lake Storage
     * 
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * Cluster ID. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
     * 
     */
    @Import(name="clusterId")
    private @Nullable String clusterId;

    /**
     * @return Cluster ID. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
     * 
     */
    public Optional<String> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * Cluster region. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
     * 
     */
    @Import(name="clusterRegion")
    private @Nullable String clusterRegion;

    /**
     * @return Cluster region. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
     * 
     */
    public Optional<String> clusterRegion() {
        return Optional.ofNullable(this.clusterRegion);
    }

    /**
     * Connection method. Default value: `Directly`.
     * 
     */
    @Import(name="connectionType")
    private @Nullable String connectionType;

    /**
     * @return Connection method. Default value: `Directly`.
     * 
     */
    public Optional<String> connectionType() {
        return Optional.ofNullable(this.connectionType);
    }

    /**
     * Container Name of your Azure Data Lake Storage
     * 
     */
    @Import(name="containerName")
    private @Nullable String containerName;

    /**
     * @return Container Name of your Azure Data Lake Storage
     * 
     */
    public Optional<String> containerName() {
        return Optional.ofNullable(this.containerName);
    }

    /**
     * Whether to create external tables
     * 
     */
    @Import(name="createExternalTables")
    private @Nullable String createExternalTables;

    /**
     * @return Whether to create external tables
     * 
     */
    public Optional<String> createExternalTables() {
        return Optional.ofNullable(this.createExternalTables);
    }

    /**
     * Data location. Datasets will reside in this location.
     * 
     */
    @Import(name="dataSetLocation")
    private @Nullable String dataSetLocation;

    /**
     * @return Data location. Datasets will reside in this location.
     * 
     */
    public Optional<String> dataSetLocation() {
        return Optional.ofNullable(this.dataSetLocation);
    }

    /**
     * Database name
     * 
     */
    @Import(name="database")
    private @Nullable String database;

    /**
     * @return Database name
     * 
     */
    public Optional<String> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * External location to store Delta tables. Default value: `&#34;&#34;`  (null). By default, the external tables will reside in the `/{schema}/{table}` path, and if you specify an external location in the `{externalLocation}/{schema}/{table}` path.
     * 
     */
    @Import(name="externalLocation")
    private @Nullable String externalLocation;

    /**
     * @return External location to store Delta tables. Default value: `&#34;&#34;`  (null). By default, the external tables will reside in the `/{schema}/{table}` path, and if you specify an external location in the `{externalLocation}/{schema}/{table}` path.
     * 
     */
    public Optional<String> externalLocation() {
        return Optional.ofNullable(this.externalLocation);
    }

    /**
     * ARN of the role which you created with different required policy mentioned in our setup guide
     * 
     */
    @Import(name="fivetranRoleArn")
    private @Nullable String fivetranRoleArn;

    /**
     * @return ARN of the role which you created with different required policy mentioned in our setup guide
     * 
     */
    public Optional<String> fivetranRoleArn() {
        return Optional.ofNullable(this.fivetranRoleArn);
    }

    /**
     * Server name
     * 
     */
    @Import(name="host")
    private @Nullable String host;

    /**
     * @return Server name
     * 
     */
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * HTTP path
     * 
     */
    @Import(name="httpPath")
    private @Nullable String httpPath;

    /**
     * @return HTTP path
     * 
     */
    public Optional<String> httpPath() {
        return Optional.ofNullable(this.httpPath);
    }

    /**
     * Indicates that a private key is encrypted. The default value: `false`. The field can be specified if authentication type is `KEY_PAIR`.
     * 
     */
    @Import(name="isPrivateKeyEncrypted", required=true)
    private String isPrivateKeyEncrypted;

    /**
     * @return Indicates that a private key is encrypted. The default value: `false`. The field can be specified if authentication type is `KEY_PAIR`.
     * 
     */
    public String isPrivateKeyEncrypted() {
        return this.isPrivateKeyEncrypted;
    }

    /**
     * OneLake lakehouse name
     * 
     */
    @Import(name="lakehouseName")
    private @Nullable String lakehouseName;

    /**
     * @return OneLake lakehouse name
     * 
     */
    public Optional<String> lakehouseName() {
        return Optional.ofNullable(this.lakehouseName);
    }

    /**
     * In case private key is encrypted, you are required to enter passphrase that was used to encrypt the private key. The field can be specified if authentication type is `KEY_PAIR`.
     * 
     */
    @Import(name="passphrase")
    private @Nullable String passphrase;

    /**
     * @return In case private key is encrypted, you are required to enter passphrase that was used to encrypt the private key. The field can be specified if authentication type is `KEY_PAIR`.
     * 
     */
    public Optional<String> passphrase() {
        return Optional.ofNullable(this.passphrase);
    }

    /**
     * Database user password
     * 
     */
    @Import(name="password")
    private @Nullable String password;

    /**
     * @return Database user password
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Personal access token
     * 
     */
    @Import(name="personalAccessToken")
    private @Nullable String personalAccessToken;

    /**
     * @return Personal access token
     * 
     */
    public Optional<String> personalAccessToken() {
        return Optional.ofNullable(this.personalAccessToken);
    }

    /**
     * Server port number
     * 
     */
    @Import(name="port")
    private @Nullable Integer port;

    /**
     * @return Server port number
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Prefix path of the bucket for which you have configured access policy. It is not required if access has been granted to entire Bucket in the access policy
     * 
     */
    @Import(name="prefixPath")
    private @Nullable String prefixPath;

    /**
     * @return Prefix path of the bucket for which you have configured access policy. It is not required if access has been granted to entire Bucket in the access policy
     * 
     */
    public Optional<String> prefixPath() {
        return Optional.ofNullable(this.prefixPath);
    }

    /**
     * Private access key.  The field should be specified if authentication type is `KEY_PAIR`.
     * 
     */
    @Import(name="privateKey")
    private @Nullable String privateKey;

    /**
     * @return Private access key.  The field should be specified if authentication type is `KEY_PAIR`.
     * 
     */
    public Optional<String> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * BigQuery project ID
     * 
     */
    @Import(name="projectId")
    private @Nullable String projectId;

    /**
     * @return BigQuery project ID
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Public key to grant Fivetran SSH access to git repository.
     * 
     */
    @Import(name="publicKey", required=true)
    private String publicKey;

    /**
     * @return Public key to grant Fivetran SSH access to git repository.
     * 
     */
    public String publicKey() {
        return this.publicKey;
    }

    /**
     * Region of your AWS S3 bucket
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    /**
     * @return Region of your AWS S3 bucket
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The group role that you would like to assign this new user to. Supported group roles: ‘Destination Administrator‘, ‘Destination Reviewer‘, ‘Destination Analyst‘, ‘Connector Creator‘, or a custom destination role
     * 
     */
    @Import(name="role")
    private @Nullable String role;

    /**
     * @return The group role that you would like to assign this new user to. Supported group roles: ‘Destination Administrator‘, ‘Destination Reviewer‘, ‘Destination Analyst‘, ‘Connector Creator‘, or a custom destination role
     * 
     */
    public Optional<String> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * Role ARN with Redshift permissions. Required if authentication type is `IAM`.
     * 
     */
    @Import(name="roleArn")
    private @Nullable String roleArn;

    /**
     * @return Role ARN with Redshift permissions. Required if authentication type is `IAM`.
     * 
     */
    public Optional<String> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    /**
     * Private key of the customer service account. If specified, your service account will be used to process the data instead of the Fivetran-managed service account.
     * 
     */
    @Import(name="secretKey")
    private @Nullable String secretKey;

    /**
     * @return Private key of the customer service account. If specified, your service account will be used to process the data instead of the Fivetran-managed service account.
     * 
     */
    public Optional<String> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    /**
     * Secret Value of your Azure Data Lake Storage
     * 
     */
    @Import(name="secretValue")
    private @Nullable String secretValue;

    /**
     * @return Secret Value of your Azure Data Lake Storage
     * 
     */
    public Optional<String> secretValue() {
        return Optional.ofNullable(this.secretValue);
    }

    /**
     * Server name
     * 
     */
    @Import(name="serverHostName")
    private @Nullable String serverHostName;

    /**
     * @return Server name
     * 
     */
    public Optional<String> serverHostName() {
        return Optional.ofNullable(this.serverHostName);
    }

    /**
     * Storage Account Name of your Azure Data Lake Storage
     * 
     */
    @Import(name="storageAccountName")
    private @Nullable String storageAccountName;

    /**
     * @return Storage Account Name of your Azure Data Lake Storage
     * 
     */
    public Optional<String> storageAccountName() {
        return Optional.ofNullable(this.storageAccountName);
    }

    /**
     * TenantId of your Azure Data Lake Storage
     * 
     */
    @Import(name="tenantId")
    private @Nullable String tenantId;

    /**
     * @return TenantId of your Azure Data Lake Storage
     * 
     */
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    /**
     * SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
     * 
     */
    @Import(name="tunnelHost")
    private @Nullable String tunnelHost;

    /**
     * @return SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
     * 
     */
    public Optional<String> tunnelHost() {
        return Optional.ofNullable(this.tunnelHost);
    }

    /**
     * SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
     * 
     */
    @Import(name="tunnelPort")
    private @Nullable String tunnelPort;

    /**
     * @return SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
     * 
     */
    public Optional<String> tunnelPort() {
        return Optional.ofNullable(this.tunnelPort);
    }

    /**
     * SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
     * 
     */
    @Import(name="tunnelUser")
    private @Nullable String tunnelUser;

    /**
     * @return SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
     * 
     */
    public Optional<String> tunnelUser() {
        return Optional.ofNullable(this.tunnelUser);
    }

    /**
     * Database user name
     * 
     */
    @Import(name="user")
    private @Nullable String user;

    /**
     * @return Database user name
     * 
     */
    public Optional<String> user() {
        return Optional.ofNullable(this.user);
    }

    /**
     * OneLake workspace name
     * 
     */
    @Import(name="workspaceName")
    private @Nullable String workspaceName;

    /**
     * @return OneLake workspace name
     * 
     */
    public Optional<String> workspaceName() {
        return Optional.ofNullable(this.workspaceName);
    }

    private GetDestinationConfig() {}

    private GetDestinationConfig(GetDestinationConfig $) {
        this.auth = $.auth;
        this.authType = $.authType;
        this.bucket = $.bucket;
        this.catalog = $.catalog;
        this.clientId = $.clientId;
        this.clusterId = $.clusterId;
        this.clusterRegion = $.clusterRegion;
        this.connectionType = $.connectionType;
        this.containerName = $.containerName;
        this.createExternalTables = $.createExternalTables;
        this.dataSetLocation = $.dataSetLocation;
        this.database = $.database;
        this.externalLocation = $.externalLocation;
        this.fivetranRoleArn = $.fivetranRoleArn;
        this.host = $.host;
        this.httpPath = $.httpPath;
        this.isPrivateKeyEncrypted = $.isPrivateKeyEncrypted;
        this.lakehouseName = $.lakehouseName;
        this.passphrase = $.passphrase;
        this.password = $.password;
        this.personalAccessToken = $.personalAccessToken;
        this.port = $.port;
        this.prefixPath = $.prefixPath;
        this.privateKey = $.privateKey;
        this.projectId = $.projectId;
        this.publicKey = $.publicKey;
        this.region = $.region;
        this.role = $.role;
        this.roleArn = $.roleArn;
        this.secretKey = $.secretKey;
        this.secretValue = $.secretValue;
        this.serverHostName = $.serverHostName;
        this.storageAccountName = $.storageAccountName;
        this.tenantId = $.tenantId;
        this.tunnelHost = $.tunnelHost;
        this.tunnelPort = $.tunnelPort;
        this.tunnelUser = $.tunnelUser;
        this.user = $.user;
        this.workspaceName = $.workspaceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDestinationConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDestinationConfig $;

        public Builder() {
            $ = new GetDestinationConfig();
        }

        public Builder(GetDestinationConfig defaults) {
            $ = new GetDestinationConfig(Objects.requireNonNull(defaults));
        }

        /**
         * @param auth The connector authorization settings. Check possible config formats in [create method](https://www.terraform.io/openapi/reference/v1/operation/create_connector/)
         * 
         * @return builder
         * 
         */
        public Builder auth(@Nullable String auth) {
            $.auth = auth;
            return this;
        }

        /**
         * @param authType Authentication type. Default value: `PASSWORD`.
         * 
         * @return builder
         * 
         */
        public Builder authType(@Nullable String authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param bucket Customer bucket. If specified, your GCS bucket will be used to process the data instead of a Fivetran-managed bucket. The bucket must be present in the same location as the dataset location.
         * 
         * @return builder
         * 
         */
        public Builder bucket(@Nullable String bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param catalog Catalog name
         * 
         * @return builder
         * 
         */
        public Builder catalog(@Nullable String catalog) {
            $.catalog = catalog;
            return this;
        }

        /**
         * @param clientId ClientId of your Azure Data Lake Storage
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable String clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clusterId Cluster ID. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable String clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterRegion Cluster region. Must be populated if `connection_type` is set to `SshTunnel` and `auth_type` is set to `IAM`.
         * 
         * @return builder
         * 
         */
        public Builder clusterRegion(@Nullable String clusterRegion) {
            $.clusterRegion = clusterRegion;
            return this;
        }

        /**
         * @param connectionType Connection method. Default value: `Directly`.
         * 
         * @return builder
         * 
         */
        public Builder connectionType(@Nullable String connectionType) {
            $.connectionType = connectionType;
            return this;
        }

        /**
         * @param containerName Container Name of your Azure Data Lake Storage
         * 
         * @return builder
         * 
         */
        public Builder containerName(@Nullable String containerName) {
            $.containerName = containerName;
            return this;
        }

        /**
         * @param createExternalTables Whether to create external tables
         * 
         * @return builder
         * 
         */
        public Builder createExternalTables(@Nullable String createExternalTables) {
            $.createExternalTables = createExternalTables;
            return this;
        }

        /**
         * @param dataSetLocation Data location. Datasets will reside in this location.
         * 
         * @return builder
         * 
         */
        public Builder dataSetLocation(@Nullable String dataSetLocation) {
            $.dataSetLocation = dataSetLocation;
            return this;
        }

        /**
         * @param database Database name
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable String database) {
            $.database = database;
            return this;
        }

        /**
         * @param externalLocation External location to store Delta tables. Default value: `&#34;&#34;`  (null). By default, the external tables will reside in the `/{schema}/{table}` path, and if you specify an external location in the `{externalLocation}/{schema}/{table}` path.
         * 
         * @return builder
         * 
         */
        public Builder externalLocation(@Nullable String externalLocation) {
            $.externalLocation = externalLocation;
            return this;
        }

        /**
         * @param fivetranRoleArn ARN of the role which you created with different required policy mentioned in our setup guide
         * 
         * @return builder
         * 
         */
        public Builder fivetranRoleArn(@Nullable String fivetranRoleArn) {
            $.fivetranRoleArn = fivetranRoleArn;
            return this;
        }

        /**
         * @param host Server name
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable String host) {
            $.host = host;
            return this;
        }

        /**
         * @param httpPath HTTP path
         * 
         * @return builder
         * 
         */
        public Builder httpPath(@Nullable String httpPath) {
            $.httpPath = httpPath;
            return this;
        }

        /**
         * @param isPrivateKeyEncrypted Indicates that a private key is encrypted. The default value: `false`. The field can be specified if authentication type is `KEY_PAIR`.
         * 
         * @return builder
         * 
         */
        public Builder isPrivateKeyEncrypted(String isPrivateKeyEncrypted) {
            $.isPrivateKeyEncrypted = isPrivateKeyEncrypted;
            return this;
        }

        /**
         * @param lakehouseName OneLake lakehouse name
         * 
         * @return builder
         * 
         */
        public Builder lakehouseName(@Nullable String lakehouseName) {
            $.lakehouseName = lakehouseName;
            return this;
        }

        /**
         * @param passphrase In case private key is encrypted, you are required to enter passphrase that was used to encrypt the private key. The field can be specified if authentication type is `KEY_PAIR`.
         * 
         * @return builder
         * 
         */
        public Builder passphrase(@Nullable String passphrase) {
            $.passphrase = passphrase;
            return this;
        }

        /**
         * @param password Database user password
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable String password) {
            $.password = password;
            return this;
        }

        /**
         * @param personalAccessToken Personal access token
         * 
         * @return builder
         * 
         */
        public Builder personalAccessToken(@Nullable String personalAccessToken) {
            $.personalAccessToken = personalAccessToken;
            return this;
        }

        /**
         * @param port Server port number
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Integer port) {
            $.port = port;
            return this;
        }

        /**
         * @param prefixPath Prefix path of the bucket for which you have configured access policy. It is not required if access has been granted to entire Bucket in the access policy
         * 
         * @return builder
         * 
         */
        public Builder prefixPath(@Nullable String prefixPath) {
            $.prefixPath = prefixPath;
            return this;
        }

        /**
         * @param privateKey Private access key.  The field should be specified if authentication type is `KEY_PAIR`.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable String privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param projectId BigQuery project ID
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable String projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param publicKey Public key to grant Fivetran SSH access to git repository.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param region Region of your AWS S3 bucket
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        /**
         * @param role The group role that you would like to assign this new user to. Supported group roles: ‘Destination Administrator‘, ‘Destination Reviewer‘, ‘Destination Analyst‘, ‘Connector Creator‘, or a custom destination role
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable String role) {
            $.role = role;
            return this;
        }

        /**
         * @param roleArn Role ARN with Redshift permissions. Required if authentication type is `IAM`.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(@Nullable String roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param secretKey Private key of the customer service account. If specified, your service account will be used to process the data instead of the Fivetran-managed service account.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(@Nullable String secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretValue Secret Value of your Azure Data Lake Storage
         * 
         * @return builder
         * 
         */
        public Builder secretValue(@Nullable String secretValue) {
            $.secretValue = secretValue;
            return this;
        }

        /**
         * @param serverHostName Server name
         * 
         * @return builder
         * 
         */
        public Builder serverHostName(@Nullable String serverHostName) {
            $.serverHostName = serverHostName;
            return this;
        }

        /**
         * @param storageAccountName Storage Account Name of your Azure Data Lake Storage
         * 
         * @return builder
         * 
         */
        public Builder storageAccountName(@Nullable String storageAccountName) {
            $.storageAccountName = storageAccountName;
            return this;
        }

        /**
         * @param tenantId TenantId of your Azure Data Lake Storage
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable String tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tunnelHost SSH server name. Must be populated if `connection_type` is set to `SshTunnel`.
         * 
         * @return builder
         * 
         */
        public Builder tunnelHost(@Nullable String tunnelHost) {
            $.tunnelHost = tunnelHost;
            return this;
        }

        /**
         * @param tunnelPort SSH server port name. Must be populated if `connection_type` is set to `SshTunnel`.
         * 
         * @return builder
         * 
         */
        public Builder tunnelPort(@Nullable String tunnelPort) {
            $.tunnelPort = tunnelPort;
            return this;
        }

        /**
         * @param tunnelUser SSH user name. Must be populated if `connection_type` is set to `SshTunnel`.
         * 
         * @return builder
         * 
         */
        public Builder tunnelUser(@Nullable String tunnelUser) {
            $.tunnelUser = tunnelUser;
            return this;
        }

        /**
         * @param user Database user name
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable String user) {
            $.user = user;
            return this;
        }

        /**
         * @param workspaceName OneLake workspace name
         * 
         * @return builder
         * 
         */
        public Builder workspaceName(@Nullable String workspaceName) {
            $.workspaceName = workspaceName;
            return this;
        }

        public GetDestinationConfig build() {
            $.isPrivateKeyEncrypted = Objects.requireNonNull($.isPrivateKeyEncrypted, "expected parameter 'isPrivateKeyEncrypted' to be non-null");
            $.publicKey = Objects.requireNonNull($.publicKey, "expected parameter 'publicKey' to be non-null");
            return $;
        }
    }

}
