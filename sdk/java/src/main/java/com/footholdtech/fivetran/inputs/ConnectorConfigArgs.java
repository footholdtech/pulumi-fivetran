// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.footholdtech.fivetran.inputs.ConnectorConfigAccountsRedditAdArgs;
import com.footholdtech.fivetran.inputs.ConnectorConfigAdobeAnalyticsConfigurationArgs;
import com.footholdtech.fivetran.inputs.ConnectorConfigAppIdsAppsflyerArgs;
import com.footholdtech.fivetran.inputs.ConnectorConfigCustomReportArgs;
import com.footholdtech.fivetran.inputs.ConnectorConfigCustomTableArgs;
import com.footholdtech.fivetran.inputs.ConnectorConfigProjectCredentialArgs;
import com.footholdtech.fivetran.inputs.ConnectorConfigReportArgs;
import com.footholdtech.fivetran.inputs.ConnectorConfigSecretsListArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorConfigArgs Empty = new ConnectorConfigArgs();

    @Import(name="absConnectionMethod")
    private @Nullable Output<String> absConnectionMethod;

    public Optional<Output<String>> absConnectionMethod() {
        return Optional.ofNullable(this.absConnectionMethod);
    }

    @Import(name="absConnectionString")
    private @Nullable Output<String> absConnectionString;

    public Optional<Output<String>> absConnectionString() {
        return Optional.ofNullable(this.absConnectionString);
    }

    @Import(name="absContainerAddress")
    private @Nullable Output<String> absContainerAddress;

    public Optional<Output<String>> absContainerAddress() {
        return Optional.ofNullable(this.absContainerAddress);
    }

    @Import(name="absContainerName")
    private @Nullable Output<String> absContainerName;

    public Optional<Output<String>> absContainerName() {
        return Optional.ofNullable(this.absContainerName);
    }

    @Import(name="absHostIp")
    private @Nullable Output<String> absHostIp;

    public Optional<Output<String>> absHostIp() {
        return Optional.ofNullable(this.absHostIp);
    }

    @Import(name="absHostUser")
    private @Nullable Output<String> absHostUser;

    public Optional<Output<String>> absHostUser() {
        return Optional.ofNullable(this.absHostUser);
    }

    @Import(name="absPrefix")
    private @Nullable Output<String> absPrefix;

    public Optional<Output<String>> absPrefix() {
        return Optional.ofNullable(this.absPrefix);
    }

    @Import(name="absPublicKey")
    private @Nullable Output<String> absPublicKey;

    public Optional<Output<String>> absPublicKey() {
        return Optional.ofNullable(this.absPublicKey);
    }

    @Import(name="accessKey")
    private @Nullable Output<String> accessKey;

    public Optional<Output<String>> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }

    @Import(name="accessKeyId")
    private @Nullable Output<String> accessKeyId;

    public Optional<Output<String>> accessKeyId() {
        return Optional.ofNullable(this.accessKeyId);
    }

    @Import(name="accessKeySecret")
    private @Nullable Output<String> accessKeySecret;

    public Optional<Output<String>> accessKeySecret() {
        return Optional.ofNullable(this.accessKeySecret);
    }

    @Import(name="accessToken")
    private @Nullable Output<String> accessToken;

    public Optional<Output<String>> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    @Import(name="accessType")
    private @Nullable Output<String> accessType;

    public Optional<Output<String>> accessType() {
        return Optional.ofNullable(this.accessType);
    }

    @Import(name="account")
    private @Nullable Output<String> account;

    public Optional<Output<String>> account() {
        return Optional.ofNullable(this.account);
    }

    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    @Import(name="accountIds")
    private @Nullable Output<List<String>> accountIds;

    public Optional<Output<List<String>>> accountIds() {
        return Optional.ofNullable(this.accountIds);
    }

    @Import(name="accountKey")
    private @Nullable Output<String> accountKey;

    public Optional<Output<String>> accountKey() {
        return Optional.ofNullable(this.accountKey);
    }

    @Import(name="accountName")
    private @Nullable Output<String> accountName;

    public Optional<Output<String>> accountName() {
        return Optional.ofNullable(this.accountName);
    }

    @Import(name="accountSyncMode")
    private @Nullable Output<String> accountSyncMode;

    public Optional<Output<String>> accountSyncMode() {
        return Optional.ofNullable(this.accountSyncMode);
    }

    @Import(name="accounts")
    private @Nullable Output<List<String>> accounts;

    public Optional<Output<List<String>>> accounts() {
        return Optional.ofNullable(this.accounts);
    }

    @Import(name="accountsRedditAds")
    private @Nullable Output<List<ConnectorConfigAccountsRedditAdArgs>> accountsRedditAds;

    public Optional<Output<List<ConnectorConfigAccountsRedditAdArgs>>> accountsRedditAds() {
        return Optional.ofNullable(this.accountsRedditAds);
    }

    @Import(name="accountsSyncMode")
    private @Nullable Output<String> accountsSyncMode;

    public Optional<Output<String>> accountsSyncMode() {
        return Optional.ofNullable(this.accountsSyncMode);
    }

    @Import(name="actionBreakdowns")
    private @Nullable Output<List<String>> actionBreakdowns;

    public Optional<Output<List<String>>> actionBreakdowns() {
        return Optional.ofNullable(this.actionBreakdowns);
    }

    @Import(name="actionReportTime")
    private @Nullable Output<String> actionReportTime;

    public Optional<Output<String>> actionReportTime() {
        return Optional.ofNullable(this.actionReportTime);
    }

    @Import(name="adAnalytics")
    private @Nullable Output<String> adAnalytics;

    public Optional<Output<String>> adAnalytics() {
        return Optional.ofNullable(this.adAnalytics);
    }

    @Import(name="adUnitView")
    private @Nullable Output<String> adUnitView;

    public Optional<Output<String>> adUnitView() {
        return Optional.ofNullable(this.adUnitView);
    }

    @Import(name="adminApiKey")
    private @Nullable Output<String> adminApiKey;

    public Optional<Output<String>> adminApiKey() {
        return Optional.ofNullable(this.adminApiKey);
    }

    @Import(name="adobeAnalyticsConfigurations")
    private @Nullable Output<List<ConnectorConfigAdobeAnalyticsConfigurationArgs>> adobeAnalyticsConfigurations;

    public Optional<Output<List<ConnectorConfigAdobeAnalyticsConfigurationArgs>>> adobeAnalyticsConfigurations() {
        return Optional.ofNullable(this.adobeAnalyticsConfigurations);
    }

    @Import(name="advertisables")
    private @Nullable Output<List<String>> advertisables;

    public Optional<Output<List<String>>> advertisables() {
        return Optional.ofNullable(this.advertisables);
    }

    @Import(name="advertisers")
    private @Nullable Output<List<String>> advertisers;

    public Optional<Output<List<String>>> advertisers() {
        return Optional.ofNullable(this.advertisers);
    }

    @Import(name="advertisersIds")
    private @Nullable Output<List<String>> advertisersIds;

    public Optional<Output<List<String>>> advertisersIds() {
        return Optional.ofNullable(this.advertisersIds);
    }

    @Import(name="advertisersSyncMode")
    private @Nullable Output<String> advertisersSyncMode;

    public Optional<Output<String>> advertisersSyncMode() {
        return Optional.ofNullable(this.advertisersSyncMode);
    }

    @Import(name="agentHost")
    private @Nullable Output<String> agentHost;

    public Optional<Output<String>> agentHost() {
        return Optional.ofNullable(this.agentHost);
    }

    @Import(name="agentOraHome")
    private @Nullable Output<String> agentOraHome;

    public Optional<Output<String>> agentOraHome() {
        return Optional.ofNullable(this.agentOraHome);
    }

    @Import(name="agentPassword")
    private @Nullable Output<String> agentPassword;

    public Optional<Output<String>> agentPassword() {
        return Optional.ofNullable(this.agentPassword);
    }

    @Import(name="agentPort")
    private @Nullable Output<String> agentPort;

    public Optional<Output<String>> agentPort() {
        return Optional.ofNullable(this.agentPort);
    }

    @Import(name="agentPublicCert")
    private @Nullable Output<String> agentPublicCert;

    public Optional<Output<String>> agentPublicCert() {
        return Optional.ofNullable(this.agentPublicCert);
    }

    @Import(name="agentUser")
    private @Nullable Output<String> agentUser;

    public Optional<Output<String>> agentUser() {
        return Optional.ofNullable(this.agentUser);
    }

    @Import(name="aggregation")
    private @Nullable Output<String> aggregation;

    public Optional<Output<String>> aggregation() {
        return Optional.ofNullable(this.aggregation);
    }

    @Import(name="alwaysEncrypted")
    private @Nullable Output<String> alwaysEncrypted;

    public Optional<Output<String>> alwaysEncrypted() {
        return Optional.ofNullable(this.alwaysEncrypted);
    }

    @Import(name="apiAccessToken")
    private @Nullable Output<String> apiAccessToken;

    public Optional<Output<String>> apiAccessToken() {
        return Optional.ofNullable(this.apiAccessToken);
    }

    @Import(name="apiId")
    private @Nullable Output<String> apiId;

    public Optional<Output<String>> apiId() {
        return Optional.ofNullable(this.apiId);
    }

    @Import(name="apiKey")
    private @Nullable Output<String> apiKey;

    public Optional<Output<String>> apiKey() {
        return Optional.ofNullable(this.apiKey);
    }

    @Import(name="apiKeyApiSecret")
    private @Nullable Output<String> apiKeyApiSecret;

    public Optional<Output<String>> apiKeyApiSecret() {
        return Optional.ofNullable(this.apiKeyApiSecret);
    }

    @Import(name="apiKeys")
    private @Nullable Output<List<String>> apiKeys;

    public Optional<Output<List<String>>> apiKeys() {
        return Optional.ofNullable(this.apiKeys);
    }

    @Import(name="apiQuota")
    private @Nullable Output<String> apiQuota;

    public Optional<Output<String>> apiQuota() {
        return Optional.ofNullable(this.apiQuota);
    }

    @Import(name="apiRequestsPerMinute")
    private @Nullable Output<String> apiRequestsPerMinute;

    public Optional<Output<String>> apiRequestsPerMinute() {
        return Optional.ofNullable(this.apiRequestsPerMinute);
    }

    @Import(name="apiSecret")
    private @Nullable Output<String> apiSecret;

    public Optional<Output<String>> apiSecret() {
        return Optional.ofNullable(this.apiSecret);
    }

    @Import(name="apiSecretKey")
    private @Nullable Output<String> apiSecretKey;

    public Optional<Output<String>> apiSecretKey() {
        return Optional.ofNullable(this.apiSecretKey);
    }

    @Import(name="apiToken")
    private @Nullable Output<String> apiToken;

    public Optional<Output<String>> apiToken() {
        return Optional.ofNullable(this.apiToken);
    }

    @Import(name="apiType")
    private @Nullable Output<String> apiType;

    public Optional<Output<String>> apiType() {
        return Optional.ofNullable(this.apiType);
    }

    @Import(name="apiUrl")
    private @Nullable Output<String> apiUrl;

    public Optional<Output<String>> apiUrl() {
        return Optional.ofNullable(this.apiUrl);
    }

    @Import(name="apiUsage")
    private @Nullable Output<String> apiUsage;

    public Optional<Output<String>> apiUsage() {
        return Optional.ofNullable(this.apiUsage);
    }

    @Import(name="apiUtilizationPercentage")
    private @Nullable Output<String> apiUtilizationPercentage;

    public Optional<Output<String>> apiUtilizationPercentage() {
        return Optional.ofNullable(this.apiUtilizationPercentage);
    }

    @Import(name="apiVersion")
    private @Nullable Output<String> apiVersion;

    public Optional<Output<String>> apiVersion() {
        return Optional.ofNullable(this.apiVersion);
    }

    @Import(name="appId")
    private @Nullable Output<String> appId;

    public Optional<Output<String>> appId() {
        return Optional.ofNullable(this.appId);
    }

    @Import(name="appIds")
    private @Nullable Output<List<String>> appIds;

    public Optional<Output<List<String>>> appIds() {
        return Optional.ofNullable(this.appIds);
    }

    @Import(name="appIdsAppsflyers")
    private @Nullable Output<List<ConnectorConfigAppIdsAppsflyerArgs>> appIdsAppsflyers;

    public Optional<Output<List<ConnectorConfigAppIdsAppsflyerArgs>>> appIdsAppsflyers() {
        return Optional.ofNullable(this.appIdsAppsflyers);
    }

    @Import(name="appKey")
    private @Nullable Output<String> appKey;

    public Optional<Output<String>> appKey() {
        return Optional.ofNullable(this.appKey);
    }

    @Import(name="appSpecificPassword")
    private @Nullable Output<String> appSpecificPassword;

    public Optional<Output<String>> appSpecificPassword() {
        return Optional.ofNullable(this.appSpecificPassword);
    }

    @Import(name="appSyncMode")
    private @Nullable Output<String> appSyncMode;

    public Optional<Output<String>> appSyncMode() {
        return Optional.ofNullable(this.appSyncMode);
    }

    @Import(name="appendFileOption")
    private @Nullable Output<String> appendFileOption;

    public Optional<Output<String>> appendFileOption() {
        return Optional.ofNullable(this.appendFileOption);
    }

    @Import(name="applicationKey")
    private @Nullable Output<String> applicationKey;

    public Optional<Output<String>> applicationKey() {
        return Optional.ofNullable(this.applicationKey);
    }

    @Import(name="apps")
    private @Nullable Output<List<String>> apps;

    public Optional<Output<List<String>>> apps() {
        return Optional.ofNullable(this.apps);
    }

    @Import(name="archiveLogFormat")
    private @Nullable Output<String> archiveLogFormat;

    public Optional<Output<String>> archiveLogFormat() {
        return Optional.ofNullable(this.archiveLogFormat);
    }

    @Import(name="archiveLogPath")
    private @Nullable Output<String> archiveLogPath;

    public Optional<Output<String>> archiveLogPath() {
        return Optional.ofNullable(this.archiveLogPath);
    }

    @Import(name="archivePattern")
    private @Nullable Output<String> archivePattern;

    public Optional<Output<String>> archivePattern() {
        return Optional.ofNullable(this.archivePattern);
    }

    @Import(name="areSoapCredentialsProvided")
    private @Nullable Output<String> areSoapCredentialsProvided;

    public Optional<Output<String>> areSoapCredentialsProvided() {
        return Optional.ofNullable(this.areSoapCredentialsProvided);
    }

    @Import(name="asbIp")
    private @Nullable Output<String> asbIp;

    public Optional<Output<String>> asbIp() {
        return Optional.ofNullable(this.asbIp);
    }

    @Import(name="asmOption")
    private @Nullable Output<String> asmOption;

    public Optional<Output<String>> asmOption() {
        return Optional.ofNullable(this.asmOption);
    }

    @Import(name="asmOracleHome")
    private @Nullable Output<String> asmOracleHome;

    public Optional<Output<String>> asmOracleHome() {
        return Optional.ofNullable(this.asmOracleHome);
    }

    @Import(name="asmPassword")
    private @Nullable Output<String> asmPassword;

    public Optional<Output<String>> asmPassword() {
        return Optional.ofNullable(this.asmPassword);
    }

    @Import(name="asmTns")
    private @Nullable Output<String> asmTns;

    public Optional<Output<String>> asmTns() {
        return Optional.ofNullable(this.asmTns);
    }

    @Import(name="asmUser")
    private @Nullable Output<String> asmUser;

    public Optional<Output<String>> asmUser() {
        return Optional.ofNullable(this.asmUser);
    }

    @Import(name="attributionWindow")
    private @Nullable Output<String> attributionWindow;

    public Optional<Output<String>> attributionWindow() {
        return Optional.ofNullable(this.attributionWindow);
    }

    @Import(name="attributionWindowSize")
    private @Nullable Output<String> attributionWindowSize;

    public Optional<Output<String>> attributionWindowSize() {
        return Optional.ofNullable(this.attributionWindowSize);
    }

    @Import(name="auth")
    private @Nullable Output<String> auth;

    public Optional<Output<String>> auth() {
        return Optional.ofNullable(this.auth);
    }

    @Import(name="authMethod")
    private @Nullable Output<String> authMethod;

    public Optional<Output<String>> authMethod() {
        return Optional.ofNullable(this.authMethod);
    }

    @Import(name="authMode")
    private @Nullable Output<String> authMode;

    public Optional<Output<String>> authMode() {
        return Optional.ofNullable(this.authMode);
    }

    @Import(name="authType")
    private @Nullable Output<String> authType;

    public Optional<Output<String>> authType() {
        return Optional.ofNullable(this.authType);
    }

    @Import(name="authorizationMethod")
    private @Nullable Output<String> authorizationMethod;

    public Optional<Output<String>> authorizationMethod() {
        return Optional.ofNullable(this.authorizationMethod);
    }

    @Import(name="awsRegionCode")
    private @Nullable Output<String> awsRegionCode;

    public Optional<Output<String>> awsRegionCode() {
        return Optional.ofNullable(this.awsRegionCode);
    }

    @Import(name="baseCurrency")
    private @Nullable Output<String> baseCurrency;

    public Optional<Output<String>> baseCurrency() {
        return Optional.ofNullable(this.baseCurrency);
    }

    @Import(name="baseDomain")
    private @Nullable Output<String> baseDomain;

    public Optional<Output<String>> baseDomain() {
        return Optional.ofNullable(this.baseDomain);
    }

    @Import(name="baseId")
    private @Nullable Output<String> baseId;

    public Optional<Output<String>> baseId() {
        return Optional.ofNullable(this.baseId);
    }

    @Import(name="baseUrl")
    private @Nullable Output<String> baseUrl;

    public Optional<Output<String>> baseUrl() {
        return Optional.ofNullable(this.baseUrl);
    }

    @Import(name="bearerToken")
    private @Nullable Output<String> bearerToken;

    public Optional<Output<String>> bearerToken() {
        return Optional.ofNullable(this.bearerToken);
    }

    @Import(name="blobSasUrl")
    private @Nullable Output<String> blobSasUrl;

    public Optional<Output<String>> blobSasUrl() {
        return Optional.ofNullable(this.blobSasUrl);
    }

    @Import(name="breakdowns")
    private @Nullable Output<List<String>> breakdowns;

    public Optional<Output<List<String>>> breakdowns() {
        return Optional.ofNullable(this.breakdowns);
    }

    @Import(name="bucket")
    private @Nullable Output<String> bucket;

    public Optional<Output<String>> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    @Import(name="bucketName")
    private @Nullable Output<String> bucketName;

    public Optional<Output<String>> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }

    @Import(name="bucketService")
    private @Nullable Output<String> bucketService;

    public Optional<Output<String>> bucketService() {
        return Optional.ofNullable(this.bucketService);
    }

    @Import(name="businessId")
    private @Nullable Output<String> businessId;

    public Optional<Output<String>> businessId() {
        return Optional.ofNullable(this.businessId);
    }

    @Import(name="businessUnitId")
    private @Nullable Output<String> businessUnitId;

    public Optional<Output<String>> businessUnitId() {
        return Optional.ofNullable(this.businessUnitId);
    }

    @Import(name="certificate")
    private @Nullable Output<String> certificate;

    public Optional<Output<String>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    @Import(name="clickAttributionWindow")
    private @Nullable Output<String> clickAttributionWindow;

    public Optional<Output<String>> clickAttributionWindow() {
        return Optional.ofNullable(this.clickAttributionWindow);
    }

    @Import(name="client")
    private @Nullable Output<String> client;

    public Optional<Output<String>> client() {
        return Optional.ofNullable(this.client);
    }

    @Import(name="clientCert")
    private @Nullable Output<String> clientCert;

    public Optional<Output<String>> clientCert() {
        return Optional.ofNullable(this.clientCert);
    }

    @Import(name="clientCertKey")
    private @Nullable Output<String> clientCertKey;

    public Optional<Output<String>> clientCertKey() {
        return Optional.ofNullable(this.clientCertKey);
    }

    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    @Import(name="clientKey")
    private @Nullable Output<String> clientKey;

    public Optional<Output<String>> clientKey() {
        return Optional.ofNullable(this.clientKey);
    }

    @Import(name="clientName")
    private @Nullable Output<String> clientName;

    public Optional<Output<String>> clientName() {
        return Optional.ofNullable(this.clientName);
    }

    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    @Import(name="cloudStorageType")
    private @Nullable Output<String> cloudStorageType;

    public Optional<Output<String>> cloudStorageType() {
        return Optional.ofNullable(this.cloudStorageType);
    }

    @Import(name="columns")
    private @Nullable Output<List<String>> columns;

    public Optional<Output<List<String>>> columns() {
        return Optional.ofNullable(this.columns);
    }

    @Import(name="companyId")
    private @Nullable Output<String> companyId;

    public Optional<Output<String>> companyId() {
        return Optional.ofNullable(this.companyId);
    }

    @Import(name="companyKey")
    private @Nullable Output<String> companyKey;

    public Optional<Output<String>> companyKey() {
        return Optional.ofNullable(this.companyKey);
    }

    @Import(name="companyRequestToken")
    private @Nullable Output<String> companyRequestToken;

    public Optional<Output<String>> companyRequestToken() {
        return Optional.ofNullable(this.companyRequestToken);
    }

    @Import(name="companyUuid")
    private @Nullable Output<String> companyUuid;

    public Optional<Output<String>> companyUuid() {
        return Optional.ofNullable(this.companyUuid);
    }

    @Import(name="compression")
    private @Nullable Output<String> compression;

    public Optional<Output<String>> compression() {
        return Optional.ofNullable(this.compression);
    }

    @Import(name="configMethod")
    private @Nullable Output<String> configMethod;

    public Optional<Output<String>> configMethod() {
        return Optional.ofNullable(this.configMethod);
    }

    @Import(name="configRepositoryUrl")
    private @Nullable Output<String> configRepositoryUrl;

    public Optional<Output<String>> configRepositoryUrl() {
        return Optional.ofNullable(this.configRepositoryUrl);
    }

    @Import(name="configType")
    private @Nullable Output<String> configType;

    public Optional<Output<String>> configType() {
        return Optional.ofNullable(this.configType);
    }

    @Import(name="connectingUser")
    private @Nullable Output<String> connectingUser;

    public Optional<Output<String>> connectingUser() {
        return Optional.ofNullable(this.connectingUser);
    }

    @Import(name="connectingUserEmail")
    private @Nullable Output<String> connectingUserEmail;

    public Optional<Output<String>> connectingUserEmail() {
        return Optional.ofNullable(this.connectingUserEmail);
    }

    @Import(name="connectionMethod")
    private @Nullable Output<String> connectionMethod;

    public Optional<Output<String>> connectionMethod() {
        return Optional.ofNullable(this.connectionMethod);
    }

    @Import(name="connectionString")
    private @Nullable Output<String> connectionString;

    public Optional<Output<String>> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }

    @Import(name="connectionType")
    private @Nullable Output<String> connectionType;

    public Optional<Output<String>> connectionType() {
        return Optional.ofNullable(this.connectionType);
    }

    @Import(name="consumerGroup")
    private @Nullable Output<String> consumerGroup;

    public Optional<Output<String>> consumerGroup() {
        return Optional.ofNullable(this.consumerGroup);
    }

    @Import(name="consumerKey")
    private @Nullable Output<String> consumerKey;

    public Optional<Output<String>> consumerKey() {
        return Optional.ofNullable(this.consumerKey);
    }

    @Import(name="consumerSecret")
    private @Nullable Output<String> consumerSecret;

    public Optional<Output<String>> consumerSecret() {
        return Optional.ofNullable(this.consumerSecret);
    }

    @Import(name="containerAddress")
    private @Nullable Output<String> containerAddress;

    public Optional<Output<String>> containerAddress() {
        return Optional.ofNullable(this.containerAddress);
    }

    @Import(name="containerName")
    private @Nullable Output<String> containerName;

    public Optional<Output<String>> containerName() {
        return Optional.ofNullable(this.containerName);
    }

    @Import(name="contentOwnerId")
    private @Nullable Output<String> contentOwnerId;

    public Optional<Output<String>> contentOwnerId() {
        return Optional.ofNullable(this.contentOwnerId);
    }

    @Import(name="conversationWebhookUrl")
    private @Nullable Output<String> conversationWebhookUrl;

    public Optional<Output<String>> conversationWebhookUrl() {
        return Optional.ofNullable(this.conversationWebhookUrl);
    }

    @Import(name="conversionDimensions")
    private @Nullable Output<List<String>> conversionDimensions;

    public Optional<Output<List<String>>> conversionDimensions() {
        return Optional.ofNullable(this.conversionDimensions);
    }

    @Import(name="conversionReportTime")
    private @Nullable Output<String> conversionReportTime;

    public Optional<Output<String>> conversionReportTime() {
        return Optional.ofNullable(this.conversionReportTime);
    }

    @Import(name="conversionWindowSize")
    private @Nullable Output<String> conversionWindowSize;

    public Optional<Output<String>> conversionWindowSize() {
        return Optional.ofNullable(this.conversionWindowSize);
    }

    @Import(name="csvDefinition")
    private @Nullable Output<String> csvDefinition;

    public Optional<Output<String>> csvDefinition() {
        return Optional.ofNullable(this.csvDefinition);
    }

    @Import(name="currency")
    private @Nullable Output<String> currency;

    public Optional<Output<String>> currency() {
        return Optional.ofNullable(this.currency);
    }

    @Import(name="customEventSyncMode")
    private @Nullable Output<String> customEventSyncMode;

    public Optional<Output<String>> customEventSyncMode() {
        return Optional.ofNullable(this.customEventSyncMode);
    }

    @Import(name="customEvents")
    private @Nullable Output<List<String>> customEvents;

    public Optional<Output<List<String>>> customEvents() {
        return Optional.ofNullable(this.customEvents);
    }

    @Import(name="customFieldIds")
    private @Nullable Output<List<String>> customFieldIds;

    public Optional<Output<List<String>>> customFieldIds() {
        return Optional.ofNullable(this.customFieldIds);
    }

    @Import(name="customFloodlightVariables")
    private @Nullable Output<List<String>> customFloodlightVariables;

    public Optional<Output<List<String>>> customFloodlightVariables() {
        return Optional.ofNullable(this.customFloodlightVariables);
    }

    @Import(name="customReports")
    private @Nullable Output<List<ConnectorConfigCustomReportArgs>> customReports;

    public Optional<Output<List<ConnectorConfigCustomReportArgs>>> customReports() {
        return Optional.ofNullable(this.customReports);
    }

    @Import(name="customTables")
    private @Nullable Output<List<ConnectorConfigCustomTableArgs>> customTables;

    public Optional<Output<List<ConnectorConfigCustomTableArgs>>> customTables() {
        return Optional.ofNullable(this.customTables);
    }

    @Import(name="customerId")
    private @Nullable Output<String> customerId;

    public Optional<Output<String>> customerId() {
        return Optional.ofNullable(this.customerId);
    }

    @Import(name="customerListId")
    private @Nullable Output<String> customerListId;

    public Optional<Output<String>> customerListId() {
        return Optional.ofNullable(this.customerListId);
    }

    @Import(name="dailyApiCallLimit")
    private @Nullable Output<String> dailyApiCallLimit;

    public Optional<Output<String>> dailyApiCallLimit() {
        return Optional.ofNullable(this.dailyApiCallLimit);
    }

    @Import(name="dataAccessMethod")
    private @Nullable Output<String> dataAccessMethod;

    public Optional<Output<String>> dataAccessMethod() {
        return Optional.ofNullable(this.dataAccessMethod);
    }

    @Import(name="dataCenter")
    private @Nullable Output<String> dataCenter;

    public Optional<Output<String>> dataCenter() {
        return Optional.ofNullable(this.dataCenter);
    }

    @Import(name="dataSetName")
    private @Nullable Output<String> dataSetName;

    public Optional<Output<String>> dataSetName() {
        return Optional.ofNullable(this.dataSetName);
    }

    @Import(name="database")
    private @Nullable Output<String> database;

    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    @Import(name="datasetId")
    private @Nullable Output<String> datasetId;

    public Optional<Output<String>> datasetId() {
        return Optional.ofNullable(this.datasetId);
    }

    @Import(name="datasource")
    private @Nullable Output<String> datasource;

    public Optional<Output<String>> datasource() {
        return Optional.ofNullable(this.datasource);
    }

    @Import(name="dateGranularity")
    private @Nullable Output<String> dateGranularity;

    public Optional<Output<String>> dateGranularity() {
        return Optional.ofNullable(this.dateGranularity);
    }

    @Import(name="delimiter")
    private @Nullable Output<String> delimiter;

    public Optional<Output<String>> delimiter() {
        return Optional.ofNullable(this.delimiter);
    }

    @Import(name="dimensionAttributes")
    private @Nullable Output<List<String>> dimensionAttributes;

    public Optional<Output<List<String>>> dimensionAttributes() {
        return Optional.ofNullable(this.dimensionAttributes);
    }

    @Import(name="dimensions")
    private @Nullable Output<List<String>> dimensions;

    public Optional<Output<List<String>>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    @Import(name="distributedConnectorClusterSize")
    private @Nullable Output<String> distributedConnectorClusterSize;

    public Optional<Output<String>> distributedConnectorClusterSize() {
        return Optional.ofNullable(this.distributedConnectorClusterSize);
    }

    @Import(name="domain")
    private @Nullable Output<String> domain;

    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    @Import(name="domainHostName")
    private @Nullable Output<String> domainHostName;

    public Optional<Output<String>> domainHostName() {
        return Optional.ofNullable(this.domainHostName);
    }

    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    @Import(name="domainType")
    private @Nullable Output<String> domainType;

    public Optional<Output<String>> domainType() {
        return Optional.ofNullable(this.domainType);
    }

    @Import(name="elements")
    private @Nullable Output<List<String>> elements;

    public Optional<Output<List<String>>> elements() {
        return Optional.ofNullable(this.elements);
    }

    @Import(name="email")
    private @Nullable Output<String> email;

    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    @Import(name="emptyHeader")
    private @Nullable Output<String> emptyHeader;

    public Optional<Output<String>> emptyHeader() {
        return Optional.ofNullable(this.emptyHeader);
    }

    @Import(name="enableAllDimensionCombinations")
    private @Nullable Output<String> enableAllDimensionCombinations;

    public Optional<Output<String>> enableAllDimensionCombinations() {
        return Optional.ofNullable(this.enableAllDimensionCombinations);
    }

    @Import(name="enableArchiveLogOnly")
    private @Nullable Output<String> enableArchiveLogOnly;

    public Optional<Output<String>> enableArchiveLogOnly() {
        return Optional.ofNullable(this.enableArchiveLogOnly);
    }

    @Import(name="enableDataExtensionsSyncing")
    private @Nullable Output<String> enableDataExtensionsSyncing;

    public Optional<Output<String>> enableDataExtensionsSyncing() {
        return Optional.ofNullable(this.enableDataExtensionsSyncing);
    }

    @Import(name="enableDistributedConnectorMode")
    private @Nullable Output<String> enableDistributedConnectorMode;

    public Optional<Output<String>> enableDistributedConnectorMode() {
        return Optional.ofNullable(this.enableDistributedConnectorMode);
    }

    @Import(name="enableEnrichments")
    private @Nullable Output<String> enableEnrichments;

    public Optional<Output<String>> enableEnrichments() {
        return Optional.ofNullable(this.enableEnrichments);
    }

    @Import(name="enableExports")
    private @Nullable Output<String> enableExports;

    public Optional<Output<String>> enableExports() {
        return Optional.ofNullable(this.enableExports);
    }

    @Import(name="enableTde")
    private @Nullable Output<String> enableTde;

    public Optional<Output<String>> enableTde() {
        return Optional.ofNullable(this.enableTde);
    }

    @Import(name="encodedPublicKey")
    private @Nullable Output<String> encodedPublicKey;

    public Optional<Output<String>> encodedPublicKey() {
        return Optional.ofNullable(this.encodedPublicKey);
    }

    @Import(name="encryptionKey")
    private @Nullable Output<String> encryptionKey;

    public Optional<Output<String>> encryptionKey() {
        return Optional.ofNullable(this.encryptionKey);
    }

    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    @Import(name="engagementAttributionWindow")
    private @Nullable Output<String> engagementAttributionWindow;

    public Optional<Output<String>> engagementAttributionWindow() {
        return Optional.ofNullable(this.engagementAttributionWindow);
    }

    @Import(name="enrichedExport")
    private @Nullable Output<String> enrichedExport;

    public Optional<Output<String>> enrichedExport() {
        return Optional.ofNullable(this.enrichedExport);
    }

    @Import(name="entityId")
    private @Nullable Output<String> entityId;

    public Optional<Output<String>> entityId() {
        return Optional.ofNullable(this.entityId);
    }

    @Import(name="environment")
    private @Nullable Output<String> environment;

    public Optional<Output<String>> environment() {
        return Optional.ofNullable(this.environment);
    }

    @Import(name="escapeChar")
    private @Nullable Output<String> escapeChar;

    public Optional<Output<String>> escapeChar() {
        return Optional.ofNullable(this.escapeChar);
    }

    @Import(name="euRegion")
    private @Nullable Output<String> euRegion;

    public Optional<Output<String>> euRegion() {
        return Optional.ofNullable(this.euRegion);
    }

    @Import(name="events")
    private @Nullable Output<List<String>> events;

    public Optional<Output<List<String>>> events() {
        return Optional.ofNullable(this.events);
    }

    @Import(name="exportStorageType")
    private @Nullable Output<String> exportStorageType;

    public Optional<Output<String>> exportStorageType() {
        return Optional.ofNullable(this.exportStorageType);
    }

    @Import(name="externalId")
    private @Nullable Output<String> externalId;

    public Optional<Output<String>> externalId() {
        return Optional.ofNullable(this.externalId);
    }

    @Import(name="fields")
    private @Nullable Output<List<String>> fields;

    public Optional<Output<List<String>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    @Import(name="fileType")
    private @Nullable Output<String> fileType;

    public Optional<Output<String>> fileType() {
        return Optional.ofNullable(this.fileType);
    }

    @Import(name="filter")
    private @Nullable Output<String> filter;

    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    @Import(name="financeAccountSyncMode")
    private @Nullable Output<String> financeAccountSyncMode;

    public Optional<Output<String>> financeAccountSyncMode() {
        return Optional.ofNullable(this.financeAccountSyncMode);
    }

    @Import(name="financeAccounts")
    private @Nullable Output<List<String>> financeAccounts;

    public Optional<Output<List<String>>> financeAccounts() {
        return Optional.ofNullable(this.financeAccounts);
    }

    @Import(name="folder")
    private @Nullable Output<String> folder;

    public Optional<Output<String>> folder() {
        return Optional.ofNullable(this.folder);
    }

    @Import(name="folderId")
    private @Nullable Output<String> folderId;

    public Optional<Output<String>> folderId() {
        return Optional.ofNullable(this.folderId);
    }

    @Import(name="folderPath")
    private @Nullable Output<String> folderPath;

    public Optional<Output<String>> folderPath() {
        return Optional.ofNullable(this.folderPath);
    }

    @Import(name="forecastId")
    private @Nullable Output<String> forecastId;

    public Optional<Output<String>> forecastId() {
        return Optional.ofNullable(this.forecastId);
    }

    @Import(name="ftpHost")
    private @Nullable Output<String> ftpHost;

    public Optional<Output<String>> ftpHost() {
        return Optional.ofNullable(this.ftpHost);
    }

    @Import(name="ftpPassword")
    private @Nullable Output<String> ftpPassword;

    public Optional<Output<String>> ftpPassword() {
        return Optional.ofNullable(this.ftpPassword);
    }

    @Import(name="ftpPort")
    private @Nullable Output<String> ftpPort;

    public Optional<Output<String>> ftpPort() {
        return Optional.ofNullable(this.ftpPort);
    }

    @Import(name="ftpUser")
    private @Nullable Output<String> ftpUser;

    public Optional<Output<String>> ftpUser() {
        return Optional.ofNullable(this.ftpUser);
    }

    @Import(name="function")
    private @Nullable Output<String> function;

    public Optional<Output<String>> function() {
        return Optional.ofNullable(this.function);
    }

    @Import(name="functionApp")
    private @Nullable Output<String> functionApp;

    public Optional<Output<String>> functionApp() {
        return Optional.ofNullable(this.functionApp);
    }

    @Import(name="functionKey")
    private @Nullable Output<String> functionKey;

    public Optional<Output<String>> functionKey() {
        return Optional.ofNullable(this.functionKey);
    }

    @Import(name="functionName")
    private @Nullable Output<String> functionName;

    public Optional<Output<String>> functionName() {
        return Optional.ofNullable(this.functionName);
    }

    @Import(name="functionTrigger")
    private @Nullable Output<String> functionTrigger;

    public Optional<Output<String>> functionTrigger() {
        return Optional.ofNullable(this.functionTrigger);
    }

    @Import(name="gcsBucket")
    private @Nullable Output<String> gcsBucket;

    public Optional<Output<String>> gcsBucket() {
        return Optional.ofNullable(this.gcsBucket);
    }

    @Import(name="gcsFolder")
    private @Nullable Output<String> gcsFolder;

    public Optional<Output<String>> gcsFolder() {
        return Optional.ofNullable(this.gcsFolder);
    }

    @Import(name="groupName")
    private @Nullable Output<String> groupName;

    public Optional<Output<String>> groupName() {
        return Optional.ofNullable(this.groupName);
    }

    @Import(name="hasManagePermissions")
    private @Nullable Output<String> hasManagePermissions;

    public Optional<Output<String>> hasManagePermissions() {
        return Optional.ofNullable(this.hasManagePermissions);
    }

    @Import(name="homeFolder")
    private @Nullable Output<String> homeFolder;

    public Optional<Output<String>> homeFolder() {
        return Optional.ofNullable(this.homeFolder);
    }

    @Import(name="host")
    private @Nullable Output<String> host;

    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    @Import(name="hostIp")
    private @Nullable Output<String> hostIp;

    public Optional<Output<String>> hostIp() {
        return Optional.ofNullable(this.hostIp);
    }

    @Import(name="hostUser")
    private @Nullable Output<String> hostUser;

    public Optional<Output<String>> hostUser() {
        return Optional.ofNullable(this.hostUser);
    }

    @Import(name="hosts")
    private @Nullable Output<List<String>> hosts;

    public Optional<Output<List<String>>> hosts() {
        return Optional.ofNullable(this.hosts);
    }

    @Import(name="identity")
    private @Nullable Output<String> identity;

    public Optional<Output<String>> identity() {
        return Optional.ofNullable(this.identity);
    }

    @Import(name="includeOcapiEndpoints")
    private @Nullable Output<String> includeOcapiEndpoints;

    public Optional<Output<String>> includeOcapiEndpoints() {
        return Optional.ofNullable(this.includeOcapiEndpoints);
    }

    @Import(name="instance")
    private @Nullable Output<String> instance;

    public Optional<Output<String>> instance() {
        return Optional.ofNullable(this.instance);
    }

    @Import(name="instanceNumber")
    private @Nullable Output<String> instanceNumber;

    public Optional<Output<String>> instanceNumber() {
        return Optional.ofNullable(this.instanceNumber);
    }

    @Import(name="instanceUrl")
    private @Nullable Output<String> instanceUrl;

    public Optional<Output<String>> instanceUrl() {
        return Optional.ofNullable(this.instanceUrl);
    }

    @Import(name="integrationKey")
    private @Nullable Output<String> integrationKey;

    public Optional<Output<String>> integrationKey() {
        return Optional.ofNullable(this.integrationKey);
    }

    @Import(name="isAccountLevelConnector")
    private @Nullable Output<String> isAccountLevelConnector;

    public Optional<Output<String>> isAccountLevelConnector() {
        return Optional.ofNullable(this.isAccountLevelConnector);
    }

    @Import(name="isAuth2Enabled")
    private @Nullable Output<String> isAuth2Enabled;

    public Optional<Output<String>> isAuth2Enabled() {
        return Optional.ofNullable(this.isAuth2Enabled);
    }

    @Import(name="isCustomApiCredentials")
    private @Nullable Output<String> isCustomApiCredentials;

    public Optional<Output<String>> isCustomApiCredentials() {
        return Optional.ofNullable(this.isCustomApiCredentials);
    }

    @Import(name="isExternalActivitiesEndpointSelected")
    private @Nullable Output<String> isExternalActivitiesEndpointSelected;

    public Optional<Output<String>> isExternalActivitiesEndpointSelected() {
        return Optional.ofNullable(this.isExternalActivitiesEndpointSelected);
    }

    @Import(name="isFtps")
    private @Nullable Output<String> isFtps;

    public Optional<Output<String>> isFtps() {
        return Optional.ofNullable(this.isFtps);
    }

    @Import(name="isKeypair")
    private @Nullable Output<String> isKeypair;

    public Optional<Output<String>> isKeypair() {
        return Optional.ofNullable(this.isKeypair);
    }

    @Import(name="isMultiEntityFeatureEnabled")
    private @Nullable Output<String> isMultiEntityFeatureEnabled;

    public Optional<Output<String>> isMultiEntityFeatureEnabled() {
        return Optional.ofNullable(this.isMultiEntityFeatureEnabled);
    }

    @Import(name="isNewPackage")
    private @Nullable Output<String> isNewPackage;

    public Optional<Output<String>> isNewPackage() {
        return Optional.ofNullable(this.isNewPackage);
    }

    @Import(name="isPrivateKeyEncrypted")
    private @Nullable Output<String> isPrivateKeyEncrypted;

    public Optional<Output<String>> isPrivateKeyEncrypted() {
        return Optional.ofNullable(this.isPrivateKeyEncrypted);
    }

    @Import(name="isPrivateLinkRequired")
    private @Nullable Output<String> isPrivateLinkRequired;

    public Optional<Output<String>> isPrivateLinkRequired() {
        return Optional.ofNullable(this.isPrivateLinkRequired);
    }

    @Import(name="isPublic")
    private @Nullable Output<String> isPublic;

    public Optional<Output<String>> isPublic() {
        return Optional.ofNullable(this.isPublic);
    }

    @Import(name="isSailthruConnectEnabled")
    private @Nullable Output<String> isSailthruConnectEnabled;

    public Optional<Output<String>> isSailthruConnectEnabled() {
        return Optional.ofNullable(this.isSailthruConnectEnabled);
    }

    @Import(name="isSecure")
    private @Nullable Output<String> isSecure;

    public Optional<Output<String>> isSecure() {
        return Optional.ofNullable(this.isSecure);
    }

    @Import(name="isSingleTableMode")
    private @Nullable Output<String> isSingleTableMode;

    public Optional<Output<String>> isSingleTableMode() {
        return Optional.ofNullable(this.isSingleTableMode);
    }

    @Import(name="isVendor")
    private @Nullable Output<String> isVendor;

    public Optional<Output<String>> isVendor() {
        return Optional.ofNullable(this.isVendor);
    }

    @Import(name="jsonDeliveryMode")
    private @Nullable Output<String> jsonDeliveryMode;

    public Optional<Output<String>> jsonDeliveryMode() {
        return Optional.ofNullable(this.jsonDeliveryMode);
    }

    @Import(name="key")
    private @Nullable Output<String> key;

    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    @Import(name="keyPassword")
    private @Nullable Output<String> keyPassword;

    public Optional<Output<String>> keyPassword() {
        return Optional.ofNullable(this.keyPassword);
    }

    @Import(name="keyStoreType")
    private @Nullable Output<String> keyStoreType;

    public Optional<Output<String>> keyStoreType() {
        return Optional.ofNullable(this.keyStoreType);
    }

    @Import(name="keystore")
    private @Nullable Output<String> keystore;

    public Optional<Output<String>> keystore() {
        return Optional.ofNullable(this.keystore);
    }

    @Import(name="keystorePassword")
    private @Nullable Output<String> keystorePassword;

    public Optional<Output<String>> keystorePassword() {
        return Optional.ofNullable(this.keystorePassword);
    }

    @Import(name="lastSyncedChangesUtc_")
    private @Nullable Output<String> lastSyncedChangesUtc_;

    public Optional<Output<String>> lastSyncedChangesUtc_() {
        return Optional.ofNullable(this.lastSyncedChangesUtc_);
    }

    @Import(name="latestVersion")
    private @Nullable Output<String> latestVersion;

    public Optional<Output<String>> latestVersion() {
        return Optional.ofNullable(this.latestVersion);
    }

    @Import(name="limitForApiCallsToExternalActivitiesEndpoint")
    private @Nullable Output<String> limitForApiCallsToExternalActivitiesEndpoint;

    public Optional<Output<String>> limitForApiCallsToExternalActivitiesEndpoint() {
        return Optional.ofNullable(this.limitForApiCallsToExternalActivitiesEndpoint);
    }

    @Import(name="lineSeparator")
    private @Nullable Output<String> lineSeparator;

    public Optional<Output<String>> lineSeparator() {
        return Optional.ofNullable(this.lineSeparator);
    }

    @Import(name="listStrategy")
    private @Nullable Output<String> listStrategy;

    public Optional<Output<String>> listStrategy() {
        return Optional.ofNullable(this.listStrategy);
    }

    @Import(name="listSyncMode")
    private @Nullable Output<String> listSyncMode;

    public Optional<Output<String>> listSyncMode() {
        return Optional.ofNullable(this.listSyncMode);
    }

    @Import(name="logJournal")
    private @Nullable Output<String> logJournal;

    public Optional<Output<String>> logJournal() {
        return Optional.ofNullable(this.logJournal);
    }

    @Import(name="logJournalSchema")
    private @Nullable Output<String> logJournalSchema;

    public Optional<Output<String>> logJournalSchema() {
        return Optional.ofNullable(this.logJournalSchema);
    }

    @Import(name="login")
    private @Nullable Output<String> login;

    public Optional<Output<String>> login() {
        return Optional.ofNullable(this.login);
    }

    @Import(name="loginPassword")
    private @Nullable Output<String> loginPassword;

    public Optional<Output<String>> loginPassword() {
        return Optional.ofNullable(this.loginPassword);
    }

    @Import(name="managerAccounts")
    private @Nullable Output<List<String>> managerAccounts;

    public Optional<Output<List<String>>> managerAccounts() {
        return Optional.ofNullable(this.managerAccounts);
    }

    @Import(name="merchantId")
    private @Nullable Output<String> merchantId;

    public Optional<Output<String>> merchantId() {
        return Optional.ofNullable(this.merchantId);
    }

    @Import(name="messageType")
    private @Nullable Output<String> messageType;

    public Optional<Output<String>> messageType() {
        return Optional.ofNullable(this.messageType);
    }

    @Import(name="metrics")
    private @Nullable Output<List<String>> metrics;

    public Optional<Output<List<String>>> metrics() {
        return Optional.ofNullable(this.metrics);
    }

    @Import(name="namedRange")
    private @Nullable Output<String> namedRange;

    public Optional<Output<String>> namedRange() {
        return Optional.ofNullable(this.namedRange);
    }

    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    @Import(name="networkCode")
    private @Nullable Output<String> networkCode;

    public Optional<Output<String>> networkCode() {
        return Optional.ofNullable(this.networkCode);
    }

    @Import(name="nullSequence")
    private @Nullable Output<String> nullSequence;

    public Optional<Output<String>> nullSequence() {
        return Optional.ofNullable(this.nullSequence);
    }

    @Import(name="oauthToken")
    private @Nullable Output<String> oauthToken;

    public Optional<Output<String>> oauthToken() {
        return Optional.ofNullable(this.oauthToken);
    }

    @Import(name="oauthTokenSecret")
    private @Nullable Output<String> oauthTokenSecret;

    public Optional<Output<String>> oauthTokenSecret() {
        return Optional.ofNullable(this.oauthTokenSecret);
    }

    @Import(name="ocapiClientId")
    private @Nullable Output<String> ocapiClientId;

    public Optional<Output<String>> ocapiClientId() {
        return Optional.ofNullable(this.ocapiClientId);
    }

    @Import(name="ocapiClientSecret")
    private @Nullable Output<String> ocapiClientSecret;

    public Optional<Output<String>> ocapiClientSecret() {
        return Optional.ofNullable(this.ocapiClientSecret);
    }

    @Import(name="ocapiCustomObjectTypes")
    private @Nullable Output<String> ocapiCustomObjectTypes;

    public Optional<Output<String>> ocapiCustomObjectTypes() {
        return Optional.ofNullable(this.ocapiCustomObjectTypes);
    }

    @Import(name="ocapiHostname")
    private @Nullable Output<String> ocapiHostname;

    public Optional<Output<String>> ocapiHostname() {
        return Optional.ofNullable(this.ocapiHostname);
    }

    @Import(name="onError")
    private @Nullable Output<String> onError;

    public Optional<Output<String>> onError() {
        return Optional.ofNullable(this.onError);
    }

    @Import(name="onPremise")
    private @Nullable Output<String> onPremise;

    public Optional<Output<String>> onPremise() {
        return Optional.ofNullable(this.onPremise);
    }

    @Import(name="organization")
    private @Nullable Output<String> organization;

    public Optional<Output<String>> organization() {
        return Optional.ofNullable(this.organization);
    }

    @Import(name="organizationId")
    private @Nullable Output<String> organizationId;

    public Optional<Output<String>> organizationId() {
        return Optional.ofNullable(this.organizationId);
    }

    @Import(name="organizations")
    private @Nullable Output<List<String>> organizations;

    public Optional<Output<List<String>>> organizations() {
        return Optional.ofNullable(this.organizations);
    }

    @Import(name="packedModeTables")
    private @Nullable Output<List<String>> packedModeTables;

    public Optional<Output<List<String>>> packedModeTables() {
        return Optional.ofNullable(this.packedModeTables);
    }

    @Import(name="packingMode")
    private @Nullable Output<String> packingMode;

    public Optional<Output<String>> packingMode() {
        return Optional.ofNullable(this.packingMode);
    }

    @Import(name="pages")
    private @Nullable Output<List<String>> pages;

    public Optional<Output<List<String>>> pages() {
        return Optional.ofNullable(this.pages);
    }

    @Import(name="partnerCode")
    private @Nullable Output<String> partnerCode;

    public Optional<Output<String>> partnerCode() {
        return Optional.ofNullable(this.partnerCode);
    }

    @Import(name="partners")
    private @Nullable Output<List<String>> partners;

    public Optional<Output<List<String>>> partners() {
        return Optional.ofNullable(this.partners);
    }

    @Import(name="passphrase")
    private @Nullable Output<String> passphrase;

    public Optional<Output<String>> passphrase() {
        return Optional.ofNullable(this.passphrase);
    }

    @Import(name="password")
    private @Nullable Output<String> password;

    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    @Import(name="pat")
    private @Nullable Output<String> pat;

    public Optional<Output<String>> pat() {
        return Optional.ofNullable(this.pat);
    }

    @Import(name="patName")
    private @Nullable Output<String> patName;

    public Optional<Output<String>> patName() {
        return Optional.ofNullable(this.patName);
    }

    @Import(name="patSecret")
    private @Nullable Output<String> patSecret;

    public Optional<Output<String>> patSecret() {
        return Optional.ofNullable(this.patSecret);
    }

    @Import(name="path")
    private @Nullable Output<String> path;

    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    @Import(name="pattern")
    private @Nullable Output<String> pattern;

    public Optional<Output<String>> pattern() {
        return Optional.ofNullable(this.pattern);
    }

    @Import(name="pdbName")
    private @Nullable Output<String> pdbName;

    public Optional<Output<String>> pdbName() {
        return Optional.ofNullable(this.pdbName);
    }

    @Import(name="pemCertificate")
    private @Nullable Output<String> pemCertificate;

    public Optional<Output<String>> pemCertificate() {
        return Optional.ofNullable(this.pemCertificate);
    }

    @Import(name="pemPrivateKey")
    private @Nullable Output<String> pemPrivateKey;

    public Optional<Output<String>> pemPrivateKey() {
        return Optional.ofNullable(this.pemPrivateKey);
    }

    @Import(name="perInteractionDimensions")
    private @Nullable Output<List<String>> perInteractionDimensions;

    public Optional<Output<List<String>>> perInteractionDimensions() {
        return Optional.ofNullable(this.perInteractionDimensions);
    }

    @Import(name="personalAccessToken")
    private @Nullable Output<String> personalAccessToken;

    public Optional<Output<String>> personalAccessToken() {
        return Optional.ofNullable(this.personalAccessToken);
    }

    @Import(name="pgpPassPhrase")
    private @Nullable Output<String> pgpPassPhrase;

    public Optional<Output<String>> pgpPassPhrase() {
        return Optional.ofNullable(this.pgpPassPhrase);
    }

    @Import(name="pgpSecretKey")
    private @Nullable Output<String> pgpSecretKey;

    public Optional<Output<String>> pgpSecretKey() {
        return Optional.ofNullable(this.pgpSecretKey);
    }

    @Import(name="phoneNumber")
    private @Nullable Output<String> phoneNumber;

    public Optional<Output<String>> phoneNumber() {
        return Optional.ofNullable(this.phoneNumber);
    }

    @Import(name="port")
    private @Nullable Output<String> port;

    public Optional<Output<String>> port() {
        return Optional.ofNullable(this.port);
    }

    @Import(name="postClickAttributionWindowSize")
    private @Nullable Output<String> postClickAttributionWindowSize;

    public Optional<Output<String>> postClickAttributionWindowSize() {
        return Optional.ofNullable(this.postClickAttributionWindowSize);
    }

    @Import(name="prebuiltReport")
    private @Nullable Output<String> prebuiltReport;

    public Optional<Output<String>> prebuiltReport() {
        return Optional.ofNullable(this.prebuiltReport);
    }

    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    @Import(name="primaryKeys")
    private @Nullable Output<List<String>> primaryKeys;

    public Optional<Output<List<String>>> primaryKeys() {
        return Optional.ofNullable(this.primaryKeys);
    }

    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    @Import(name="profiles")
    private @Nullable Output<List<String>> profiles;

    public Optional<Output<List<String>>> profiles() {
        return Optional.ofNullable(this.profiles);
    }

    @Import(name="projectCredentials")
    private @Nullable Output<List<ConnectorConfigProjectCredentialArgs>> projectCredentials;

    public Optional<Output<List<ConnectorConfigProjectCredentialArgs>>> projectCredentials() {
        return Optional.ofNullable(this.projectCredentials);
    }

    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    @Import(name="projects")
    private @Nullable Output<List<String>> projects;

    public Optional<Output<List<String>>> projects() {
        return Optional.ofNullable(this.projects);
    }

    @Import(name="properties")
    private @Nullable Output<List<String>> properties;

    public Optional<Output<List<String>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    @Import(name="publicKey")
    private @Nullable Output<String> publicKey;

    public Optional<Output<String>> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    @Import(name="publicationName")
    private @Nullable Output<String> publicationName;

    public Optional<Output<String>> publicationName() {
        return Optional.ofNullable(this.publicationName);
    }

    @Import(name="queryId")
    private @Nullable Output<String> queryId;

    public Optional<Output<String>> queryId() {
        return Optional.ofNullable(this.queryId);
    }

    @Import(name="queryParamValue")
    private @Nullable Output<String> queryParamValue;

    public Optional<Output<String>> queryParamValue() {
        return Optional.ofNullable(this.queryParamValue);
    }

    @Import(name="refreshTokenExpiresAt")
    private @Nullable Output<String> refreshTokenExpiresAt;

    public Optional<Output<String>> refreshTokenExpiresAt() {
        return Optional.ofNullable(this.refreshTokenExpiresAt);
    }

    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    @Import(name="replicaId")
    private @Nullable Output<String> replicaId;

    public Optional<Output<String>> replicaId() {
        return Optional.ofNullable(this.replicaId);
    }

    @Import(name="replicationSlot")
    private @Nullable Output<String> replicationSlot;

    public Optional<Output<String>> replicationSlot() {
        return Optional.ofNullable(this.replicationSlot);
    }

    @Import(name="reportConfigurationIds")
    private @Nullable Output<List<String>> reportConfigurationIds;

    public Optional<Output<List<String>>> reportConfigurationIds() {
        return Optional.ofNullable(this.reportConfigurationIds);
    }

    @Import(name="reportFormatType")
    private @Nullable Output<String> reportFormatType;

    public Optional<Output<String>> reportFormatType() {
        return Optional.ofNullable(this.reportFormatType);
    }

    @Import(name="reportSuites")
    private @Nullable Output<List<String>> reportSuites;

    public Optional<Output<List<String>>> reportSuites() {
        return Optional.ofNullable(this.reportSuites);
    }

    @Import(name="reportTimezone")
    private @Nullable Output<String> reportTimezone;

    public Optional<Output<String>> reportTimezone() {
        return Optional.ofNullable(this.reportTimezone);
    }

    @Import(name="reportType")
    private @Nullable Output<String> reportType;

    public Optional<Output<String>> reportType() {
        return Optional.ofNullable(this.reportType);
    }

    @Import(name="reportUrl")
    private @Nullable Output<String> reportUrl;

    public Optional<Output<String>> reportUrl() {
        return Optional.ofNullable(this.reportUrl);
    }

    @Import(name="reports")
    private @Nullable Output<List<ConnectorConfigReportArgs>> reports;

    public Optional<Output<List<ConnectorConfigReportArgs>>> reports() {
        return Optional.ofNullable(this.reports);
    }

    @Import(name="reportsLinkedinAds")
    private @Nullable Output<List<String>> reportsLinkedinAds;

    public Optional<Output<List<String>>> reportsLinkedinAds() {
        return Optional.ofNullable(this.reportsLinkedinAds);
    }

    @Import(name="repositories")
    private @Nullable Output<List<String>> repositories;

    public Optional<Output<List<String>>> repositories() {
        return Optional.ofNullable(this.repositories);
    }

    @Import(name="resourceToken")
    private @Nullable Output<String> resourceToken;

    public Optional<Output<String>> resourceToken() {
        return Optional.ofNullable(this.resourceToken);
    }

    @Import(name="resourceUrl")
    private @Nullable Output<String> resourceUrl;

    public Optional<Output<String>> resourceUrl() {
        return Optional.ofNullable(this.resourceUrl);
    }

    @Import(name="restApiLimit")
    private @Nullable Output<String> restApiLimit;

    public Optional<Output<String>> restApiLimit() {
        return Optional.ofNullable(this.restApiLimit);
    }

    @Import(name="rfcLibraryPath")
    private @Nullable Output<String> rfcLibraryPath;

    public Optional<Output<String>> rfcLibraryPath() {
        return Optional.ofNullable(this.rfcLibraryPath);
    }

    @Import(name="role")
    private @Nullable Output<String> role;

    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    @Import(name="rollbackWindowSize")
    private @Nullable Output<String> rollbackWindowSize;

    public Optional<Output<String>> rollbackWindowSize() {
        return Optional.ofNullable(this.rollbackWindowSize);
    }

    @Import(name="s3Bucket")
    private @Nullable Output<String> s3Bucket;

    public Optional<Output<String>> s3Bucket() {
        return Optional.ofNullable(this.s3Bucket);
    }

    @Import(name="s3ExportBucket")
    private @Nullable Output<String> s3ExportBucket;

    public Optional<Output<String>> s3ExportBucket() {
        return Optional.ofNullable(this.s3ExportBucket);
    }

    @Import(name="s3ExportFolder")
    private @Nullable Output<String> s3ExportFolder;

    public Optional<Output<String>> s3ExportFolder() {
        return Optional.ofNullable(this.s3ExportFolder);
    }

    @Import(name="s3ExportRoleArn")
    private @Nullable Output<String> s3ExportRoleArn;

    public Optional<Output<String>> s3ExportRoleArn() {
        return Optional.ofNullable(this.s3ExportRoleArn);
    }

    @Import(name="s3RoleArn")
    private @Nullable Output<String> s3RoleArn;

    public Optional<Output<String>> s3RoleArn() {
        return Optional.ofNullable(this.s3RoleArn);
    }

    @Import(name="s3bucket")
    private @Nullable Output<String> s3bucket;

    public Optional<Output<String>> s3bucket() {
        return Optional.ofNullable(this.s3bucket);
    }

    @Import(name="s3externalId")
    private @Nullable Output<String> s3externalId;

    public Optional<Output<String>> s3externalId() {
        return Optional.ofNullable(this.s3externalId);
    }

    @Import(name="s3folder")
    private @Nullable Output<String> s3folder;

    public Optional<Output<String>> s3folder() {
        return Optional.ofNullable(this.s3folder);
    }

    @Import(name="s3path")
    private @Nullable Output<String> s3path;

    public Optional<Output<String>> s3path() {
        return Optional.ofNullable(this.s3path);
    }

    @Import(name="s3roleArn")
    private @Nullable Output<String> s3roleArn;

    public Optional<Output<String>> s3roleArn() {
        return Optional.ofNullable(this.s3roleArn);
    }

    @Import(name="salesAccountSyncMode")
    private @Nullable Output<String> salesAccountSyncMode;

    public Optional<Output<String>> salesAccountSyncMode() {
        return Optional.ofNullable(this.salesAccountSyncMode);
    }

    @Import(name="salesAccounts")
    private @Nullable Output<List<String>> salesAccounts;

    public Optional<Output<List<String>>> salesAccounts() {
        return Optional.ofNullable(this.salesAccounts);
    }

    @Import(name="salesforceSecurityToken")
    private @Nullable Output<String> salesforceSecurityToken;

    public Optional<Output<String>> salesforceSecurityToken() {
        return Optional.ofNullable(this.salesforceSecurityToken);
    }

    @Import(name="sandboxAccount")
    private @Nullable Output<String> sandboxAccount;

    public Optional<Output<String>> sandboxAccount() {
        return Optional.ofNullable(this.sandboxAccount);
    }

    @Import(name="sapSchema")
    private @Nullable Output<String> sapSchema;

    public Optional<Output<String>> sapSchema() {
        return Optional.ofNullable(this.sapSchema);
    }

    @Import(name="sapUser")
    private @Nullable Output<String> sapUser;

    public Optional<Output<String>> sapUser() {
        return Optional.ofNullable(this.sapUser);
    }

    @Import(name="saslMechanism")
    private @Nullable Output<String> saslMechanism;

    public Optional<Output<String>> saslMechanism() {
        return Optional.ofNullable(this.saslMechanism);
    }

    @Import(name="saslPlainKey")
    private @Nullable Output<String> saslPlainKey;

    public Optional<Output<String>> saslPlainKey() {
        return Optional.ofNullable(this.saslPlainKey);
    }

    @Import(name="saslPlainSecret")
    private @Nullable Output<String> saslPlainSecret;

    public Optional<Output<String>> saslPlainSecret() {
        return Optional.ofNullable(this.saslPlainSecret);
    }

    @Import(name="saslScram256Key")
    private @Nullable Output<String> saslScram256Key;

    public Optional<Output<String>> saslScram256Key() {
        return Optional.ofNullable(this.saslScram256Key);
    }

    @Import(name="saslScram256Secret")
    private @Nullable Output<String> saslScram256Secret;

    public Optional<Output<String>> saslScram256Secret() {
        return Optional.ofNullable(this.saslScram256Secret);
    }

    @Import(name="saslScram512Key")
    private @Nullable Output<String> saslScram512Key;

    public Optional<Output<String>> saslScram512Key() {
        return Optional.ofNullable(this.saslScram512Key);
    }

    @Import(name="saslScram512Secret")
    private @Nullable Output<String> saslScram512Secret;

    public Optional<Output<String>> saslScram512Secret() {
        return Optional.ofNullable(this.saslScram512Secret);
    }

    @Import(name="schemaRegistryCredentialsSource")
    private @Nullable Output<String> schemaRegistryCredentialsSource;

    public Optional<Output<String>> schemaRegistryCredentialsSource() {
        return Optional.ofNullable(this.schemaRegistryCredentialsSource);
    }

    @Import(name="schemaRegistryKey")
    private @Nullable Output<String> schemaRegistryKey;

    public Optional<Output<String>> schemaRegistryKey() {
        return Optional.ofNullable(this.schemaRegistryKey);
    }

    @Import(name="schemaRegistrySecret")
    private @Nullable Output<String> schemaRegistrySecret;

    public Optional<Output<String>> schemaRegistrySecret() {
        return Optional.ofNullable(this.schemaRegistrySecret);
    }

    @Import(name="schemaRegistryUrls")
    private @Nullable Output<List<String>> schemaRegistryUrls;

    public Optional<Output<List<String>>> schemaRegistryUrls() {
        return Optional.ofNullable(this.schemaRegistryUrls);
    }

    @Import(name="secret")
    private @Nullable Output<String> secret;

    public Optional<Output<String>> secret() {
        return Optional.ofNullable(this.secret);
    }

    @Import(name="secretKey")
    private @Nullable Output<String> secretKey;

    public Optional<Output<String>> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    @Import(name="secrets")
    private @Nullable Output<String> secrets;

    public Optional<Output<String>> secrets() {
        return Optional.ofNullable(this.secrets);
    }

    @Import(name="secretsLists")
    private @Nullable Output<List<ConnectorConfigSecretsListArgs>> secretsLists;

    public Optional<Output<List<ConnectorConfigSecretsListArgs>>> secretsLists() {
        return Optional.ofNullable(this.secretsLists);
    }

    @Import(name="securityProtocol")
    private @Nullable Output<String> securityProtocol;

    public Optional<Output<String>> securityProtocol() {
        return Optional.ofNullable(this.securityProtocol);
    }

    @Import(name="segments")
    private @Nullable Output<List<String>> segments;

    public Optional<Output<List<String>>> segments() {
        return Optional.ofNullable(this.segments);
    }

    @Import(name="selectedExports")
    private @Nullable Output<List<String>> selectedExports;

    public Optional<Output<List<String>>> selectedExports() {
        return Optional.ofNullable(this.selectedExports);
    }

    @Import(name="senderId")
    private @Nullable Output<String> senderId;

    public Optional<Output<String>> senderId() {
        return Optional.ofNullable(this.senderId);
    }

    @Import(name="senderPassword")
    private @Nullable Output<String> senderPassword;

    public Optional<Output<String>> senderPassword() {
        return Optional.ofNullable(this.senderPassword);
    }

    @Import(name="serverAddress")
    private @Nullable Output<String> serverAddress;

    public Optional<Output<String>> serverAddress() {
        return Optional.ofNullable(this.serverAddress);
    }

    @Import(name="serverUrl")
    private @Nullable Output<String> serverUrl;

    public Optional<Output<String>> serverUrl() {
        return Optional.ofNullable(this.serverUrl);
    }

    @Import(name="servers")
    private @Nullable Output<List<String>> servers;

    public Optional<Output<List<String>>> servers() {
        return Optional.ofNullable(this.servers);
    }

    @Import(name="serviceAccount")
    private @Nullable Output<String> serviceAccount;

    public Optional<Output<String>> serviceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }

    @Import(name="serviceAccountEmail")
    private @Nullable Output<String> serviceAccountEmail;

    public Optional<Output<String>> serviceAccountEmail() {
        return Optional.ofNullable(this.serviceAccountEmail);
    }

    @Import(name="serviceAccountKey")
    private @Nullable Output<String> serviceAccountKey;

    public Optional<Output<String>> serviceAccountKey() {
        return Optional.ofNullable(this.serviceAccountKey);
    }

    @Import(name="serviceVersion")
    private @Nullable Output<String> serviceVersion;

    public Optional<Output<String>> serviceVersion() {
        return Optional.ofNullable(this.serviceVersion);
    }

    @Import(name="sftpHost")
    private @Nullable Output<String> sftpHost;

    public Optional<Output<String>> sftpHost() {
        return Optional.ofNullable(this.sftpHost);
    }

    @Import(name="sftpIsKeyPair")
    private @Nullable Output<String> sftpIsKeyPair;

    public Optional<Output<String>> sftpIsKeyPair() {
        return Optional.ofNullable(this.sftpIsKeyPair);
    }

    @Import(name="sftpPassword")
    private @Nullable Output<String> sftpPassword;

    public Optional<Output<String>> sftpPassword() {
        return Optional.ofNullable(this.sftpPassword);
    }

    @Import(name="sftpPort")
    private @Nullable Output<String> sftpPort;

    public Optional<Output<String>> sftpPort() {
        return Optional.ofNullable(this.sftpPort);
    }

    @Import(name="sftpPublicKey")
    private @Nullable Output<String> sftpPublicKey;

    public Optional<Output<String>> sftpPublicKey() {
        return Optional.ofNullable(this.sftpPublicKey);
    }

    @Import(name="sftpUser")
    private @Nullable Output<String> sftpUser;

    public Optional<Output<String>> sftpUser() {
        return Optional.ofNullable(this.sftpUser);
    }

    @Import(name="shareUrl")
    private @Nullable Output<String> shareUrl;

    public Optional<Output<String>> shareUrl() {
        return Optional.ofNullable(this.shareUrl);
    }

    @Import(name="sheetId")
    private @Nullable Output<String> sheetId;

    public Optional<Output<String>> sheetId() {
        return Optional.ofNullable(this.sheetId);
    }

    @Import(name="shop")
    private @Nullable Output<String> shop;

    public Optional<Output<String>> shop() {
        return Optional.ofNullable(this.shop);
    }

    @Import(name="shortCode")
    private @Nullable Output<String> shortCode;

    public Optional<Output<String>> shortCode() {
        return Optional.ofNullable(this.shortCode);
    }

    @Import(name="showRecordsWithNoMetrics")
    private @Nullable Output<String> showRecordsWithNoMetrics;

    public Optional<Output<String>> showRecordsWithNoMetrics() {
        return Optional.ofNullable(this.showRecordsWithNoMetrics);
    }

    @Import(name="sid")
    private @Nullable Output<String> sid;

    public Optional<Output<String>> sid() {
        return Optional.ofNullable(this.sid);
    }

    @Import(name="signerPublicKey")
    private @Nullable Output<String> signerPublicKey;

    public Optional<Output<String>> signerPublicKey() {
        return Optional.ofNullable(this.signerPublicKey);
    }

    @Import(name="siteAddress")
    private @Nullable Output<String> siteAddress;

    public Optional<Output<String>> siteAddress() {
        return Optional.ofNullable(this.siteAddress);
    }

    @Import(name="siteId")
    private @Nullable Output<String> siteId;

    public Optional<Output<String>> siteId() {
        return Optional.ofNullable(this.siteId);
    }

    @Import(name="siteName")
    private @Nullable Output<String> siteName;

    public Optional<Output<String>> siteName() {
        return Optional.ofNullable(this.siteName);
    }

    @Import(name="siteUrls")
    private @Nullable Output<List<String>> siteUrls;

    public Optional<Output<List<String>>> siteUrls() {
        return Optional.ofNullable(this.siteUrls);
    }

    @Import(name="skipAfter")
    private @Nullable Output<String> skipAfter;

    public Optional<Output<String>> skipAfter() {
        return Optional.ofNullable(this.skipAfter);
    }

    @Import(name="skipBefore")
    private @Nullable Output<String> skipBefore;

    public Optional<Output<String>> skipBefore() {
        return Optional.ofNullable(this.skipBefore);
    }

    @Import(name="soapUri")
    private @Nullable Output<String> soapUri;

    public Optional<Output<String>> soapUri() {
        return Optional.ofNullable(this.soapUri);
    }

    @Import(name="socialDataSyncTimeframe")
    private @Nullable Output<String> socialDataSyncTimeframe;

    public Optional<Output<String>> socialDataSyncTimeframe() {
        return Optional.ofNullable(this.socialDataSyncTimeframe);
    }

    @Import(name="source")
    private @Nullable Output<String> source;

    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    @Import(name="storeHash")
    private @Nullable Output<String> storeHash;

    public Optional<Output<String>> storeHash() {
        return Optional.ofNullable(this.storeHash);
    }

    @Import(name="subDomain")
    private @Nullable Output<String> subDomain;

    public Optional<Output<String>> subDomain() {
        return Optional.ofNullable(this.subDomain);
    }

    @Import(name="subdomain")
    private @Nullable Output<String> subdomain;

    public Optional<Output<String>> subdomain() {
        return Optional.ofNullable(this.subdomain);
    }

    @Import(name="subscriberName")
    private @Nullable Output<String> subscriberName;

    public Optional<Output<String>> subscriberName() {
        return Optional.ofNullable(this.subscriberName);
    }

    @Import(name="subscription")
    private @Nullable Output<String> subscription;

    public Optional<Output<String>> subscription() {
        return Optional.ofNullable(this.subscription);
    }

    @Import(name="supportConnectedAccountsSync")
    private @Nullable Output<String> supportConnectedAccountsSync;

    public Optional<Output<String>> supportConnectedAccountsSync() {
        return Optional.ofNullable(this.supportConnectedAccountsSync);
    }

    @Import(name="supportNestedColumns")
    private @Nullable Output<String> supportNestedColumns;

    public Optional<Output<String>> supportNestedColumns() {
        return Optional.ofNullable(this.supportNestedColumns);
    }

    @Import(name="surveyIds")
    private @Nullable Output<String> surveyIds;

    public Optional<Output<String>> surveyIds() {
        return Optional.ofNullable(this.surveyIds);
    }

    @Import(name="swipeAttributionWindow")
    private @Nullable Output<String> swipeAttributionWindow;

    public Optional<Output<String>> swipeAttributionWindow() {
        return Optional.ofNullable(this.swipeAttributionWindow);
    }

    @Import(name="syncDataLocker")
    private @Nullable Output<String> syncDataLocker;

    public Optional<Output<String>> syncDataLocker() {
        return Optional.ofNullable(this.syncDataLocker);
    }

    @Import(name="syncFormat")
    private @Nullable Output<String> syncFormat;

    public Optional<Output<String>> syncFormat() {
        return Optional.ofNullable(this.syncFormat);
    }

    @Import(name="syncFormulaFields")
    private @Nullable Output<String> syncFormulaFields;

    public Optional<Output<String>> syncFormulaFields() {
        return Optional.ofNullable(this.syncFormulaFields);
    }

    @Import(name="syncMetadata")
    private @Nullable Output<String> syncMetadata;

    public Optional<Output<String>> syncMetadata() {
        return Optional.ofNullable(this.syncMetadata);
    }

    @Import(name="syncMethod")
    private @Nullable Output<String> syncMethod;

    public Optional<Output<String>> syncMethod() {
        return Optional.ofNullable(this.syncMethod);
    }

    @Import(name="syncMode")
    private @Nullable Output<String> syncMode;

    public Optional<Output<String>> syncMode() {
        return Optional.ofNullable(this.syncMode);
    }

    @Import(name="syncMultipleAccounts")
    private @Nullable Output<String> syncMultipleAccounts;

    public Optional<Output<String>> syncMultipleAccounts() {
        return Optional.ofNullable(this.syncMultipleAccounts);
    }

    @Import(name="syncPackMode")
    private @Nullable Output<String> syncPackMode;

    public Optional<Output<String>> syncPackMode() {
        return Optional.ofNullable(this.syncPackMode);
    }

    @Import(name="syncPullApi")
    private @Nullable Output<String> syncPullApi;

    public Optional<Output<String>> syncPullApi() {
        return Optional.ofNullable(this.syncPullApi);
    }

    @Import(name="syncType")
    private @Nullable Output<String> syncType;

    public Optional<Output<String>> syncType() {
        return Optional.ofNullable(this.syncType);
    }

    @Import(name="sysnr")
    private @Nullable Output<String> sysnr;

    public Optional<Output<String>> sysnr() {
        return Optional.ofNullable(this.sysnr);
    }

    @Import(name="tableName")
    private @Nullable Output<String> tableName;

    public Optional<Output<String>> tableName() {
        return Optional.ofNullable(this.tableName);
    }

    @Import(name="tdeCertificate")
    private @Nullable Output<String> tdeCertificate;

    public Optional<Output<String>> tdeCertificate() {
        return Optional.ofNullable(this.tdeCertificate);
    }

    @Import(name="tdeCertificateName")
    private @Nullable Output<String> tdeCertificateName;

    public Optional<Output<String>> tdeCertificateName() {
        return Optional.ofNullable(this.tdeCertificateName);
    }

    @Import(name="tdePassword")
    private @Nullable Output<String> tdePassword;

    public Optional<Output<String>> tdePassword() {
        return Optional.ofNullable(this.tdePassword);
    }

    @Import(name="tdePrivateKey")
    private @Nullable Output<String> tdePrivateKey;

    public Optional<Output<String>> tdePrivateKey() {
        return Optional.ofNullable(this.tdePrivateKey);
    }

    @Import(name="teamId")
    private @Nullable Output<String> teamId;

    public Optional<Output<String>> teamId() {
        return Optional.ofNullable(this.teamId);
    }

    @Import(name="technicalAccountId")
    private @Nullable Output<String> technicalAccountId;

    public Optional<Output<String>> technicalAccountId() {
        return Optional.ofNullable(this.technicalAccountId);
    }

    @Import(name="templateLabels")
    private @Nullable Output<List<String>> templateLabels;

    public Optional<Output<List<String>>> templateLabels() {
        return Optional.ofNullable(this.templateLabels);
    }

    @Import(name="tenant")
    private @Nullable Output<String> tenant;

    public Optional<Output<String>> tenant() {
        return Optional.ofNullable(this.tenant);
    }

    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    @Import(name="testTableName")
    private @Nullable Output<String> testTableName;

    public Optional<Output<String>> testTableName() {
        return Optional.ofNullable(this.testTableName);
    }

    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    @Import(name="timeframeMonths")
    private @Nullable Output<String> timeframeMonths;

    public Optional<Output<String>> timeframeMonths() {
        return Optional.ofNullable(this.timeframeMonths);
    }

    @Import(name="tns")
    private @Nullable Output<String> tns;

    public Optional<Output<String>> tns() {
        return Optional.ofNullable(this.tns);
    }

    @Import(name="tokenAuthenticatedContainer")
    private @Nullable Output<String> tokenAuthenticatedContainer;

    public Optional<Output<String>> tokenAuthenticatedContainer() {
        return Optional.ofNullable(this.tokenAuthenticatedContainer);
    }

    @Import(name="tokenAuthenticatedDatabase")
    private @Nullable Output<String> tokenAuthenticatedDatabase;

    public Optional<Output<String>> tokenAuthenticatedDatabase() {
        return Optional.ofNullable(this.tokenAuthenticatedDatabase);
    }

    @Import(name="tokenId")
    private @Nullable Output<String> tokenId;

    public Optional<Output<String>> tokenId() {
        return Optional.ofNullable(this.tokenId);
    }

    @Import(name="tokenKey")
    private @Nullable Output<String> tokenKey;

    public Optional<Output<String>> tokenKey() {
        return Optional.ofNullable(this.tokenKey);
    }

    @Import(name="tokenSecret")
    private @Nullable Output<String> tokenSecret;

    public Optional<Output<String>> tokenSecret() {
        return Optional.ofNullable(this.tokenSecret);
    }

    @Import(name="tokenSecretKey")
    private @Nullable Output<String> tokenSecretKey;

    public Optional<Output<String>> tokenSecretKey() {
        return Optional.ofNullable(this.tokenSecretKey);
    }

    @Import(name="topics")
    private @Nullable Output<List<String>> topics;

    public Optional<Output<List<String>>> topics() {
        return Optional.ofNullable(this.topics);
    }

    @Import(name="trustStoreType")
    private @Nullable Output<String> trustStoreType;

    public Optional<Output<String>> trustStoreType() {
        return Optional.ofNullable(this.trustStoreType);
    }

    @Import(name="trustedCert")
    private @Nullable Output<String> trustedCert;

    public Optional<Output<String>> trustedCert() {
        return Optional.ofNullable(this.trustedCert);
    }

    @Import(name="truststore")
    private @Nullable Output<String> truststore;

    public Optional<Output<String>> truststore() {
        return Optional.ofNullable(this.truststore);
    }

    @Import(name="tunnelHost")
    private @Nullable Output<String> tunnelHost;

    public Optional<Output<String>> tunnelHost() {
        return Optional.ofNullable(this.tunnelHost);
    }

    @Import(name="tunnelPort")
    private @Nullable Output<String> tunnelPort;

    public Optional<Output<String>> tunnelPort() {
        return Optional.ofNullable(this.tunnelPort);
    }

    @Import(name="tunnelUser")
    private @Nullable Output<String> tunnelUser;

    public Optional<Output<String>> tunnelUser() {
        return Optional.ofNullable(this.tunnelUser);
    }

    @Import(name="uniqueId")
    private @Nullable Output<String> uniqueId;

    public Optional<Output<String>> uniqueId() {
        return Optional.ofNullable(this.uniqueId);
    }

    @Import(name="updateConfigOnEachSync")
    private @Nullable Output<String> updateConfigOnEachSync;

    public Optional<Output<String>> updateConfigOnEachSync() {
        return Optional.ofNullable(this.updateConfigOnEachSync);
    }

    @Import(name="updateMethod")
    private @Nullable Output<String> updateMethod;

    public Optional<Output<String>> updateMethod() {
        return Optional.ofNullable(this.updateMethod);
    }

    @Import(name="uri")
    private @Nullable Output<String> uri;

    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    @Import(name="useApiKeys")
    private @Nullable Output<String> useApiKeys;

    public Optional<Output<String>> useApiKeys() {
        return Optional.ofNullable(this.useApiKeys);
    }

    @Import(name="useCustomerBucket")
    private @Nullable Output<String> useCustomerBucket;

    public Optional<Output<String>> useCustomerBucket() {
        return Optional.ofNullable(this.useCustomerBucket);
    }

    @Import(name="useOracleRac")
    private @Nullable Output<String> useOracleRac;

    public Optional<Output<String>> useOracleRac() {
        return Optional.ofNullable(this.useOracleRac);
    }

    @Import(name="usePgpEncryptionOptions")
    private @Nullable Output<String> usePgpEncryptionOptions;

    public Optional<Output<String>> usePgpEncryptionOptions() {
        return Optional.ofNullable(this.usePgpEncryptionOptions);
    }

    @Import(name="useServiceAccount")
    private @Nullable Output<String> useServiceAccount;

    public Optional<Output<String>> useServiceAccount() {
        return Optional.ofNullable(this.useServiceAccount);
    }

    @Import(name="useTemplateLabels")
    private @Nullable Output<String> useTemplateLabels;

    public Optional<Output<String>> useTemplateLabels() {
        return Optional.ofNullable(this.useTemplateLabels);
    }

    @Import(name="useWebhooks")
    private @Nullable Output<String> useWebhooks;

    public Optional<Output<String>> useWebhooks() {
        return Optional.ofNullable(this.useWebhooks);
    }

    @Import(name="useWorkspace")
    private @Nullable Output<String> useWorkspace;

    public Optional<Output<String>> useWorkspace() {
        return Optional.ofNullable(this.useWorkspace);
    }

    @Import(name="user")
    private @Nullable Output<String> user;

    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    @Import(name="userId")
    private @Nullable Output<String> userId;

    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    @Import(name="userKey")
    private @Nullable Output<String> userKey;

    public Optional<Output<String>> userKey() {
        return Optional.ofNullable(this.userKey);
    }

    @Import(name="userName")
    private @Nullable Output<String> userName;

    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    @Import(name="userProfiles")
    private @Nullable Output<List<String>> userProfiles;

    public Optional<Output<List<String>>> userProfiles() {
        return Optional.ofNullable(this.userProfiles);
    }

    @Import(name="username")
    private @Nullable Output<String> username;

    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    @Import(name="viewAttributionWindow")
    private @Nullable Output<String> viewAttributionWindow;

    public Optional<Output<String>> viewAttributionWindow() {
        return Optional.ofNullable(this.viewAttributionWindow);
    }

    @Import(name="viewThroughAttributionWindowSize")
    private @Nullable Output<String> viewThroughAttributionWindowSize;

    public Optional<Output<String>> viewThroughAttributionWindowSize() {
        return Optional.ofNullable(this.viewThroughAttributionWindowSize);
    }

    @Import(name="webhookEndpoint")
    private @Nullable Output<String> webhookEndpoint;

    public Optional<Output<String>> webhookEndpoint() {
        return Optional.ofNullable(this.webhookEndpoint);
    }

    @Import(name="webhookKey")
    private @Nullable Output<String> webhookKey;

    public Optional<Output<String>> webhookKey() {
        return Optional.ofNullable(this.webhookKey);
    }

    @Import(name="webhookUrl")
    private @Nullable Output<String> webhookUrl;

    public Optional<Output<String>> webhookUrl() {
        return Optional.ofNullable(this.webhookUrl);
    }

    @Import(name="wordPressSiteIdOrWoocommerceDomainName")
    private @Nullable Output<String> wordPressSiteIdOrWoocommerceDomainName;

    public Optional<Output<String>> wordPressSiteIdOrWoocommerceDomainName() {
        return Optional.ofNullable(this.wordPressSiteIdOrWoocommerceDomainName);
    }

    @Import(name="workspaceName")
    private @Nullable Output<String> workspaceName;

    public Optional<Output<String>> workspaceName() {
        return Optional.ofNullable(this.workspaceName);
    }

    @Import(name="workspaceSameAsSource")
    private @Nullable Output<String> workspaceSameAsSource;

    public Optional<Output<String>> workspaceSameAsSource() {
        return Optional.ofNullable(this.workspaceSameAsSource);
    }

    @Import(name="workspaceSchema")
    private @Nullable Output<String> workspaceSchema;

    public Optional<Output<String>> workspaceSchema() {
        return Optional.ofNullable(this.workspaceSchema);
    }

    @Import(name="wsCertificate")
    private @Nullable Output<String> wsCertificate;

    public Optional<Output<String>> wsCertificate() {
        return Optional.ofNullable(this.wsCertificate);
    }

    private ConnectorConfigArgs() {}

    private ConnectorConfigArgs(ConnectorConfigArgs $) {
        this.absConnectionMethod = $.absConnectionMethod;
        this.absConnectionString = $.absConnectionString;
        this.absContainerAddress = $.absContainerAddress;
        this.absContainerName = $.absContainerName;
        this.absHostIp = $.absHostIp;
        this.absHostUser = $.absHostUser;
        this.absPrefix = $.absPrefix;
        this.absPublicKey = $.absPublicKey;
        this.accessKey = $.accessKey;
        this.accessKeyId = $.accessKeyId;
        this.accessKeySecret = $.accessKeySecret;
        this.accessToken = $.accessToken;
        this.accessType = $.accessType;
        this.account = $.account;
        this.accountId = $.accountId;
        this.accountIds = $.accountIds;
        this.accountKey = $.accountKey;
        this.accountName = $.accountName;
        this.accountSyncMode = $.accountSyncMode;
        this.accounts = $.accounts;
        this.accountsRedditAds = $.accountsRedditAds;
        this.accountsSyncMode = $.accountsSyncMode;
        this.actionBreakdowns = $.actionBreakdowns;
        this.actionReportTime = $.actionReportTime;
        this.adAnalytics = $.adAnalytics;
        this.adUnitView = $.adUnitView;
        this.adminApiKey = $.adminApiKey;
        this.adobeAnalyticsConfigurations = $.adobeAnalyticsConfigurations;
        this.advertisables = $.advertisables;
        this.advertisers = $.advertisers;
        this.advertisersIds = $.advertisersIds;
        this.advertisersSyncMode = $.advertisersSyncMode;
        this.agentHost = $.agentHost;
        this.agentOraHome = $.agentOraHome;
        this.agentPassword = $.agentPassword;
        this.agentPort = $.agentPort;
        this.agentPublicCert = $.agentPublicCert;
        this.agentUser = $.agentUser;
        this.aggregation = $.aggregation;
        this.alwaysEncrypted = $.alwaysEncrypted;
        this.apiAccessToken = $.apiAccessToken;
        this.apiId = $.apiId;
        this.apiKey = $.apiKey;
        this.apiKeyApiSecret = $.apiKeyApiSecret;
        this.apiKeys = $.apiKeys;
        this.apiQuota = $.apiQuota;
        this.apiRequestsPerMinute = $.apiRequestsPerMinute;
        this.apiSecret = $.apiSecret;
        this.apiSecretKey = $.apiSecretKey;
        this.apiToken = $.apiToken;
        this.apiType = $.apiType;
        this.apiUrl = $.apiUrl;
        this.apiUsage = $.apiUsage;
        this.apiUtilizationPercentage = $.apiUtilizationPercentage;
        this.apiVersion = $.apiVersion;
        this.appId = $.appId;
        this.appIds = $.appIds;
        this.appIdsAppsflyers = $.appIdsAppsflyers;
        this.appKey = $.appKey;
        this.appSpecificPassword = $.appSpecificPassword;
        this.appSyncMode = $.appSyncMode;
        this.appendFileOption = $.appendFileOption;
        this.applicationKey = $.applicationKey;
        this.apps = $.apps;
        this.archiveLogFormat = $.archiveLogFormat;
        this.archiveLogPath = $.archiveLogPath;
        this.archivePattern = $.archivePattern;
        this.areSoapCredentialsProvided = $.areSoapCredentialsProvided;
        this.asbIp = $.asbIp;
        this.asmOption = $.asmOption;
        this.asmOracleHome = $.asmOracleHome;
        this.asmPassword = $.asmPassword;
        this.asmTns = $.asmTns;
        this.asmUser = $.asmUser;
        this.attributionWindow = $.attributionWindow;
        this.attributionWindowSize = $.attributionWindowSize;
        this.auth = $.auth;
        this.authMethod = $.authMethod;
        this.authMode = $.authMode;
        this.authType = $.authType;
        this.authorizationMethod = $.authorizationMethod;
        this.awsRegionCode = $.awsRegionCode;
        this.baseCurrency = $.baseCurrency;
        this.baseDomain = $.baseDomain;
        this.baseId = $.baseId;
        this.baseUrl = $.baseUrl;
        this.bearerToken = $.bearerToken;
        this.blobSasUrl = $.blobSasUrl;
        this.breakdowns = $.breakdowns;
        this.bucket = $.bucket;
        this.bucketName = $.bucketName;
        this.bucketService = $.bucketService;
        this.businessId = $.businessId;
        this.businessUnitId = $.businessUnitId;
        this.certificate = $.certificate;
        this.clickAttributionWindow = $.clickAttributionWindow;
        this.client = $.client;
        this.clientCert = $.clientCert;
        this.clientCertKey = $.clientCertKey;
        this.clientId = $.clientId;
        this.clientKey = $.clientKey;
        this.clientName = $.clientName;
        this.clientSecret = $.clientSecret;
        this.cloudStorageType = $.cloudStorageType;
        this.columns = $.columns;
        this.companyId = $.companyId;
        this.companyKey = $.companyKey;
        this.companyRequestToken = $.companyRequestToken;
        this.companyUuid = $.companyUuid;
        this.compression = $.compression;
        this.configMethod = $.configMethod;
        this.configRepositoryUrl = $.configRepositoryUrl;
        this.configType = $.configType;
        this.connectingUser = $.connectingUser;
        this.connectingUserEmail = $.connectingUserEmail;
        this.connectionMethod = $.connectionMethod;
        this.connectionString = $.connectionString;
        this.connectionType = $.connectionType;
        this.consumerGroup = $.consumerGroup;
        this.consumerKey = $.consumerKey;
        this.consumerSecret = $.consumerSecret;
        this.containerAddress = $.containerAddress;
        this.containerName = $.containerName;
        this.contentOwnerId = $.contentOwnerId;
        this.conversationWebhookUrl = $.conversationWebhookUrl;
        this.conversionDimensions = $.conversionDimensions;
        this.conversionReportTime = $.conversionReportTime;
        this.conversionWindowSize = $.conversionWindowSize;
        this.csvDefinition = $.csvDefinition;
        this.currency = $.currency;
        this.customEventSyncMode = $.customEventSyncMode;
        this.customEvents = $.customEvents;
        this.customFieldIds = $.customFieldIds;
        this.customFloodlightVariables = $.customFloodlightVariables;
        this.customReports = $.customReports;
        this.customTables = $.customTables;
        this.customerId = $.customerId;
        this.customerListId = $.customerListId;
        this.dailyApiCallLimit = $.dailyApiCallLimit;
        this.dataAccessMethod = $.dataAccessMethod;
        this.dataCenter = $.dataCenter;
        this.dataSetName = $.dataSetName;
        this.database = $.database;
        this.datasetId = $.datasetId;
        this.datasource = $.datasource;
        this.dateGranularity = $.dateGranularity;
        this.delimiter = $.delimiter;
        this.dimensionAttributes = $.dimensionAttributes;
        this.dimensions = $.dimensions;
        this.distributedConnectorClusterSize = $.distributedConnectorClusterSize;
        this.domain = $.domain;
        this.domainHostName = $.domainHostName;
        this.domainName = $.domainName;
        this.domainType = $.domainType;
        this.elements = $.elements;
        this.email = $.email;
        this.emptyHeader = $.emptyHeader;
        this.enableAllDimensionCombinations = $.enableAllDimensionCombinations;
        this.enableArchiveLogOnly = $.enableArchiveLogOnly;
        this.enableDataExtensionsSyncing = $.enableDataExtensionsSyncing;
        this.enableDistributedConnectorMode = $.enableDistributedConnectorMode;
        this.enableEnrichments = $.enableEnrichments;
        this.enableExports = $.enableExports;
        this.enableTde = $.enableTde;
        this.encodedPublicKey = $.encodedPublicKey;
        this.encryptionKey = $.encryptionKey;
        this.endpoint = $.endpoint;
        this.engagementAttributionWindow = $.engagementAttributionWindow;
        this.enrichedExport = $.enrichedExport;
        this.entityId = $.entityId;
        this.environment = $.environment;
        this.escapeChar = $.escapeChar;
        this.euRegion = $.euRegion;
        this.events = $.events;
        this.exportStorageType = $.exportStorageType;
        this.externalId = $.externalId;
        this.fields = $.fields;
        this.fileType = $.fileType;
        this.filter = $.filter;
        this.financeAccountSyncMode = $.financeAccountSyncMode;
        this.financeAccounts = $.financeAccounts;
        this.folder = $.folder;
        this.folderId = $.folderId;
        this.folderPath = $.folderPath;
        this.forecastId = $.forecastId;
        this.ftpHost = $.ftpHost;
        this.ftpPassword = $.ftpPassword;
        this.ftpPort = $.ftpPort;
        this.ftpUser = $.ftpUser;
        this.function = $.function;
        this.functionApp = $.functionApp;
        this.functionKey = $.functionKey;
        this.functionName = $.functionName;
        this.functionTrigger = $.functionTrigger;
        this.gcsBucket = $.gcsBucket;
        this.gcsFolder = $.gcsFolder;
        this.groupName = $.groupName;
        this.hasManagePermissions = $.hasManagePermissions;
        this.homeFolder = $.homeFolder;
        this.host = $.host;
        this.hostIp = $.hostIp;
        this.hostUser = $.hostUser;
        this.hosts = $.hosts;
        this.identity = $.identity;
        this.includeOcapiEndpoints = $.includeOcapiEndpoints;
        this.instance = $.instance;
        this.instanceNumber = $.instanceNumber;
        this.instanceUrl = $.instanceUrl;
        this.integrationKey = $.integrationKey;
        this.isAccountLevelConnector = $.isAccountLevelConnector;
        this.isAuth2Enabled = $.isAuth2Enabled;
        this.isCustomApiCredentials = $.isCustomApiCredentials;
        this.isExternalActivitiesEndpointSelected = $.isExternalActivitiesEndpointSelected;
        this.isFtps = $.isFtps;
        this.isKeypair = $.isKeypair;
        this.isMultiEntityFeatureEnabled = $.isMultiEntityFeatureEnabled;
        this.isNewPackage = $.isNewPackage;
        this.isPrivateKeyEncrypted = $.isPrivateKeyEncrypted;
        this.isPrivateLinkRequired = $.isPrivateLinkRequired;
        this.isPublic = $.isPublic;
        this.isSailthruConnectEnabled = $.isSailthruConnectEnabled;
        this.isSecure = $.isSecure;
        this.isSingleTableMode = $.isSingleTableMode;
        this.isVendor = $.isVendor;
        this.jsonDeliveryMode = $.jsonDeliveryMode;
        this.key = $.key;
        this.keyPassword = $.keyPassword;
        this.keyStoreType = $.keyStoreType;
        this.keystore = $.keystore;
        this.keystorePassword = $.keystorePassword;
        this.lastSyncedChangesUtc_ = $.lastSyncedChangesUtc_;
        this.latestVersion = $.latestVersion;
        this.limitForApiCallsToExternalActivitiesEndpoint = $.limitForApiCallsToExternalActivitiesEndpoint;
        this.lineSeparator = $.lineSeparator;
        this.listStrategy = $.listStrategy;
        this.listSyncMode = $.listSyncMode;
        this.logJournal = $.logJournal;
        this.logJournalSchema = $.logJournalSchema;
        this.login = $.login;
        this.loginPassword = $.loginPassword;
        this.managerAccounts = $.managerAccounts;
        this.merchantId = $.merchantId;
        this.messageType = $.messageType;
        this.metrics = $.metrics;
        this.namedRange = $.namedRange;
        this.namespace = $.namespace;
        this.networkCode = $.networkCode;
        this.nullSequence = $.nullSequence;
        this.oauthToken = $.oauthToken;
        this.oauthTokenSecret = $.oauthTokenSecret;
        this.ocapiClientId = $.ocapiClientId;
        this.ocapiClientSecret = $.ocapiClientSecret;
        this.ocapiCustomObjectTypes = $.ocapiCustomObjectTypes;
        this.ocapiHostname = $.ocapiHostname;
        this.onError = $.onError;
        this.onPremise = $.onPremise;
        this.organization = $.organization;
        this.organizationId = $.organizationId;
        this.organizations = $.organizations;
        this.packedModeTables = $.packedModeTables;
        this.packingMode = $.packingMode;
        this.pages = $.pages;
        this.partnerCode = $.partnerCode;
        this.partners = $.partners;
        this.passphrase = $.passphrase;
        this.password = $.password;
        this.pat = $.pat;
        this.patName = $.patName;
        this.patSecret = $.patSecret;
        this.path = $.path;
        this.pattern = $.pattern;
        this.pdbName = $.pdbName;
        this.pemCertificate = $.pemCertificate;
        this.pemPrivateKey = $.pemPrivateKey;
        this.perInteractionDimensions = $.perInteractionDimensions;
        this.personalAccessToken = $.personalAccessToken;
        this.pgpPassPhrase = $.pgpPassPhrase;
        this.pgpSecretKey = $.pgpSecretKey;
        this.phoneNumber = $.phoneNumber;
        this.port = $.port;
        this.postClickAttributionWindowSize = $.postClickAttributionWindowSize;
        this.prebuiltReport = $.prebuiltReport;
        this.prefix = $.prefix;
        this.primaryKeys = $.primaryKeys;
        this.privateKey = $.privateKey;
        this.profiles = $.profiles;
        this.projectCredentials = $.projectCredentials;
        this.projectId = $.projectId;
        this.projects = $.projects;
        this.properties = $.properties;
        this.publicKey = $.publicKey;
        this.publicationName = $.publicationName;
        this.queryId = $.queryId;
        this.queryParamValue = $.queryParamValue;
        this.refreshTokenExpiresAt = $.refreshTokenExpiresAt;
        this.region = $.region;
        this.replicaId = $.replicaId;
        this.replicationSlot = $.replicationSlot;
        this.reportConfigurationIds = $.reportConfigurationIds;
        this.reportFormatType = $.reportFormatType;
        this.reportSuites = $.reportSuites;
        this.reportTimezone = $.reportTimezone;
        this.reportType = $.reportType;
        this.reportUrl = $.reportUrl;
        this.reports = $.reports;
        this.reportsLinkedinAds = $.reportsLinkedinAds;
        this.repositories = $.repositories;
        this.resourceToken = $.resourceToken;
        this.resourceUrl = $.resourceUrl;
        this.restApiLimit = $.restApiLimit;
        this.rfcLibraryPath = $.rfcLibraryPath;
        this.role = $.role;
        this.roleArn = $.roleArn;
        this.rollbackWindowSize = $.rollbackWindowSize;
        this.s3Bucket = $.s3Bucket;
        this.s3ExportBucket = $.s3ExportBucket;
        this.s3ExportFolder = $.s3ExportFolder;
        this.s3ExportRoleArn = $.s3ExportRoleArn;
        this.s3RoleArn = $.s3RoleArn;
        this.s3bucket = $.s3bucket;
        this.s3externalId = $.s3externalId;
        this.s3folder = $.s3folder;
        this.s3path = $.s3path;
        this.s3roleArn = $.s3roleArn;
        this.salesAccountSyncMode = $.salesAccountSyncMode;
        this.salesAccounts = $.salesAccounts;
        this.salesforceSecurityToken = $.salesforceSecurityToken;
        this.sandboxAccount = $.sandboxAccount;
        this.sapSchema = $.sapSchema;
        this.sapUser = $.sapUser;
        this.saslMechanism = $.saslMechanism;
        this.saslPlainKey = $.saslPlainKey;
        this.saslPlainSecret = $.saslPlainSecret;
        this.saslScram256Key = $.saslScram256Key;
        this.saslScram256Secret = $.saslScram256Secret;
        this.saslScram512Key = $.saslScram512Key;
        this.saslScram512Secret = $.saslScram512Secret;
        this.schemaRegistryCredentialsSource = $.schemaRegistryCredentialsSource;
        this.schemaRegistryKey = $.schemaRegistryKey;
        this.schemaRegistrySecret = $.schemaRegistrySecret;
        this.schemaRegistryUrls = $.schemaRegistryUrls;
        this.secret = $.secret;
        this.secretKey = $.secretKey;
        this.secrets = $.secrets;
        this.secretsLists = $.secretsLists;
        this.securityProtocol = $.securityProtocol;
        this.segments = $.segments;
        this.selectedExports = $.selectedExports;
        this.senderId = $.senderId;
        this.senderPassword = $.senderPassword;
        this.serverAddress = $.serverAddress;
        this.serverUrl = $.serverUrl;
        this.servers = $.servers;
        this.serviceAccount = $.serviceAccount;
        this.serviceAccountEmail = $.serviceAccountEmail;
        this.serviceAccountKey = $.serviceAccountKey;
        this.serviceVersion = $.serviceVersion;
        this.sftpHost = $.sftpHost;
        this.sftpIsKeyPair = $.sftpIsKeyPair;
        this.sftpPassword = $.sftpPassword;
        this.sftpPort = $.sftpPort;
        this.sftpPublicKey = $.sftpPublicKey;
        this.sftpUser = $.sftpUser;
        this.shareUrl = $.shareUrl;
        this.sheetId = $.sheetId;
        this.shop = $.shop;
        this.shortCode = $.shortCode;
        this.showRecordsWithNoMetrics = $.showRecordsWithNoMetrics;
        this.sid = $.sid;
        this.signerPublicKey = $.signerPublicKey;
        this.siteAddress = $.siteAddress;
        this.siteId = $.siteId;
        this.siteName = $.siteName;
        this.siteUrls = $.siteUrls;
        this.skipAfter = $.skipAfter;
        this.skipBefore = $.skipBefore;
        this.soapUri = $.soapUri;
        this.socialDataSyncTimeframe = $.socialDataSyncTimeframe;
        this.source = $.source;
        this.storeHash = $.storeHash;
        this.subDomain = $.subDomain;
        this.subdomain = $.subdomain;
        this.subscriberName = $.subscriberName;
        this.subscription = $.subscription;
        this.supportConnectedAccountsSync = $.supportConnectedAccountsSync;
        this.supportNestedColumns = $.supportNestedColumns;
        this.surveyIds = $.surveyIds;
        this.swipeAttributionWindow = $.swipeAttributionWindow;
        this.syncDataLocker = $.syncDataLocker;
        this.syncFormat = $.syncFormat;
        this.syncFormulaFields = $.syncFormulaFields;
        this.syncMetadata = $.syncMetadata;
        this.syncMethod = $.syncMethod;
        this.syncMode = $.syncMode;
        this.syncMultipleAccounts = $.syncMultipleAccounts;
        this.syncPackMode = $.syncPackMode;
        this.syncPullApi = $.syncPullApi;
        this.syncType = $.syncType;
        this.sysnr = $.sysnr;
        this.tableName = $.tableName;
        this.tdeCertificate = $.tdeCertificate;
        this.tdeCertificateName = $.tdeCertificateName;
        this.tdePassword = $.tdePassword;
        this.tdePrivateKey = $.tdePrivateKey;
        this.teamId = $.teamId;
        this.technicalAccountId = $.technicalAccountId;
        this.templateLabels = $.templateLabels;
        this.tenant = $.tenant;
        this.tenantId = $.tenantId;
        this.testTableName = $.testTableName;
        this.timeZone = $.timeZone;
        this.timeframeMonths = $.timeframeMonths;
        this.tns = $.tns;
        this.tokenAuthenticatedContainer = $.tokenAuthenticatedContainer;
        this.tokenAuthenticatedDatabase = $.tokenAuthenticatedDatabase;
        this.tokenId = $.tokenId;
        this.tokenKey = $.tokenKey;
        this.tokenSecret = $.tokenSecret;
        this.tokenSecretKey = $.tokenSecretKey;
        this.topics = $.topics;
        this.trustStoreType = $.trustStoreType;
        this.trustedCert = $.trustedCert;
        this.truststore = $.truststore;
        this.tunnelHost = $.tunnelHost;
        this.tunnelPort = $.tunnelPort;
        this.tunnelUser = $.tunnelUser;
        this.uniqueId = $.uniqueId;
        this.updateConfigOnEachSync = $.updateConfigOnEachSync;
        this.updateMethod = $.updateMethod;
        this.uri = $.uri;
        this.useApiKeys = $.useApiKeys;
        this.useCustomerBucket = $.useCustomerBucket;
        this.useOracleRac = $.useOracleRac;
        this.usePgpEncryptionOptions = $.usePgpEncryptionOptions;
        this.useServiceAccount = $.useServiceAccount;
        this.useTemplateLabels = $.useTemplateLabels;
        this.useWebhooks = $.useWebhooks;
        this.useWorkspace = $.useWorkspace;
        this.user = $.user;
        this.userId = $.userId;
        this.userKey = $.userKey;
        this.userName = $.userName;
        this.userProfiles = $.userProfiles;
        this.username = $.username;
        this.viewAttributionWindow = $.viewAttributionWindow;
        this.viewThroughAttributionWindowSize = $.viewThroughAttributionWindowSize;
        this.webhookEndpoint = $.webhookEndpoint;
        this.webhookKey = $.webhookKey;
        this.webhookUrl = $.webhookUrl;
        this.wordPressSiteIdOrWoocommerceDomainName = $.wordPressSiteIdOrWoocommerceDomainName;
        this.workspaceName = $.workspaceName;
        this.workspaceSameAsSource = $.workspaceSameAsSource;
        this.workspaceSchema = $.workspaceSchema;
        this.wsCertificate = $.wsCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorConfigArgs $;

        public Builder() {
            $ = new ConnectorConfigArgs();
        }

        public Builder(ConnectorConfigArgs defaults) {
            $ = new ConnectorConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder absConnectionMethod(@Nullable Output<String> absConnectionMethod) {
            $.absConnectionMethod = absConnectionMethod;
            return this;
        }

        public Builder absConnectionMethod(String absConnectionMethod) {
            return absConnectionMethod(Output.of(absConnectionMethod));
        }

        public Builder absConnectionString(@Nullable Output<String> absConnectionString) {
            $.absConnectionString = absConnectionString;
            return this;
        }

        public Builder absConnectionString(String absConnectionString) {
            return absConnectionString(Output.of(absConnectionString));
        }

        public Builder absContainerAddress(@Nullable Output<String> absContainerAddress) {
            $.absContainerAddress = absContainerAddress;
            return this;
        }

        public Builder absContainerAddress(String absContainerAddress) {
            return absContainerAddress(Output.of(absContainerAddress));
        }

        public Builder absContainerName(@Nullable Output<String> absContainerName) {
            $.absContainerName = absContainerName;
            return this;
        }

        public Builder absContainerName(String absContainerName) {
            return absContainerName(Output.of(absContainerName));
        }

        public Builder absHostIp(@Nullable Output<String> absHostIp) {
            $.absHostIp = absHostIp;
            return this;
        }

        public Builder absHostIp(String absHostIp) {
            return absHostIp(Output.of(absHostIp));
        }

        public Builder absHostUser(@Nullable Output<String> absHostUser) {
            $.absHostUser = absHostUser;
            return this;
        }

        public Builder absHostUser(String absHostUser) {
            return absHostUser(Output.of(absHostUser));
        }

        public Builder absPrefix(@Nullable Output<String> absPrefix) {
            $.absPrefix = absPrefix;
            return this;
        }

        public Builder absPrefix(String absPrefix) {
            return absPrefix(Output.of(absPrefix));
        }

        public Builder absPublicKey(@Nullable Output<String> absPublicKey) {
            $.absPublicKey = absPublicKey;
            return this;
        }

        public Builder absPublicKey(String absPublicKey) {
            return absPublicKey(Output.of(absPublicKey));
        }

        public Builder accessKey(@Nullable Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        public Builder accessKeyId(@Nullable Output<String> accessKeyId) {
            $.accessKeyId = accessKeyId;
            return this;
        }

        public Builder accessKeyId(String accessKeyId) {
            return accessKeyId(Output.of(accessKeyId));
        }

        public Builder accessKeySecret(@Nullable Output<String> accessKeySecret) {
            $.accessKeySecret = accessKeySecret;
            return this;
        }

        public Builder accessKeySecret(String accessKeySecret) {
            return accessKeySecret(Output.of(accessKeySecret));
        }

        public Builder accessToken(@Nullable Output<String> accessToken) {
            $.accessToken = accessToken;
            return this;
        }

        public Builder accessToken(String accessToken) {
            return accessToken(Output.of(accessToken));
        }

        public Builder accessType(@Nullable Output<String> accessType) {
            $.accessType = accessType;
            return this;
        }

        public Builder accessType(String accessType) {
            return accessType(Output.of(accessType));
        }

        public Builder account(@Nullable Output<String> account) {
            $.account = account;
            return this;
        }

        public Builder account(String account) {
            return account(Output.of(account));
        }

        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder accountIds(@Nullable Output<List<String>> accountIds) {
            $.accountIds = accountIds;
            return this;
        }

        public Builder accountIds(List<String> accountIds) {
            return accountIds(Output.of(accountIds));
        }

        public Builder accountIds(String... accountIds) {
            return accountIds(List.of(accountIds));
        }

        public Builder accountKey(@Nullable Output<String> accountKey) {
            $.accountKey = accountKey;
            return this;
        }

        public Builder accountKey(String accountKey) {
            return accountKey(Output.of(accountKey));
        }

        public Builder accountName(@Nullable Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        public Builder accountSyncMode(@Nullable Output<String> accountSyncMode) {
            $.accountSyncMode = accountSyncMode;
            return this;
        }

        public Builder accountSyncMode(String accountSyncMode) {
            return accountSyncMode(Output.of(accountSyncMode));
        }

        public Builder accounts(@Nullable Output<List<String>> accounts) {
            $.accounts = accounts;
            return this;
        }

        public Builder accounts(List<String> accounts) {
            return accounts(Output.of(accounts));
        }

        public Builder accounts(String... accounts) {
            return accounts(List.of(accounts));
        }

        public Builder accountsRedditAds(@Nullable Output<List<ConnectorConfigAccountsRedditAdArgs>> accountsRedditAds) {
            $.accountsRedditAds = accountsRedditAds;
            return this;
        }

        public Builder accountsRedditAds(List<ConnectorConfigAccountsRedditAdArgs> accountsRedditAds) {
            return accountsRedditAds(Output.of(accountsRedditAds));
        }

        public Builder accountsRedditAds(ConnectorConfigAccountsRedditAdArgs... accountsRedditAds) {
            return accountsRedditAds(List.of(accountsRedditAds));
        }

        public Builder accountsSyncMode(@Nullable Output<String> accountsSyncMode) {
            $.accountsSyncMode = accountsSyncMode;
            return this;
        }

        public Builder accountsSyncMode(String accountsSyncMode) {
            return accountsSyncMode(Output.of(accountsSyncMode));
        }

        public Builder actionBreakdowns(@Nullable Output<List<String>> actionBreakdowns) {
            $.actionBreakdowns = actionBreakdowns;
            return this;
        }

        public Builder actionBreakdowns(List<String> actionBreakdowns) {
            return actionBreakdowns(Output.of(actionBreakdowns));
        }

        public Builder actionBreakdowns(String... actionBreakdowns) {
            return actionBreakdowns(List.of(actionBreakdowns));
        }

        public Builder actionReportTime(@Nullable Output<String> actionReportTime) {
            $.actionReportTime = actionReportTime;
            return this;
        }

        public Builder actionReportTime(String actionReportTime) {
            return actionReportTime(Output.of(actionReportTime));
        }

        public Builder adAnalytics(@Nullable Output<String> adAnalytics) {
            $.adAnalytics = adAnalytics;
            return this;
        }

        public Builder adAnalytics(String adAnalytics) {
            return adAnalytics(Output.of(adAnalytics));
        }

        public Builder adUnitView(@Nullable Output<String> adUnitView) {
            $.adUnitView = adUnitView;
            return this;
        }

        public Builder adUnitView(String adUnitView) {
            return adUnitView(Output.of(adUnitView));
        }

        public Builder adminApiKey(@Nullable Output<String> adminApiKey) {
            $.adminApiKey = adminApiKey;
            return this;
        }

        public Builder adminApiKey(String adminApiKey) {
            return adminApiKey(Output.of(adminApiKey));
        }

        public Builder adobeAnalyticsConfigurations(@Nullable Output<List<ConnectorConfigAdobeAnalyticsConfigurationArgs>> adobeAnalyticsConfigurations) {
            $.adobeAnalyticsConfigurations = adobeAnalyticsConfigurations;
            return this;
        }

        public Builder adobeAnalyticsConfigurations(List<ConnectorConfigAdobeAnalyticsConfigurationArgs> adobeAnalyticsConfigurations) {
            return adobeAnalyticsConfigurations(Output.of(adobeAnalyticsConfigurations));
        }

        public Builder adobeAnalyticsConfigurations(ConnectorConfigAdobeAnalyticsConfigurationArgs... adobeAnalyticsConfigurations) {
            return adobeAnalyticsConfigurations(List.of(adobeAnalyticsConfigurations));
        }

        public Builder advertisables(@Nullable Output<List<String>> advertisables) {
            $.advertisables = advertisables;
            return this;
        }

        public Builder advertisables(List<String> advertisables) {
            return advertisables(Output.of(advertisables));
        }

        public Builder advertisables(String... advertisables) {
            return advertisables(List.of(advertisables));
        }

        public Builder advertisers(@Nullable Output<List<String>> advertisers) {
            $.advertisers = advertisers;
            return this;
        }

        public Builder advertisers(List<String> advertisers) {
            return advertisers(Output.of(advertisers));
        }

        public Builder advertisers(String... advertisers) {
            return advertisers(List.of(advertisers));
        }

        public Builder advertisersIds(@Nullable Output<List<String>> advertisersIds) {
            $.advertisersIds = advertisersIds;
            return this;
        }

        public Builder advertisersIds(List<String> advertisersIds) {
            return advertisersIds(Output.of(advertisersIds));
        }

        public Builder advertisersIds(String... advertisersIds) {
            return advertisersIds(List.of(advertisersIds));
        }

        public Builder advertisersSyncMode(@Nullable Output<String> advertisersSyncMode) {
            $.advertisersSyncMode = advertisersSyncMode;
            return this;
        }

        public Builder advertisersSyncMode(String advertisersSyncMode) {
            return advertisersSyncMode(Output.of(advertisersSyncMode));
        }

        public Builder agentHost(@Nullable Output<String> agentHost) {
            $.agentHost = agentHost;
            return this;
        }

        public Builder agentHost(String agentHost) {
            return agentHost(Output.of(agentHost));
        }

        public Builder agentOraHome(@Nullable Output<String> agentOraHome) {
            $.agentOraHome = agentOraHome;
            return this;
        }

        public Builder agentOraHome(String agentOraHome) {
            return agentOraHome(Output.of(agentOraHome));
        }

        public Builder agentPassword(@Nullable Output<String> agentPassword) {
            $.agentPassword = agentPassword;
            return this;
        }

        public Builder agentPassword(String agentPassword) {
            return agentPassword(Output.of(agentPassword));
        }

        public Builder agentPort(@Nullable Output<String> agentPort) {
            $.agentPort = agentPort;
            return this;
        }

        public Builder agentPort(String agentPort) {
            return agentPort(Output.of(agentPort));
        }

        public Builder agentPublicCert(@Nullable Output<String> agentPublicCert) {
            $.agentPublicCert = agentPublicCert;
            return this;
        }

        public Builder agentPublicCert(String agentPublicCert) {
            return agentPublicCert(Output.of(agentPublicCert));
        }

        public Builder agentUser(@Nullable Output<String> agentUser) {
            $.agentUser = agentUser;
            return this;
        }

        public Builder agentUser(String agentUser) {
            return agentUser(Output.of(agentUser));
        }

        public Builder aggregation(@Nullable Output<String> aggregation) {
            $.aggregation = aggregation;
            return this;
        }

        public Builder aggregation(String aggregation) {
            return aggregation(Output.of(aggregation));
        }

        public Builder alwaysEncrypted(@Nullable Output<String> alwaysEncrypted) {
            $.alwaysEncrypted = alwaysEncrypted;
            return this;
        }

        public Builder alwaysEncrypted(String alwaysEncrypted) {
            return alwaysEncrypted(Output.of(alwaysEncrypted));
        }

        public Builder apiAccessToken(@Nullable Output<String> apiAccessToken) {
            $.apiAccessToken = apiAccessToken;
            return this;
        }

        public Builder apiAccessToken(String apiAccessToken) {
            return apiAccessToken(Output.of(apiAccessToken));
        }

        public Builder apiId(@Nullable Output<String> apiId) {
            $.apiId = apiId;
            return this;
        }

        public Builder apiId(String apiId) {
            return apiId(Output.of(apiId));
        }

        public Builder apiKey(@Nullable Output<String> apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        public Builder apiKey(String apiKey) {
            return apiKey(Output.of(apiKey));
        }

        public Builder apiKeyApiSecret(@Nullable Output<String> apiKeyApiSecret) {
            $.apiKeyApiSecret = apiKeyApiSecret;
            return this;
        }

        public Builder apiKeyApiSecret(String apiKeyApiSecret) {
            return apiKeyApiSecret(Output.of(apiKeyApiSecret));
        }

        public Builder apiKeys(@Nullable Output<List<String>> apiKeys) {
            $.apiKeys = apiKeys;
            return this;
        }

        public Builder apiKeys(List<String> apiKeys) {
            return apiKeys(Output.of(apiKeys));
        }

        public Builder apiKeys(String... apiKeys) {
            return apiKeys(List.of(apiKeys));
        }

        public Builder apiQuota(@Nullable Output<String> apiQuota) {
            $.apiQuota = apiQuota;
            return this;
        }

        public Builder apiQuota(String apiQuota) {
            return apiQuota(Output.of(apiQuota));
        }

        public Builder apiRequestsPerMinute(@Nullable Output<String> apiRequestsPerMinute) {
            $.apiRequestsPerMinute = apiRequestsPerMinute;
            return this;
        }

        public Builder apiRequestsPerMinute(String apiRequestsPerMinute) {
            return apiRequestsPerMinute(Output.of(apiRequestsPerMinute));
        }

        public Builder apiSecret(@Nullable Output<String> apiSecret) {
            $.apiSecret = apiSecret;
            return this;
        }

        public Builder apiSecret(String apiSecret) {
            return apiSecret(Output.of(apiSecret));
        }

        public Builder apiSecretKey(@Nullable Output<String> apiSecretKey) {
            $.apiSecretKey = apiSecretKey;
            return this;
        }

        public Builder apiSecretKey(String apiSecretKey) {
            return apiSecretKey(Output.of(apiSecretKey));
        }

        public Builder apiToken(@Nullable Output<String> apiToken) {
            $.apiToken = apiToken;
            return this;
        }

        public Builder apiToken(String apiToken) {
            return apiToken(Output.of(apiToken));
        }

        public Builder apiType(@Nullable Output<String> apiType) {
            $.apiType = apiType;
            return this;
        }

        public Builder apiType(String apiType) {
            return apiType(Output.of(apiType));
        }

        public Builder apiUrl(@Nullable Output<String> apiUrl) {
            $.apiUrl = apiUrl;
            return this;
        }

        public Builder apiUrl(String apiUrl) {
            return apiUrl(Output.of(apiUrl));
        }

        public Builder apiUsage(@Nullable Output<String> apiUsage) {
            $.apiUsage = apiUsage;
            return this;
        }

        public Builder apiUsage(String apiUsage) {
            return apiUsage(Output.of(apiUsage));
        }

        public Builder apiUtilizationPercentage(@Nullable Output<String> apiUtilizationPercentage) {
            $.apiUtilizationPercentage = apiUtilizationPercentage;
            return this;
        }

        public Builder apiUtilizationPercentage(String apiUtilizationPercentage) {
            return apiUtilizationPercentage(Output.of(apiUtilizationPercentage));
        }

        public Builder apiVersion(@Nullable Output<String> apiVersion) {
            $.apiVersion = apiVersion;
            return this;
        }

        public Builder apiVersion(String apiVersion) {
            return apiVersion(Output.of(apiVersion));
        }

        public Builder appId(@Nullable Output<String> appId) {
            $.appId = appId;
            return this;
        }

        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        public Builder appIds(@Nullable Output<List<String>> appIds) {
            $.appIds = appIds;
            return this;
        }

        public Builder appIds(List<String> appIds) {
            return appIds(Output.of(appIds));
        }

        public Builder appIds(String... appIds) {
            return appIds(List.of(appIds));
        }

        public Builder appIdsAppsflyers(@Nullable Output<List<ConnectorConfigAppIdsAppsflyerArgs>> appIdsAppsflyers) {
            $.appIdsAppsflyers = appIdsAppsflyers;
            return this;
        }

        public Builder appIdsAppsflyers(List<ConnectorConfigAppIdsAppsflyerArgs> appIdsAppsflyers) {
            return appIdsAppsflyers(Output.of(appIdsAppsflyers));
        }

        public Builder appIdsAppsflyers(ConnectorConfigAppIdsAppsflyerArgs... appIdsAppsflyers) {
            return appIdsAppsflyers(List.of(appIdsAppsflyers));
        }

        public Builder appKey(@Nullable Output<String> appKey) {
            $.appKey = appKey;
            return this;
        }

        public Builder appKey(String appKey) {
            return appKey(Output.of(appKey));
        }

        public Builder appSpecificPassword(@Nullable Output<String> appSpecificPassword) {
            $.appSpecificPassword = appSpecificPassword;
            return this;
        }

        public Builder appSpecificPassword(String appSpecificPassword) {
            return appSpecificPassword(Output.of(appSpecificPassword));
        }

        public Builder appSyncMode(@Nullable Output<String> appSyncMode) {
            $.appSyncMode = appSyncMode;
            return this;
        }

        public Builder appSyncMode(String appSyncMode) {
            return appSyncMode(Output.of(appSyncMode));
        }

        public Builder appendFileOption(@Nullable Output<String> appendFileOption) {
            $.appendFileOption = appendFileOption;
            return this;
        }

        public Builder appendFileOption(String appendFileOption) {
            return appendFileOption(Output.of(appendFileOption));
        }

        public Builder applicationKey(@Nullable Output<String> applicationKey) {
            $.applicationKey = applicationKey;
            return this;
        }

        public Builder applicationKey(String applicationKey) {
            return applicationKey(Output.of(applicationKey));
        }

        public Builder apps(@Nullable Output<List<String>> apps) {
            $.apps = apps;
            return this;
        }

        public Builder apps(List<String> apps) {
            return apps(Output.of(apps));
        }

        public Builder apps(String... apps) {
            return apps(List.of(apps));
        }

        public Builder archiveLogFormat(@Nullable Output<String> archiveLogFormat) {
            $.archiveLogFormat = archiveLogFormat;
            return this;
        }

        public Builder archiveLogFormat(String archiveLogFormat) {
            return archiveLogFormat(Output.of(archiveLogFormat));
        }

        public Builder archiveLogPath(@Nullable Output<String> archiveLogPath) {
            $.archiveLogPath = archiveLogPath;
            return this;
        }

        public Builder archiveLogPath(String archiveLogPath) {
            return archiveLogPath(Output.of(archiveLogPath));
        }

        public Builder archivePattern(@Nullable Output<String> archivePattern) {
            $.archivePattern = archivePattern;
            return this;
        }

        public Builder archivePattern(String archivePattern) {
            return archivePattern(Output.of(archivePattern));
        }

        public Builder areSoapCredentialsProvided(@Nullable Output<String> areSoapCredentialsProvided) {
            $.areSoapCredentialsProvided = areSoapCredentialsProvided;
            return this;
        }

        public Builder areSoapCredentialsProvided(String areSoapCredentialsProvided) {
            return areSoapCredentialsProvided(Output.of(areSoapCredentialsProvided));
        }

        public Builder asbIp(@Nullable Output<String> asbIp) {
            $.asbIp = asbIp;
            return this;
        }

        public Builder asbIp(String asbIp) {
            return asbIp(Output.of(asbIp));
        }

        public Builder asmOption(@Nullable Output<String> asmOption) {
            $.asmOption = asmOption;
            return this;
        }

        public Builder asmOption(String asmOption) {
            return asmOption(Output.of(asmOption));
        }

        public Builder asmOracleHome(@Nullable Output<String> asmOracleHome) {
            $.asmOracleHome = asmOracleHome;
            return this;
        }

        public Builder asmOracleHome(String asmOracleHome) {
            return asmOracleHome(Output.of(asmOracleHome));
        }

        public Builder asmPassword(@Nullable Output<String> asmPassword) {
            $.asmPassword = asmPassword;
            return this;
        }

        public Builder asmPassword(String asmPassword) {
            return asmPassword(Output.of(asmPassword));
        }

        public Builder asmTns(@Nullable Output<String> asmTns) {
            $.asmTns = asmTns;
            return this;
        }

        public Builder asmTns(String asmTns) {
            return asmTns(Output.of(asmTns));
        }

        public Builder asmUser(@Nullable Output<String> asmUser) {
            $.asmUser = asmUser;
            return this;
        }

        public Builder asmUser(String asmUser) {
            return asmUser(Output.of(asmUser));
        }

        public Builder attributionWindow(@Nullable Output<String> attributionWindow) {
            $.attributionWindow = attributionWindow;
            return this;
        }

        public Builder attributionWindow(String attributionWindow) {
            return attributionWindow(Output.of(attributionWindow));
        }

        public Builder attributionWindowSize(@Nullable Output<String> attributionWindowSize) {
            $.attributionWindowSize = attributionWindowSize;
            return this;
        }

        public Builder attributionWindowSize(String attributionWindowSize) {
            return attributionWindowSize(Output.of(attributionWindowSize));
        }

        public Builder auth(@Nullable Output<String> auth) {
            $.auth = auth;
            return this;
        }

        public Builder auth(String auth) {
            return auth(Output.of(auth));
        }

        public Builder authMethod(@Nullable Output<String> authMethod) {
            $.authMethod = authMethod;
            return this;
        }

        public Builder authMethod(String authMethod) {
            return authMethod(Output.of(authMethod));
        }

        public Builder authMode(@Nullable Output<String> authMode) {
            $.authMode = authMode;
            return this;
        }

        public Builder authMode(String authMode) {
            return authMode(Output.of(authMode));
        }

        public Builder authType(@Nullable Output<String> authType) {
            $.authType = authType;
            return this;
        }

        public Builder authType(String authType) {
            return authType(Output.of(authType));
        }

        public Builder authorizationMethod(@Nullable Output<String> authorizationMethod) {
            $.authorizationMethod = authorizationMethod;
            return this;
        }

        public Builder authorizationMethod(String authorizationMethod) {
            return authorizationMethod(Output.of(authorizationMethod));
        }

        public Builder awsRegionCode(@Nullable Output<String> awsRegionCode) {
            $.awsRegionCode = awsRegionCode;
            return this;
        }

        public Builder awsRegionCode(String awsRegionCode) {
            return awsRegionCode(Output.of(awsRegionCode));
        }

        public Builder baseCurrency(@Nullable Output<String> baseCurrency) {
            $.baseCurrency = baseCurrency;
            return this;
        }

        public Builder baseCurrency(String baseCurrency) {
            return baseCurrency(Output.of(baseCurrency));
        }

        public Builder baseDomain(@Nullable Output<String> baseDomain) {
            $.baseDomain = baseDomain;
            return this;
        }

        public Builder baseDomain(String baseDomain) {
            return baseDomain(Output.of(baseDomain));
        }

        public Builder baseId(@Nullable Output<String> baseId) {
            $.baseId = baseId;
            return this;
        }

        public Builder baseId(String baseId) {
            return baseId(Output.of(baseId));
        }

        public Builder baseUrl(@Nullable Output<String> baseUrl) {
            $.baseUrl = baseUrl;
            return this;
        }

        public Builder baseUrl(String baseUrl) {
            return baseUrl(Output.of(baseUrl));
        }

        public Builder bearerToken(@Nullable Output<String> bearerToken) {
            $.bearerToken = bearerToken;
            return this;
        }

        public Builder bearerToken(String bearerToken) {
            return bearerToken(Output.of(bearerToken));
        }

        public Builder blobSasUrl(@Nullable Output<String> blobSasUrl) {
            $.blobSasUrl = blobSasUrl;
            return this;
        }

        public Builder blobSasUrl(String blobSasUrl) {
            return blobSasUrl(Output.of(blobSasUrl));
        }

        public Builder breakdowns(@Nullable Output<List<String>> breakdowns) {
            $.breakdowns = breakdowns;
            return this;
        }

        public Builder breakdowns(List<String> breakdowns) {
            return breakdowns(Output.of(breakdowns));
        }

        public Builder breakdowns(String... breakdowns) {
            return breakdowns(List.of(breakdowns));
        }

        public Builder bucket(@Nullable Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        public Builder bucketName(@Nullable Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        public Builder bucketService(@Nullable Output<String> bucketService) {
            $.bucketService = bucketService;
            return this;
        }

        public Builder bucketService(String bucketService) {
            return bucketService(Output.of(bucketService));
        }

        public Builder businessId(@Nullable Output<String> businessId) {
            $.businessId = businessId;
            return this;
        }

        public Builder businessId(String businessId) {
            return businessId(Output.of(businessId));
        }

        public Builder businessUnitId(@Nullable Output<String> businessUnitId) {
            $.businessUnitId = businessUnitId;
            return this;
        }

        public Builder businessUnitId(String businessUnitId) {
            return businessUnitId(Output.of(businessUnitId));
        }

        public Builder certificate(@Nullable Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        public Builder clickAttributionWindow(@Nullable Output<String> clickAttributionWindow) {
            $.clickAttributionWindow = clickAttributionWindow;
            return this;
        }

        public Builder clickAttributionWindow(String clickAttributionWindow) {
            return clickAttributionWindow(Output.of(clickAttributionWindow));
        }

        public Builder client(@Nullable Output<String> client) {
            $.client = client;
            return this;
        }

        public Builder client(String client) {
            return client(Output.of(client));
        }

        public Builder clientCert(@Nullable Output<String> clientCert) {
            $.clientCert = clientCert;
            return this;
        }

        public Builder clientCert(String clientCert) {
            return clientCert(Output.of(clientCert));
        }

        public Builder clientCertKey(@Nullable Output<String> clientCertKey) {
            $.clientCertKey = clientCertKey;
            return this;
        }

        public Builder clientCertKey(String clientCertKey) {
            return clientCertKey(Output.of(clientCertKey));
        }

        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        public Builder clientKey(@Nullable Output<String> clientKey) {
            $.clientKey = clientKey;
            return this;
        }

        public Builder clientKey(String clientKey) {
            return clientKey(Output.of(clientKey));
        }

        public Builder clientName(@Nullable Output<String> clientName) {
            $.clientName = clientName;
            return this;
        }

        public Builder clientName(String clientName) {
            return clientName(Output.of(clientName));
        }

        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        public Builder cloudStorageType(@Nullable Output<String> cloudStorageType) {
            $.cloudStorageType = cloudStorageType;
            return this;
        }

        public Builder cloudStorageType(String cloudStorageType) {
            return cloudStorageType(Output.of(cloudStorageType));
        }

        public Builder columns(@Nullable Output<List<String>> columns) {
            $.columns = columns;
            return this;
        }

        public Builder columns(List<String> columns) {
            return columns(Output.of(columns));
        }

        public Builder columns(String... columns) {
            return columns(List.of(columns));
        }

        public Builder companyId(@Nullable Output<String> companyId) {
            $.companyId = companyId;
            return this;
        }

        public Builder companyId(String companyId) {
            return companyId(Output.of(companyId));
        }

        public Builder companyKey(@Nullable Output<String> companyKey) {
            $.companyKey = companyKey;
            return this;
        }

        public Builder companyKey(String companyKey) {
            return companyKey(Output.of(companyKey));
        }

        public Builder companyRequestToken(@Nullable Output<String> companyRequestToken) {
            $.companyRequestToken = companyRequestToken;
            return this;
        }

        public Builder companyRequestToken(String companyRequestToken) {
            return companyRequestToken(Output.of(companyRequestToken));
        }

        public Builder companyUuid(@Nullable Output<String> companyUuid) {
            $.companyUuid = companyUuid;
            return this;
        }

        public Builder companyUuid(String companyUuid) {
            return companyUuid(Output.of(companyUuid));
        }

        public Builder compression(@Nullable Output<String> compression) {
            $.compression = compression;
            return this;
        }

        public Builder compression(String compression) {
            return compression(Output.of(compression));
        }

        public Builder configMethod(@Nullable Output<String> configMethod) {
            $.configMethod = configMethod;
            return this;
        }

        public Builder configMethod(String configMethod) {
            return configMethod(Output.of(configMethod));
        }

        public Builder configRepositoryUrl(@Nullable Output<String> configRepositoryUrl) {
            $.configRepositoryUrl = configRepositoryUrl;
            return this;
        }

        public Builder configRepositoryUrl(String configRepositoryUrl) {
            return configRepositoryUrl(Output.of(configRepositoryUrl));
        }

        public Builder configType(@Nullable Output<String> configType) {
            $.configType = configType;
            return this;
        }

        public Builder configType(String configType) {
            return configType(Output.of(configType));
        }

        public Builder connectingUser(@Nullable Output<String> connectingUser) {
            $.connectingUser = connectingUser;
            return this;
        }

        public Builder connectingUser(String connectingUser) {
            return connectingUser(Output.of(connectingUser));
        }

        public Builder connectingUserEmail(@Nullable Output<String> connectingUserEmail) {
            $.connectingUserEmail = connectingUserEmail;
            return this;
        }

        public Builder connectingUserEmail(String connectingUserEmail) {
            return connectingUserEmail(Output.of(connectingUserEmail));
        }

        public Builder connectionMethod(@Nullable Output<String> connectionMethod) {
            $.connectionMethod = connectionMethod;
            return this;
        }

        public Builder connectionMethod(String connectionMethod) {
            return connectionMethod(Output.of(connectionMethod));
        }

        public Builder connectionString(@Nullable Output<String> connectionString) {
            $.connectionString = connectionString;
            return this;
        }

        public Builder connectionString(String connectionString) {
            return connectionString(Output.of(connectionString));
        }

        public Builder connectionType(@Nullable Output<String> connectionType) {
            $.connectionType = connectionType;
            return this;
        }

        public Builder connectionType(String connectionType) {
            return connectionType(Output.of(connectionType));
        }

        public Builder consumerGroup(@Nullable Output<String> consumerGroup) {
            $.consumerGroup = consumerGroup;
            return this;
        }

        public Builder consumerGroup(String consumerGroup) {
            return consumerGroup(Output.of(consumerGroup));
        }

        public Builder consumerKey(@Nullable Output<String> consumerKey) {
            $.consumerKey = consumerKey;
            return this;
        }

        public Builder consumerKey(String consumerKey) {
            return consumerKey(Output.of(consumerKey));
        }

        public Builder consumerSecret(@Nullable Output<String> consumerSecret) {
            $.consumerSecret = consumerSecret;
            return this;
        }

        public Builder consumerSecret(String consumerSecret) {
            return consumerSecret(Output.of(consumerSecret));
        }

        public Builder containerAddress(@Nullable Output<String> containerAddress) {
            $.containerAddress = containerAddress;
            return this;
        }

        public Builder containerAddress(String containerAddress) {
            return containerAddress(Output.of(containerAddress));
        }

        public Builder containerName(@Nullable Output<String> containerName) {
            $.containerName = containerName;
            return this;
        }

        public Builder containerName(String containerName) {
            return containerName(Output.of(containerName));
        }

        public Builder contentOwnerId(@Nullable Output<String> contentOwnerId) {
            $.contentOwnerId = contentOwnerId;
            return this;
        }

        public Builder contentOwnerId(String contentOwnerId) {
            return contentOwnerId(Output.of(contentOwnerId));
        }

        public Builder conversationWebhookUrl(@Nullable Output<String> conversationWebhookUrl) {
            $.conversationWebhookUrl = conversationWebhookUrl;
            return this;
        }

        public Builder conversationWebhookUrl(String conversationWebhookUrl) {
            return conversationWebhookUrl(Output.of(conversationWebhookUrl));
        }

        public Builder conversionDimensions(@Nullable Output<List<String>> conversionDimensions) {
            $.conversionDimensions = conversionDimensions;
            return this;
        }

        public Builder conversionDimensions(List<String> conversionDimensions) {
            return conversionDimensions(Output.of(conversionDimensions));
        }

        public Builder conversionDimensions(String... conversionDimensions) {
            return conversionDimensions(List.of(conversionDimensions));
        }

        public Builder conversionReportTime(@Nullable Output<String> conversionReportTime) {
            $.conversionReportTime = conversionReportTime;
            return this;
        }

        public Builder conversionReportTime(String conversionReportTime) {
            return conversionReportTime(Output.of(conversionReportTime));
        }

        public Builder conversionWindowSize(@Nullable Output<String> conversionWindowSize) {
            $.conversionWindowSize = conversionWindowSize;
            return this;
        }

        public Builder conversionWindowSize(String conversionWindowSize) {
            return conversionWindowSize(Output.of(conversionWindowSize));
        }

        public Builder csvDefinition(@Nullable Output<String> csvDefinition) {
            $.csvDefinition = csvDefinition;
            return this;
        }

        public Builder csvDefinition(String csvDefinition) {
            return csvDefinition(Output.of(csvDefinition));
        }

        public Builder currency(@Nullable Output<String> currency) {
            $.currency = currency;
            return this;
        }

        public Builder currency(String currency) {
            return currency(Output.of(currency));
        }

        public Builder customEventSyncMode(@Nullable Output<String> customEventSyncMode) {
            $.customEventSyncMode = customEventSyncMode;
            return this;
        }

        public Builder customEventSyncMode(String customEventSyncMode) {
            return customEventSyncMode(Output.of(customEventSyncMode));
        }

        public Builder customEvents(@Nullable Output<List<String>> customEvents) {
            $.customEvents = customEvents;
            return this;
        }

        public Builder customEvents(List<String> customEvents) {
            return customEvents(Output.of(customEvents));
        }

        public Builder customEvents(String... customEvents) {
            return customEvents(List.of(customEvents));
        }

        public Builder customFieldIds(@Nullable Output<List<String>> customFieldIds) {
            $.customFieldIds = customFieldIds;
            return this;
        }

        public Builder customFieldIds(List<String> customFieldIds) {
            return customFieldIds(Output.of(customFieldIds));
        }

        public Builder customFieldIds(String... customFieldIds) {
            return customFieldIds(List.of(customFieldIds));
        }

        public Builder customFloodlightVariables(@Nullable Output<List<String>> customFloodlightVariables) {
            $.customFloodlightVariables = customFloodlightVariables;
            return this;
        }

        public Builder customFloodlightVariables(List<String> customFloodlightVariables) {
            return customFloodlightVariables(Output.of(customFloodlightVariables));
        }

        public Builder customFloodlightVariables(String... customFloodlightVariables) {
            return customFloodlightVariables(List.of(customFloodlightVariables));
        }

        public Builder customReports(@Nullable Output<List<ConnectorConfigCustomReportArgs>> customReports) {
            $.customReports = customReports;
            return this;
        }

        public Builder customReports(List<ConnectorConfigCustomReportArgs> customReports) {
            return customReports(Output.of(customReports));
        }

        public Builder customReports(ConnectorConfigCustomReportArgs... customReports) {
            return customReports(List.of(customReports));
        }

        public Builder customTables(@Nullable Output<List<ConnectorConfigCustomTableArgs>> customTables) {
            $.customTables = customTables;
            return this;
        }

        public Builder customTables(List<ConnectorConfigCustomTableArgs> customTables) {
            return customTables(Output.of(customTables));
        }

        public Builder customTables(ConnectorConfigCustomTableArgs... customTables) {
            return customTables(List.of(customTables));
        }

        public Builder customerId(@Nullable Output<String> customerId) {
            $.customerId = customerId;
            return this;
        }

        public Builder customerId(String customerId) {
            return customerId(Output.of(customerId));
        }

        public Builder customerListId(@Nullable Output<String> customerListId) {
            $.customerListId = customerListId;
            return this;
        }

        public Builder customerListId(String customerListId) {
            return customerListId(Output.of(customerListId));
        }

        public Builder dailyApiCallLimit(@Nullable Output<String> dailyApiCallLimit) {
            $.dailyApiCallLimit = dailyApiCallLimit;
            return this;
        }

        public Builder dailyApiCallLimit(String dailyApiCallLimit) {
            return dailyApiCallLimit(Output.of(dailyApiCallLimit));
        }

        public Builder dataAccessMethod(@Nullable Output<String> dataAccessMethod) {
            $.dataAccessMethod = dataAccessMethod;
            return this;
        }

        public Builder dataAccessMethod(String dataAccessMethod) {
            return dataAccessMethod(Output.of(dataAccessMethod));
        }

        public Builder dataCenter(@Nullable Output<String> dataCenter) {
            $.dataCenter = dataCenter;
            return this;
        }

        public Builder dataCenter(String dataCenter) {
            return dataCenter(Output.of(dataCenter));
        }

        public Builder dataSetName(@Nullable Output<String> dataSetName) {
            $.dataSetName = dataSetName;
            return this;
        }

        public Builder dataSetName(String dataSetName) {
            return dataSetName(Output.of(dataSetName));
        }

        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        public Builder database(String database) {
            return database(Output.of(database));
        }

        public Builder datasetId(@Nullable Output<String> datasetId) {
            $.datasetId = datasetId;
            return this;
        }

        public Builder datasetId(String datasetId) {
            return datasetId(Output.of(datasetId));
        }

        public Builder datasource(@Nullable Output<String> datasource) {
            $.datasource = datasource;
            return this;
        }

        public Builder datasource(String datasource) {
            return datasource(Output.of(datasource));
        }

        public Builder dateGranularity(@Nullable Output<String> dateGranularity) {
            $.dateGranularity = dateGranularity;
            return this;
        }

        public Builder dateGranularity(String dateGranularity) {
            return dateGranularity(Output.of(dateGranularity));
        }

        public Builder delimiter(@Nullable Output<String> delimiter) {
            $.delimiter = delimiter;
            return this;
        }

        public Builder delimiter(String delimiter) {
            return delimiter(Output.of(delimiter));
        }

        public Builder dimensionAttributes(@Nullable Output<List<String>> dimensionAttributes) {
            $.dimensionAttributes = dimensionAttributes;
            return this;
        }

        public Builder dimensionAttributes(List<String> dimensionAttributes) {
            return dimensionAttributes(Output.of(dimensionAttributes));
        }

        public Builder dimensionAttributes(String... dimensionAttributes) {
            return dimensionAttributes(List.of(dimensionAttributes));
        }

        public Builder dimensions(@Nullable Output<List<String>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        public Builder dimensions(List<String> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        public Builder dimensions(String... dimensions) {
            return dimensions(List.of(dimensions));
        }

        public Builder distributedConnectorClusterSize(@Nullable Output<String> distributedConnectorClusterSize) {
            $.distributedConnectorClusterSize = distributedConnectorClusterSize;
            return this;
        }

        public Builder distributedConnectorClusterSize(String distributedConnectorClusterSize) {
            return distributedConnectorClusterSize(Output.of(distributedConnectorClusterSize));
        }

        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        public Builder domainHostName(@Nullable Output<String> domainHostName) {
            $.domainHostName = domainHostName;
            return this;
        }

        public Builder domainHostName(String domainHostName) {
            return domainHostName(Output.of(domainHostName));
        }

        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        public Builder domainType(@Nullable Output<String> domainType) {
            $.domainType = domainType;
            return this;
        }

        public Builder domainType(String domainType) {
            return domainType(Output.of(domainType));
        }

        public Builder elements(@Nullable Output<List<String>> elements) {
            $.elements = elements;
            return this;
        }

        public Builder elements(List<String> elements) {
            return elements(Output.of(elements));
        }

        public Builder elements(String... elements) {
            return elements(List.of(elements));
        }

        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        public Builder email(String email) {
            return email(Output.of(email));
        }

        public Builder emptyHeader(@Nullable Output<String> emptyHeader) {
            $.emptyHeader = emptyHeader;
            return this;
        }

        public Builder emptyHeader(String emptyHeader) {
            return emptyHeader(Output.of(emptyHeader));
        }

        public Builder enableAllDimensionCombinations(@Nullable Output<String> enableAllDimensionCombinations) {
            $.enableAllDimensionCombinations = enableAllDimensionCombinations;
            return this;
        }

        public Builder enableAllDimensionCombinations(String enableAllDimensionCombinations) {
            return enableAllDimensionCombinations(Output.of(enableAllDimensionCombinations));
        }

        public Builder enableArchiveLogOnly(@Nullable Output<String> enableArchiveLogOnly) {
            $.enableArchiveLogOnly = enableArchiveLogOnly;
            return this;
        }

        public Builder enableArchiveLogOnly(String enableArchiveLogOnly) {
            return enableArchiveLogOnly(Output.of(enableArchiveLogOnly));
        }

        public Builder enableDataExtensionsSyncing(@Nullable Output<String> enableDataExtensionsSyncing) {
            $.enableDataExtensionsSyncing = enableDataExtensionsSyncing;
            return this;
        }

        public Builder enableDataExtensionsSyncing(String enableDataExtensionsSyncing) {
            return enableDataExtensionsSyncing(Output.of(enableDataExtensionsSyncing));
        }

        public Builder enableDistributedConnectorMode(@Nullable Output<String> enableDistributedConnectorMode) {
            $.enableDistributedConnectorMode = enableDistributedConnectorMode;
            return this;
        }

        public Builder enableDistributedConnectorMode(String enableDistributedConnectorMode) {
            return enableDistributedConnectorMode(Output.of(enableDistributedConnectorMode));
        }

        public Builder enableEnrichments(@Nullable Output<String> enableEnrichments) {
            $.enableEnrichments = enableEnrichments;
            return this;
        }

        public Builder enableEnrichments(String enableEnrichments) {
            return enableEnrichments(Output.of(enableEnrichments));
        }

        public Builder enableExports(@Nullable Output<String> enableExports) {
            $.enableExports = enableExports;
            return this;
        }

        public Builder enableExports(String enableExports) {
            return enableExports(Output.of(enableExports));
        }

        public Builder enableTde(@Nullable Output<String> enableTde) {
            $.enableTde = enableTde;
            return this;
        }

        public Builder enableTde(String enableTde) {
            return enableTde(Output.of(enableTde));
        }

        public Builder encodedPublicKey(@Nullable Output<String> encodedPublicKey) {
            $.encodedPublicKey = encodedPublicKey;
            return this;
        }

        public Builder encodedPublicKey(String encodedPublicKey) {
            return encodedPublicKey(Output.of(encodedPublicKey));
        }

        public Builder encryptionKey(@Nullable Output<String> encryptionKey) {
            $.encryptionKey = encryptionKey;
            return this;
        }

        public Builder encryptionKey(String encryptionKey) {
            return encryptionKey(Output.of(encryptionKey));
        }

        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        public Builder engagementAttributionWindow(@Nullable Output<String> engagementAttributionWindow) {
            $.engagementAttributionWindow = engagementAttributionWindow;
            return this;
        }

        public Builder engagementAttributionWindow(String engagementAttributionWindow) {
            return engagementAttributionWindow(Output.of(engagementAttributionWindow));
        }

        public Builder enrichedExport(@Nullable Output<String> enrichedExport) {
            $.enrichedExport = enrichedExport;
            return this;
        }

        public Builder enrichedExport(String enrichedExport) {
            return enrichedExport(Output.of(enrichedExport));
        }

        public Builder entityId(@Nullable Output<String> entityId) {
            $.entityId = entityId;
            return this;
        }

        public Builder entityId(String entityId) {
            return entityId(Output.of(entityId));
        }

        public Builder environment(@Nullable Output<String> environment) {
            $.environment = environment;
            return this;
        }

        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        public Builder escapeChar(@Nullable Output<String> escapeChar) {
            $.escapeChar = escapeChar;
            return this;
        }

        public Builder escapeChar(String escapeChar) {
            return escapeChar(Output.of(escapeChar));
        }

        public Builder euRegion(@Nullable Output<String> euRegion) {
            $.euRegion = euRegion;
            return this;
        }

        public Builder euRegion(String euRegion) {
            return euRegion(Output.of(euRegion));
        }

        public Builder events(@Nullable Output<List<String>> events) {
            $.events = events;
            return this;
        }

        public Builder events(List<String> events) {
            return events(Output.of(events));
        }

        public Builder events(String... events) {
            return events(List.of(events));
        }

        public Builder exportStorageType(@Nullable Output<String> exportStorageType) {
            $.exportStorageType = exportStorageType;
            return this;
        }

        public Builder exportStorageType(String exportStorageType) {
            return exportStorageType(Output.of(exportStorageType));
        }

        public Builder externalId(@Nullable Output<String> externalId) {
            $.externalId = externalId;
            return this;
        }

        public Builder externalId(String externalId) {
            return externalId(Output.of(externalId));
        }

        public Builder fields(@Nullable Output<List<String>> fields) {
            $.fields = fields;
            return this;
        }

        public Builder fields(List<String> fields) {
            return fields(Output.of(fields));
        }

        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        public Builder fileType(@Nullable Output<String> fileType) {
            $.fileType = fileType;
            return this;
        }

        public Builder fileType(String fileType) {
            return fileType(Output.of(fileType));
        }

        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        public Builder financeAccountSyncMode(@Nullable Output<String> financeAccountSyncMode) {
            $.financeAccountSyncMode = financeAccountSyncMode;
            return this;
        }

        public Builder financeAccountSyncMode(String financeAccountSyncMode) {
            return financeAccountSyncMode(Output.of(financeAccountSyncMode));
        }

        public Builder financeAccounts(@Nullable Output<List<String>> financeAccounts) {
            $.financeAccounts = financeAccounts;
            return this;
        }

        public Builder financeAccounts(List<String> financeAccounts) {
            return financeAccounts(Output.of(financeAccounts));
        }

        public Builder financeAccounts(String... financeAccounts) {
            return financeAccounts(List.of(financeAccounts));
        }

        public Builder folder(@Nullable Output<String> folder) {
            $.folder = folder;
            return this;
        }

        public Builder folder(String folder) {
            return folder(Output.of(folder));
        }

        public Builder folderId(@Nullable Output<String> folderId) {
            $.folderId = folderId;
            return this;
        }

        public Builder folderId(String folderId) {
            return folderId(Output.of(folderId));
        }

        public Builder folderPath(@Nullable Output<String> folderPath) {
            $.folderPath = folderPath;
            return this;
        }

        public Builder folderPath(String folderPath) {
            return folderPath(Output.of(folderPath));
        }

        public Builder forecastId(@Nullable Output<String> forecastId) {
            $.forecastId = forecastId;
            return this;
        }

        public Builder forecastId(String forecastId) {
            return forecastId(Output.of(forecastId));
        }

        public Builder ftpHost(@Nullable Output<String> ftpHost) {
            $.ftpHost = ftpHost;
            return this;
        }

        public Builder ftpHost(String ftpHost) {
            return ftpHost(Output.of(ftpHost));
        }

        public Builder ftpPassword(@Nullable Output<String> ftpPassword) {
            $.ftpPassword = ftpPassword;
            return this;
        }

        public Builder ftpPassword(String ftpPassword) {
            return ftpPassword(Output.of(ftpPassword));
        }

        public Builder ftpPort(@Nullable Output<String> ftpPort) {
            $.ftpPort = ftpPort;
            return this;
        }

        public Builder ftpPort(String ftpPort) {
            return ftpPort(Output.of(ftpPort));
        }

        public Builder ftpUser(@Nullable Output<String> ftpUser) {
            $.ftpUser = ftpUser;
            return this;
        }

        public Builder ftpUser(String ftpUser) {
            return ftpUser(Output.of(ftpUser));
        }

        public Builder function(@Nullable Output<String> function) {
            $.function = function;
            return this;
        }

        public Builder function(String function) {
            return function(Output.of(function));
        }

        public Builder functionApp(@Nullable Output<String> functionApp) {
            $.functionApp = functionApp;
            return this;
        }

        public Builder functionApp(String functionApp) {
            return functionApp(Output.of(functionApp));
        }

        public Builder functionKey(@Nullable Output<String> functionKey) {
            $.functionKey = functionKey;
            return this;
        }

        public Builder functionKey(String functionKey) {
            return functionKey(Output.of(functionKey));
        }

        public Builder functionName(@Nullable Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        public Builder functionTrigger(@Nullable Output<String> functionTrigger) {
            $.functionTrigger = functionTrigger;
            return this;
        }

        public Builder functionTrigger(String functionTrigger) {
            return functionTrigger(Output.of(functionTrigger));
        }

        public Builder gcsBucket(@Nullable Output<String> gcsBucket) {
            $.gcsBucket = gcsBucket;
            return this;
        }

        public Builder gcsBucket(String gcsBucket) {
            return gcsBucket(Output.of(gcsBucket));
        }

        public Builder gcsFolder(@Nullable Output<String> gcsFolder) {
            $.gcsFolder = gcsFolder;
            return this;
        }

        public Builder gcsFolder(String gcsFolder) {
            return gcsFolder(Output.of(gcsFolder));
        }

        public Builder groupName(@Nullable Output<String> groupName) {
            $.groupName = groupName;
            return this;
        }

        public Builder groupName(String groupName) {
            return groupName(Output.of(groupName));
        }

        public Builder hasManagePermissions(@Nullable Output<String> hasManagePermissions) {
            $.hasManagePermissions = hasManagePermissions;
            return this;
        }

        public Builder hasManagePermissions(String hasManagePermissions) {
            return hasManagePermissions(Output.of(hasManagePermissions));
        }

        public Builder homeFolder(@Nullable Output<String> homeFolder) {
            $.homeFolder = homeFolder;
            return this;
        }

        public Builder homeFolder(String homeFolder) {
            return homeFolder(Output.of(homeFolder));
        }

        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        public Builder host(String host) {
            return host(Output.of(host));
        }

        public Builder hostIp(@Nullable Output<String> hostIp) {
            $.hostIp = hostIp;
            return this;
        }

        public Builder hostIp(String hostIp) {
            return hostIp(Output.of(hostIp));
        }

        public Builder hostUser(@Nullable Output<String> hostUser) {
            $.hostUser = hostUser;
            return this;
        }

        public Builder hostUser(String hostUser) {
            return hostUser(Output.of(hostUser));
        }

        public Builder hosts(@Nullable Output<List<String>> hosts) {
            $.hosts = hosts;
            return this;
        }

        public Builder hosts(List<String> hosts) {
            return hosts(Output.of(hosts));
        }

        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }

        public Builder identity(@Nullable Output<String> identity) {
            $.identity = identity;
            return this;
        }

        public Builder identity(String identity) {
            return identity(Output.of(identity));
        }

        public Builder includeOcapiEndpoints(@Nullable Output<String> includeOcapiEndpoints) {
            $.includeOcapiEndpoints = includeOcapiEndpoints;
            return this;
        }

        public Builder includeOcapiEndpoints(String includeOcapiEndpoints) {
            return includeOcapiEndpoints(Output.of(includeOcapiEndpoints));
        }

        public Builder instance(@Nullable Output<String> instance) {
            $.instance = instance;
            return this;
        }

        public Builder instance(String instance) {
            return instance(Output.of(instance));
        }

        public Builder instanceNumber(@Nullable Output<String> instanceNumber) {
            $.instanceNumber = instanceNumber;
            return this;
        }

        public Builder instanceNumber(String instanceNumber) {
            return instanceNumber(Output.of(instanceNumber));
        }

        public Builder instanceUrl(@Nullable Output<String> instanceUrl) {
            $.instanceUrl = instanceUrl;
            return this;
        }

        public Builder instanceUrl(String instanceUrl) {
            return instanceUrl(Output.of(instanceUrl));
        }

        public Builder integrationKey(@Nullable Output<String> integrationKey) {
            $.integrationKey = integrationKey;
            return this;
        }

        public Builder integrationKey(String integrationKey) {
            return integrationKey(Output.of(integrationKey));
        }

        public Builder isAccountLevelConnector(@Nullable Output<String> isAccountLevelConnector) {
            $.isAccountLevelConnector = isAccountLevelConnector;
            return this;
        }

        public Builder isAccountLevelConnector(String isAccountLevelConnector) {
            return isAccountLevelConnector(Output.of(isAccountLevelConnector));
        }

        public Builder isAuth2Enabled(@Nullable Output<String> isAuth2Enabled) {
            $.isAuth2Enabled = isAuth2Enabled;
            return this;
        }

        public Builder isAuth2Enabled(String isAuth2Enabled) {
            return isAuth2Enabled(Output.of(isAuth2Enabled));
        }

        public Builder isCustomApiCredentials(@Nullable Output<String> isCustomApiCredentials) {
            $.isCustomApiCredentials = isCustomApiCredentials;
            return this;
        }

        public Builder isCustomApiCredentials(String isCustomApiCredentials) {
            return isCustomApiCredentials(Output.of(isCustomApiCredentials));
        }

        public Builder isExternalActivitiesEndpointSelected(@Nullable Output<String> isExternalActivitiesEndpointSelected) {
            $.isExternalActivitiesEndpointSelected = isExternalActivitiesEndpointSelected;
            return this;
        }

        public Builder isExternalActivitiesEndpointSelected(String isExternalActivitiesEndpointSelected) {
            return isExternalActivitiesEndpointSelected(Output.of(isExternalActivitiesEndpointSelected));
        }

        public Builder isFtps(@Nullable Output<String> isFtps) {
            $.isFtps = isFtps;
            return this;
        }

        public Builder isFtps(String isFtps) {
            return isFtps(Output.of(isFtps));
        }

        public Builder isKeypair(@Nullable Output<String> isKeypair) {
            $.isKeypair = isKeypair;
            return this;
        }

        public Builder isKeypair(String isKeypair) {
            return isKeypair(Output.of(isKeypair));
        }

        public Builder isMultiEntityFeatureEnabled(@Nullable Output<String> isMultiEntityFeatureEnabled) {
            $.isMultiEntityFeatureEnabled = isMultiEntityFeatureEnabled;
            return this;
        }

        public Builder isMultiEntityFeatureEnabled(String isMultiEntityFeatureEnabled) {
            return isMultiEntityFeatureEnabled(Output.of(isMultiEntityFeatureEnabled));
        }

        public Builder isNewPackage(@Nullable Output<String> isNewPackage) {
            $.isNewPackage = isNewPackage;
            return this;
        }

        public Builder isNewPackage(String isNewPackage) {
            return isNewPackage(Output.of(isNewPackage));
        }

        public Builder isPrivateKeyEncrypted(@Nullable Output<String> isPrivateKeyEncrypted) {
            $.isPrivateKeyEncrypted = isPrivateKeyEncrypted;
            return this;
        }

        public Builder isPrivateKeyEncrypted(String isPrivateKeyEncrypted) {
            return isPrivateKeyEncrypted(Output.of(isPrivateKeyEncrypted));
        }

        public Builder isPrivateLinkRequired(@Nullable Output<String> isPrivateLinkRequired) {
            $.isPrivateLinkRequired = isPrivateLinkRequired;
            return this;
        }

        public Builder isPrivateLinkRequired(String isPrivateLinkRequired) {
            return isPrivateLinkRequired(Output.of(isPrivateLinkRequired));
        }

        public Builder isPublic(@Nullable Output<String> isPublic) {
            $.isPublic = isPublic;
            return this;
        }

        public Builder isPublic(String isPublic) {
            return isPublic(Output.of(isPublic));
        }

        public Builder isSailthruConnectEnabled(@Nullable Output<String> isSailthruConnectEnabled) {
            $.isSailthruConnectEnabled = isSailthruConnectEnabled;
            return this;
        }

        public Builder isSailthruConnectEnabled(String isSailthruConnectEnabled) {
            return isSailthruConnectEnabled(Output.of(isSailthruConnectEnabled));
        }

        public Builder isSecure(@Nullable Output<String> isSecure) {
            $.isSecure = isSecure;
            return this;
        }

        public Builder isSecure(String isSecure) {
            return isSecure(Output.of(isSecure));
        }

        public Builder isSingleTableMode(@Nullable Output<String> isSingleTableMode) {
            $.isSingleTableMode = isSingleTableMode;
            return this;
        }

        public Builder isSingleTableMode(String isSingleTableMode) {
            return isSingleTableMode(Output.of(isSingleTableMode));
        }

        public Builder isVendor(@Nullable Output<String> isVendor) {
            $.isVendor = isVendor;
            return this;
        }

        public Builder isVendor(String isVendor) {
            return isVendor(Output.of(isVendor));
        }

        public Builder jsonDeliveryMode(@Nullable Output<String> jsonDeliveryMode) {
            $.jsonDeliveryMode = jsonDeliveryMode;
            return this;
        }

        public Builder jsonDeliveryMode(String jsonDeliveryMode) {
            return jsonDeliveryMode(Output.of(jsonDeliveryMode));
        }

        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        public Builder key(String key) {
            return key(Output.of(key));
        }

        public Builder keyPassword(@Nullable Output<String> keyPassword) {
            $.keyPassword = keyPassword;
            return this;
        }

        public Builder keyPassword(String keyPassword) {
            return keyPassword(Output.of(keyPassword));
        }

        public Builder keyStoreType(@Nullable Output<String> keyStoreType) {
            $.keyStoreType = keyStoreType;
            return this;
        }

        public Builder keyStoreType(String keyStoreType) {
            return keyStoreType(Output.of(keyStoreType));
        }

        public Builder keystore(@Nullable Output<String> keystore) {
            $.keystore = keystore;
            return this;
        }

        public Builder keystore(String keystore) {
            return keystore(Output.of(keystore));
        }

        public Builder keystorePassword(@Nullable Output<String> keystorePassword) {
            $.keystorePassword = keystorePassword;
            return this;
        }

        public Builder keystorePassword(String keystorePassword) {
            return keystorePassword(Output.of(keystorePassword));
        }

        public Builder lastSyncedChangesUtc_(@Nullable Output<String> lastSyncedChangesUtc_) {
            $.lastSyncedChangesUtc_ = lastSyncedChangesUtc_;
            return this;
        }

        public Builder lastSyncedChangesUtc_(String lastSyncedChangesUtc_) {
            return lastSyncedChangesUtc_(Output.of(lastSyncedChangesUtc_));
        }

        public Builder latestVersion(@Nullable Output<String> latestVersion) {
            $.latestVersion = latestVersion;
            return this;
        }

        public Builder latestVersion(String latestVersion) {
            return latestVersion(Output.of(latestVersion));
        }

        public Builder limitForApiCallsToExternalActivitiesEndpoint(@Nullable Output<String> limitForApiCallsToExternalActivitiesEndpoint) {
            $.limitForApiCallsToExternalActivitiesEndpoint = limitForApiCallsToExternalActivitiesEndpoint;
            return this;
        }

        public Builder limitForApiCallsToExternalActivitiesEndpoint(String limitForApiCallsToExternalActivitiesEndpoint) {
            return limitForApiCallsToExternalActivitiesEndpoint(Output.of(limitForApiCallsToExternalActivitiesEndpoint));
        }

        public Builder lineSeparator(@Nullable Output<String> lineSeparator) {
            $.lineSeparator = lineSeparator;
            return this;
        }

        public Builder lineSeparator(String lineSeparator) {
            return lineSeparator(Output.of(lineSeparator));
        }

        public Builder listStrategy(@Nullable Output<String> listStrategy) {
            $.listStrategy = listStrategy;
            return this;
        }

        public Builder listStrategy(String listStrategy) {
            return listStrategy(Output.of(listStrategy));
        }

        public Builder listSyncMode(@Nullable Output<String> listSyncMode) {
            $.listSyncMode = listSyncMode;
            return this;
        }

        public Builder listSyncMode(String listSyncMode) {
            return listSyncMode(Output.of(listSyncMode));
        }

        public Builder logJournal(@Nullable Output<String> logJournal) {
            $.logJournal = logJournal;
            return this;
        }

        public Builder logJournal(String logJournal) {
            return logJournal(Output.of(logJournal));
        }

        public Builder logJournalSchema(@Nullable Output<String> logJournalSchema) {
            $.logJournalSchema = logJournalSchema;
            return this;
        }

        public Builder logJournalSchema(String logJournalSchema) {
            return logJournalSchema(Output.of(logJournalSchema));
        }

        public Builder login(@Nullable Output<String> login) {
            $.login = login;
            return this;
        }

        public Builder login(String login) {
            return login(Output.of(login));
        }

        public Builder loginPassword(@Nullable Output<String> loginPassword) {
            $.loginPassword = loginPassword;
            return this;
        }

        public Builder loginPassword(String loginPassword) {
            return loginPassword(Output.of(loginPassword));
        }

        public Builder managerAccounts(@Nullable Output<List<String>> managerAccounts) {
            $.managerAccounts = managerAccounts;
            return this;
        }

        public Builder managerAccounts(List<String> managerAccounts) {
            return managerAccounts(Output.of(managerAccounts));
        }

        public Builder managerAccounts(String... managerAccounts) {
            return managerAccounts(List.of(managerAccounts));
        }

        public Builder merchantId(@Nullable Output<String> merchantId) {
            $.merchantId = merchantId;
            return this;
        }

        public Builder merchantId(String merchantId) {
            return merchantId(Output.of(merchantId));
        }

        public Builder messageType(@Nullable Output<String> messageType) {
            $.messageType = messageType;
            return this;
        }

        public Builder messageType(String messageType) {
            return messageType(Output.of(messageType));
        }

        public Builder metrics(@Nullable Output<List<String>> metrics) {
            $.metrics = metrics;
            return this;
        }

        public Builder metrics(List<String> metrics) {
            return metrics(Output.of(metrics));
        }

        public Builder metrics(String... metrics) {
            return metrics(List.of(metrics));
        }

        public Builder namedRange(@Nullable Output<String> namedRange) {
            $.namedRange = namedRange;
            return this;
        }

        public Builder namedRange(String namedRange) {
            return namedRange(Output.of(namedRange));
        }

        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public Builder networkCode(@Nullable Output<String> networkCode) {
            $.networkCode = networkCode;
            return this;
        }

        public Builder networkCode(String networkCode) {
            return networkCode(Output.of(networkCode));
        }

        public Builder nullSequence(@Nullable Output<String> nullSequence) {
            $.nullSequence = nullSequence;
            return this;
        }

        public Builder nullSequence(String nullSequence) {
            return nullSequence(Output.of(nullSequence));
        }

        public Builder oauthToken(@Nullable Output<String> oauthToken) {
            $.oauthToken = oauthToken;
            return this;
        }

        public Builder oauthToken(String oauthToken) {
            return oauthToken(Output.of(oauthToken));
        }

        public Builder oauthTokenSecret(@Nullable Output<String> oauthTokenSecret) {
            $.oauthTokenSecret = oauthTokenSecret;
            return this;
        }

        public Builder oauthTokenSecret(String oauthTokenSecret) {
            return oauthTokenSecret(Output.of(oauthTokenSecret));
        }

        public Builder ocapiClientId(@Nullable Output<String> ocapiClientId) {
            $.ocapiClientId = ocapiClientId;
            return this;
        }

        public Builder ocapiClientId(String ocapiClientId) {
            return ocapiClientId(Output.of(ocapiClientId));
        }

        public Builder ocapiClientSecret(@Nullable Output<String> ocapiClientSecret) {
            $.ocapiClientSecret = ocapiClientSecret;
            return this;
        }

        public Builder ocapiClientSecret(String ocapiClientSecret) {
            return ocapiClientSecret(Output.of(ocapiClientSecret));
        }

        public Builder ocapiCustomObjectTypes(@Nullable Output<String> ocapiCustomObjectTypes) {
            $.ocapiCustomObjectTypes = ocapiCustomObjectTypes;
            return this;
        }

        public Builder ocapiCustomObjectTypes(String ocapiCustomObjectTypes) {
            return ocapiCustomObjectTypes(Output.of(ocapiCustomObjectTypes));
        }

        public Builder ocapiHostname(@Nullable Output<String> ocapiHostname) {
            $.ocapiHostname = ocapiHostname;
            return this;
        }

        public Builder ocapiHostname(String ocapiHostname) {
            return ocapiHostname(Output.of(ocapiHostname));
        }

        public Builder onError(@Nullable Output<String> onError) {
            $.onError = onError;
            return this;
        }

        public Builder onError(String onError) {
            return onError(Output.of(onError));
        }

        public Builder onPremise(@Nullable Output<String> onPremise) {
            $.onPremise = onPremise;
            return this;
        }

        public Builder onPremise(String onPremise) {
            return onPremise(Output.of(onPremise));
        }

        public Builder organization(@Nullable Output<String> organization) {
            $.organization = organization;
            return this;
        }

        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        public Builder organizationId(@Nullable Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        public Builder organizations(@Nullable Output<List<String>> organizations) {
            $.organizations = organizations;
            return this;
        }

        public Builder organizations(List<String> organizations) {
            return organizations(Output.of(organizations));
        }

        public Builder organizations(String... organizations) {
            return organizations(List.of(organizations));
        }

        public Builder packedModeTables(@Nullable Output<List<String>> packedModeTables) {
            $.packedModeTables = packedModeTables;
            return this;
        }

        public Builder packedModeTables(List<String> packedModeTables) {
            return packedModeTables(Output.of(packedModeTables));
        }

        public Builder packedModeTables(String... packedModeTables) {
            return packedModeTables(List.of(packedModeTables));
        }

        public Builder packingMode(@Nullable Output<String> packingMode) {
            $.packingMode = packingMode;
            return this;
        }

        public Builder packingMode(String packingMode) {
            return packingMode(Output.of(packingMode));
        }

        public Builder pages(@Nullable Output<List<String>> pages) {
            $.pages = pages;
            return this;
        }

        public Builder pages(List<String> pages) {
            return pages(Output.of(pages));
        }

        public Builder pages(String... pages) {
            return pages(List.of(pages));
        }

        public Builder partnerCode(@Nullable Output<String> partnerCode) {
            $.partnerCode = partnerCode;
            return this;
        }

        public Builder partnerCode(String partnerCode) {
            return partnerCode(Output.of(partnerCode));
        }

        public Builder partners(@Nullable Output<List<String>> partners) {
            $.partners = partners;
            return this;
        }

        public Builder partners(List<String> partners) {
            return partners(Output.of(partners));
        }

        public Builder partners(String... partners) {
            return partners(List.of(partners));
        }

        public Builder passphrase(@Nullable Output<String> passphrase) {
            $.passphrase = passphrase;
            return this;
        }

        public Builder passphrase(String passphrase) {
            return passphrase(Output.of(passphrase));
        }

        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder pat(@Nullable Output<String> pat) {
            $.pat = pat;
            return this;
        }

        public Builder pat(String pat) {
            return pat(Output.of(pat));
        }

        public Builder patName(@Nullable Output<String> patName) {
            $.patName = patName;
            return this;
        }

        public Builder patName(String patName) {
            return patName(Output.of(patName));
        }

        public Builder patSecret(@Nullable Output<String> patSecret) {
            $.patSecret = patSecret;
            return this;
        }

        public Builder patSecret(String patSecret) {
            return patSecret(Output.of(patSecret));
        }

        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        public Builder path(String path) {
            return path(Output.of(path));
        }

        public Builder pattern(@Nullable Output<String> pattern) {
            $.pattern = pattern;
            return this;
        }

        public Builder pattern(String pattern) {
            return pattern(Output.of(pattern));
        }

        public Builder pdbName(@Nullable Output<String> pdbName) {
            $.pdbName = pdbName;
            return this;
        }

        public Builder pdbName(String pdbName) {
            return pdbName(Output.of(pdbName));
        }

        public Builder pemCertificate(@Nullable Output<String> pemCertificate) {
            $.pemCertificate = pemCertificate;
            return this;
        }

        public Builder pemCertificate(String pemCertificate) {
            return pemCertificate(Output.of(pemCertificate));
        }

        public Builder pemPrivateKey(@Nullable Output<String> pemPrivateKey) {
            $.pemPrivateKey = pemPrivateKey;
            return this;
        }

        public Builder pemPrivateKey(String pemPrivateKey) {
            return pemPrivateKey(Output.of(pemPrivateKey));
        }

        public Builder perInteractionDimensions(@Nullable Output<List<String>> perInteractionDimensions) {
            $.perInteractionDimensions = perInteractionDimensions;
            return this;
        }

        public Builder perInteractionDimensions(List<String> perInteractionDimensions) {
            return perInteractionDimensions(Output.of(perInteractionDimensions));
        }

        public Builder perInteractionDimensions(String... perInteractionDimensions) {
            return perInteractionDimensions(List.of(perInteractionDimensions));
        }

        public Builder personalAccessToken(@Nullable Output<String> personalAccessToken) {
            $.personalAccessToken = personalAccessToken;
            return this;
        }

        public Builder personalAccessToken(String personalAccessToken) {
            return personalAccessToken(Output.of(personalAccessToken));
        }

        public Builder pgpPassPhrase(@Nullable Output<String> pgpPassPhrase) {
            $.pgpPassPhrase = pgpPassPhrase;
            return this;
        }

        public Builder pgpPassPhrase(String pgpPassPhrase) {
            return pgpPassPhrase(Output.of(pgpPassPhrase));
        }

        public Builder pgpSecretKey(@Nullable Output<String> pgpSecretKey) {
            $.pgpSecretKey = pgpSecretKey;
            return this;
        }

        public Builder pgpSecretKey(String pgpSecretKey) {
            return pgpSecretKey(Output.of(pgpSecretKey));
        }

        public Builder phoneNumber(@Nullable Output<String> phoneNumber) {
            $.phoneNumber = phoneNumber;
            return this;
        }

        public Builder phoneNumber(String phoneNumber) {
            return phoneNumber(Output.of(phoneNumber));
        }

        public Builder port(@Nullable Output<String> port) {
            $.port = port;
            return this;
        }

        public Builder port(String port) {
            return port(Output.of(port));
        }

        public Builder postClickAttributionWindowSize(@Nullable Output<String> postClickAttributionWindowSize) {
            $.postClickAttributionWindowSize = postClickAttributionWindowSize;
            return this;
        }

        public Builder postClickAttributionWindowSize(String postClickAttributionWindowSize) {
            return postClickAttributionWindowSize(Output.of(postClickAttributionWindowSize));
        }

        public Builder prebuiltReport(@Nullable Output<String> prebuiltReport) {
            $.prebuiltReport = prebuiltReport;
            return this;
        }

        public Builder prebuiltReport(String prebuiltReport) {
            return prebuiltReport(Output.of(prebuiltReport));
        }

        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        public Builder primaryKeys(@Nullable Output<List<String>> primaryKeys) {
            $.primaryKeys = primaryKeys;
            return this;
        }

        public Builder primaryKeys(List<String> primaryKeys) {
            return primaryKeys(Output.of(primaryKeys));
        }

        public Builder primaryKeys(String... primaryKeys) {
            return primaryKeys(List.of(primaryKeys));
        }

        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        public Builder profiles(@Nullable Output<List<String>> profiles) {
            $.profiles = profiles;
            return this;
        }

        public Builder profiles(List<String> profiles) {
            return profiles(Output.of(profiles));
        }

        public Builder profiles(String... profiles) {
            return profiles(List.of(profiles));
        }

        public Builder projectCredentials(@Nullable Output<List<ConnectorConfigProjectCredentialArgs>> projectCredentials) {
            $.projectCredentials = projectCredentials;
            return this;
        }

        public Builder projectCredentials(List<ConnectorConfigProjectCredentialArgs> projectCredentials) {
            return projectCredentials(Output.of(projectCredentials));
        }

        public Builder projectCredentials(ConnectorConfigProjectCredentialArgs... projectCredentials) {
            return projectCredentials(List.of(projectCredentials));
        }

        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public Builder projects(@Nullable Output<List<String>> projects) {
            $.projects = projects;
            return this;
        }

        public Builder projects(List<String> projects) {
            return projects(Output.of(projects));
        }

        public Builder projects(String... projects) {
            return projects(List.of(projects));
        }

        public Builder properties(@Nullable Output<List<String>> properties) {
            $.properties = properties;
            return this;
        }

        public Builder properties(List<String> properties) {
            return properties(Output.of(properties));
        }

        public Builder properties(String... properties) {
            return properties(List.of(properties));
        }

        public Builder publicKey(@Nullable Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        public Builder publicationName(@Nullable Output<String> publicationName) {
            $.publicationName = publicationName;
            return this;
        }

        public Builder publicationName(String publicationName) {
            return publicationName(Output.of(publicationName));
        }

        public Builder queryId(@Nullable Output<String> queryId) {
            $.queryId = queryId;
            return this;
        }

        public Builder queryId(String queryId) {
            return queryId(Output.of(queryId));
        }

        public Builder queryParamValue(@Nullable Output<String> queryParamValue) {
            $.queryParamValue = queryParamValue;
            return this;
        }

        public Builder queryParamValue(String queryParamValue) {
            return queryParamValue(Output.of(queryParamValue));
        }

        public Builder refreshTokenExpiresAt(@Nullable Output<String> refreshTokenExpiresAt) {
            $.refreshTokenExpiresAt = refreshTokenExpiresAt;
            return this;
        }

        public Builder refreshTokenExpiresAt(String refreshTokenExpiresAt) {
            return refreshTokenExpiresAt(Output.of(refreshTokenExpiresAt));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder replicaId(@Nullable Output<String> replicaId) {
            $.replicaId = replicaId;
            return this;
        }

        public Builder replicaId(String replicaId) {
            return replicaId(Output.of(replicaId));
        }

        public Builder replicationSlot(@Nullable Output<String> replicationSlot) {
            $.replicationSlot = replicationSlot;
            return this;
        }

        public Builder replicationSlot(String replicationSlot) {
            return replicationSlot(Output.of(replicationSlot));
        }

        public Builder reportConfigurationIds(@Nullable Output<List<String>> reportConfigurationIds) {
            $.reportConfigurationIds = reportConfigurationIds;
            return this;
        }

        public Builder reportConfigurationIds(List<String> reportConfigurationIds) {
            return reportConfigurationIds(Output.of(reportConfigurationIds));
        }

        public Builder reportConfigurationIds(String... reportConfigurationIds) {
            return reportConfigurationIds(List.of(reportConfigurationIds));
        }

        public Builder reportFormatType(@Nullable Output<String> reportFormatType) {
            $.reportFormatType = reportFormatType;
            return this;
        }

        public Builder reportFormatType(String reportFormatType) {
            return reportFormatType(Output.of(reportFormatType));
        }

        public Builder reportSuites(@Nullable Output<List<String>> reportSuites) {
            $.reportSuites = reportSuites;
            return this;
        }

        public Builder reportSuites(List<String> reportSuites) {
            return reportSuites(Output.of(reportSuites));
        }

        public Builder reportSuites(String... reportSuites) {
            return reportSuites(List.of(reportSuites));
        }

        public Builder reportTimezone(@Nullable Output<String> reportTimezone) {
            $.reportTimezone = reportTimezone;
            return this;
        }

        public Builder reportTimezone(String reportTimezone) {
            return reportTimezone(Output.of(reportTimezone));
        }

        public Builder reportType(@Nullable Output<String> reportType) {
            $.reportType = reportType;
            return this;
        }

        public Builder reportType(String reportType) {
            return reportType(Output.of(reportType));
        }

        public Builder reportUrl(@Nullable Output<String> reportUrl) {
            $.reportUrl = reportUrl;
            return this;
        }

        public Builder reportUrl(String reportUrl) {
            return reportUrl(Output.of(reportUrl));
        }

        public Builder reports(@Nullable Output<List<ConnectorConfigReportArgs>> reports) {
            $.reports = reports;
            return this;
        }

        public Builder reports(List<ConnectorConfigReportArgs> reports) {
            return reports(Output.of(reports));
        }

        public Builder reports(ConnectorConfigReportArgs... reports) {
            return reports(List.of(reports));
        }

        public Builder reportsLinkedinAds(@Nullable Output<List<String>> reportsLinkedinAds) {
            $.reportsLinkedinAds = reportsLinkedinAds;
            return this;
        }

        public Builder reportsLinkedinAds(List<String> reportsLinkedinAds) {
            return reportsLinkedinAds(Output.of(reportsLinkedinAds));
        }

        public Builder reportsLinkedinAds(String... reportsLinkedinAds) {
            return reportsLinkedinAds(List.of(reportsLinkedinAds));
        }

        public Builder repositories(@Nullable Output<List<String>> repositories) {
            $.repositories = repositories;
            return this;
        }

        public Builder repositories(List<String> repositories) {
            return repositories(Output.of(repositories));
        }

        public Builder repositories(String... repositories) {
            return repositories(List.of(repositories));
        }

        public Builder resourceToken(@Nullable Output<String> resourceToken) {
            $.resourceToken = resourceToken;
            return this;
        }

        public Builder resourceToken(String resourceToken) {
            return resourceToken(Output.of(resourceToken));
        }

        public Builder resourceUrl(@Nullable Output<String> resourceUrl) {
            $.resourceUrl = resourceUrl;
            return this;
        }

        public Builder resourceUrl(String resourceUrl) {
            return resourceUrl(Output.of(resourceUrl));
        }

        public Builder restApiLimit(@Nullable Output<String> restApiLimit) {
            $.restApiLimit = restApiLimit;
            return this;
        }

        public Builder restApiLimit(String restApiLimit) {
            return restApiLimit(Output.of(restApiLimit));
        }

        public Builder rfcLibraryPath(@Nullable Output<String> rfcLibraryPath) {
            $.rfcLibraryPath = rfcLibraryPath;
            return this;
        }

        public Builder rfcLibraryPath(String rfcLibraryPath) {
            return rfcLibraryPath(Output.of(rfcLibraryPath));
        }

        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        public Builder role(String role) {
            return role(Output.of(role));
        }

        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public Builder rollbackWindowSize(@Nullable Output<String> rollbackWindowSize) {
            $.rollbackWindowSize = rollbackWindowSize;
            return this;
        }

        public Builder rollbackWindowSize(String rollbackWindowSize) {
            return rollbackWindowSize(Output.of(rollbackWindowSize));
        }

        public Builder s3Bucket(@Nullable Output<String> s3Bucket) {
            $.s3Bucket = s3Bucket;
            return this;
        }

        public Builder s3Bucket(String s3Bucket) {
            return s3Bucket(Output.of(s3Bucket));
        }

        public Builder s3ExportBucket(@Nullable Output<String> s3ExportBucket) {
            $.s3ExportBucket = s3ExportBucket;
            return this;
        }

        public Builder s3ExportBucket(String s3ExportBucket) {
            return s3ExportBucket(Output.of(s3ExportBucket));
        }

        public Builder s3ExportFolder(@Nullable Output<String> s3ExportFolder) {
            $.s3ExportFolder = s3ExportFolder;
            return this;
        }

        public Builder s3ExportFolder(String s3ExportFolder) {
            return s3ExportFolder(Output.of(s3ExportFolder));
        }

        public Builder s3ExportRoleArn(@Nullable Output<String> s3ExportRoleArn) {
            $.s3ExportRoleArn = s3ExportRoleArn;
            return this;
        }

        public Builder s3ExportRoleArn(String s3ExportRoleArn) {
            return s3ExportRoleArn(Output.of(s3ExportRoleArn));
        }

        public Builder s3RoleArn(@Nullable Output<String> s3RoleArn) {
            $.s3RoleArn = s3RoleArn;
            return this;
        }

        public Builder s3RoleArn(String s3RoleArn) {
            return s3RoleArn(Output.of(s3RoleArn));
        }

        public Builder s3bucket(@Nullable Output<String> s3bucket) {
            $.s3bucket = s3bucket;
            return this;
        }

        public Builder s3bucket(String s3bucket) {
            return s3bucket(Output.of(s3bucket));
        }

        public Builder s3externalId(@Nullable Output<String> s3externalId) {
            $.s3externalId = s3externalId;
            return this;
        }

        public Builder s3externalId(String s3externalId) {
            return s3externalId(Output.of(s3externalId));
        }

        public Builder s3folder(@Nullable Output<String> s3folder) {
            $.s3folder = s3folder;
            return this;
        }

        public Builder s3folder(String s3folder) {
            return s3folder(Output.of(s3folder));
        }

        public Builder s3path(@Nullable Output<String> s3path) {
            $.s3path = s3path;
            return this;
        }

        public Builder s3path(String s3path) {
            return s3path(Output.of(s3path));
        }

        public Builder s3roleArn(@Nullable Output<String> s3roleArn) {
            $.s3roleArn = s3roleArn;
            return this;
        }

        public Builder s3roleArn(String s3roleArn) {
            return s3roleArn(Output.of(s3roleArn));
        }

        public Builder salesAccountSyncMode(@Nullable Output<String> salesAccountSyncMode) {
            $.salesAccountSyncMode = salesAccountSyncMode;
            return this;
        }

        public Builder salesAccountSyncMode(String salesAccountSyncMode) {
            return salesAccountSyncMode(Output.of(salesAccountSyncMode));
        }

        public Builder salesAccounts(@Nullable Output<List<String>> salesAccounts) {
            $.salesAccounts = salesAccounts;
            return this;
        }

        public Builder salesAccounts(List<String> salesAccounts) {
            return salesAccounts(Output.of(salesAccounts));
        }

        public Builder salesAccounts(String... salesAccounts) {
            return salesAccounts(List.of(salesAccounts));
        }

        public Builder salesforceSecurityToken(@Nullable Output<String> salesforceSecurityToken) {
            $.salesforceSecurityToken = salesforceSecurityToken;
            return this;
        }

        public Builder salesforceSecurityToken(String salesforceSecurityToken) {
            return salesforceSecurityToken(Output.of(salesforceSecurityToken));
        }

        public Builder sandboxAccount(@Nullable Output<String> sandboxAccount) {
            $.sandboxAccount = sandboxAccount;
            return this;
        }

        public Builder sandboxAccount(String sandboxAccount) {
            return sandboxAccount(Output.of(sandboxAccount));
        }

        public Builder sapSchema(@Nullable Output<String> sapSchema) {
            $.sapSchema = sapSchema;
            return this;
        }

        public Builder sapSchema(String sapSchema) {
            return sapSchema(Output.of(sapSchema));
        }

        public Builder sapUser(@Nullable Output<String> sapUser) {
            $.sapUser = sapUser;
            return this;
        }

        public Builder sapUser(String sapUser) {
            return sapUser(Output.of(sapUser));
        }

        public Builder saslMechanism(@Nullable Output<String> saslMechanism) {
            $.saslMechanism = saslMechanism;
            return this;
        }

        public Builder saslMechanism(String saslMechanism) {
            return saslMechanism(Output.of(saslMechanism));
        }

        public Builder saslPlainKey(@Nullable Output<String> saslPlainKey) {
            $.saslPlainKey = saslPlainKey;
            return this;
        }

        public Builder saslPlainKey(String saslPlainKey) {
            return saslPlainKey(Output.of(saslPlainKey));
        }

        public Builder saslPlainSecret(@Nullable Output<String> saslPlainSecret) {
            $.saslPlainSecret = saslPlainSecret;
            return this;
        }

        public Builder saslPlainSecret(String saslPlainSecret) {
            return saslPlainSecret(Output.of(saslPlainSecret));
        }

        public Builder saslScram256Key(@Nullable Output<String> saslScram256Key) {
            $.saslScram256Key = saslScram256Key;
            return this;
        }

        public Builder saslScram256Key(String saslScram256Key) {
            return saslScram256Key(Output.of(saslScram256Key));
        }

        public Builder saslScram256Secret(@Nullable Output<String> saslScram256Secret) {
            $.saslScram256Secret = saslScram256Secret;
            return this;
        }

        public Builder saslScram256Secret(String saslScram256Secret) {
            return saslScram256Secret(Output.of(saslScram256Secret));
        }

        public Builder saslScram512Key(@Nullable Output<String> saslScram512Key) {
            $.saslScram512Key = saslScram512Key;
            return this;
        }

        public Builder saslScram512Key(String saslScram512Key) {
            return saslScram512Key(Output.of(saslScram512Key));
        }

        public Builder saslScram512Secret(@Nullable Output<String> saslScram512Secret) {
            $.saslScram512Secret = saslScram512Secret;
            return this;
        }

        public Builder saslScram512Secret(String saslScram512Secret) {
            return saslScram512Secret(Output.of(saslScram512Secret));
        }

        public Builder schemaRegistryCredentialsSource(@Nullable Output<String> schemaRegistryCredentialsSource) {
            $.schemaRegistryCredentialsSource = schemaRegistryCredentialsSource;
            return this;
        }

        public Builder schemaRegistryCredentialsSource(String schemaRegistryCredentialsSource) {
            return schemaRegistryCredentialsSource(Output.of(schemaRegistryCredentialsSource));
        }

        public Builder schemaRegistryKey(@Nullable Output<String> schemaRegistryKey) {
            $.schemaRegistryKey = schemaRegistryKey;
            return this;
        }

        public Builder schemaRegistryKey(String schemaRegistryKey) {
            return schemaRegistryKey(Output.of(schemaRegistryKey));
        }

        public Builder schemaRegistrySecret(@Nullable Output<String> schemaRegistrySecret) {
            $.schemaRegistrySecret = schemaRegistrySecret;
            return this;
        }

        public Builder schemaRegistrySecret(String schemaRegistrySecret) {
            return schemaRegistrySecret(Output.of(schemaRegistrySecret));
        }

        public Builder schemaRegistryUrls(@Nullable Output<List<String>> schemaRegistryUrls) {
            $.schemaRegistryUrls = schemaRegistryUrls;
            return this;
        }

        public Builder schemaRegistryUrls(List<String> schemaRegistryUrls) {
            return schemaRegistryUrls(Output.of(schemaRegistryUrls));
        }

        public Builder schemaRegistryUrls(String... schemaRegistryUrls) {
            return schemaRegistryUrls(List.of(schemaRegistryUrls));
        }

        public Builder secret(@Nullable Output<String> secret) {
            $.secret = secret;
            return this;
        }

        public Builder secret(String secret) {
            return secret(Output.of(secret));
        }

        public Builder secretKey(@Nullable Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        public Builder secrets(@Nullable Output<String> secrets) {
            $.secrets = secrets;
            return this;
        }

        public Builder secrets(String secrets) {
            return secrets(Output.of(secrets));
        }

        public Builder secretsLists(@Nullable Output<List<ConnectorConfigSecretsListArgs>> secretsLists) {
            $.secretsLists = secretsLists;
            return this;
        }

        public Builder secretsLists(List<ConnectorConfigSecretsListArgs> secretsLists) {
            return secretsLists(Output.of(secretsLists));
        }

        public Builder secretsLists(ConnectorConfigSecretsListArgs... secretsLists) {
            return secretsLists(List.of(secretsLists));
        }

        public Builder securityProtocol(@Nullable Output<String> securityProtocol) {
            $.securityProtocol = securityProtocol;
            return this;
        }

        public Builder securityProtocol(String securityProtocol) {
            return securityProtocol(Output.of(securityProtocol));
        }

        public Builder segments(@Nullable Output<List<String>> segments) {
            $.segments = segments;
            return this;
        }

        public Builder segments(List<String> segments) {
            return segments(Output.of(segments));
        }

        public Builder segments(String... segments) {
            return segments(List.of(segments));
        }

        public Builder selectedExports(@Nullable Output<List<String>> selectedExports) {
            $.selectedExports = selectedExports;
            return this;
        }

        public Builder selectedExports(List<String> selectedExports) {
            return selectedExports(Output.of(selectedExports));
        }

        public Builder selectedExports(String... selectedExports) {
            return selectedExports(List.of(selectedExports));
        }

        public Builder senderId(@Nullable Output<String> senderId) {
            $.senderId = senderId;
            return this;
        }

        public Builder senderId(String senderId) {
            return senderId(Output.of(senderId));
        }

        public Builder senderPassword(@Nullable Output<String> senderPassword) {
            $.senderPassword = senderPassword;
            return this;
        }

        public Builder senderPassword(String senderPassword) {
            return senderPassword(Output.of(senderPassword));
        }

        public Builder serverAddress(@Nullable Output<String> serverAddress) {
            $.serverAddress = serverAddress;
            return this;
        }

        public Builder serverAddress(String serverAddress) {
            return serverAddress(Output.of(serverAddress));
        }

        public Builder serverUrl(@Nullable Output<String> serverUrl) {
            $.serverUrl = serverUrl;
            return this;
        }

        public Builder serverUrl(String serverUrl) {
            return serverUrl(Output.of(serverUrl));
        }

        public Builder servers(@Nullable Output<List<String>> servers) {
            $.servers = servers;
            return this;
        }

        public Builder servers(List<String> servers) {
            return servers(Output.of(servers));
        }

        public Builder servers(String... servers) {
            return servers(List.of(servers));
        }

        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        public Builder serviceAccount(String serviceAccount) {
            return serviceAccount(Output.of(serviceAccount));
        }

        public Builder serviceAccountEmail(@Nullable Output<String> serviceAccountEmail) {
            $.serviceAccountEmail = serviceAccountEmail;
            return this;
        }

        public Builder serviceAccountEmail(String serviceAccountEmail) {
            return serviceAccountEmail(Output.of(serviceAccountEmail));
        }

        public Builder serviceAccountKey(@Nullable Output<String> serviceAccountKey) {
            $.serviceAccountKey = serviceAccountKey;
            return this;
        }

        public Builder serviceAccountKey(String serviceAccountKey) {
            return serviceAccountKey(Output.of(serviceAccountKey));
        }

        public Builder serviceVersion(@Nullable Output<String> serviceVersion) {
            $.serviceVersion = serviceVersion;
            return this;
        }

        public Builder serviceVersion(String serviceVersion) {
            return serviceVersion(Output.of(serviceVersion));
        }

        public Builder sftpHost(@Nullable Output<String> sftpHost) {
            $.sftpHost = sftpHost;
            return this;
        }

        public Builder sftpHost(String sftpHost) {
            return sftpHost(Output.of(sftpHost));
        }

        public Builder sftpIsKeyPair(@Nullable Output<String> sftpIsKeyPair) {
            $.sftpIsKeyPair = sftpIsKeyPair;
            return this;
        }

        public Builder sftpIsKeyPair(String sftpIsKeyPair) {
            return sftpIsKeyPair(Output.of(sftpIsKeyPair));
        }

        public Builder sftpPassword(@Nullable Output<String> sftpPassword) {
            $.sftpPassword = sftpPassword;
            return this;
        }

        public Builder sftpPassword(String sftpPassword) {
            return sftpPassword(Output.of(sftpPassword));
        }

        public Builder sftpPort(@Nullable Output<String> sftpPort) {
            $.sftpPort = sftpPort;
            return this;
        }

        public Builder sftpPort(String sftpPort) {
            return sftpPort(Output.of(sftpPort));
        }

        public Builder sftpPublicKey(@Nullable Output<String> sftpPublicKey) {
            $.sftpPublicKey = sftpPublicKey;
            return this;
        }

        public Builder sftpPublicKey(String sftpPublicKey) {
            return sftpPublicKey(Output.of(sftpPublicKey));
        }

        public Builder sftpUser(@Nullable Output<String> sftpUser) {
            $.sftpUser = sftpUser;
            return this;
        }

        public Builder sftpUser(String sftpUser) {
            return sftpUser(Output.of(sftpUser));
        }

        public Builder shareUrl(@Nullable Output<String> shareUrl) {
            $.shareUrl = shareUrl;
            return this;
        }

        public Builder shareUrl(String shareUrl) {
            return shareUrl(Output.of(shareUrl));
        }

        public Builder sheetId(@Nullable Output<String> sheetId) {
            $.sheetId = sheetId;
            return this;
        }

        public Builder sheetId(String sheetId) {
            return sheetId(Output.of(sheetId));
        }

        public Builder shop(@Nullable Output<String> shop) {
            $.shop = shop;
            return this;
        }

        public Builder shop(String shop) {
            return shop(Output.of(shop));
        }

        public Builder shortCode(@Nullable Output<String> shortCode) {
            $.shortCode = shortCode;
            return this;
        }

        public Builder shortCode(String shortCode) {
            return shortCode(Output.of(shortCode));
        }

        public Builder showRecordsWithNoMetrics(@Nullable Output<String> showRecordsWithNoMetrics) {
            $.showRecordsWithNoMetrics = showRecordsWithNoMetrics;
            return this;
        }

        public Builder showRecordsWithNoMetrics(String showRecordsWithNoMetrics) {
            return showRecordsWithNoMetrics(Output.of(showRecordsWithNoMetrics));
        }

        public Builder sid(@Nullable Output<String> sid) {
            $.sid = sid;
            return this;
        }

        public Builder sid(String sid) {
            return sid(Output.of(sid));
        }

        public Builder signerPublicKey(@Nullable Output<String> signerPublicKey) {
            $.signerPublicKey = signerPublicKey;
            return this;
        }

        public Builder signerPublicKey(String signerPublicKey) {
            return signerPublicKey(Output.of(signerPublicKey));
        }

        public Builder siteAddress(@Nullable Output<String> siteAddress) {
            $.siteAddress = siteAddress;
            return this;
        }

        public Builder siteAddress(String siteAddress) {
            return siteAddress(Output.of(siteAddress));
        }

        public Builder siteId(@Nullable Output<String> siteId) {
            $.siteId = siteId;
            return this;
        }

        public Builder siteId(String siteId) {
            return siteId(Output.of(siteId));
        }

        public Builder siteName(@Nullable Output<String> siteName) {
            $.siteName = siteName;
            return this;
        }

        public Builder siteName(String siteName) {
            return siteName(Output.of(siteName));
        }

        public Builder siteUrls(@Nullable Output<List<String>> siteUrls) {
            $.siteUrls = siteUrls;
            return this;
        }

        public Builder siteUrls(List<String> siteUrls) {
            return siteUrls(Output.of(siteUrls));
        }

        public Builder siteUrls(String... siteUrls) {
            return siteUrls(List.of(siteUrls));
        }

        public Builder skipAfter(@Nullable Output<String> skipAfter) {
            $.skipAfter = skipAfter;
            return this;
        }

        public Builder skipAfter(String skipAfter) {
            return skipAfter(Output.of(skipAfter));
        }

        public Builder skipBefore(@Nullable Output<String> skipBefore) {
            $.skipBefore = skipBefore;
            return this;
        }

        public Builder skipBefore(String skipBefore) {
            return skipBefore(Output.of(skipBefore));
        }

        public Builder soapUri(@Nullable Output<String> soapUri) {
            $.soapUri = soapUri;
            return this;
        }

        public Builder soapUri(String soapUri) {
            return soapUri(Output.of(soapUri));
        }

        public Builder socialDataSyncTimeframe(@Nullable Output<String> socialDataSyncTimeframe) {
            $.socialDataSyncTimeframe = socialDataSyncTimeframe;
            return this;
        }

        public Builder socialDataSyncTimeframe(String socialDataSyncTimeframe) {
            return socialDataSyncTimeframe(Output.of(socialDataSyncTimeframe));
        }

        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        public Builder source(String source) {
            return source(Output.of(source));
        }

        public Builder storeHash(@Nullable Output<String> storeHash) {
            $.storeHash = storeHash;
            return this;
        }

        public Builder storeHash(String storeHash) {
            return storeHash(Output.of(storeHash));
        }

        public Builder subDomain(@Nullable Output<String> subDomain) {
            $.subDomain = subDomain;
            return this;
        }

        public Builder subDomain(String subDomain) {
            return subDomain(Output.of(subDomain));
        }

        public Builder subdomain(@Nullable Output<String> subdomain) {
            $.subdomain = subdomain;
            return this;
        }

        public Builder subdomain(String subdomain) {
            return subdomain(Output.of(subdomain));
        }

        public Builder subscriberName(@Nullable Output<String> subscriberName) {
            $.subscriberName = subscriberName;
            return this;
        }

        public Builder subscriberName(String subscriberName) {
            return subscriberName(Output.of(subscriberName));
        }

        public Builder subscription(@Nullable Output<String> subscription) {
            $.subscription = subscription;
            return this;
        }

        public Builder subscription(String subscription) {
            return subscription(Output.of(subscription));
        }

        public Builder supportConnectedAccountsSync(@Nullable Output<String> supportConnectedAccountsSync) {
            $.supportConnectedAccountsSync = supportConnectedAccountsSync;
            return this;
        }

        public Builder supportConnectedAccountsSync(String supportConnectedAccountsSync) {
            return supportConnectedAccountsSync(Output.of(supportConnectedAccountsSync));
        }

        public Builder supportNestedColumns(@Nullable Output<String> supportNestedColumns) {
            $.supportNestedColumns = supportNestedColumns;
            return this;
        }

        public Builder supportNestedColumns(String supportNestedColumns) {
            return supportNestedColumns(Output.of(supportNestedColumns));
        }

        public Builder surveyIds(@Nullable Output<String> surveyIds) {
            $.surveyIds = surveyIds;
            return this;
        }

        public Builder surveyIds(String surveyIds) {
            return surveyIds(Output.of(surveyIds));
        }

        public Builder swipeAttributionWindow(@Nullable Output<String> swipeAttributionWindow) {
            $.swipeAttributionWindow = swipeAttributionWindow;
            return this;
        }

        public Builder swipeAttributionWindow(String swipeAttributionWindow) {
            return swipeAttributionWindow(Output.of(swipeAttributionWindow));
        }

        public Builder syncDataLocker(@Nullable Output<String> syncDataLocker) {
            $.syncDataLocker = syncDataLocker;
            return this;
        }

        public Builder syncDataLocker(String syncDataLocker) {
            return syncDataLocker(Output.of(syncDataLocker));
        }

        public Builder syncFormat(@Nullable Output<String> syncFormat) {
            $.syncFormat = syncFormat;
            return this;
        }

        public Builder syncFormat(String syncFormat) {
            return syncFormat(Output.of(syncFormat));
        }

        public Builder syncFormulaFields(@Nullable Output<String> syncFormulaFields) {
            $.syncFormulaFields = syncFormulaFields;
            return this;
        }

        public Builder syncFormulaFields(String syncFormulaFields) {
            return syncFormulaFields(Output.of(syncFormulaFields));
        }

        public Builder syncMetadata(@Nullable Output<String> syncMetadata) {
            $.syncMetadata = syncMetadata;
            return this;
        }

        public Builder syncMetadata(String syncMetadata) {
            return syncMetadata(Output.of(syncMetadata));
        }

        public Builder syncMethod(@Nullable Output<String> syncMethod) {
            $.syncMethod = syncMethod;
            return this;
        }

        public Builder syncMethod(String syncMethod) {
            return syncMethod(Output.of(syncMethod));
        }

        public Builder syncMode(@Nullable Output<String> syncMode) {
            $.syncMode = syncMode;
            return this;
        }

        public Builder syncMode(String syncMode) {
            return syncMode(Output.of(syncMode));
        }

        public Builder syncMultipleAccounts(@Nullable Output<String> syncMultipleAccounts) {
            $.syncMultipleAccounts = syncMultipleAccounts;
            return this;
        }

        public Builder syncMultipleAccounts(String syncMultipleAccounts) {
            return syncMultipleAccounts(Output.of(syncMultipleAccounts));
        }

        public Builder syncPackMode(@Nullable Output<String> syncPackMode) {
            $.syncPackMode = syncPackMode;
            return this;
        }

        public Builder syncPackMode(String syncPackMode) {
            return syncPackMode(Output.of(syncPackMode));
        }

        public Builder syncPullApi(@Nullable Output<String> syncPullApi) {
            $.syncPullApi = syncPullApi;
            return this;
        }

        public Builder syncPullApi(String syncPullApi) {
            return syncPullApi(Output.of(syncPullApi));
        }

        public Builder syncType(@Nullable Output<String> syncType) {
            $.syncType = syncType;
            return this;
        }

        public Builder syncType(String syncType) {
            return syncType(Output.of(syncType));
        }

        public Builder sysnr(@Nullable Output<String> sysnr) {
            $.sysnr = sysnr;
            return this;
        }

        public Builder sysnr(String sysnr) {
            return sysnr(Output.of(sysnr));
        }

        public Builder tableName(@Nullable Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public Builder tdeCertificate(@Nullable Output<String> tdeCertificate) {
            $.tdeCertificate = tdeCertificate;
            return this;
        }

        public Builder tdeCertificate(String tdeCertificate) {
            return tdeCertificate(Output.of(tdeCertificate));
        }

        public Builder tdeCertificateName(@Nullable Output<String> tdeCertificateName) {
            $.tdeCertificateName = tdeCertificateName;
            return this;
        }

        public Builder tdeCertificateName(String tdeCertificateName) {
            return tdeCertificateName(Output.of(tdeCertificateName));
        }

        public Builder tdePassword(@Nullable Output<String> tdePassword) {
            $.tdePassword = tdePassword;
            return this;
        }

        public Builder tdePassword(String tdePassword) {
            return tdePassword(Output.of(tdePassword));
        }

        public Builder tdePrivateKey(@Nullable Output<String> tdePrivateKey) {
            $.tdePrivateKey = tdePrivateKey;
            return this;
        }

        public Builder tdePrivateKey(String tdePrivateKey) {
            return tdePrivateKey(Output.of(tdePrivateKey));
        }

        public Builder teamId(@Nullable Output<String> teamId) {
            $.teamId = teamId;
            return this;
        }

        public Builder teamId(String teamId) {
            return teamId(Output.of(teamId));
        }

        public Builder technicalAccountId(@Nullable Output<String> technicalAccountId) {
            $.technicalAccountId = technicalAccountId;
            return this;
        }

        public Builder technicalAccountId(String technicalAccountId) {
            return technicalAccountId(Output.of(technicalAccountId));
        }

        public Builder templateLabels(@Nullable Output<List<String>> templateLabels) {
            $.templateLabels = templateLabels;
            return this;
        }

        public Builder templateLabels(List<String> templateLabels) {
            return templateLabels(Output.of(templateLabels));
        }

        public Builder templateLabels(String... templateLabels) {
            return templateLabels(List.of(templateLabels));
        }

        public Builder tenant(@Nullable Output<String> tenant) {
            $.tenant = tenant;
            return this;
        }

        public Builder tenant(String tenant) {
            return tenant(Output.of(tenant));
        }

        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public Builder testTableName(@Nullable Output<String> testTableName) {
            $.testTableName = testTableName;
            return this;
        }

        public Builder testTableName(String testTableName) {
            return testTableName(Output.of(testTableName));
        }

        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public Builder timeframeMonths(@Nullable Output<String> timeframeMonths) {
            $.timeframeMonths = timeframeMonths;
            return this;
        }

        public Builder timeframeMonths(String timeframeMonths) {
            return timeframeMonths(Output.of(timeframeMonths));
        }

        public Builder tns(@Nullable Output<String> tns) {
            $.tns = tns;
            return this;
        }

        public Builder tns(String tns) {
            return tns(Output.of(tns));
        }

        public Builder tokenAuthenticatedContainer(@Nullable Output<String> tokenAuthenticatedContainer) {
            $.tokenAuthenticatedContainer = tokenAuthenticatedContainer;
            return this;
        }

        public Builder tokenAuthenticatedContainer(String tokenAuthenticatedContainer) {
            return tokenAuthenticatedContainer(Output.of(tokenAuthenticatedContainer));
        }

        public Builder tokenAuthenticatedDatabase(@Nullable Output<String> tokenAuthenticatedDatabase) {
            $.tokenAuthenticatedDatabase = tokenAuthenticatedDatabase;
            return this;
        }

        public Builder tokenAuthenticatedDatabase(String tokenAuthenticatedDatabase) {
            return tokenAuthenticatedDatabase(Output.of(tokenAuthenticatedDatabase));
        }

        public Builder tokenId(@Nullable Output<String> tokenId) {
            $.tokenId = tokenId;
            return this;
        }

        public Builder tokenId(String tokenId) {
            return tokenId(Output.of(tokenId));
        }

        public Builder tokenKey(@Nullable Output<String> tokenKey) {
            $.tokenKey = tokenKey;
            return this;
        }

        public Builder tokenKey(String tokenKey) {
            return tokenKey(Output.of(tokenKey));
        }

        public Builder tokenSecret(@Nullable Output<String> tokenSecret) {
            $.tokenSecret = tokenSecret;
            return this;
        }

        public Builder tokenSecret(String tokenSecret) {
            return tokenSecret(Output.of(tokenSecret));
        }

        public Builder tokenSecretKey(@Nullable Output<String> tokenSecretKey) {
            $.tokenSecretKey = tokenSecretKey;
            return this;
        }

        public Builder tokenSecretKey(String tokenSecretKey) {
            return tokenSecretKey(Output.of(tokenSecretKey));
        }

        public Builder topics(@Nullable Output<List<String>> topics) {
            $.topics = topics;
            return this;
        }

        public Builder topics(List<String> topics) {
            return topics(Output.of(topics));
        }

        public Builder topics(String... topics) {
            return topics(List.of(topics));
        }

        public Builder trustStoreType(@Nullable Output<String> trustStoreType) {
            $.trustStoreType = trustStoreType;
            return this;
        }

        public Builder trustStoreType(String trustStoreType) {
            return trustStoreType(Output.of(trustStoreType));
        }

        public Builder trustedCert(@Nullable Output<String> trustedCert) {
            $.trustedCert = trustedCert;
            return this;
        }

        public Builder trustedCert(String trustedCert) {
            return trustedCert(Output.of(trustedCert));
        }

        public Builder truststore(@Nullable Output<String> truststore) {
            $.truststore = truststore;
            return this;
        }

        public Builder truststore(String truststore) {
            return truststore(Output.of(truststore));
        }

        public Builder tunnelHost(@Nullable Output<String> tunnelHost) {
            $.tunnelHost = tunnelHost;
            return this;
        }

        public Builder tunnelHost(String tunnelHost) {
            return tunnelHost(Output.of(tunnelHost));
        }

        public Builder tunnelPort(@Nullable Output<String> tunnelPort) {
            $.tunnelPort = tunnelPort;
            return this;
        }

        public Builder tunnelPort(String tunnelPort) {
            return tunnelPort(Output.of(tunnelPort));
        }

        public Builder tunnelUser(@Nullable Output<String> tunnelUser) {
            $.tunnelUser = tunnelUser;
            return this;
        }

        public Builder tunnelUser(String tunnelUser) {
            return tunnelUser(Output.of(tunnelUser));
        }

        public Builder uniqueId(@Nullable Output<String> uniqueId) {
            $.uniqueId = uniqueId;
            return this;
        }

        public Builder uniqueId(String uniqueId) {
            return uniqueId(Output.of(uniqueId));
        }

        public Builder updateConfigOnEachSync(@Nullable Output<String> updateConfigOnEachSync) {
            $.updateConfigOnEachSync = updateConfigOnEachSync;
            return this;
        }

        public Builder updateConfigOnEachSync(String updateConfigOnEachSync) {
            return updateConfigOnEachSync(Output.of(updateConfigOnEachSync));
        }

        public Builder updateMethod(@Nullable Output<String> updateMethod) {
            $.updateMethod = updateMethod;
            return this;
        }

        public Builder updateMethod(String updateMethod) {
            return updateMethod(Output.of(updateMethod));
        }

        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public Builder useApiKeys(@Nullable Output<String> useApiKeys) {
            $.useApiKeys = useApiKeys;
            return this;
        }

        public Builder useApiKeys(String useApiKeys) {
            return useApiKeys(Output.of(useApiKeys));
        }

        public Builder useCustomerBucket(@Nullable Output<String> useCustomerBucket) {
            $.useCustomerBucket = useCustomerBucket;
            return this;
        }

        public Builder useCustomerBucket(String useCustomerBucket) {
            return useCustomerBucket(Output.of(useCustomerBucket));
        }

        public Builder useOracleRac(@Nullable Output<String> useOracleRac) {
            $.useOracleRac = useOracleRac;
            return this;
        }

        public Builder useOracleRac(String useOracleRac) {
            return useOracleRac(Output.of(useOracleRac));
        }

        public Builder usePgpEncryptionOptions(@Nullable Output<String> usePgpEncryptionOptions) {
            $.usePgpEncryptionOptions = usePgpEncryptionOptions;
            return this;
        }

        public Builder usePgpEncryptionOptions(String usePgpEncryptionOptions) {
            return usePgpEncryptionOptions(Output.of(usePgpEncryptionOptions));
        }

        public Builder useServiceAccount(@Nullable Output<String> useServiceAccount) {
            $.useServiceAccount = useServiceAccount;
            return this;
        }

        public Builder useServiceAccount(String useServiceAccount) {
            return useServiceAccount(Output.of(useServiceAccount));
        }

        public Builder useTemplateLabels(@Nullable Output<String> useTemplateLabels) {
            $.useTemplateLabels = useTemplateLabels;
            return this;
        }

        public Builder useTemplateLabels(String useTemplateLabels) {
            return useTemplateLabels(Output.of(useTemplateLabels));
        }

        public Builder useWebhooks(@Nullable Output<String> useWebhooks) {
            $.useWebhooks = useWebhooks;
            return this;
        }

        public Builder useWebhooks(String useWebhooks) {
            return useWebhooks(Output.of(useWebhooks));
        }

        public Builder useWorkspace(@Nullable Output<String> useWorkspace) {
            $.useWorkspace = useWorkspace;
            return this;
        }

        public Builder useWorkspace(String useWorkspace) {
            return useWorkspace(Output.of(useWorkspace));
        }

        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        public Builder user(String user) {
            return user(Output.of(user));
        }

        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public Builder userKey(@Nullable Output<String> userKey) {
            $.userKey = userKey;
            return this;
        }

        public Builder userKey(String userKey) {
            return userKey(Output.of(userKey));
        }

        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public Builder userProfiles(@Nullable Output<List<String>> userProfiles) {
            $.userProfiles = userProfiles;
            return this;
        }

        public Builder userProfiles(List<String> userProfiles) {
            return userProfiles(Output.of(userProfiles));
        }

        public Builder userProfiles(String... userProfiles) {
            return userProfiles(List.of(userProfiles));
        }

        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        public Builder username(String username) {
            return username(Output.of(username));
        }

        public Builder viewAttributionWindow(@Nullable Output<String> viewAttributionWindow) {
            $.viewAttributionWindow = viewAttributionWindow;
            return this;
        }

        public Builder viewAttributionWindow(String viewAttributionWindow) {
            return viewAttributionWindow(Output.of(viewAttributionWindow));
        }

        public Builder viewThroughAttributionWindowSize(@Nullable Output<String> viewThroughAttributionWindowSize) {
            $.viewThroughAttributionWindowSize = viewThroughAttributionWindowSize;
            return this;
        }

        public Builder viewThroughAttributionWindowSize(String viewThroughAttributionWindowSize) {
            return viewThroughAttributionWindowSize(Output.of(viewThroughAttributionWindowSize));
        }

        public Builder webhookEndpoint(@Nullable Output<String> webhookEndpoint) {
            $.webhookEndpoint = webhookEndpoint;
            return this;
        }

        public Builder webhookEndpoint(String webhookEndpoint) {
            return webhookEndpoint(Output.of(webhookEndpoint));
        }

        public Builder webhookKey(@Nullable Output<String> webhookKey) {
            $.webhookKey = webhookKey;
            return this;
        }

        public Builder webhookKey(String webhookKey) {
            return webhookKey(Output.of(webhookKey));
        }

        public Builder webhookUrl(@Nullable Output<String> webhookUrl) {
            $.webhookUrl = webhookUrl;
            return this;
        }

        public Builder webhookUrl(String webhookUrl) {
            return webhookUrl(Output.of(webhookUrl));
        }

        public Builder wordPressSiteIdOrWoocommerceDomainName(@Nullable Output<String> wordPressSiteIdOrWoocommerceDomainName) {
            $.wordPressSiteIdOrWoocommerceDomainName = wordPressSiteIdOrWoocommerceDomainName;
            return this;
        }

        public Builder wordPressSiteIdOrWoocommerceDomainName(String wordPressSiteIdOrWoocommerceDomainName) {
            return wordPressSiteIdOrWoocommerceDomainName(Output.of(wordPressSiteIdOrWoocommerceDomainName));
        }

        public Builder workspaceName(@Nullable Output<String> workspaceName) {
            $.workspaceName = workspaceName;
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            return workspaceName(Output.of(workspaceName));
        }

        public Builder workspaceSameAsSource(@Nullable Output<String> workspaceSameAsSource) {
            $.workspaceSameAsSource = workspaceSameAsSource;
            return this;
        }

        public Builder workspaceSameAsSource(String workspaceSameAsSource) {
            return workspaceSameAsSource(Output.of(workspaceSameAsSource));
        }

        public Builder workspaceSchema(@Nullable Output<String> workspaceSchema) {
            $.workspaceSchema = workspaceSchema;
            return this;
        }

        public Builder workspaceSchema(String workspaceSchema) {
            return workspaceSchema(Output.of(workspaceSchema));
        }

        public Builder wsCertificate(@Nullable Output<String> wsCertificate) {
            $.wsCertificate = wsCertificate;
            return this;
        }

        public Builder wsCertificate(String wsCertificate) {
            return wsCertificate(Output.of(wsCertificate));
        }

        public ConnectorConfigArgs build() {
            return $;
        }
    }

}
