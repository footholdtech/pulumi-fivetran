// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorSchemaConfigSchemaTableColumnArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorSchemaConfigSchemaTableColumnArgs Empty = new ConnectorSchemaConfigSchemaTableColumnArgs();

    /**
     * The boolean value specifying whether the sync for the schema into the destination is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<String> enabled;

    /**
     * @return The boolean value specifying whether the sync for the schema into the destination is enabled.
     * 
     */
    public Optional<Output<String>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The boolean value specifying whether a column should be hashed
     * 
     */
    @Import(name="hashed")
    private @Nullable Output<String> hashed;

    /**
     * @return The boolean value specifying whether a column should be hashed
     * 
     */
    public Optional<Output<String>> hashed() {
        return Optional.ofNullable(this.hashed);
    }

    /**
     * The schema name within your destination in accordance with Fivetran conventional rules.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The schema name within your destination in accordance with Fivetran conventional rules.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private ConnectorSchemaConfigSchemaTableColumnArgs() {}

    private ConnectorSchemaConfigSchemaTableColumnArgs(ConnectorSchemaConfigSchemaTableColumnArgs $) {
        this.enabled = $.enabled;
        this.hashed = $.hashed;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorSchemaConfigSchemaTableColumnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorSchemaConfigSchemaTableColumnArgs $;

        public Builder() {
            $ = new ConnectorSchemaConfigSchemaTableColumnArgs();
        }

        public Builder(ConnectorSchemaConfigSchemaTableColumnArgs defaults) {
            $ = new ConnectorSchemaConfigSchemaTableColumnArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled The boolean value specifying whether the sync for the schema into the destination is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<String> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled The boolean value specifying whether the sync for the schema into the destination is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(String enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param hashed The boolean value specifying whether a column should be hashed
         * 
         * @return builder
         * 
         */
        public Builder hashed(@Nullable Output<String> hashed) {
            $.hashed = hashed;
            return this;
        }

        /**
         * @param hashed The boolean value specifying whether a column should be hashed
         * 
         * @return builder
         * 
         */
        public Builder hashed(String hashed) {
            return hashed(Output.of(hashed));
        }

        /**
         * @param name The schema name within your destination in accordance with Fivetran conventional rules.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The schema name within your destination in accordance with Fivetran conventional rules.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ConnectorSchemaConfigSchemaTableColumnArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
