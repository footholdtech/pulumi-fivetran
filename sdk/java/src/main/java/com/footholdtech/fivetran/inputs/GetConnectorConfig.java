// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.footholdtech.fivetran.inputs.GetConnectorConfigAccountsRedditAd;
import com.footholdtech.fivetran.inputs.GetConnectorConfigAdobeAnalyticsConfiguration;
import com.footholdtech.fivetran.inputs.GetConnectorConfigAppIdsAppsflyer;
import com.footholdtech.fivetran.inputs.GetConnectorConfigCustomReport;
import com.footholdtech.fivetran.inputs.GetConnectorConfigCustomTable;
import com.footholdtech.fivetran.inputs.GetConnectorConfigProjectCredential;
import com.footholdtech.fivetran.inputs.GetConnectorConfigReport;
import com.footholdtech.fivetran.inputs.GetConnectorConfigSecretsList;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetConnectorConfig extends com.pulumi.resources.InvokeArgs {

    public static final GetConnectorConfig Empty = new GetConnectorConfig();

    @Import(name="absConnectionMethod", required=true)
    private String absConnectionMethod;

    public String absConnectionMethod() {
        return this.absConnectionMethod;
    }

    @Import(name="absConnectionString", required=true)
    private String absConnectionString;

    public String absConnectionString() {
        return this.absConnectionString;
    }

    @Import(name="absContainerAddress", required=true)
    private String absContainerAddress;

    public String absContainerAddress() {
        return this.absContainerAddress;
    }

    @Import(name="absContainerName", required=true)
    private String absContainerName;

    public String absContainerName() {
        return this.absContainerName;
    }

    @Import(name="absHostIp", required=true)
    private String absHostIp;

    public String absHostIp() {
        return this.absHostIp;
    }

    @Import(name="absHostUser", required=true)
    private String absHostUser;

    public String absHostUser() {
        return this.absHostUser;
    }

    @Import(name="absPrefix", required=true)
    private String absPrefix;

    public String absPrefix() {
        return this.absPrefix;
    }

    @Import(name="absPublicKey", required=true)
    private String absPublicKey;

    public String absPublicKey() {
        return this.absPublicKey;
    }

    @Import(name="accessKey", required=true)
    private String accessKey;

    public String accessKey() {
        return this.accessKey;
    }

    @Import(name="accessKeyId", required=true)
    private String accessKeyId;

    public String accessKeyId() {
        return this.accessKeyId;
    }

    @Import(name="accessKeySecret", required=true)
    private String accessKeySecret;

    public String accessKeySecret() {
        return this.accessKeySecret;
    }

    @Import(name="accessToken", required=true)
    private String accessToken;

    public String accessToken() {
        return this.accessToken;
    }

    @Import(name="accessType", required=true)
    private String accessType;

    public String accessType() {
        return this.accessType;
    }

    @Import(name="account", required=true)
    private String account;

    public String account() {
        return this.account;
    }

    @Import(name="accountId", required=true)
    private String accountId;

    public String accountId() {
        return this.accountId;
    }

    @Import(name="accountIds", required=true)
    private List<String> accountIds;

    public List<String> accountIds() {
        return this.accountIds;
    }

    @Import(name="accountKey", required=true)
    private String accountKey;

    public String accountKey() {
        return this.accountKey;
    }

    @Import(name="accountName", required=true)
    private String accountName;

    public String accountName() {
        return this.accountName;
    }

    @Import(name="accountSyncMode", required=true)
    private String accountSyncMode;

    public String accountSyncMode() {
        return this.accountSyncMode;
    }

    @Import(name="accounts", required=true)
    private List<String> accounts;

    public List<String> accounts() {
        return this.accounts;
    }

    @Import(name="accountsRedditAds", required=true)
    private List<GetConnectorConfigAccountsRedditAd> accountsRedditAds;

    public List<GetConnectorConfigAccountsRedditAd> accountsRedditAds() {
        return this.accountsRedditAds;
    }

    @Import(name="accountsSyncMode", required=true)
    private String accountsSyncMode;

    public String accountsSyncMode() {
        return this.accountsSyncMode;
    }

    @Import(name="actionBreakdowns", required=true)
    private List<String> actionBreakdowns;

    public List<String> actionBreakdowns() {
        return this.actionBreakdowns;
    }

    @Import(name="actionReportTime", required=true)
    private String actionReportTime;

    public String actionReportTime() {
        return this.actionReportTime;
    }

    @Import(name="adAnalytics", required=true)
    private String adAnalytics;

    public String adAnalytics() {
        return this.adAnalytics;
    }

    @Import(name="adUnitView", required=true)
    private String adUnitView;

    public String adUnitView() {
        return this.adUnitView;
    }

    @Import(name="adminApiKey", required=true)
    private String adminApiKey;

    public String adminApiKey() {
        return this.adminApiKey;
    }

    @Import(name="adobeAnalyticsConfigurations", required=true)
    private List<GetConnectorConfigAdobeAnalyticsConfiguration> adobeAnalyticsConfigurations;

    public List<GetConnectorConfigAdobeAnalyticsConfiguration> adobeAnalyticsConfigurations() {
        return this.adobeAnalyticsConfigurations;
    }

    @Import(name="advertisables", required=true)
    private List<String> advertisables;

    public List<String> advertisables() {
        return this.advertisables;
    }

    @Import(name="advertisers", required=true)
    private List<String> advertisers;

    public List<String> advertisers() {
        return this.advertisers;
    }

    @Import(name="advertisersIds", required=true)
    private List<String> advertisersIds;

    public List<String> advertisersIds() {
        return this.advertisersIds;
    }

    @Import(name="advertisersSyncMode", required=true)
    private String advertisersSyncMode;

    public String advertisersSyncMode() {
        return this.advertisersSyncMode;
    }

    @Import(name="agentHost", required=true)
    private String agentHost;

    public String agentHost() {
        return this.agentHost;
    }

    @Import(name="agentOraHome", required=true)
    private String agentOraHome;

    public String agentOraHome() {
        return this.agentOraHome;
    }

    @Import(name="agentPassword", required=true)
    private String agentPassword;

    public String agentPassword() {
        return this.agentPassword;
    }

    @Import(name="agentPort", required=true)
    private String agentPort;

    public String agentPort() {
        return this.agentPort;
    }

    @Import(name="agentPublicCert", required=true)
    private String agentPublicCert;

    public String agentPublicCert() {
        return this.agentPublicCert;
    }

    @Import(name="agentUser", required=true)
    private String agentUser;

    public String agentUser() {
        return this.agentUser;
    }

    @Import(name="aggregation", required=true)
    private String aggregation;

    public String aggregation() {
        return this.aggregation;
    }

    @Import(name="alwaysEncrypted", required=true)
    private String alwaysEncrypted;

    public String alwaysEncrypted() {
        return this.alwaysEncrypted;
    }

    @Import(name="apiAccessToken", required=true)
    private String apiAccessToken;

    public String apiAccessToken() {
        return this.apiAccessToken;
    }

    @Import(name="apiId", required=true)
    private String apiId;

    public String apiId() {
        return this.apiId;
    }

    @Import(name="apiKey", required=true)
    private String apiKey;

    public String apiKey() {
        return this.apiKey;
    }

    @Import(name="apiKeyApiSecret", required=true)
    private String apiKeyApiSecret;

    public String apiKeyApiSecret() {
        return this.apiKeyApiSecret;
    }

    @Import(name="apiKeys", required=true)
    private List<String> apiKeys;

    public List<String> apiKeys() {
        return this.apiKeys;
    }

    @Import(name="apiQuota", required=true)
    private String apiQuota;

    public String apiQuota() {
        return this.apiQuota;
    }

    @Import(name="apiRequestsPerMinute", required=true)
    private String apiRequestsPerMinute;

    public String apiRequestsPerMinute() {
        return this.apiRequestsPerMinute;
    }

    @Import(name="apiSecret", required=true)
    private String apiSecret;

    public String apiSecret() {
        return this.apiSecret;
    }

    @Import(name="apiSecretKey", required=true)
    private String apiSecretKey;

    public String apiSecretKey() {
        return this.apiSecretKey;
    }

    @Import(name="apiToken", required=true)
    private String apiToken;

    public String apiToken() {
        return this.apiToken;
    }

    @Import(name="apiType", required=true)
    private String apiType;

    public String apiType() {
        return this.apiType;
    }

    @Import(name="apiUrl", required=true)
    private String apiUrl;

    public String apiUrl() {
        return this.apiUrl;
    }

    @Import(name="apiUsage", required=true)
    private String apiUsage;

    public String apiUsage() {
        return this.apiUsage;
    }

    @Import(name="apiUtilizationPercentage", required=true)
    private String apiUtilizationPercentage;

    public String apiUtilizationPercentage() {
        return this.apiUtilizationPercentage;
    }

    @Import(name="apiVersion", required=true)
    private String apiVersion;

    public String apiVersion() {
        return this.apiVersion;
    }

    @Import(name="appId", required=true)
    private String appId;

    public String appId() {
        return this.appId;
    }

    @Import(name="appIds", required=true)
    private List<String> appIds;

    public List<String> appIds() {
        return this.appIds;
    }

    @Import(name="appIdsAppsflyers", required=true)
    private List<GetConnectorConfigAppIdsAppsflyer> appIdsAppsflyers;

    public List<GetConnectorConfigAppIdsAppsflyer> appIdsAppsflyers() {
        return this.appIdsAppsflyers;
    }

    @Import(name="appKey", required=true)
    private String appKey;

    public String appKey() {
        return this.appKey;
    }

    @Import(name="appSpecificPassword", required=true)
    private String appSpecificPassword;

    public String appSpecificPassword() {
        return this.appSpecificPassword;
    }

    @Import(name="appSyncMode", required=true)
    private String appSyncMode;

    public String appSyncMode() {
        return this.appSyncMode;
    }

    @Import(name="appendFileOption", required=true)
    private String appendFileOption;

    public String appendFileOption() {
        return this.appendFileOption;
    }

    @Import(name="applicationKey", required=true)
    private String applicationKey;

    public String applicationKey() {
        return this.applicationKey;
    }

    @Import(name="apps", required=true)
    private List<String> apps;

    public List<String> apps() {
        return this.apps;
    }

    @Import(name="archiveLogFormat", required=true)
    private String archiveLogFormat;

    public String archiveLogFormat() {
        return this.archiveLogFormat;
    }

    @Import(name="archiveLogPath", required=true)
    private String archiveLogPath;

    public String archiveLogPath() {
        return this.archiveLogPath;
    }

    @Import(name="archivePattern", required=true)
    private String archivePattern;

    public String archivePattern() {
        return this.archivePattern;
    }

    @Import(name="areSoapCredentialsProvided", required=true)
    private String areSoapCredentialsProvided;

    public String areSoapCredentialsProvided() {
        return this.areSoapCredentialsProvided;
    }

    @Import(name="asbIp", required=true)
    private String asbIp;

    public String asbIp() {
        return this.asbIp;
    }

    @Import(name="asmOption", required=true)
    private String asmOption;

    public String asmOption() {
        return this.asmOption;
    }

    @Import(name="asmOracleHome", required=true)
    private String asmOracleHome;

    public String asmOracleHome() {
        return this.asmOracleHome;
    }

    @Import(name="asmPassword", required=true)
    private String asmPassword;

    public String asmPassword() {
        return this.asmPassword;
    }

    @Import(name="asmTns", required=true)
    private String asmTns;

    public String asmTns() {
        return this.asmTns;
    }

    @Import(name="asmUser", required=true)
    private String asmUser;

    public String asmUser() {
        return this.asmUser;
    }

    @Import(name="attributionWindow", required=true)
    private String attributionWindow;

    public String attributionWindow() {
        return this.attributionWindow;
    }

    @Import(name="attributionWindowSize", required=true)
    private String attributionWindowSize;

    public String attributionWindowSize() {
        return this.attributionWindowSize;
    }

    @Import(name="auth", required=true)
    private String auth;

    public String auth() {
        return this.auth;
    }

    @Import(name="authMethod", required=true)
    private String authMethod;

    public String authMethod() {
        return this.authMethod;
    }

    @Import(name="authMode", required=true)
    private String authMode;

    public String authMode() {
        return this.authMode;
    }

    @Import(name="authType", required=true)
    private String authType;

    public String authType() {
        return this.authType;
    }

    @Import(name="authorizationMethod", required=true)
    private String authorizationMethod;

    public String authorizationMethod() {
        return this.authorizationMethod;
    }

    @Import(name="awsRegionCode", required=true)
    private String awsRegionCode;

    public String awsRegionCode() {
        return this.awsRegionCode;
    }

    @Import(name="baseCurrency", required=true)
    private String baseCurrency;

    public String baseCurrency() {
        return this.baseCurrency;
    }

    @Import(name="baseDomain", required=true)
    private String baseDomain;

    public String baseDomain() {
        return this.baseDomain;
    }

    @Import(name="baseId", required=true)
    private String baseId;

    public String baseId() {
        return this.baseId;
    }

    @Import(name="baseUrl", required=true)
    private String baseUrl;

    public String baseUrl() {
        return this.baseUrl;
    }

    @Import(name="bearerToken", required=true)
    private String bearerToken;

    public String bearerToken() {
        return this.bearerToken;
    }

    @Import(name="blobSasUrl", required=true)
    private String blobSasUrl;

    public String blobSasUrl() {
        return this.blobSasUrl;
    }

    @Import(name="breakdowns", required=true)
    private List<String> breakdowns;

    public List<String> breakdowns() {
        return this.breakdowns;
    }

    @Import(name="bucket", required=true)
    private String bucket;

    public String bucket() {
        return this.bucket;
    }

    @Import(name="bucketName", required=true)
    private String bucketName;

    public String bucketName() {
        return this.bucketName;
    }

    @Import(name="bucketService", required=true)
    private String bucketService;

    public String bucketService() {
        return this.bucketService;
    }

    @Import(name="businessId", required=true)
    private String businessId;

    public String businessId() {
        return this.businessId;
    }

    @Import(name="businessUnitId", required=true)
    private String businessUnitId;

    public String businessUnitId() {
        return this.businessUnitId;
    }

    @Import(name="certificate", required=true)
    private String certificate;

    public String certificate() {
        return this.certificate;
    }

    @Import(name="clickAttributionWindow", required=true)
    private String clickAttributionWindow;

    public String clickAttributionWindow() {
        return this.clickAttributionWindow;
    }

    @Import(name="client", required=true)
    private String client;

    public String client() {
        return this.client;
    }

    @Import(name="clientCert", required=true)
    private String clientCert;

    public String clientCert() {
        return this.clientCert;
    }

    @Import(name="clientCertKey", required=true)
    private String clientCertKey;

    public String clientCertKey() {
        return this.clientCertKey;
    }

    @Import(name="clientId", required=true)
    private String clientId;

    public String clientId() {
        return this.clientId;
    }

    @Import(name="clientKey", required=true)
    private String clientKey;

    public String clientKey() {
        return this.clientKey;
    }

    @Import(name="clientName", required=true)
    private String clientName;

    public String clientName() {
        return this.clientName;
    }

    @Import(name="clientSecret", required=true)
    private String clientSecret;

    public String clientSecret() {
        return this.clientSecret;
    }

    @Import(name="cloudStorageType", required=true)
    private String cloudStorageType;

    public String cloudStorageType() {
        return this.cloudStorageType;
    }

    @Import(name="columns", required=true)
    private List<String> columns;

    public List<String> columns() {
        return this.columns;
    }

    @Import(name="companyId", required=true)
    private String companyId;

    public String companyId() {
        return this.companyId;
    }

    @Import(name="companyKey", required=true)
    private String companyKey;

    public String companyKey() {
        return this.companyKey;
    }

    @Import(name="companyRequestToken", required=true)
    private String companyRequestToken;

    public String companyRequestToken() {
        return this.companyRequestToken;
    }

    @Import(name="companyUuid", required=true)
    private String companyUuid;

    public String companyUuid() {
        return this.companyUuid;
    }

    @Import(name="compression", required=true)
    private String compression;

    public String compression() {
        return this.compression;
    }

    @Import(name="configMethod", required=true)
    private String configMethod;

    public String configMethod() {
        return this.configMethod;
    }

    @Import(name="configRepositoryUrl", required=true)
    private String configRepositoryUrl;

    public String configRepositoryUrl() {
        return this.configRepositoryUrl;
    }

    @Import(name="configType", required=true)
    private String configType;

    public String configType() {
        return this.configType;
    }

    @Import(name="connectingUser", required=true)
    private String connectingUser;

    public String connectingUser() {
        return this.connectingUser;
    }

    @Import(name="connectingUserEmail", required=true)
    private String connectingUserEmail;

    public String connectingUserEmail() {
        return this.connectingUserEmail;
    }

    @Import(name="connectionMethod", required=true)
    private String connectionMethod;

    public String connectionMethod() {
        return this.connectionMethod;
    }

    @Import(name="connectionString", required=true)
    private String connectionString;

    public String connectionString() {
        return this.connectionString;
    }

    @Import(name="connectionType", required=true)
    private String connectionType;

    public String connectionType() {
        return this.connectionType;
    }

    @Import(name="consumerGroup", required=true)
    private String consumerGroup;

    public String consumerGroup() {
        return this.consumerGroup;
    }

    @Import(name="consumerKey", required=true)
    private String consumerKey;

    public String consumerKey() {
        return this.consumerKey;
    }

    @Import(name="consumerSecret", required=true)
    private String consumerSecret;

    public String consumerSecret() {
        return this.consumerSecret;
    }

    @Import(name="containerAddress", required=true)
    private String containerAddress;

    public String containerAddress() {
        return this.containerAddress;
    }

    @Import(name="containerName", required=true)
    private String containerName;

    public String containerName() {
        return this.containerName;
    }

    @Import(name="contentOwnerId", required=true)
    private String contentOwnerId;

    public String contentOwnerId() {
        return this.contentOwnerId;
    }

    @Import(name="conversationWebhookUrl", required=true)
    private String conversationWebhookUrl;

    public String conversationWebhookUrl() {
        return this.conversationWebhookUrl;
    }

    @Import(name="conversionDimensions", required=true)
    private List<String> conversionDimensions;

    public List<String> conversionDimensions() {
        return this.conversionDimensions;
    }

    @Import(name="conversionReportTime", required=true)
    private String conversionReportTime;

    public String conversionReportTime() {
        return this.conversionReportTime;
    }

    @Import(name="conversionWindowSize", required=true)
    private String conversionWindowSize;

    public String conversionWindowSize() {
        return this.conversionWindowSize;
    }

    @Import(name="csvDefinition", required=true)
    private String csvDefinition;

    public String csvDefinition() {
        return this.csvDefinition;
    }

    @Import(name="currency", required=true)
    private String currency;

    public String currency() {
        return this.currency;
    }

    @Import(name="customEventSyncMode", required=true)
    private String customEventSyncMode;

    public String customEventSyncMode() {
        return this.customEventSyncMode;
    }

    @Import(name="customEvents", required=true)
    private List<String> customEvents;

    public List<String> customEvents() {
        return this.customEvents;
    }

    @Import(name="customFieldIds", required=true)
    private List<String> customFieldIds;

    public List<String> customFieldIds() {
        return this.customFieldIds;
    }

    @Import(name="customFloodlightVariables", required=true)
    private List<String> customFloodlightVariables;

    public List<String> customFloodlightVariables() {
        return this.customFloodlightVariables;
    }

    @Import(name="customReports", required=true)
    private List<GetConnectorConfigCustomReport> customReports;

    public List<GetConnectorConfigCustomReport> customReports() {
        return this.customReports;
    }

    @Import(name="customTables", required=true)
    private List<GetConnectorConfigCustomTable> customTables;

    public List<GetConnectorConfigCustomTable> customTables() {
        return this.customTables;
    }

    @Import(name="customerId", required=true)
    private String customerId;

    public String customerId() {
        return this.customerId;
    }

    @Import(name="customerListId", required=true)
    private String customerListId;

    public String customerListId() {
        return this.customerListId;
    }

    @Import(name="dailyApiCallLimit", required=true)
    private String dailyApiCallLimit;

    public String dailyApiCallLimit() {
        return this.dailyApiCallLimit;
    }

    @Import(name="dataAccessMethod", required=true)
    private String dataAccessMethod;

    public String dataAccessMethod() {
        return this.dataAccessMethod;
    }

    @Import(name="dataCenter", required=true)
    private String dataCenter;

    public String dataCenter() {
        return this.dataCenter;
    }

    @Import(name="dataSetName", required=true)
    private String dataSetName;

    public String dataSetName() {
        return this.dataSetName;
    }

    @Import(name="database", required=true)
    private String database;

    public String database() {
        return this.database;
    }

    @Import(name="datasetId", required=true)
    private String datasetId;

    public String datasetId() {
        return this.datasetId;
    }

    @Import(name="datasource", required=true)
    private String datasource;

    public String datasource() {
        return this.datasource;
    }

    @Import(name="dateGranularity", required=true)
    private String dateGranularity;

    public String dateGranularity() {
        return this.dateGranularity;
    }

    @Import(name="delimiter", required=true)
    private String delimiter;

    public String delimiter() {
        return this.delimiter;
    }

    @Import(name="dimensionAttributes", required=true)
    private List<String> dimensionAttributes;

    public List<String> dimensionAttributes() {
        return this.dimensionAttributes;
    }

    @Import(name="dimensions", required=true)
    private List<String> dimensions;

    public List<String> dimensions() {
        return this.dimensions;
    }

    @Import(name="distributedConnectorClusterSize", required=true)
    private String distributedConnectorClusterSize;

    public String distributedConnectorClusterSize() {
        return this.distributedConnectorClusterSize;
    }

    @Import(name="domain", required=true)
    private String domain;

    public String domain() {
        return this.domain;
    }

    @Import(name="domainHostName", required=true)
    private String domainHostName;

    public String domainHostName() {
        return this.domainHostName;
    }

    @Import(name="domainName", required=true)
    private String domainName;

    public String domainName() {
        return this.domainName;
    }

    @Import(name="domainType", required=true)
    private String domainType;

    public String domainType() {
        return this.domainType;
    }

    @Import(name="elements", required=true)
    private List<String> elements;

    public List<String> elements() {
        return this.elements;
    }

    @Import(name="email", required=true)
    private String email;

    public String email() {
        return this.email;
    }

    @Import(name="emptyHeader", required=true)
    private String emptyHeader;

    public String emptyHeader() {
        return this.emptyHeader;
    }

    @Import(name="enableAllDimensionCombinations", required=true)
    private String enableAllDimensionCombinations;

    public String enableAllDimensionCombinations() {
        return this.enableAllDimensionCombinations;
    }

    @Import(name="enableArchiveLogOnly", required=true)
    private String enableArchiveLogOnly;

    public String enableArchiveLogOnly() {
        return this.enableArchiveLogOnly;
    }

    @Import(name="enableDataExtensionsSyncing", required=true)
    private String enableDataExtensionsSyncing;

    public String enableDataExtensionsSyncing() {
        return this.enableDataExtensionsSyncing;
    }

    @Import(name="enableDistributedConnectorMode", required=true)
    private String enableDistributedConnectorMode;

    public String enableDistributedConnectorMode() {
        return this.enableDistributedConnectorMode;
    }

    @Import(name="enableEnrichments", required=true)
    private String enableEnrichments;

    public String enableEnrichments() {
        return this.enableEnrichments;
    }

    @Import(name="enableExports", required=true)
    private String enableExports;

    public String enableExports() {
        return this.enableExports;
    }

    @Import(name="enableTde", required=true)
    private String enableTde;

    public String enableTde() {
        return this.enableTde;
    }

    @Import(name="encodedPublicKey", required=true)
    private String encodedPublicKey;

    public String encodedPublicKey() {
        return this.encodedPublicKey;
    }

    @Import(name="encryptionKey", required=true)
    private String encryptionKey;

    public String encryptionKey() {
        return this.encryptionKey;
    }

    @Import(name="endpoint", required=true)
    private String endpoint;

    public String endpoint() {
        return this.endpoint;
    }

    @Import(name="engagementAttributionWindow", required=true)
    private String engagementAttributionWindow;

    public String engagementAttributionWindow() {
        return this.engagementAttributionWindow;
    }

    @Import(name="enrichedExport", required=true)
    private String enrichedExport;

    public String enrichedExport() {
        return this.enrichedExport;
    }

    @Import(name="entityId", required=true)
    private String entityId;

    public String entityId() {
        return this.entityId;
    }

    @Import(name="environment", required=true)
    private String environment;

    public String environment() {
        return this.environment;
    }

    @Import(name="escapeChar", required=true)
    private String escapeChar;

    public String escapeChar() {
        return this.escapeChar;
    }

    @Import(name="euRegion", required=true)
    private String euRegion;

    public String euRegion() {
        return this.euRegion;
    }

    @Import(name="events", required=true)
    private List<String> events;

    public List<String> events() {
        return this.events;
    }

    @Import(name="exportStorageType", required=true)
    private String exportStorageType;

    public String exportStorageType() {
        return this.exportStorageType;
    }

    @Import(name="externalId", required=true)
    private String externalId;

    public String externalId() {
        return this.externalId;
    }

    @Import(name="fields", required=true)
    private List<String> fields;

    public List<String> fields() {
        return this.fields;
    }

    @Import(name="fileType", required=true)
    private String fileType;

    public String fileType() {
        return this.fileType;
    }

    @Import(name="filter", required=true)
    private String filter;

    public String filter() {
        return this.filter;
    }

    @Import(name="financeAccountSyncMode", required=true)
    private String financeAccountSyncMode;

    public String financeAccountSyncMode() {
        return this.financeAccountSyncMode;
    }

    @Import(name="financeAccounts", required=true)
    private List<String> financeAccounts;

    public List<String> financeAccounts() {
        return this.financeAccounts;
    }

    @Import(name="folder", required=true)
    private String folder;

    public String folder() {
        return this.folder;
    }

    @Import(name="folderId", required=true)
    private String folderId;

    public String folderId() {
        return this.folderId;
    }

    @Import(name="folderPath", required=true)
    private String folderPath;

    public String folderPath() {
        return this.folderPath;
    }

    @Import(name="forecastId", required=true)
    private String forecastId;

    public String forecastId() {
        return this.forecastId;
    }

    @Import(name="ftpHost", required=true)
    private String ftpHost;

    public String ftpHost() {
        return this.ftpHost;
    }

    @Import(name="ftpPassword", required=true)
    private String ftpPassword;

    public String ftpPassword() {
        return this.ftpPassword;
    }

    @Import(name="ftpPort", required=true)
    private String ftpPort;

    public String ftpPort() {
        return this.ftpPort;
    }

    @Import(name="ftpUser", required=true)
    private String ftpUser;

    public String ftpUser() {
        return this.ftpUser;
    }

    @Import(name="function", required=true)
    private String function;

    public String function() {
        return this.function;
    }

    @Import(name="functionApp", required=true)
    private String functionApp;

    public String functionApp() {
        return this.functionApp;
    }

    @Import(name="functionKey", required=true)
    private String functionKey;

    public String functionKey() {
        return this.functionKey;
    }

    @Import(name="functionName", required=true)
    private String functionName;

    public String functionName() {
        return this.functionName;
    }

    @Import(name="functionTrigger", required=true)
    private String functionTrigger;

    public String functionTrigger() {
        return this.functionTrigger;
    }

    @Import(name="gcsBucket", required=true)
    private String gcsBucket;

    public String gcsBucket() {
        return this.gcsBucket;
    }

    @Import(name="gcsFolder", required=true)
    private String gcsFolder;

    public String gcsFolder() {
        return this.gcsFolder;
    }

    @Import(name="groupName", required=true)
    private String groupName;

    public String groupName() {
        return this.groupName;
    }

    @Import(name="hasManagePermissions", required=true)
    private String hasManagePermissions;

    public String hasManagePermissions() {
        return this.hasManagePermissions;
    }

    @Import(name="homeFolder", required=true)
    private String homeFolder;

    public String homeFolder() {
        return this.homeFolder;
    }

    @Import(name="host", required=true)
    private String host;

    public String host() {
        return this.host;
    }

    @Import(name="hostIp", required=true)
    private String hostIp;

    public String hostIp() {
        return this.hostIp;
    }

    @Import(name="hostUser", required=true)
    private String hostUser;

    public String hostUser() {
        return this.hostUser;
    }

    @Import(name="hosts", required=true)
    private List<String> hosts;

    public List<String> hosts() {
        return this.hosts;
    }

    @Import(name="identity", required=true)
    private String identity;

    public String identity() {
        return this.identity;
    }

    @Import(name="includeOcapiEndpoints", required=true)
    private String includeOcapiEndpoints;

    public String includeOcapiEndpoints() {
        return this.includeOcapiEndpoints;
    }

    @Import(name="instance", required=true)
    private String instance;

    public String instance() {
        return this.instance;
    }

    @Import(name="instanceNumber", required=true)
    private String instanceNumber;

    public String instanceNumber() {
        return this.instanceNumber;
    }

    @Import(name="instanceUrl", required=true)
    private String instanceUrl;

    public String instanceUrl() {
        return this.instanceUrl;
    }

    @Import(name="integrationKey", required=true)
    private String integrationKey;

    public String integrationKey() {
        return this.integrationKey;
    }

    @Import(name="isAccountLevelConnector", required=true)
    private String isAccountLevelConnector;

    public String isAccountLevelConnector() {
        return this.isAccountLevelConnector;
    }

    @Import(name="isAuth2Enabled", required=true)
    private String isAuth2Enabled;

    public String isAuth2Enabled() {
        return this.isAuth2Enabled;
    }

    @Import(name="isCustomApiCredentials", required=true)
    private String isCustomApiCredentials;

    public String isCustomApiCredentials() {
        return this.isCustomApiCredentials;
    }

    @Import(name="isExternalActivitiesEndpointSelected", required=true)
    private String isExternalActivitiesEndpointSelected;

    public String isExternalActivitiesEndpointSelected() {
        return this.isExternalActivitiesEndpointSelected;
    }

    @Import(name="isFtps", required=true)
    private String isFtps;

    public String isFtps() {
        return this.isFtps;
    }

    @Import(name="isKeypair", required=true)
    private String isKeypair;

    public String isKeypair() {
        return this.isKeypair;
    }

    @Import(name="isMultiEntityFeatureEnabled", required=true)
    private String isMultiEntityFeatureEnabled;

    public String isMultiEntityFeatureEnabled() {
        return this.isMultiEntityFeatureEnabled;
    }

    @Import(name="isNewPackage", required=true)
    private String isNewPackage;

    public String isNewPackage() {
        return this.isNewPackage;
    }

    @Import(name="isPrivateKeyEncrypted", required=true)
    private String isPrivateKeyEncrypted;

    public String isPrivateKeyEncrypted() {
        return this.isPrivateKeyEncrypted;
    }

    @Import(name="isPrivateLinkRequired", required=true)
    private String isPrivateLinkRequired;

    public String isPrivateLinkRequired() {
        return this.isPrivateLinkRequired;
    }

    @Import(name="isPublic", required=true)
    private String isPublic;

    public String isPublic() {
        return this.isPublic;
    }

    @Import(name="isSailthruConnectEnabled", required=true)
    private String isSailthruConnectEnabled;

    public String isSailthruConnectEnabled() {
        return this.isSailthruConnectEnabled;
    }

    @Import(name="isSecure", required=true)
    private String isSecure;

    public String isSecure() {
        return this.isSecure;
    }

    @Import(name="isSingleTableMode", required=true)
    private String isSingleTableMode;

    public String isSingleTableMode() {
        return this.isSingleTableMode;
    }

    @Import(name="isVendor", required=true)
    private String isVendor;

    public String isVendor() {
        return this.isVendor;
    }

    @Import(name="jsonDeliveryMode", required=true)
    private String jsonDeliveryMode;

    public String jsonDeliveryMode() {
        return this.jsonDeliveryMode;
    }

    @Import(name="key", required=true)
    private String key;

    public String key() {
        return this.key;
    }

    @Import(name="keyPassword", required=true)
    private String keyPassword;

    public String keyPassword() {
        return this.keyPassword;
    }

    @Import(name="keyStoreType", required=true)
    private String keyStoreType;

    public String keyStoreType() {
        return this.keyStoreType;
    }

    @Import(name="keystore", required=true)
    private String keystore;

    public String keystore() {
        return this.keystore;
    }

    @Import(name="keystorePassword", required=true)
    private String keystorePassword;

    public String keystorePassword() {
        return this.keystorePassword;
    }

    @Import(name="lastSyncedChangesUtc_", required=true)
    private String lastSyncedChangesUtc_;

    public String lastSyncedChangesUtc_() {
        return this.lastSyncedChangesUtc_;
    }

    @Import(name="latestVersion", required=true)
    private String latestVersion;

    public String latestVersion() {
        return this.latestVersion;
    }

    @Import(name="limitForApiCallsToExternalActivitiesEndpoint", required=true)
    private String limitForApiCallsToExternalActivitiesEndpoint;

    public String limitForApiCallsToExternalActivitiesEndpoint() {
        return this.limitForApiCallsToExternalActivitiesEndpoint;
    }

    @Import(name="lineSeparator", required=true)
    private String lineSeparator;

    public String lineSeparator() {
        return this.lineSeparator;
    }

    @Import(name="listStrategy", required=true)
    private String listStrategy;

    public String listStrategy() {
        return this.listStrategy;
    }

    @Import(name="listSyncMode", required=true)
    private String listSyncMode;

    public String listSyncMode() {
        return this.listSyncMode;
    }

    @Import(name="logJournal", required=true)
    private String logJournal;

    public String logJournal() {
        return this.logJournal;
    }

    @Import(name="logJournalSchema", required=true)
    private String logJournalSchema;

    public String logJournalSchema() {
        return this.logJournalSchema;
    }

    @Import(name="login", required=true)
    private String login;

    public String login() {
        return this.login;
    }

    @Import(name="loginPassword", required=true)
    private String loginPassword;

    public String loginPassword() {
        return this.loginPassword;
    }

    @Import(name="managerAccounts", required=true)
    private List<String> managerAccounts;

    public List<String> managerAccounts() {
        return this.managerAccounts;
    }

    @Import(name="merchantId", required=true)
    private String merchantId;

    public String merchantId() {
        return this.merchantId;
    }

    @Import(name="messageType", required=true)
    private String messageType;

    public String messageType() {
        return this.messageType;
    }

    @Import(name="metrics", required=true)
    private List<String> metrics;

    public List<String> metrics() {
        return this.metrics;
    }

    @Import(name="namedRange", required=true)
    private String namedRange;

    public String namedRange() {
        return this.namedRange;
    }

    @Import(name="namespace", required=true)
    private String namespace;

    public String namespace() {
        return this.namespace;
    }

    @Import(name="networkCode", required=true)
    private String networkCode;

    public String networkCode() {
        return this.networkCode;
    }

    @Import(name="nullSequence", required=true)
    private String nullSequence;

    public String nullSequence() {
        return this.nullSequence;
    }

    @Import(name="oauthToken", required=true)
    private String oauthToken;

    public String oauthToken() {
        return this.oauthToken;
    }

    @Import(name="oauthTokenSecret", required=true)
    private String oauthTokenSecret;

    public String oauthTokenSecret() {
        return this.oauthTokenSecret;
    }

    @Import(name="ocapiClientId", required=true)
    private String ocapiClientId;

    public String ocapiClientId() {
        return this.ocapiClientId;
    }

    @Import(name="ocapiClientSecret", required=true)
    private String ocapiClientSecret;

    public String ocapiClientSecret() {
        return this.ocapiClientSecret;
    }

    @Import(name="ocapiCustomObjectTypes", required=true)
    private String ocapiCustomObjectTypes;

    public String ocapiCustomObjectTypes() {
        return this.ocapiCustomObjectTypes;
    }

    @Import(name="ocapiHostname", required=true)
    private String ocapiHostname;

    public String ocapiHostname() {
        return this.ocapiHostname;
    }

    @Import(name="onError", required=true)
    private String onError;

    public String onError() {
        return this.onError;
    }

    @Import(name="onPremise", required=true)
    private String onPremise;

    public String onPremise() {
        return this.onPremise;
    }

    @Import(name="organization", required=true)
    private String organization;

    public String organization() {
        return this.organization;
    }

    @Import(name="organizationId", required=true)
    private String organizationId;

    public String organizationId() {
        return this.organizationId;
    }

    @Import(name="organizations", required=true)
    private List<String> organizations;

    public List<String> organizations() {
        return this.organizations;
    }

    @Import(name="packedModeTables", required=true)
    private List<String> packedModeTables;

    public List<String> packedModeTables() {
        return this.packedModeTables;
    }

    @Import(name="packingMode", required=true)
    private String packingMode;

    public String packingMode() {
        return this.packingMode;
    }

    @Import(name="pages", required=true)
    private List<String> pages;

    public List<String> pages() {
        return this.pages;
    }

    @Import(name="partnerCode", required=true)
    private String partnerCode;

    public String partnerCode() {
        return this.partnerCode;
    }

    @Import(name="partners", required=true)
    private List<String> partners;

    public List<String> partners() {
        return this.partners;
    }

    @Import(name="passphrase", required=true)
    private String passphrase;

    public String passphrase() {
        return this.passphrase;
    }

    @Import(name="password", required=true)
    private String password;

    public String password() {
        return this.password;
    }

    @Import(name="pat", required=true)
    private String pat;

    public String pat() {
        return this.pat;
    }

    @Import(name="patName", required=true)
    private String patName;

    public String patName() {
        return this.patName;
    }

    @Import(name="patSecret", required=true)
    private String patSecret;

    public String patSecret() {
        return this.patSecret;
    }

    @Import(name="path", required=true)
    private String path;

    public String path() {
        return this.path;
    }

    @Import(name="pattern", required=true)
    private String pattern;

    public String pattern() {
        return this.pattern;
    }

    @Import(name="pdbName", required=true)
    private String pdbName;

    public String pdbName() {
        return this.pdbName;
    }

    @Import(name="pemCertificate", required=true)
    private String pemCertificate;

    public String pemCertificate() {
        return this.pemCertificate;
    }

    @Import(name="pemPrivateKey", required=true)
    private String pemPrivateKey;

    public String pemPrivateKey() {
        return this.pemPrivateKey;
    }

    @Import(name="perInteractionDimensions", required=true)
    private List<String> perInteractionDimensions;

    public List<String> perInteractionDimensions() {
        return this.perInteractionDimensions;
    }

    @Import(name="personalAccessToken", required=true)
    private String personalAccessToken;

    public String personalAccessToken() {
        return this.personalAccessToken;
    }

    @Import(name="pgpPassPhrase", required=true)
    private String pgpPassPhrase;

    public String pgpPassPhrase() {
        return this.pgpPassPhrase;
    }

    @Import(name="pgpSecretKey", required=true)
    private String pgpSecretKey;

    public String pgpSecretKey() {
        return this.pgpSecretKey;
    }

    @Import(name="phoneNumber", required=true)
    private String phoneNumber;

    public String phoneNumber() {
        return this.phoneNumber;
    }

    @Import(name="port", required=true)
    private String port;

    public String port() {
        return this.port;
    }

    @Import(name="postClickAttributionWindowSize", required=true)
    private String postClickAttributionWindowSize;

    public String postClickAttributionWindowSize() {
        return this.postClickAttributionWindowSize;
    }

    @Import(name="prebuiltReport", required=true)
    private String prebuiltReport;

    public String prebuiltReport() {
        return this.prebuiltReport;
    }

    @Import(name="prefix", required=true)
    private String prefix;

    public String prefix() {
        return this.prefix;
    }

    @Import(name="primaryKeys", required=true)
    private List<String> primaryKeys;

    public List<String> primaryKeys() {
        return this.primaryKeys;
    }

    @Import(name="privateKey", required=true)
    private String privateKey;

    public String privateKey() {
        return this.privateKey;
    }

    @Import(name="profiles", required=true)
    private List<String> profiles;

    public List<String> profiles() {
        return this.profiles;
    }

    @Import(name="projectCredentials", required=true)
    private List<GetConnectorConfigProjectCredential> projectCredentials;

    public List<GetConnectorConfigProjectCredential> projectCredentials() {
        return this.projectCredentials;
    }

    @Import(name="projectId", required=true)
    private String projectId;

    public String projectId() {
        return this.projectId;
    }

    @Import(name="projects", required=true)
    private List<String> projects;

    public List<String> projects() {
        return this.projects;
    }

    @Import(name="properties", required=true)
    private List<String> properties;

    public List<String> properties() {
        return this.properties;
    }

    @Import(name="publicKey", required=true)
    private String publicKey;

    public String publicKey() {
        return this.publicKey;
    }

    @Import(name="publicationName", required=true)
    private String publicationName;

    public String publicationName() {
        return this.publicationName;
    }

    @Import(name="queryId", required=true)
    private String queryId;

    public String queryId() {
        return this.queryId;
    }

    @Import(name="queryParamValue", required=true)
    private String queryParamValue;

    public String queryParamValue() {
        return this.queryParamValue;
    }

    @Import(name="refreshTokenExpiresAt", required=true)
    private String refreshTokenExpiresAt;

    public String refreshTokenExpiresAt() {
        return this.refreshTokenExpiresAt;
    }

    @Import(name="region", required=true)
    private String region;

    public String region() {
        return this.region;
    }

    @Import(name="replicaId", required=true)
    private String replicaId;

    public String replicaId() {
        return this.replicaId;
    }

    @Import(name="replicationSlot", required=true)
    private String replicationSlot;

    public String replicationSlot() {
        return this.replicationSlot;
    }

    @Import(name="reportConfigurationIds", required=true)
    private List<String> reportConfigurationIds;

    public List<String> reportConfigurationIds() {
        return this.reportConfigurationIds;
    }

    @Import(name="reportFormatType", required=true)
    private String reportFormatType;

    public String reportFormatType() {
        return this.reportFormatType;
    }

    @Import(name="reportSuites", required=true)
    private List<String> reportSuites;

    public List<String> reportSuites() {
        return this.reportSuites;
    }

    @Import(name="reportTimezone", required=true)
    private String reportTimezone;

    public String reportTimezone() {
        return this.reportTimezone;
    }

    @Import(name="reportType", required=true)
    private String reportType;

    public String reportType() {
        return this.reportType;
    }

    @Import(name="reportUrl", required=true)
    private String reportUrl;

    public String reportUrl() {
        return this.reportUrl;
    }

    @Import(name="reports", required=true)
    private List<GetConnectorConfigReport> reports;

    public List<GetConnectorConfigReport> reports() {
        return this.reports;
    }

    @Import(name="reportsLinkedinAds", required=true)
    private List<String> reportsLinkedinAds;

    public List<String> reportsLinkedinAds() {
        return this.reportsLinkedinAds;
    }

    @Import(name="repositories", required=true)
    private List<String> repositories;

    public List<String> repositories() {
        return this.repositories;
    }

    @Import(name="resourceToken", required=true)
    private String resourceToken;

    public String resourceToken() {
        return this.resourceToken;
    }

    @Import(name="resourceUrl", required=true)
    private String resourceUrl;

    public String resourceUrl() {
        return this.resourceUrl;
    }

    @Import(name="restApiLimit", required=true)
    private String restApiLimit;

    public String restApiLimit() {
        return this.restApiLimit;
    }

    @Import(name="rfcLibraryPath", required=true)
    private String rfcLibraryPath;

    public String rfcLibraryPath() {
        return this.rfcLibraryPath;
    }

    @Import(name="role", required=true)
    private String role;

    public String role() {
        return this.role;
    }

    @Import(name="roleArn", required=true)
    private String roleArn;

    public String roleArn() {
        return this.roleArn;
    }

    @Import(name="rollbackWindowSize", required=true)
    private String rollbackWindowSize;

    public String rollbackWindowSize() {
        return this.rollbackWindowSize;
    }

    @Import(name="s3Bucket", required=true)
    private String s3Bucket;

    public String s3Bucket() {
        return this.s3Bucket;
    }

    @Import(name="s3ExportBucket", required=true)
    private String s3ExportBucket;

    public String s3ExportBucket() {
        return this.s3ExportBucket;
    }

    @Import(name="s3ExportFolder", required=true)
    private String s3ExportFolder;

    public String s3ExportFolder() {
        return this.s3ExportFolder;
    }

    @Import(name="s3ExportRoleArn", required=true)
    private String s3ExportRoleArn;

    public String s3ExportRoleArn() {
        return this.s3ExportRoleArn;
    }

    @Import(name="s3RoleArn", required=true)
    private String s3RoleArn;

    public String s3RoleArn() {
        return this.s3RoleArn;
    }

    @Import(name="s3bucket", required=true)
    private String s3bucket;

    public String s3bucket() {
        return this.s3bucket;
    }

    @Import(name="s3externalId", required=true)
    private String s3externalId;

    public String s3externalId() {
        return this.s3externalId;
    }

    @Import(name="s3folder", required=true)
    private String s3folder;

    public String s3folder() {
        return this.s3folder;
    }

    @Import(name="s3path", required=true)
    private String s3path;

    public String s3path() {
        return this.s3path;
    }

    @Import(name="s3roleArn", required=true)
    private String s3roleArn;

    public String s3roleArn() {
        return this.s3roleArn;
    }

    @Import(name="salesAccountSyncMode", required=true)
    private String salesAccountSyncMode;

    public String salesAccountSyncMode() {
        return this.salesAccountSyncMode;
    }

    @Import(name="salesAccounts", required=true)
    private List<String> salesAccounts;

    public List<String> salesAccounts() {
        return this.salesAccounts;
    }

    @Import(name="salesforceSecurityToken", required=true)
    private String salesforceSecurityToken;

    public String salesforceSecurityToken() {
        return this.salesforceSecurityToken;
    }

    @Import(name="sandboxAccount", required=true)
    private String sandboxAccount;

    public String sandboxAccount() {
        return this.sandboxAccount;
    }

    @Import(name="sapSchema", required=true)
    private String sapSchema;

    public String sapSchema() {
        return this.sapSchema;
    }

    @Import(name="sapUser", required=true)
    private String sapUser;

    public String sapUser() {
        return this.sapUser;
    }

    @Import(name="saslMechanism", required=true)
    private String saslMechanism;

    public String saslMechanism() {
        return this.saslMechanism;
    }

    @Import(name="saslPlainKey", required=true)
    private String saslPlainKey;

    public String saslPlainKey() {
        return this.saslPlainKey;
    }

    @Import(name="saslPlainSecret", required=true)
    private String saslPlainSecret;

    public String saslPlainSecret() {
        return this.saslPlainSecret;
    }

    @Import(name="saslScram256Key", required=true)
    private String saslScram256Key;

    public String saslScram256Key() {
        return this.saslScram256Key;
    }

    @Import(name="saslScram256Secret", required=true)
    private String saslScram256Secret;

    public String saslScram256Secret() {
        return this.saslScram256Secret;
    }

    @Import(name="saslScram512Key", required=true)
    private String saslScram512Key;

    public String saslScram512Key() {
        return this.saslScram512Key;
    }

    @Import(name="saslScram512Secret", required=true)
    private String saslScram512Secret;

    public String saslScram512Secret() {
        return this.saslScram512Secret;
    }

    @Import(name="schemaRegistryCredentialsSource", required=true)
    private String schemaRegistryCredentialsSource;

    public String schemaRegistryCredentialsSource() {
        return this.schemaRegistryCredentialsSource;
    }

    @Import(name="schemaRegistryKey", required=true)
    private String schemaRegistryKey;

    public String schemaRegistryKey() {
        return this.schemaRegistryKey;
    }

    @Import(name="schemaRegistrySecret", required=true)
    private String schemaRegistrySecret;

    public String schemaRegistrySecret() {
        return this.schemaRegistrySecret;
    }

    @Import(name="schemaRegistryUrls", required=true)
    private List<String> schemaRegistryUrls;

    public List<String> schemaRegistryUrls() {
        return this.schemaRegistryUrls;
    }

    @Import(name="secret", required=true)
    private String secret;

    public String secret() {
        return this.secret;
    }

    @Import(name="secretKey", required=true)
    private String secretKey;

    public String secretKey() {
        return this.secretKey;
    }

    @Import(name="secrets", required=true)
    private String secrets;

    public String secrets() {
        return this.secrets;
    }

    @Import(name="secretsLists", required=true)
    private List<GetConnectorConfigSecretsList> secretsLists;

    public List<GetConnectorConfigSecretsList> secretsLists() {
        return this.secretsLists;
    }

    @Import(name="securityProtocol", required=true)
    private String securityProtocol;

    public String securityProtocol() {
        return this.securityProtocol;
    }

    @Import(name="segments", required=true)
    private List<String> segments;

    public List<String> segments() {
        return this.segments;
    }

    @Import(name="selectedExports", required=true)
    private List<String> selectedExports;

    public List<String> selectedExports() {
        return this.selectedExports;
    }

    @Import(name="senderId", required=true)
    private String senderId;

    public String senderId() {
        return this.senderId;
    }

    @Import(name="senderPassword", required=true)
    private String senderPassword;

    public String senderPassword() {
        return this.senderPassword;
    }

    @Import(name="serverAddress", required=true)
    private String serverAddress;

    public String serverAddress() {
        return this.serverAddress;
    }

    @Import(name="serverUrl", required=true)
    private String serverUrl;

    public String serverUrl() {
        return this.serverUrl;
    }

    @Import(name="servers", required=true)
    private List<String> servers;

    public List<String> servers() {
        return this.servers;
    }

    @Import(name="serviceAccount", required=true)
    private String serviceAccount;

    public String serviceAccount() {
        return this.serviceAccount;
    }

    @Import(name="serviceAccountEmail", required=true)
    private String serviceAccountEmail;

    public String serviceAccountEmail() {
        return this.serviceAccountEmail;
    }

    @Import(name="serviceAccountKey", required=true)
    private String serviceAccountKey;

    public String serviceAccountKey() {
        return this.serviceAccountKey;
    }

    @Import(name="serviceVersion", required=true)
    private String serviceVersion;

    public String serviceVersion() {
        return this.serviceVersion;
    }

    @Import(name="sftpHost", required=true)
    private String sftpHost;

    public String sftpHost() {
        return this.sftpHost;
    }

    @Import(name="sftpIsKeyPair", required=true)
    private String sftpIsKeyPair;

    public String sftpIsKeyPair() {
        return this.sftpIsKeyPair;
    }

    @Import(name="sftpPassword", required=true)
    private String sftpPassword;

    public String sftpPassword() {
        return this.sftpPassword;
    }

    @Import(name="sftpPort", required=true)
    private String sftpPort;

    public String sftpPort() {
        return this.sftpPort;
    }

    @Import(name="sftpPublicKey", required=true)
    private String sftpPublicKey;

    public String sftpPublicKey() {
        return this.sftpPublicKey;
    }

    @Import(name="sftpUser", required=true)
    private String sftpUser;

    public String sftpUser() {
        return this.sftpUser;
    }

    @Import(name="shareUrl", required=true)
    private String shareUrl;

    public String shareUrl() {
        return this.shareUrl;
    }

    @Import(name="sheetId", required=true)
    private String sheetId;

    public String sheetId() {
        return this.sheetId;
    }

    @Import(name="shop", required=true)
    private String shop;

    public String shop() {
        return this.shop;
    }

    @Import(name="shortCode", required=true)
    private String shortCode;

    public String shortCode() {
        return this.shortCode;
    }

    @Import(name="showRecordsWithNoMetrics", required=true)
    private String showRecordsWithNoMetrics;

    public String showRecordsWithNoMetrics() {
        return this.showRecordsWithNoMetrics;
    }

    @Import(name="sid", required=true)
    private String sid;

    public String sid() {
        return this.sid;
    }

    @Import(name="signerPublicKey", required=true)
    private String signerPublicKey;

    public String signerPublicKey() {
        return this.signerPublicKey;
    }

    @Import(name="siteAddress", required=true)
    private String siteAddress;

    public String siteAddress() {
        return this.siteAddress;
    }

    @Import(name="siteId", required=true)
    private String siteId;

    public String siteId() {
        return this.siteId;
    }

    @Import(name="siteName", required=true)
    private String siteName;

    public String siteName() {
        return this.siteName;
    }

    @Import(name="siteUrls", required=true)
    private List<String> siteUrls;

    public List<String> siteUrls() {
        return this.siteUrls;
    }

    @Import(name="skipAfter", required=true)
    private String skipAfter;

    public String skipAfter() {
        return this.skipAfter;
    }

    @Import(name="skipBefore", required=true)
    private String skipBefore;

    public String skipBefore() {
        return this.skipBefore;
    }

    @Import(name="soapUri", required=true)
    private String soapUri;

    public String soapUri() {
        return this.soapUri;
    }

    @Import(name="socialDataSyncTimeframe", required=true)
    private String socialDataSyncTimeframe;

    public String socialDataSyncTimeframe() {
        return this.socialDataSyncTimeframe;
    }

    @Import(name="source", required=true)
    private String source;

    public String source() {
        return this.source;
    }

    @Import(name="storeHash", required=true)
    private String storeHash;

    public String storeHash() {
        return this.storeHash;
    }

    @Import(name="subDomain", required=true)
    private String subDomain;

    public String subDomain() {
        return this.subDomain;
    }

    @Import(name="subdomain", required=true)
    private String subdomain;

    public String subdomain() {
        return this.subdomain;
    }

    @Import(name="subscriberName", required=true)
    private String subscriberName;

    public String subscriberName() {
        return this.subscriberName;
    }

    @Import(name="subscription", required=true)
    private String subscription;

    public String subscription() {
        return this.subscription;
    }

    @Import(name="supportConnectedAccountsSync", required=true)
    private String supportConnectedAccountsSync;

    public String supportConnectedAccountsSync() {
        return this.supportConnectedAccountsSync;
    }

    @Import(name="supportNestedColumns", required=true)
    private String supportNestedColumns;

    public String supportNestedColumns() {
        return this.supportNestedColumns;
    }

    @Import(name="surveyIds", required=true)
    private String surveyIds;

    public String surveyIds() {
        return this.surveyIds;
    }

    @Import(name="swipeAttributionWindow", required=true)
    private String swipeAttributionWindow;

    public String swipeAttributionWindow() {
        return this.swipeAttributionWindow;
    }

    @Import(name="syncDataLocker", required=true)
    private String syncDataLocker;

    public String syncDataLocker() {
        return this.syncDataLocker;
    }

    @Import(name="syncFormat", required=true)
    private String syncFormat;

    public String syncFormat() {
        return this.syncFormat;
    }

    @Import(name="syncFormulaFields", required=true)
    private String syncFormulaFields;

    public String syncFormulaFields() {
        return this.syncFormulaFields;
    }

    @Import(name="syncMetadata", required=true)
    private String syncMetadata;

    public String syncMetadata() {
        return this.syncMetadata;
    }

    @Import(name="syncMethod", required=true)
    private String syncMethod;

    public String syncMethod() {
        return this.syncMethod;
    }

    @Import(name="syncMode", required=true)
    private String syncMode;

    public String syncMode() {
        return this.syncMode;
    }

    @Import(name="syncMultipleAccounts", required=true)
    private String syncMultipleAccounts;

    public String syncMultipleAccounts() {
        return this.syncMultipleAccounts;
    }

    @Import(name="syncPackMode", required=true)
    private String syncPackMode;

    public String syncPackMode() {
        return this.syncPackMode;
    }

    @Import(name="syncPullApi", required=true)
    private String syncPullApi;

    public String syncPullApi() {
        return this.syncPullApi;
    }

    @Import(name="syncType", required=true)
    private String syncType;

    public String syncType() {
        return this.syncType;
    }

    @Import(name="sysnr", required=true)
    private String sysnr;

    public String sysnr() {
        return this.sysnr;
    }

    @Import(name="tableName", required=true)
    private String tableName;

    public String tableName() {
        return this.tableName;
    }

    @Import(name="tdeCertificate", required=true)
    private String tdeCertificate;

    public String tdeCertificate() {
        return this.tdeCertificate;
    }

    @Import(name="tdeCertificateName", required=true)
    private String tdeCertificateName;

    public String tdeCertificateName() {
        return this.tdeCertificateName;
    }

    @Import(name="tdePassword", required=true)
    private String tdePassword;

    public String tdePassword() {
        return this.tdePassword;
    }

    @Import(name="tdePrivateKey", required=true)
    private String tdePrivateKey;

    public String tdePrivateKey() {
        return this.tdePrivateKey;
    }

    @Import(name="teamId", required=true)
    private String teamId;

    public String teamId() {
        return this.teamId;
    }

    @Import(name="technicalAccountId", required=true)
    private String technicalAccountId;

    public String technicalAccountId() {
        return this.technicalAccountId;
    }

    @Import(name="templateLabels", required=true)
    private List<String> templateLabels;

    public List<String> templateLabels() {
        return this.templateLabels;
    }

    @Import(name="tenant", required=true)
    private String tenant;

    public String tenant() {
        return this.tenant;
    }

    @Import(name="tenantId", required=true)
    private String tenantId;

    public String tenantId() {
        return this.tenantId;
    }

    @Import(name="testTableName", required=true)
    private String testTableName;

    public String testTableName() {
        return this.testTableName;
    }

    @Import(name="timeZone", required=true)
    private String timeZone;

    public String timeZone() {
        return this.timeZone;
    }

    @Import(name="timeframeMonths", required=true)
    private String timeframeMonths;

    public String timeframeMonths() {
        return this.timeframeMonths;
    }

    @Import(name="tns", required=true)
    private String tns;

    public String tns() {
        return this.tns;
    }

    @Import(name="tokenAuthenticatedContainer", required=true)
    private String tokenAuthenticatedContainer;

    public String tokenAuthenticatedContainer() {
        return this.tokenAuthenticatedContainer;
    }

    @Import(name="tokenAuthenticatedDatabase", required=true)
    private String tokenAuthenticatedDatabase;

    public String tokenAuthenticatedDatabase() {
        return this.tokenAuthenticatedDatabase;
    }

    @Import(name="tokenId", required=true)
    private String tokenId;

    public String tokenId() {
        return this.tokenId;
    }

    @Import(name="tokenKey", required=true)
    private String tokenKey;

    public String tokenKey() {
        return this.tokenKey;
    }

    @Import(name="tokenSecret", required=true)
    private String tokenSecret;

    public String tokenSecret() {
        return this.tokenSecret;
    }

    @Import(name="tokenSecretKey", required=true)
    private String tokenSecretKey;

    public String tokenSecretKey() {
        return this.tokenSecretKey;
    }

    @Import(name="topics", required=true)
    private List<String> topics;

    public List<String> topics() {
        return this.topics;
    }

    @Import(name="trustStoreType", required=true)
    private String trustStoreType;

    public String trustStoreType() {
        return this.trustStoreType;
    }

    @Import(name="trustedCert", required=true)
    private String trustedCert;

    public String trustedCert() {
        return this.trustedCert;
    }

    @Import(name="truststore", required=true)
    private String truststore;

    public String truststore() {
        return this.truststore;
    }

    @Import(name="tunnelHost", required=true)
    private String tunnelHost;

    public String tunnelHost() {
        return this.tunnelHost;
    }

    @Import(name="tunnelPort", required=true)
    private String tunnelPort;

    public String tunnelPort() {
        return this.tunnelPort;
    }

    @Import(name="tunnelUser", required=true)
    private String tunnelUser;

    public String tunnelUser() {
        return this.tunnelUser;
    }

    @Import(name="uniqueId", required=true)
    private String uniqueId;

    public String uniqueId() {
        return this.uniqueId;
    }

    @Import(name="updateConfigOnEachSync", required=true)
    private String updateConfigOnEachSync;

    public String updateConfigOnEachSync() {
        return this.updateConfigOnEachSync;
    }

    @Import(name="updateMethod", required=true)
    private String updateMethod;

    public String updateMethod() {
        return this.updateMethod;
    }

    @Import(name="uri", required=true)
    private String uri;

    public String uri() {
        return this.uri;
    }

    @Import(name="useApiKeys", required=true)
    private String useApiKeys;

    public String useApiKeys() {
        return this.useApiKeys;
    }

    @Import(name="useCustomerBucket", required=true)
    private String useCustomerBucket;

    public String useCustomerBucket() {
        return this.useCustomerBucket;
    }

    @Import(name="useOracleRac", required=true)
    private String useOracleRac;

    public String useOracleRac() {
        return this.useOracleRac;
    }

    @Import(name="usePgpEncryptionOptions", required=true)
    private String usePgpEncryptionOptions;

    public String usePgpEncryptionOptions() {
        return this.usePgpEncryptionOptions;
    }

    @Import(name="useServiceAccount", required=true)
    private String useServiceAccount;

    public String useServiceAccount() {
        return this.useServiceAccount;
    }

    @Import(name="useTemplateLabels", required=true)
    private String useTemplateLabels;

    public String useTemplateLabels() {
        return this.useTemplateLabels;
    }

    @Import(name="useWebhooks", required=true)
    private String useWebhooks;

    public String useWebhooks() {
        return this.useWebhooks;
    }

    @Import(name="useWorkspace", required=true)
    private String useWorkspace;

    public String useWorkspace() {
        return this.useWorkspace;
    }

    @Import(name="user", required=true)
    private String user;

    public String user() {
        return this.user;
    }

    @Import(name="userId", required=true)
    private String userId;

    public String userId() {
        return this.userId;
    }

    @Import(name="userKey", required=true)
    private String userKey;

    public String userKey() {
        return this.userKey;
    }

    @Import(name="userName", required=true)
    private String userName;

    public String userName() {
        return this.userName;
    }

    @Import(name="userProfiles", required=true)
    private List<String> userProfiles;

    public List<String> userProfiles() {
        return this.userProfiles;
    }

    @Import(name="username", required=true)
    private String username;

    public String username() {
        return this.username;
    }

    @Import(name="viewAttributionWindow", required=true)
    private String viewAttributionWindow;

    public String viewAttributionWindow() {
        return this.viewAttributionWindow;
    }

    @Import(name="viewThroughAttributionWindowSize", required=true)
    private String viewThroughAttributionWindowSize;

    public String viewThroughAttributionWindowSize() {
        return this.viewThroughAttributionWindowSize;
    }

    @Import(name="webhookEndpoint", required=true)
    private String webhookEndpoint;

    public String webhookEndpoint() {
        return this.webhookEndpoint;
    }

    @Import(name="webhookKey", required=true)
    private String webhookKey;

    public String webhookKey() {
        return this.webhookKey;
    }

    @Import(name="webhookUrl", required=true)
    private String webhookUrl;

    public String webhookUrl() {
        return this.webhookUrl;
    }

    @Import(name="wordPressSiteIdOrWoocommerceDomainName", required=true)
    private String wordPressSiteIdOrWoocommerceDomainName;

    public String wordPressSiteIdOrWoocommerceDomainName() {
        return this.wordPressSiteIdOrWoocommerceDomainName;
    }

    @Import(name="workspaceName", required=true)
    private String workspaceName;

    public String workspaceName() {
        return this.workspaceName;
    }

    @Import(name="workspaceSameAsSource", required=true)
    private String workspaceSameAsSource;

    public String workspaceSameAsSource() {
        return this.workspaceSameAsSource;
    }

    @Import(name="workspaceSchema", required=true)
    private String workspaceSchema;

    public String workspaceSchema() {
        return this.workspaceSchema;
    }

    @Import(name="wsCertificate", required=true)
    private String wsCertificate;

    public String wsCertificate() {
        return this.wsCertificate;
    }

    private GetConnectorConfig() {}

    private GetConnectorConfig(GetConnectorConfig $) {
        this.absConnectionMethod = $.absConnectionMethod;
        this.absConnectionString = $.absConnectionString;
        this.absContainerAddress = $.absContainerAddress;
        this.absContainerName = $.absContainerName;
        this.absHostIp = $.absHostIp;
        this.absHostUser = $.absHostUser;
        this.absPrefix = $.absPrefix;
        this.absPublicKey = $.absPublicKey;
        this.accessKey = $.accessKey;
        this.accessKeyId = $.accessKeyId;
        this.accessKeySecret = $.accessKeySecret;
        this.accessToken = $.accessToken;
        this.accessType = $.accessType;
        this.account = $.account;
        this.accountId = $.accountId;
        this.accountIds = $.accountIds;
        this.accountKey = $.accountKey;
        this.accountName = $.accountName;
        this.accountSyncMode = $.accountSyncMode;
        this.accounts = $.accounts;
        this.accountsRedditAds = $.accountsRedditAds;
        this.accountsSyncMode = $.accountsSyncMode;
        this.actionBreakdowns = $.actionBreakdowns;
        this.actionReportTime = $.actionReportTime;
        this.adAnalytics = $.adAnalytics;
        this.adUnitView = $.adUnitView;
        this.adminApiKey = $.adminApiKey;
        this.adobeAnalyticsConfigurations = $.adobeAnalyticsConfigurations;
        this.advertisables = $.advertisables;
        this.advertisers = $.advertisers;
        this.advertisersIds = $.advertisersIds;
        this.advertisersSyncMode = $.advertisersSyncMode;
        this.agentHost = $.agentHost;
        this.agentOraHome = $.agentOraHome;
        this.agentPassword = $.agentPassword;
        this.agentPort = $.agentPort;
        this.agentPublicCert = $.agentPublicCert;
        this.agentUser = $.agentUser;
        this.aggregation = $.aggregation;
        this.alwaysEncrypted = $.alwaysEncrypted;
        this.apiAccessToken = $.apiAccessToken;
        this.apiId = $.apiId;
        this.apiKey = $.apiKey;
        this.apiKeyApiSecret = $.apiKeyApiSecret;
        this.apiKeys = $.apiKeys;
        this.apiQuota = $.apiQuota;
        this.apiRequestsPerMinute = $.apiRequestsPerMinute;
        this.apiSecret = $.apiSecret;
        this.apiSecretKey = $.apiSecretKey;
        this.apiToken = $.apiToken;
        this.apiType = $.apiType;
        this.apiUrl = $.apiUrl;
        this.apiUsage = $.apiUsage;
        this.apiUtilizationPercentage = $.apiUtilizationPercentage;
        this.apiVersion = $.apiVersion;
        this.appId = $.appId;
        this.appIds = $.appIds;
        this.appIdsAppsflyers = $.appIdsAppsflyers;
        this.appKey = $.appKey;
        this.appSpecificPassword = $.appSpecificPassword;
        this.appSyncMode = $.appSyncMode;
        this.appendFileOption = $.appendFileOption;
        this.applicationKey = $.applicationKey;
        this.apps = $.apps;
        this.archiveLogFormat = $.archiveLogFormat;
        this.archiveLogPath = $.archiveLogPath;
        this.archivePattern = $.archivePattern;
        this.areSoapCredentialsProvided = $.areSoapCredentialsProvided;
        this.asbIp = $.asbIp;
        this.asmOption = $.asmOption;
        this.asmOracleHome = $.asmOracleHome;
        this.asmPassword = $.asmPassword;
        this.asmTns = $.asmTns;
        this.asmUser = $.asmUser;
        this.attributionWindow = $.attributionWindow;
        this.attributionWindowSize = $.attributionWindowSize;
        this.auth = $.auth;
        this.authMethod = $.authMethod;
        this.authMode = $.authMode;
        this.authType = $.authType;
        this.authorizationMethod = $.authorizationMethod;
        this.awsRegionCode = $.awsRegionCode;
        this.baseCurrency = $.baseCurrency;
        this.baseDomain = $.baseDomain;
        this.baseId = $.baseId;
        this.baseUrl = $.baseUrl;
        this.bearerToken = $.bearerToken;
        this.blobSasUrl = $.blobSasUrl;
        this.breakdowns = $.breakdowns;
        this.bucket = $.bucket;
        this.bucketName = $.bucketName;
        this.bucketService = $.bucketService;
        this.businessId = $.businessId;
        this.businessUnitId = $.businessUnitId;
        this.certificate = $.certificate;
        this.clickAttributionWindow = $.clickAttributionWindow;
        this.client = $.client;
        this.clientCert = $.clientCert;
        this.clientCertKey = $.clientCertKey;
        this.clientId = $.clientId;
        this.clientKey = $.clientKey;
        this.clientName = $.clientName;
        this.clientSecret = $.clientSecret;
        this.cloudStorageType = $.cloudStorageType;
        this.columns = $.columns;
        this.companyId = $.companyId;
        this.companyKey = $.companyKey;
        this.companyRequestToken = $.companyRequestToken;
        this.companyUuid = $.companyUuid;
        this.compression = $.compression;
        this.configMethod = $.configMethod;
        this.configRepositoryUrl = $.configRepositoryUrl;
        this.configType = $.configType;
        this.connectingUser = $.connectingUser;
        this.connectingUserEmail = $.connectingUserEmail;
        this.connectionMethod = $.connectionMethod;
        this.connectionString = $.connectionString;
        this.connectionType = $.connectionType;
        this.consumerGroup = $.consumerGroup;
        this.consumerKey = $.consumerKey;
        this.consumerSecret = $.consumerSecret;
        this.containerAddress = $.containerAddress;
        this.containerName = $.containerName;
        this.contentOwnerId = $.contentOwnerId;
        this.conversationWebhookUrl = $.conversationWebhookUrl;
        this.conversionDimensions = $.conversionDimensions;
        this.conversionReportTime = $.conversionReportTime;
        this.conversionWindowSize = $.conversionWindowSize;
        this.csvDefinition = $.csvDefinition;
        this.currency = $.currency;
        this.customEventSyncMode = $.customEventSyncMode;
        this.customEvents = $.customEvents;
        this.customFieldIds = $.customFieldIds;
        this.customFloodlightVariables = $.customFloodlightVariables;
        this.customReports = $.customReports;
        this.customTables = $.customTables;
        this.customerId = $.customerId;
        this.customerListId = $.customerListId;
        this.dailyApiCallLimit = $.dailyApiCallLimit;
        this.dataAccessMethod = $.dataAccessMethod;
        this.dataCenter = $.dataCenter;
        this.dataSetName = $.dataSetName;
        this.database = $.database;
        this.datasetId = $.datasetId;
        this.datasource = $.datasource;
        this.dateGranularity = $.dateGranularity;
        this.delimiter = $.delimiter;
        this.dimensionAttributes = $.dimensionAttributes;
        this.dimensions = $.dimensions;
        this.distributedConnectorClusterSize = $.distributedConnectorClusterSize;
        this.domain = $.domain;
        this.domainHostName = $.domainHostName;
        this.domainName = $.domainName;
        this.domainType = $.domainType;
        this.elements = $.elements;
        this.email = $.email;
        this.emptyHeader = $.emptyHeader;
        this.enableAllDimensionCombinations = $.enableAllDimensionCombinations;
        this.enableArchiveLogOnly = $.enableArchiveLogOnly;
        this.enableDataExtensionsSyncing = $.enableDataExtensionsSyncing;
        this.enableDistributedConnectorMode = $.enableDistributedConnectorMode;
        this.enableEnrichments = $.enableEnrichments;
        this.enableExports = $.enableExports;
        this.enableTde = $.enableTde;
        this.encodedPublicKey = $.encodedPublicKey;
        this.encryptionKey = $.encryptionKey;
        this.endpoint = $.endpoint;
        this.engagementAttributionWindow = $.engagementAttributionWindow;
        this.enrichedExport = $.enrichedExport;
        this.entityId = $.entityId;
        this.environment = $.environment;
        this.escapeChar = $.escapeChar;
        this.euRegion = $.euRegion;
        this.events = $.events;
        this.exportStorageType = $.exportStorageType;
        this.externalId = $.externalId;
        this.fields = $.fields;
        this.fileType = $.fileType;
        this.filter = $.filter;
        this.financeAccountSyncMode = $.financeAccountSyncMode;
        this.financeAccounts = $.financeAccounts;
        this.folder = $.folder;
        this.folderId = $.folderId;
        this.folderPath = $.folderPath;
        this.forecastId = $.forecastId;
        this.ftpHost = $.ftpHost;
        this.ftpPassword = $.ftpPassword;
        this.ftpPort = $.ftpPort;
        this.ftpUser = $.ftpUser;
        this.function = $.function;
        this.functionApp = $.functionApp;
        this.functionKey = $.functionKey;
        this.functionName = $.functionName;
        this.functionTrigger = $.functionTrigger;
        this.gcsBucket = $.gcsBucket;
        this.gcsFolder = $.gcsFolder;
        this.groupName = $.groupName;
        this.hasManagePermissions = $.hasManagePermissions;
        this.homeFolder = $.homeFolder;
        this.host = $.host;
        this.hostIp = $.hostIp;
        this.hostUser = $.hostUser;
        this.hosts = $.hosts;
        this.identity = $.identity;
        this.includeOcapiEndpoints = $.includeOcapiEndpoints;
        this.instance = $.instance;
        this.instanceNumber = $.instanceNumber;
        this.instanceUrl = $.instanceUrl;
        this.integrationKey = $.integrationKey;
        this.isAccountLevelConnector = $.isAccountLevelConnector;
        this.isAuth2Enabled = $.isAuth2Enabled;
        this.isCustomApiCredentials = $.isCustomApiCredentials;
        this.isExternalActivitiesEndpointSelected = $.isExternalActivitiesEndpointSelected;
        this.isFtps = $.isFtps;
        this.isKeypair = $.isKeypair;
        this.isMultiEntityFeatureEnabled = $.isMultiEntityFeatureEnabled;
        this.isNewPackage = $.isNewPackage;
        this.isPrivateKeyEncrypted = $.isPrivateKeyEncrypted;
        this.isPrivateLinkRequired = $.isPrivateLinkRequired;
        this.isPublic = $.isPublic;
        this.isSailthruConnectEnabled = $.isSailthruConnectEnabled;
        this.isSecure = $.isSecure;
        this.isSingleTableMode = $.isSingleTableMode;
        this.isVendor = $.isVendor;
        this.jsonDeliveryMode = $.jsonDeliveryMode;
        this.key = $.key;
        this.keyPassword = $.keyPassword;
        this.keyStoreType = $.keyStoreType;
        this.keystore = $.keystore;
        this.keystorePassword = $.keystorePassword;
        this.lastSyncedChangesUtc_ = $.lastSyncedChangesUtc_;
        this.latestVersion = $.latestVersion;
        this.limitForApiCallsToExternalActivitiesEndpoint = $.limitForApiCallsToExternalActivitiesEndpoint;
        this.lineSeparator = $.lineSeparator;
        this.listStrategy = $.listStrategy;
        this.listSyncMode = $.listSyncMode;
        this.logJournal = $.logJournal;
        this.logJournalSchema = $.logJournalSchema;
        this.login = $.login;
        this.loginPassword = $.loginPassword;
        this.managerAccounts = $.managerAccounts;
        this.merchantId = $.merchantId;
        this.messageType = $.messageType;
        this.metrics = $.metrics;
        this.namedRange = $.namedRange;
        this.namespace = $.namespace;
        this.networkCode = $.networkCode;
        this.nullSequence = $.nullSequence;
        this.oauthToken = $.oauthToken;
        this.oauthTokenSecret = $.oauthTokenSecret;
        this.ocapiClientId = $.ocapiClientId;
        this.ocapiClientSecret = $.ocapiClientSecret;
        this.ocapiCustomObjectTypes = $.ocapiCustomObjectTypes;
        this.ocapiHostname = $.ocapiHostname;
        this.onError = $.onError;
        this.onPremise = $.onPremise;
        this.organization = $.organization;
        this.organizationId = $.organizationId;
        this.organizations = $.organizations;
        this.packedModeTables = $.packedModeTables;
        this.packingMode = $.packingMode;
        this.pages = $.pages;
        this.partnerCode = $.partnerCode;
        this.partners = $.partners;
        this.passphrase = $.passphrase;
        this.password = $.password;
        this.pat = $.pat;
        this.patName = $.patName;
        this.patSecret = $.patSecret;
        this.path = $.path;
        this.pattern = $.pattern;
        this.pdbName = $.pdbName;
        this.pemCertificate = $.pemCertificate;
        this.pemPrivateKey = $.pemPrivateKey;
        this.perInteractionDimensions = $.perInteractionDimensions;
        this.personalAccessToken = $.personalAccessToken;
        this.pgpPassPhrase = $.pgpPassPhrase;
        this.pgpSecretKey = $.pgpSecretKey;
        this.phoneNumber = $.phoneNumber;
        this.port = $.port;
        this.postClickAttributionWindowSize = $.postClickAttributionWindowSize;
        this.prebuiltReport = $.prebuiltReport;
        this.prefix = $.prefix;
        this.primaryKeys = $.primaryKeys;
        this.privateKey = $.privateKey;
        this.profiles = $.profiles;
        this.projectCredentials = $.projectCredentials;
        this.projectId = $.projectId;
        this.projects = $.projects;
        this.properties = $.properties;
        this.publicKey = $.publicKey;
        this.publicationName = $.publicationName;
        this.queryId = $.queryId;
        this.queryParamValue = $.queryParamValue;
        this.refreshTokenExpiresAt = $.refreshTokenExpiresAt;
        this.region = $.region;
        this.replicaId = $.replicaId;
        this.replicationSlot = $.replicationSlot;
        this.reportConfigurationIds = $.reportConfigurationIds;
        this.reportFormatType = $.reportFormatType;
        this.reportSuites = $.reportSuites;
        this.reportTimezone = $.reportTimezone;
        this.reportType = $.reportType;
        this.reportUrl = $.reportUrl;
        this.reports = $.reports;
        this.reportsLinkedinAds = $.reportsLinkedinAds;
        this.repositories = $.repositories;
        this.resourceToken = $.resourceToken;
        this.resourceUrl = $.resourceUrl;
        this.restApiLimit = $.restApiLimit;
        this.rfcLibraryPath = $.rfcLibraryPath;
        this.role = $.role;
        this.roleArn = $.roleArn;
        this.rollbackWindowSize = $.rollbackWindowSize;
        this.s3Bucket = $.s3Bucket;
        this.s3ExportBucket = $.s3ExportBucket;
        this.s3ExportFolder = $.s3ExportFolder;
        this.s3ExportRoleArn = $.s3ExportRoleArn;
        this.s3RoleArn = $.s3RoleArn;
        this.s3bucket = $.s3bucket;
        this.s3externalId = $.s3externalId;
        this.s3folder = $.s3folder;
        this.s3path = $.s3path;
        this.s3roleArn = $.s3roleArn;
        this.salesAccountSyncMode = $.salesAccountSyncMode;
        this.salesAccounts = $.salesAccounts;
        this.salesforceSecurityToken = $.salesforceSecurityToken;
        this.sandboxAccount = $.sandboxAccount;
        this.sapSchema = $.sapSchema;
        this.sapUser = $.sapUser;
        this.saslMechanism = $.saslMechanism;
        this.saslPlainKey = $.saslPlainKey;
        this.saslPlainSecret = $.saslPlainSecret;
        this.saslScram256Key = $.saslScram256Key;
        this.saslScram256Secret = $.saslScram256Secret;
        this.saslScram512Key = $.saslScram512Key;
        this.saslScram512Secret = $.saslScram512Secret;
        this.schemaRegistryCredentialsSource = $.schemaRegistryCredentialsSource;
        this.schemaRegistryKey = $.schemaRegistryKey;
        this.schemaRegistrySecret = $.schemaRegistrySecret;
        this.schemaRegistryUrls = $.schemaRegistryUrls;
        this.secret = $.secret;
        this.secretKey = $.secretKey;
        this.secrets = $.secrets;
        this.secretsLists = $.secretsLists;
        this.securityProtocol = $.securityProtocol;
        this.segments = $.segments;
        this.selectedExports = $.selectedExports;
        this.senderId = $.senderId;
        this.senderPassword = $.senderPassword;
        this.serverAddress = $.serverAddress;
        this.serverUrl = $.serverUrl;
        this.servers = $.servers;
        this.serviceAccount = $.serviceAccount;
        this.serviceAccountEmail = $.serviceAccountEmail;
        this.serviceAccountKey = $.serviceAccountKey;
        this.serviceVersion = $.serviceVersion;
        this.sftpHost = $.sftpHost;
        this.sftpIsKeyPair = $.sftpIsKeyPair;
        this.sftpPassword = $.sftpPassword;
        this.sftpPort = $.sftpPort;
        this.sftpPublicKey = $.sftpPublicKey;
        this.sftpUser = $.sftpUser;
        this.shareUrl = $.shareUrl;
        this.sheetId = $.sheetId;
        this.shop = $.shop;
        this.shortCode = $.shortCode;
        this.showRecordsWithNoMetrics = $.showRecordsWithNoMetrics;
        this.sid = $.sid;
        this.signerPublicKey = $.signerPublicKey;
        this.siteAddress = $.siteAddress;
        this.siteId = $.siteId;
        this.siteName = $.siteName;
        this.siteUrls = $.siteUrls;
        this.skipAfter = $.skipAfter;
        this.skipBefore = $.skipBefore;
        this.soapUri = $.soapUri;
        this.socialDataSyncTimeframe = $.socialDataSyncTimeframe;
        this.source = $.source;
        this.storeHash = $.storeHash;
        this.subDomain = $.subDomain;
        this.subdomain = $.subdomain;
        this.subscriberName = $.subscriberName;
        this.subscription = $.subscription;
        this.supportConnectedAccountsSync = $.supportConnectedAccountsSync;
        this.supportNestedColumns = $.supportNestedColumns;
        this.surveyIds = $.surveyIds;
        this.swipeAttributionWindow = $.swipeAttributionWindow;
        this.syncDataLocker = $.syncDataLocker;
        this.syncFormat = $.syncFormat;
        this.syncFormulaFields = $.syncFormulaFields;
        this.syncMetadata = $.syncMetadata;
        this.syncMethod = $.syncMethod;
        this.syncMode = $.syncMode;
        this.syncMultipleAccounts = $.syncMultipleAccounts;
        this.syncPackMode = $.syncPackMode;
        this.syncPullApi = $.syncPullApi;
        this.syncType = $.syncType;
        this.sysnr = $.sysnr;
        this.tableName = $.tableName;
        this.tdeCertificate = $.tdeCertificate;
        this.tdeCertificateName = $.tdeCertificateName;
        this.tdePassword = $.tdePassword;
        this.tdePrivateKey = $.tdePrivateKey;
        this.teamId = $.teamId;
        this.technicalAccountId = $.technicalAccountId;
        this.templateLabels = $.templateLabels;
        this.tenant = $.tenant;
        this.tenantId = $.tenantId;
        this.testTableName = $.testTableName;
        this.timeZone = $.timeZone;
        this.timeframeMonths = $.timeframeMonths;
        this.tns = $.tns;
        this.tokenAuthenticatedContainer = $.tokenAuthenticatedContainer;
        this.tokenAuthenticatedDatabase = $.tokenAuthenticatedDatabase;
        this.tokenId = $.tokenId;
        this.tokenKey = $.tokenKey;
        this.tokenSecret = $.tokenSecret;
        this.tokenSecretKey = $.tokenSecretKey;
        this.topics = $.topics;
        this.trustStoreType = $.trustStoreType;
        this.trustedCert = $.trustedCert;
        this.truststore = $.truststore;
        this.tunnelHost = $.tunnelHost;
        this.tunnelPort = $.tunnelPort;
        this.tunnelUser = $.tunnelUser;
        this.uniqueId = $.uniqueId;
        this.updateConfigOnEachSync = $.updateConfigOnEachSync;
        this.updateMethod = $.updateMethod;
        this.uri = $.uri;
        this.useApiKeys = $.useApiKeys;
        this.useCustomerBucket = $.useCustomerBucket;
        this.useOracleRac = $.useOracleRac;
        this.usePgpEncryptionOptions = $.usePgpEncryptionOptions;
        this.useServiceAccount = $.useServiceAccount;
        this.useTemplateLabels = $.useTemplateLabels;
        this.useWebhooks = $.useWebhooks;
        this.useWorkspace = $.useWorkspace;
        this.user = $.user;
        this.userId = $.userId;
        this.userKey = $.userKey;
        this.userName = $.userName;
        this.userProfiles = $.userProfiles;
        this.username = $.username;
        this.viewAttributionWindow = $.viewAttributionWindow;
        this.viewThroughAttributionWindowSize = $.viewThroughAttributionWindowSize;
        this.webhookEndpoint = $.webhookEndpoint;
        this.webhookKey = $.webhookKey;
        this.webhookUrl = $.webhookUrl;
        this.wordPressSiteIdOrWoocommerceDomainName = $.wordPressSiteIdOrWoocommerceDomainName;
        this.workspaceName = $.workspaceName;
        this.workspaceSameAsSource = $.workspaceSameAsSource;
        this.workspaceSchema = $.workspaceSchema;
        this.wsCertificate = $.wsCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetConnectorConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetConnectorConfig $;

        public Builder() {
            $ = new GetConnectorConfig();
        }

        public Builder(GetConnectorConfig defaults) {
            $ = new GetConnectorConfig(Objects.requireNonNull(defaults));
        }

        public Builder absConnectionMethod(String absConnectionMethod) {
            $.absConnectionMethod = absConnectionMethod;
            return this;
        }

        public Builder absConnectionString(String absConnectionString) {
            $.absConnectionString = absConnectionString;
            return this;
        }

        public Builder absContainerAddress(String absContainerAddress) {
            $.absContainerAddress = absContainerAddress;
            return this;
        }

        public Builder absContainerName(String absContainerName) {
            $.absContainerName = absContainerName;
            return this;
        }

        public Builder absHostIp(String absHostIp) {
            $.absHostIp = absHostIp;
            return this;
        }

        public Builder absHostUser(String absHostUser) {
            $.absHostUser = absHostUser;
            return this;
        }

        public Builder absPrefix(String absPrefix) {
            $.absPrefix = absPrefix;
            return this;
        }

        public Builder absPublicKey(String absPublicKey) {
            $.absPublicKey = absPublicKey;
            return this;
        }

        public Builder accessKey(String accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        public Builder accessKeyId(String accessKeyId) {
            $.accessKeyId = accessKeyId;
            return this;
        }

        public Builder accessKeySecret(String accessKeySecret) {
            $.accessKeySecret = accessKeySecret;
            return this;
        }

        public Builder accessToken(String accessToken) {
            $.accessToken = accessToken;
            return this;
        }

        public Builder accessType(String accessType) {
            $.accessType = accessType;
            return this;
        }

        public Builder account(String account) {
            $.account = account;
            return this;
        }

        public Builder accountId(String accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountIds(List<String> accountIds) {
            $.accountIds = accountIds;
            return this;
        }

        public Builder accountIds(String... accountIds) {
            return accountIds(List.of(accountIds));
        }

        public Builder accountKey(String accountKey) {
            $.accountKey = accountKey;
            return this;
        }

        public Builder accountName(String accountName) {
            $.accountName = accountName;
            return this;
        }

        public Builder accountSyncMode(String accountSyncMode) {
            $.accountSyncMode = accountSyncMode;
            return this;
        }

        public Builder accounts(List<String> accounts) {
            $.accounts = accounts;
            return this;
        }

        public Builder accounts(String... accounts) {
            return accounts(List.of(accounts));
        }

        public Builder accountsRedditAds(List<GetConnectorConfigAccountsRedditAd> accountsRedditAds) {
            $.accountsRedditAds = accountsRedditAds;
            return this;
        }

        public Builder accountsRedditAds(GetConnectorConfigAccountsRedditAd... accountsRedditAds) {
            return accountsRedditAds(List.of(accountsRedditAds));
        }

        public Builder accountsSyncMode(String accountsSyncMode) {
            $.accountsSyncMode = accountsSyncMode;
            return this;
        }

        public Builder actionBreakdowns(List<String> actionBreakdowns) {
            $.actionBreakdowns = actionBreakdowns;
            return this;
        }

        public Builder actionBreakdowns(String... actionBreakdowns) {
            return actionBreakdowns(List.of(actionBreakdowns));
        }

        public Builder actionReportTime(String actionReportTime) {
            $.actionReportTime = actionReportTime;
            return this;
        }

        public Builder adAnalytics(String adAnalytics) {
            $.adAnalytics = adAnalytics;
            return this;
        }

        public Builder adUnitView(String adUnitView) {
            $.adUnitView = adUnitView;
            return this;
        }

        public Builder adminApiKey(String adminApiKey) {
            $.adminApiKey = adminApiKey;
            return this;
        }

        public Builder adobeAnalyticsConfigurations(List<GetConnectorConfigAdobeAnalyticsConfiguration> adobeAnalyticsConfigurations) {
            $.adobeAnalyticsConfigurations = adobeAnalyticsConfigurations;
            return this;
        }

        public Builder adobeAnalyticsConfigurations(GetConnectorConfigAdobeAnalyticsConfiguration... adobeAnalyticsConfigurations) {
            return adobeAnalyticsConfigurations(List.of(adobeAnalyticsConfigurations));
        }

        public Builder advertisables(List<String> advertisables) {
            $.advertisables = advertisables;
            return this;
        }

        public Builder advertisables(String... advertisables) {
            return advertisables(List.of(advertisables));
        }

        public Builder advertisers(List<String> advertisers) {
            $.advertisers = advertisers;
            return this;
        }

        public Builder advertisers(String... advertisers) {
            return advertisers(List.of(advertisers));
        }

        public Builder advertisersIds(List<String> advertisersIds) {
            $.advertisersIds = advertisersIds;
            return this;
        }

        public Builder advertisersIds(String... advertisersIds) {
            return advertisersIds(List.of(advertisersIds));
        }

        public Builder advertisersSyncMode(String advertisersSyncMode) {
            $.advertisersSyncMode = advertisersSyncMode;
            return this;
        }

        public Builder agentHost(String agentHost) {
            $.agentHost = agentHost;
            return this;
        }

        public Builder agentOraHome(String agentOraHome) {
            $.agentOraHome = agentOraHome;
            return this;
        }

        public Builder agentPassword(String agentPassword) {
            $.agentPassword = agentPassword;
            return this;
        }

        public Builder agentPort(String agentPort) {
            $.agentPort = agentPort;
            return this;
        }

        public Builder agentPublicCert(String agentPublicCert) {
            $.agentPublicCert = agentPublicCert;
            return this;
        }

        public Builder agentUser(String agentUser) {
            $.agentUser = agentUser;
            return this;
        }

        public Builder aggregation(String aggregation) {
            $.aggregation = aggregation;
            return this;
        }

        public Builder alwaysEncrypted(String alwaysEncrypted) {
            $.alwaysEncrypted = alwaysEncrypted;
            return this;
        }

        public Builder apiAccessToken(String apiAccessToken) {
            $.apiAccessToken = apiAccessToken;
            return this;
        }

        public Builder apiId(String apiId) {
            $.apiId = apiId;
            return this;
        }

        public Builder apiKey(String apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        public Builder apiKeyApiSecret(String apiKeyApiSecret) {
            $.apiKeyApiSecret = apiKeyApiSecret;
            return this;
        }

        public Builder apiKeys(List<String> apiKeys) {
            $.apiKeys = apiKeys;
            return this;
        }

        public Builder apiKeys(String... apiKeys) {
            return apiKeys(List.of(apiKeys));
        }

        public Builder apiQuota(String apiQuota) {
            $.apiQuota = apiQuota;
            return this;
        }

        public Builder apiRequestsPerMinute(String apiRequestsPerMinute) {
            $.apiRequestsPerMinute = apiRequestsPerMinute;
            return this;
        }

        public Builder apiSecret(String apiSecret) {
            $.apiSecret = apiSecret;
            return this;
        }

        public Builder apiSecretKey(String apiSecretKey) {
            $.apiSecretKey = apiSecretKey;
            return this;
        }

        public Builder apiToken(String apiToken) {
            $.apiToken = apiToken;
            return this;
        }

        public Builder apiType(String apiType) {
            $.apiType = apiType;
            return this;
        }

        public Builder apiUrl(String apiUrl) {
            $.apiUrl = apiUrl;
            return this;
        }

        public Builder apiUsage(String apiUsage) {
            $.apiUsage = apiUsage;
            return this;
        }

        public Builder apiUtilizationPercentage(String apiUtilizationPercentage) {
            $.apiUtilizationPercentage = apiUtilizationPercentage;
            return this;
        }

        public Builder apiVersion(String apiVersion) {
            $.apiVersion = apiVersion;
            return this;
        }

        public Builder appId(String appId) {
            $.appId = appId;
            return this;
        }

        public Builder appIds(List<String> appIds) {
            $.appIds = appIds;
            return this;
        }

        public Builder appIds(String... appIds) {
            return appIds(List.of(appIds));
        }

        public Builder appIdsAppsflyers(List<GetConnectorConfigAppIdsAppsflyer> appIdsAppsflyers) {
            $.appIdsAppsflyers = appIdsAppsflyers;
            return this;
        }

        public Builder appIdsAppsflyers(GetConnectorConfigAppIdsAppsflyer... appIdsAppsflyers) {
            return appIdsAppsflyers(List.of(appIdsAppsflyers));
        }

        public Builder appKey(String appKey) {
            $.appKey = appKey;
            return this;
        }

        public Builder appSpecificPassword(String appSpecificPassword) {
            $.appSpecificPassword = appSpecificPassword;
            return this;
        }

        public Builder appSyncMode(String appSyncMode) {
            $.appSyncMode = appSyncMode;
            return this;
        }

        public Builder appendFileOption(String appendFileOption) {
            $.appendFileOption = appendFileOption;
            return this;
        }

        public Builder applicationKey(String applicationKey) {
            $.applicationKey = applicationKey;
            return this;
        }

        public Builder apps(List<String> apps) {
            $.apps = apps;
            return this;
        }

        public Builder apps(String... apps) {
            return apps(List.of(apps));
        }

        public Builder archiveLogFormat(String archiveLogFormat) {
            $.archiveLogFormat = archiveLogFormat;
            return this;
        }

        public Builder archiveLogPath(String archiveLogPath) {
            $.archiveLogPath = archiveLogPath;
            return this;
        }

        public Builder archivePattern(String archivePattern) {
            $.archivePattern = archivePattern;
            return this;
        }

        public Builder areSoapCredentialsProvided(String areSoapCredentialsProvided) {
            $.areSoapCredentialsProvided = areSoapCredentialsProvided;
            return this;
        }

        public Builder asbIp(String asbIp) {
            $.asbIp = asbIp;
            return this;
        }

        public Builder asmOption(String asmOption) {
            $.asmOption = asmOption;
            return this;
        }

        public Builder asmOracleHome(String asmOracleHome) {
            $.asmOracleHome = asmOracleHome;
            return this;
        }

        public Builder asmPassword(String asmPassword) {
            $.asmPassword = asmPassword;
            return this;
        }

        public Builder asmTns(String asmTns) {
            $.asmTns = asmTns;
            return this;
        }

        public Builder asmUser(String asmUser) {
            $.asmUser = asmUser;
            return this;
        }

        public Builder attributionWindow(String attributionWindow) {
            $.attributionWindow = attributionWindow;
            return this;
        }

        public Builder attributionWindowSize(String attributionWindowSize) {
            $.attributionWindowSize = attributionWindowSize;
            return this;
        }

        public Builder auth(String auth) {
            $.auth = auth;
            return this;
        }

        public Builder authMethod(String authMethod) {
            $.authMethod = authMethod;
            return this;
        }

        public Builder authMode(String authMode) {
            $.authMode = authMode;
            return this;
        }

        public Builder authType(String authType) {
            $.authType = authType;
            return this;
        }

        public Builder authorizationMethod(String authorizationMethod) {
            $.authorizationMethod = authorizationMethod;
            return this;
        }

        public Builder awsRegionCode(String awsRegionCode) {
            $.awsRegionCode = awsRegionCode;
            return this;
        }

        public Builder baseCurrency(String baseCurrency) {
            $.baseCurrency = baseCurrency;
            return this;
        }

        public Builder baseDomain(String baseDomain) {
            $.baseDomain = baseDomain;
            return this;
        }

        public Builder baseId(String baseId) {
            $.baseId = baseId;
            return this;
        }

        public Builder baseUrl(String baseUrl) {
            $.baseUrl = baseUrl;
            return this;
        }

        public Builder bearerToken(String bearerToken) {
            $.bearerToken = bearerToken;
            return this;
        }

        public Builder blobSasUrl(String blobSasUrl) {
            $.blobSasUrl = blobSasUrl;
            return this;
        }

        public Builder breakdowns(List<String> breakdowns) {
            $.breakdowns = breakdowns;
            return this;
        }

        public Builder breakdowns(String... breakdowns) {
            return breakdowns(List.of(breakdowns));
        }

        public Builder bucket(String bucket) {
            $.bucket = bucket;
            return this;
        }

        public Builder bucketName(String bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        public Builder bucketService(String bucketService) {
            $.bucketService = bucketService;
            return this;
        }

        public Builder businessId(String businessId) {
            $.businessId = businessId;
            return this;
        }

        public Builder businessUnitId(String businessUnitId) {
            $.businessUnitId = businessUnitId;
            return this;
        }

        public Builder certificate(String certificate) {
            $.certificate = certificate;
            return this;
        }

        public Builder clickAttributionWindow(String clickAttributionWindow) {
            $.clickAttributionWindow = clickAttributionWindow;
            return this;
        }

        public Builder client(String client) {
            $.client = client;
            return this;
        }

        public Builder clientCert(String clientCert) {
            $.clientCert = clientCert;
            return this;
        }

        public Builder clientCertKey(String clientCertKey) {
            $.clientCertKey = clientCertKey;
            return this;
        }

        public Builder clientId(String clientId) {
            $.clientId = clientId;
            return this;
        }

        public Builder clientKey(String clientKey) {
            $.clientKey = clientKey;
            return this;
        }

        public Builder clientName(String clientName) {
            $.clientName = clientName;
            return this;
        }

        public Builder clientSecret(String clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        public Builder cloudStorageType(String cloudStorageType) {
            $.cloudStorageType = cloudStorageType;
            return this;
        }

        public Builder columns(List<String> columns) {
            $.columns = columns;
            return this;
        }

        public Builder columns(String... columns) {
            return columns(List.of(columns));
        }

        public Builder companyId(String companyId) {
            $.companyId = companyId;
            return this;
        }

        public Builder companyKey(String companyKey) {
            $.companyKey = companyKey;
            return this;
        }

        public Builder companyRequestToken(String companyRequestToken) {
            $.companyRequestToken = companyRequestToken;
            return this;
        }

        public Builder companyUuid(String companyUuid) {
            $.companyUuid = companyUuid;
            return this;
        }

        public Builder compression(String compression) {
            $.compression = compression;
            return this;
        }

        public Builder configMethod(String configMethod) {
            $.configMethod = configMethod;
            return this;
        }

        public Builder configRepositoryUrl(String configRepositoryUrl) {
            $.configRepositoryUrl = configRepositoryUrl;
            return this;
        }

        public Builder configType(String configType) {
            $.configType = configType;
            return this;
        }

        public Builder connectingUser(String connectingUser) {
            $.connectingUser = connectingUser;
            return this;
        }

        public Builder connectingUserEmail(String connectingUserEmail) {
            $.connectingUserEmail = connectingUserEmail;
            return this;
        }

        public Builder connectionMethod(String connectionMethod) {
            $.connectionMethod = connectionMethod;
            return this;
        }

        public Builder connectionString(String connectionString) {
            $.connectionString = connectionString;
            return this;
        }

        public Builder connectionType(String connectionType) {
            $.connectionType = connectionType;
            return this;
        }

        public Builder consumerGroup(String consumerGroup) {
            $.consumerGroup = consumerGroup;
            return this;
        }

        public Builder consumerKey(String consumerKey) {
            $.consumerKey = consumerKey;
            return this;
        }

        public Builder consumerSecret(String consumerSecret) {
            $.consumerSecret = consumerSecret;
            return this;
        }

        public Builder containerAddress(String containerAddress) {
            $.containerAddress = containerAddress;
            return this;
        }

        public Builder containerName(String containerName) {
            $.containerName = containerName;
            return this;
        }

        public Builder contentOwnerId(String contentOwnerId) {
            $.contentOwnerId = contentOwnerId;
            return this;
        }

        public Builder conversationWebhookUrl(String conversationWebhookUrl) {
            $.conversationWebhookUrl = conversationWebhookUrl;
            return this;
        }

        public Builder conversionDimensions(List<String> conversionDimensions) {
            $.conversionDimensions = conversionDimensions;
            return this;
        }

        public Builder conversionDimensions(String... conversionDimensions) {
            return conversionDimensions(List.of(conversionDimensions));
        }

        public Builder conversionReportTime(String conversionReportTime) {
            $.conversionReportTime = conversionReportTime;
            return this;
        }

        public Builder conversionWindowSize(String conversionWindowSize) {
            $.conversionWindowSize = conversionWindowSize;
            return this;
        }

        public Builder csvDefinition(String csvDefinition) {
            $.csvDefinition = csvDefinition;
            return this;
        }

        public Builder currency(String currency) {
            $.currency = currency;
            return this;
        }

        public Builder customEventSyncMode(String customEventSyncMode) {
            $.customEventSyncMode = customEventSyncMode;
            return this;
        }

        public Builder customEvents(List<String> customEvents) {
            $.customEvents = customEvents;
            return this;
        }

        public Builder customEvents(String... customEvents) {
            return customEvents(List.of(customEvents));
        }

        public Builder customFieldIds(List<String> customFieldIds) {
            $.customFieldIds = customFieldIds;
            return this;
        }

        public Builder customFieldIds(String... customFieldIds) {
            return customFieldIds(List.of(customFieldIds));
        }

        public Builder customFloodlightVariables(List<String> customFloodlightVariables) {
            $.customFloodlightVariables = customFloodlightVariables;
            return this;
        }

        public Builder customFloodlightVariables(String... customFloodlightVariables) {
            return customFloodlightVariables(List.of(customFloodlightVariables));
        }

        public Builder customReports(List<GetConnectorConfigCustomReport> customReports) {
            $.customReports = customReports;
            return this;
        }

        public Builder customReports(GetConnectorConfigCustomReport... customReports) {
            return customReports(List.of(customReports));
        }

        public Builder customTables(List<GetConnectorConfigCustomTable> customTables) {
            $.customTables = customTables;
            return this;
        }

        public Builder customTables(GetConnectorConfigCustomTable... customTables) {
            return customTables(List.of(customTables));
        }

        public Builder customerId(String customerId) {
            $.customerId = customerId;
            return this;
        }

        public Builder customerListId(String customerListId) {
            $.customerListId = customerListId;
            return this;
        }

        public Builder dailyApiCallLimit(String dailyApiCallLimit) {
            $.dailyApiCallLimit = dailyApiCallLimit;
            return this;
        }

        public Builder dataAccessMethod(String dataAccessMethod) {
            $.dataAccessMethod = dataAccessMethod;
            return this;
        }

        public Builder dataCenter(String dataCenter) {
            $.dataCenter = dataCenter;
            return this;
        }

        public Builder dataSetName(String dataSetName) {
            $.dataSetName = dataSetName;
            return this;
        }

        public Builder database(String database) {
            $.database = database;
            return this;
        }

        public Builder datasetId(String datasetId) {
            $.datasetId = datasetId;
            return this;
        }

        public Builder datasource(String datasource) {
            $.datasource = datasource;
            return this;
        }

        public Builder dateGranularity(String dateGranularity) {
            $.dateGranularity = dateGranularity;
            return this;
        }

        public Builder delimiter(String delimiter) {
            $.delimiter = delimiter;
            return this;
        }

        public Builder dimensionAttributes(List<String> dimensionAttributes) {
            $.dimensionAttributes = dimensionAttributes;
            return this;
        }

        public Builder dimensionAttributes(String... dimensionAttributes) {
            return dimensionAttributes(List.of(dimensionAttributes));
        }

        public Builder dimensions(List<String> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        public Builder dimensions(String... dimensions) {
            return dimensions(List.of(dimensions));
        }

        public Builder distributedConnectorClusterSize(String distributedConnectorClusterSize) {
            $.distributedConnectorClusterSize = distributedConnectorClusterSize;
            return this;
        }

        public Builder domain(String domain) {
            $.domain = domain;
            return this;
        }

        public Builder domainHostName(String domainHostName) {
            $.domainHostName = domainHostName;
            return this;
        }

        public Builder domainName(String domainName) {
            $.domainName = domainName;
            return this;
        }

        public Builder domainType(String domainType) {
            $.domainType = domainType;
            return this;
        }

        public Builder elements(List<String> elements) {
            $.elements = elements;
            return this;
        }

        public Builder elements(String... elements) {
            return elements(List.of(elements));
        }

        public Builder email(String email) {
            $.email = email;
            return this;
        }

        public Builder emptyHeader(String emptyHeader) {
            $.emptyHeader = emptyHeader;
            return this;
        }

        public Builder enableAllDimensionCombinations(String enableAllDimensionCombinations) {
            $.enableAllDimensionCombinations = enableAllDimensionCombinations;
            return this;
        }

        public Builder enableArchiveLogOnly(String enableArchiveLogOnly) {
            $.enableArchiveLogOnly = enableArchiveLogOnly;
            return this;
        }

        public Builder enableDataExtensionsSyncing(String enableDataExtensionsSyncing) {
            $.enableDataExtensionsSyncing = enableDataExtensionsSyncing;
            return this;
        }

        public Builder enableDistributedConnectorMode(String enableDistributedConnectorMode) {
            $.enableDistributedConnectorMode = enableDistributedConnectorMode;
            return this;
        }

        public Builder enableEnrichments(String enableEnrichments) {
            $.enableEnrichments = enableEnrichments;
            return this;
        }

        public Builder enableExports(String enableExports) {
            $.enableExports = enableExports;
            return this;
        }

        public Builder enableTde(String enableTde) {
            $.enableTde = enableTde;
            return this;
        }

        public Builder encodedPublicKey(String encodedPublicKey) {
            $.encodedPublicKey = encodedPublicKey;
            return this;
        }

        public Builder encryptionKey(String encryptionKey) {
            $.encryptionKey = encryptionKey;
            return this;
        }

        public Builder endpoint(String endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        public Builder engagementAttributionWindow(String engagementAttributionWindow) {
            $.engagementAttributionWindow = engagementAttributionWindow;
            return this;
        }

        public Builder enrichedExport(String enrichedExport) {
            $.enrichedExport = enrichedExport;
            return this;
        }

        public Builder entityId(String entityId) {
            $.entityId = entityId;
            return this;
        }

        public Builder environment(String environment) {
            $.environment = environment;
            return this;
        }

        public Builder escapeChar(String escapeChar) {
            $.escapeChar = escapeChar;
            return this;
        }

        public Builder euRegion(String euRegion) {
            $.euRegion = euRegion;
            return this;
        }

        public Builder events(List<String> events) {
            $.events = events;
            return this;
        }

        public Builder events(String... events) {
            return events(List.of(events));
        }

        public Builder exportStorageType(String exportStorageType) {
            $.exportStorageType = exportStorageType;
            return this;
        }

        public Builder externalId(String externalId) {
            $.externalId = externalId;
            return this;
        }

        public Builder fields(List<String> fields) {
            $.fields = fields;
            return this;
        }

        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }

        public Builder fileType(String fileType) {
            $.fileType = fileType;
            return this;
        }

        public Builder filter(String filter) {
            $.filter = filter;
            return this;
        }

        public Builder financeAccountSyncMode(String financeAccountSyncMode) {
            $.financeAccountSyncMode = financeAccountSyncMode;
            return this;
        }

        public Builder financeAccounts(List<String> financeAccounts) {
            $.financeAccounts = financeAccounts;
            return this;
        }

        public Builder financeAccounts(String... financeAccounts) {
            return financeAccounts(List.of(financeAccounts));
        }

        public Builder folder(String folder) {
            $.folder = folder;
            return this;
        }

        public Builder folderId(String folderId) {
            $.folderId = folderId;
            return this;
        }

        public Builder folderPath(String folderPath) {
            $.folderPath = folderPath;
            return this;
        }

        public Builder forecastId(String forecastId) {
            $.forecastId = forecastId;
            return this;
        }

        public Builder ftpHost(String ftpHost) {
            $.ftpHost = ftpHost;
            return this;
        }

        public Builder ftpPassword(String ftpPassword) {
            $.ftpPassword = ftpPassword;
            return this;
        }

        public Builder ftpPort(String ftpPort) {
            $.ftpPort = ftpPort;
            return this;
        }

        public Builder ftpUser(String ftpUser) {
            $.ftpUser = ftpUser;
            return this;
        }

        public Builder function(String function) {
            $.function = function;
            return this;
        }

        public Builder functionApp(String functionApp) {
            $.functionApp = functionApp;
            return this;
        }

        public Builder functionKey(String functionKey) {
            $.functionKey = functionKey;
            return this;
        }

        public Builder functionName(String functionName) {
            $.functionName = functionName;
            return this;
        }

        public Builder functionTrigger(String functionTrigger) {
            $.functionTrigger = functionTrigger;
            return this;
        }

        public Builder gcsBucket(String gcsBucket) {
            $.gcsBucket = gcsBucket;
            return this;
        }

        public Builder gcsFolder(String gcsFolder) {
            $.gcsFolder = gcsFolder;
            return this;
        }

        public Builder groupName(String groupName) {
            $.groupName = groupName;
            return this;
        }

        public Builder hasManagePermissions(String hasManagePermissions) {
            $.hasManagePermissions = hasManagePermissions;
            return this;
        }

        public Builder homeFolder(String homeFolder) {
            $.homeFolder = homeFolder;
            return this;
        }

        public Builder host(String host) {
            $.host = host;
            return this;
        }

        public Builder hostIp(String hostIp) {
            $.hostIp = hostIp;
            return this;
        }

        public Builder hostUser(String hostUser) {
            $.hostUser = hostUser;
            return this;
        }

        public Builder hosts(List<String> hosts) {
            $.hosts = hosts;
            return this;
        }

        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }

        public Builder identity(String identity) {
            $.identity = identity;
            return this;
        }

        public Builder includeOcapiEndpoints(String includeOcapiEndpoints) {
            $.includeOcapiEndpoints = includeOcapiEndpoints;
            return this;
        }

        public Builder instance(String instance) {
            $.instance = instance;
            return this;
        }

        public Builder instanceNumber(String instanceNumber) {
            $.instanceNumber = instanceNumber;
            return this;
        }

        public Builder instanceUrl(String instanceUrl) {
            $.instanceUrl = instanceUrl;
            return this;
        }

        public Builder integrationKey(String integrationKey) {
            $.integrationKey = integrationKey;
            return this;
        }

        public Builder isAccountLevelConnector(String isAccountLevelConnector) {
            $.isAccountLevelConnector = isAccountLevelConnector;
            return this;
        }

        public Builder isAuth2Enabled(String isAuth2Enabled) {
            $.isAuth2Enabled = isAuth2Enabled;
            return this;
        }

        public Builder isCustomApiCredentials(String isCustomApiCredentials) {
            $.isCustomApiCredentials = isCustomApiCredentials;
            return this;
        }

        public Builder isExternalActivitiesEndpointSelected(String isExternalActivitiesEndpointSelected) {
            $.isExternalActivitiesEndpointSelected = isExternalActivitiesEndpointSelected;
            return this;
        }

        public Builder isFtps(String isFtps) {
            $.isFtps = isFtps;
            return this;
        }

        public Builder isKeypair(String isKeypair) {
            $.isKeypair = isKeypair;
            return this;
        }

        public Builder isMultiEntityFeatureEnabled(String isMultiEntityFeatureEnabled) {
            $.isMultiEntityFeatureEnabled = isMultiEntityFeatureEnabled;
            return this;
        }

        public Builder isNewPackage(String isNewPackage) {
            $.isNewPackage = isNewPackage;
            return this;
        }

        public Builder isPrivateKeyEncrypted(String isPrivateKeyEncrypted) {
            $.isPrivateKeyEncrypted = isPrivateKeyEncrypted;
            return this;
        }

        public Builder isPrivateLinkRequired(String isPrivateLinkRequired) {
            $.isPrivateLinkRequired = isPrivateLinkRequired;
            return this;
        }

        public Builder isPublic(String isPublic) {
            $.isPublic = isPublic;
            return this;
        }

        public Builder isSailthruConnectEnabled(String isSailthruConnectEnabled) {
            $.isSailthruConnectEnabled = isSailthruConnectEnabled;
            return this;
        }

        public Builder isSecure(String isSecure) {
            $.isSecure = isSecure;
            return this;
        }

        public Builder isSingleTableMode(String isSingleTableMode) {
            $.isSingleTableMode = isSingleTableMode;
            return this;
        }

        public Builder isVendor(String isVendor) {
            $.isVendor = isVendor;
            return this;
        }

        public Builder jsonDeliveryMode(String jsonDeliveryMode) {
            $.jsonDeliveryMode = jsonDeliveryMode;
            return this;
        }

        public Builder key(String key) {
            $.key = key;
            return this;
        }

        public Builder keyPassword(String keyPassword) {
            $.keyPassword = keyPassword;
            return this;
        }

        public Builder keyStoreType(String keyStoreType) {
            $.keyStoreType = keyStoreType;
            return this;
        }

        public Builder keystore(String keystore) {
            $.keystore = keystore;
            return this;
        }

        public Builder keystorePassword(String keystorePassword) {
            $.keystorePassword = keystorePassword;
            return this;
        }

        public Builder lastSyncedChangesUtc_(String lastSyncedChangesUtc_) {
            $.lastSyncedChangesUtc_ = lastSyncedChangesUtc_;
            return this;
        }

        public Builder latestVersion(String latestVersion) {
            $.latestVersion = latestVersion;
            return this;
        }

        public Builder limitForApiCallsToExternalActivitiesEndpoint(String limitForApiCallsToExternalActivitiesEndpoint) {
            $.limitForApiCallsToExternalActivitiesEndpoint = limitForApiCallsToExternalActivitiesEndpoint;
            return this;
        }

        public Builder lineSeparator(String lineSeparator) {
            $.lineSeparator = lineSeparator;
            return this;
        }

        public Builder listStrategy(String listStrategy) {
            $.listStrategy = listStrategy;
            return this;
        }

        public Builder listSyncMode(String listSyncMode) {
            $.listSyncMode = listSyncMode;
            return this;
        }

        public Builder logJournal(String logJournal) {
            $.logJournal = logJournal;
            return this;
        }

        public Builder logJournalSchema(String logJournalSchema) {
            $.logJournalSchema = logJournalSchema;
            return this;
        }

        public Builder login(String login) {
            $.login = login;
            return this;
        }

        public Builder loginPassword(String loginPassword) {
            $.loginPassword = loginPassword;
            return this;
        }

        public Builder managerAccounts(List<String> managerAccounts) {
            $.managerAccounts = managerAccounts;
            return this;
        }

        public Builder managerAccounts(String... managerAccounts) {
            return managerAccounts(List.of(managerAccounts));
        }

        public Builder merchantId(String merchantId) {
            $.merchantId = merchantId;
            return this;
        }

        public Builder messageType(String messageType) {
            $.messageType = messageType;
            return this;
        }

        public Builder metrics(List<String> metrics) {
            $.metrics = metrics;
            return this;
        }

        public Builder metrics(String... metrics) {
            return metrics(List.of(metrics));
        }

        public Builder namedRange(String namedRange) {
            $.namedRange = namedRange;
            return this;
        }

        public Builder namespace(String namespace) {
            $.namespace = namespace;
            return this;
        }

        public Builder networkCode(String networkCode) {
            $.networkCode = networkCode;
            return this;
        }

        public Builder nullSequence(String nullSequence) {
            $.nullSequence = nullSequence;
            return this;
        }

        public Builder oauthToken(String oauthToken) {
            $.oauthToken = oauthToken;
            return this;
        }

        public Builder oauthTokenSecret(String oauthTokenSecret) {
            $.oauthTokenSecret = oauthTokenSecret;
            return this;
        }

        public Builder ocapiClientId(String ocapiClientId) {
            $.ocapiClientId = ocapiClientId;
            return this;
        }

        public Builder ocapiClientSecret(String ocapiClientSecret) {
            $.ocapiClientSecret = ocapiClientSecret;
            return this;
        }

        public Builder ocapiCustomObjectTypes(String ocapiCustomObjectTypes) {
            $.ocapiCustomObjectTypes = ocapiCustomObjectTypes;
            return this;
        }

        public Builder ocapiHostname(String ocapiHostname) {
            $.ocapiHostname = ocapiHostname;
            return this;
        }

        public Builder onError(String onError) {
            $.onError = onError;
            return this;
        }

        public Builder onPremise(String onPremise) {
            $.onPremise = onPremise;
            return this;
        }

        public Builder organization(String organization) {
            $.organization = organization;
            return this;
        }

        public Builder organizationId(String organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        public Builder organizations(List<String> organizations) {
            $.organizations = organizations;
            return this;
        }

        public Builder organizations(String... organizations) {
            return organizations(List.of(organizations));
        }

        public Builder packedModeTables(List<String> packedModeTables) {
            $.packedModeTables = packedModeTables;
            return this;
        }

        public Builder packedModeTables(String... packedModeTables) {
            return packedModeTables(List.of(packedModeTables));
        }

        public Builder packingMode(String packingMode) {
            $.packingMode = packingMode;
            return this;
        }

        public Builder pages(List<String> pages) {
            $.pages = pages;
            return this;
        }

        public Builder pages(String... pages) {
            return pages(List.of(pages));
        }

        public Builder partnerCode(String partnerCode) {
            $.partnerCode = partnerCode;
            return this;
        }

        public Builder partners(List<String> partners) {
            $.partners = partners;
            return this;
        }

        public Builder partners(String... partners) {
            return partners(List.of(partners));
        }

        public Builder passphrase(String passphrase) {
            $.passphrase = passphrase;
            return this;
        }

        public Builder password(String password) {
            $.password = password;
            return this;
        }

        public Builder pat(String pat) {
            $.pat = pat;
            return this;
        }

        public Builder patName(String patName) {
            $.patName = patName;
            return this;
        }

        public Builder patSecret(String patSecret) {
            $.patSecret = patSecret;
            return this;
        }

        public Builder path(String path) {
            $.path = path;
            return this;
        }

        public Builder pattern(String pattern) {
            $.pattern = pattern;
            return this;
        }

        public Builder pdbName(String pdbName) {
            $.pdbName = pdbName;
            return this;
        }

        public Builder pemCertificate(String pemCertificate) {
            $.pemCertificate = pemCertificate;
            return this;
        }

        public Builder pemPrivateKey(String pemPrivateKey) {
            $.pemPrivateKey = pemPrivateKey;
            return this;
        }

        public Builder perInteractionDimensions(List<String> perInteractionDimensions) {
            $.perInteractionDimensions = perInteractionDimensions;
            return this;
        }

        public Builder perInteractionDimensions(String... perInteractionDimensions) {
            return perInteractionDimensions(List.of(perInteractionDimensions));
        }

        public Builder personalAccessToken(String personalAccessToken) {
            $.personalAccessToken = personalAccessToken;
            return this;
        }

        public Builder pgpPassPhrase(String pgpPassPhrase) {
            $.pgpPassPhrase = pgpPassPhrase;
            return this;
        }

        public Builder pgpSecretKey(String pgpSecretKey) {
            $.pgpSecretKey = pgpSecretKey;
            return this;
        }

        public Builder phoneNumber(String phoneNumber) {
            $.phoneNumber = phoneNumber;
            return this;
        }

        public Builder port(String port) {
            $.port = port;
            return this;
        }

        public Builder postClickAttributionWindowSize(String postClickAttributionWindowSize) {
            $.postClickAttributionWindowSize = postClickAttributionWindowSize;
            return this;
        }

        public Builder prebuiltReport(String prebuiltReport) {
            $.prebuiltReport = prebuiltReport;
            return this;
        }

        public Builder prefix(String prefix) {
            $.prefix = prefix;
            return this;
        }

        public Builder primaryKeys(List<String> primaryKeys) {
            $.primaryKeys = primaryKeys;
            return this;
        }

        public Builder primaryKeys(String... primaryKeys) {
            return primaryKeys(List.of(primaryKeys));
        }

        public Builder privateKey(String privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        public Builder profiles(List<String> profiles) {
            $.profiles = profiles;
            return this;
        }

        public Builder profiles(String... profiles) {
            return profiles(List.of(profiles));
        }

        public Builder projectCredentials(List<GetConnectorConfigProjectCredential> projectCredentials) {
            $.projectCredentials = projectCredentials;
            return this;
        }

        public Builder projectCredentials(GetConnectorConfigProjectCredential... projectCredentials) {
            return projectCredentials(List.of(projectCredentials));
        }

        public Builder projectId(String projectId) {
            $.projectId = projectId;
            return this;
        }

        public Builder projects(List<String> projects) {
            $.projects = projects;
            return this;
        }

        public Builder projects(String... projects) {
            return projects(List.of(projects));
        }

        public Builder properties(List<String> properties) {
            $.properties = properties;
            return this;
        }

        public Builder properties(String... properties) {
            return properties(List.of(properties));
        }

        public Builder publicKey(String publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        public Builder publicationName(String publicationName) {
            $.publicationName = publicationName;
            return this;
        }

        public Builder queryId(String queryId) {
            $.queryId = queryId;
            return this;
        }

        public Builder queryParamValue(String queryParamValue) {
            $.queryParamValue = queryParamValue;
            return this;
        }

        public Builder refreshTokenExpiresAt(String refreshTokenExpiresAt) {
            $.refreshTokenExpiresAt = refreshTokenExpiresAt;
            return this;
        }

        public Builder region(String region) {
            $.region = region;
            return this;
        }

        public Builder replicaId(String replicaId) {
            $.replicaId = replicaId;
            return this;
        }

        public Builder replicationSlot(String replicationSlot) {
            $.replicationSlot = replicationSlot;
            return this;
        }

        public Builder reportConfigurationIds(List<String> reportConfigurationIds) {
            $.reportConfigurationIds = reportConfigurationIds;
            return this;
        }

        public Builder reportConfigurationIds(String... reportConfigurationIds) {
            return reportConfigurationIds(List.of(reportConfigurationIds));
        }

        public Builder reportFormatType(String reportFormatType) {
            $.reportFormatType = reportFormatType;
            return this;
        }

        public Builder reportSuites(List<String> reportSuites) {
            $.reportSuites = reportSuites;
            return this;
        }

        public Builder reportSuites(String... reportSuites) {
            return reportSuites(List.of(reportSuites));
        }

        public Builder reportTimezone(String reportTimezone) {
            $.reportTimezone = reportTimezone;
            return this;
        }

        public Builder reportType(String reportType) {
            $.reportType = reportType;
            return this;
        }

        public Builder reportUrl(String reportUrl) {
            $.reportUrl = reportUrl;
            return this;
        }

        public Builder reports(List<GetConnectorConfigReport> reports) {
            $.reports = reports;
            return this;
        }

        public Builder reports(GetConnectorConfigReport... reports) {
            return reports(List.of(reports));
        }

        public Builder reportsLinkedinAds(List<String> reportsLinkedinAds) {
            $.reportsLinkedinAds = reportsLinkedinAds;
            return this;
        }

        public Builder reportsLinkedinAds(String... reportsLinkedinAds) {
            return reportsLinkedinAds(List.of(reportsLinkedinAds));
        }

        public Builder repositories(List<String> repositories) {
            $.repositories = repositories;
            return this;
        }

        public Builder repositories(String... repositories) {
            return repositories(List.of(repositories));
        }

        public Builder resourceToken(String resourceToken) {
            $.resourceToken = resourceToken;
            return this;
        }

        public Builder resourceUrl(String resourceUrl) {
            $.resourceUrl = resourceUrl;
            return this;
        }

        public Builder restApiLimit(String restApiLimit) {
            $.restApiLimit = restApiLimit;
            return this;
        }

        public Builder rfcLibraryPath(String rfcLibraryPath) {
            $.rfcLibraryPath = rfcLibraryPath;
            return this;
        }

        public Builder role(String role) {
            $.role = role;
            return this;
        }

        public Builder roleArn(String roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        public Builder rollbackWindowSize(String rollbackWindowSize) {
            $.rollbackWindowSize = rollbackWindowSize;
            return this;
        }

        public Builder s3Bucket(String s3Bucket) {
            $.s3Bucket = s3Bucket;
            return this;
        }

        public Builder s3ExportBucket(String s3ExportBucket) {
            $.s3ExportBucket = s3ExportBucket;
            return this;
        }

        public Builder s3ExportFolder(String s3ExportFolder) {
            $.s3ExportFolder = s3ExportFolder;
            return this;
        }

        public Builder s3ExportRoleArn(String s3ExportRoleArn) {
            $.s3ExportRoleArn = s3ExportRoleArn;
            return this;
        }

        public Builder s3RoleArn(String s3RoleArn) {
            $.s3RoleArn = s3RoleArn;
            return this;
        }

        public Builder s3bucket(String s3bucket) {
            $.s3bucket = s3bucket;
            return this;
        }

        public Builder s3externalId(String s3externalId) {
            $.s3externalId = s3externalId;
            return this;
        }

        public Builder s3folder(String s3folder) {
            $.s3folder = s3folder;
            return this;
        }

        public Builder s3path(String s3path) {
            $.s3path = s3path;
            return this;
        }

        public Builder s3roleArn(String s3roleArn) {
            $.s3roleArn = s3roleArn;
            return this;
        }

        public Builder salesAccountSyncMode(String salesAccountSyncMode) {
            $.salesAccountSyncMode = salesAccountSyncMode;
            return this;
        }

        public Builder salesAccounts(List<String> salesAccounts) {
            $.salesAccounts = salesAccounts;
            return this;
        }

        public Builder salesAccounts(String... salesAccounts) {
            return salesAccounts(List.of(salesAccounts));
        }

        public Builder salesforceSecurityToken(String salesforceSecurityToken) {
            $.salesforceSecurityToken = salesforceSecurityToken;
            return this;
        }

        public Builder sandboxAccount(String sandboxAccount) {
            $.sandboxAccount = sandboxAccount;
            return this;
        }

        public Builder sapSchema(String sapSchema) {
            $.sapSchema = sapSchema;
            return this;
        }

        public Builder sapUser(String sapUser) {
            $.sapUser = sapUser;
            return this;
        }

        public Builder saslMechanism(String saslMechanism) {
            $.saslMechanism = saslMechanism;
            return this;
        }

        public Builder saslPlainKey(String saslPlainKey) {
            $.saslPlainKey = saslPlainKey;
            return this;
        }

        public Builder saslPlainSecret(String saslPlainSecret) {
            $.saslPlainSecret = saslPlainSecret;
            return this;
        }

        public Builder saslScram256Key(String saslScram256Key) {
            $.saslScram256Key = saslScram256Key;
            return this;
        }

        public Builder saslScram256Secret(String saslScram256Secret) {
            $.saslScram256Secret = saslScram256Secret;
            return this;
        }

        public Builder saslScram512Key(String saslScram512Key) {
            $.saslScram512Key = saslScram512Key;
            return this;
        }

        public Builder saslScram512Secret(String saslScram512Secret) {
            $.saslScram512Secret = saslScram512Secret;
            return this;
        }

        public Builder schemaRegistryCredentialsSource(String schemaRegistryCredentialsSource) {
            $.schemaRegistryCredentialsSource = schemaRegistryCredentialsSource;
            return this;
        }

        public Builder schemaRegistryKey(String schemaRegistryKey) {
            $.schemaRegistryKey = schemaRegistryKey;
            return this;
        }

        public Builder schemaRegistrySecret(String schemaRegistrySecret) {
            $.schemaRegistrySecret = schemaRegistrySecret;
            return this;
        }

        public Builder schemaRegistryUrls(List<String> schemaRegistryUrls) {
            $.schemaRegistryUrls = schemaRegistryUrls;
            return this;
        }

        public Builder schemaRegistryUrls(String... schemaRegistryUrls) {
            return schemaRegistryUrls(List.of(schemaRegistryUrls));
        }

        public Builder secret(String secret) {
            $.secret = secret;
            return this;
        }

        public Builder secretKey(String secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        public Builder secrets(String secrets) {
            $.secrets = secrets;
            return this;
        }

        public Builder secretsLists(List<GetConnectorConfigSecretsList> secretsLists) {
            $.secretsLists = secretsLists;
            return this;
        }

        public Builder secretsLists(GetConnectorConfigSecretsList... secretsLists) {
            return secretsLists(List.of(secretsLists));
        }

        public Builder securityProtocol(String securityProtocol) {
            $.securityProtocol = securityProtocol;
            return this;
        }

        public Builder segments(List<String> segments) {
            $.segments = segments;
            return this;
        }

        public Builder segments(String... segments) {
            return segments(List.of(segments));
        }

        public Builder selectedExports(List<String> selectedExports) {
            $.selectedExports = selectedExports;
            return this;
        }

        public Builder selectedExports(String... selectedExports) {
            return selectedExports(List.of(selectedExports));
        }

        public Builder senderId(String senderId) {
            $.senderId = senderId;
            return this;
        }

        public Builder senderPassword(String senderPassword) {
            $.senderPassword = senderPassword;
            return this;
        }

        public Builder serverAddress(String serverAddress) {
            $.serverAddress = serverAddress;
            return this;
        }

        public Builder serverUrl(String serverUrl) {
            $.serverUrl = serverUrl;
            return this;
        }

        public Builder servers(List<String> servers) {
            $.servers = servers;
            return this;
        }

        public Builder servers(String... servers) {
            return servers(List.of(servers));
        }

        public Builder serviceAccount(String serviceAccount) {
            $.serviceAccount = serviceAccount;
            return this;
        }

        public Builder serviceAccountEmail(String serviceAccountEmail) {
            $.serviceAccountEmail = serviceAccountEmail;
            return this;
        }

        public Builder serviceAccountKey(String serviceAccountKey) {
            $.serviceAccountKey = serviceAccountKey;
            return this;
        }

        public Builder serviceVersion(String serviceVersion) {
            $.serviceVersion = serviceVersion;
            return this;
        }

        public Builder sftpHost(String sftpHost) {
            $.sftpHost = sftpHost;
            return this;
        }

        public Builder sftpIsKeyPair(String sftpIsKeyPair) {
            $.sftpIsKeyPair = sftpIsKeyPair;
            return this;
        }

        public Builder sftpPassword(String sftpPassword) {
            $.sftpPassword = sftpPassword;
            return this;
        }

        public Builder sftpPort(String sftpPort) {
            $.sftpPort = sftpPort;
            return this;
        }

        public Builder sftpPublicKey(String sftpPublicKey) {
            $.sftpPublicKey = sftpPublicKey;
            return this;
        }

        public Builder sftpUser(String sftpUser) {
            $.sftpUser = sftpUser;
            return this;
        }

        public Builder shareUrl(String shareUrl) {
            $.shareUrl = shareUrl;
            return this;
        }

        public Builder sheetId(String sheetId) {
            $.sheetId = sheetId;
            return this;
        }

        public Builder shop(String shop) {
            $.shop = shop;
            return this;
        }

        public Builder shortCode(String shortCode) {
            $.shortCode = shortCode;
            return this;
        }

        public Builder showRecordsWithNoMetrics(String showRecordsWithNoMetrics) {
            $.showRecordsWithNoMetrics = showRecordsWithNoMetrics;
            return this;
        }

        public Builder sid(String sid) {
            $.sid = sid;
            return this;
        }

        public Builder signerPublicKey(String signerPublicKey) {
            $.signerPublicKey = signerPublicKey;
            return this;
        }

        public Builder siteAddress(String siteAddress) {
            $.siteAddress = siteAddress;
            return this;
        }

        public Builder siteId(String siteId) {
            $.siteId = siteId;
            return this;
        }

        public Builder siteName(String siteName) {
            $.siteName = siteName;
            return this;
        }

        public Builder siteUrls(List<String> siteUrls) {
            $.siteUrls = siteUrls;
            return this;
        }

        public Builder siteUrls(String... siteUrls) {
            return siteUrls(List.of(siteUrls));
        }

        public Builder skipAfter(String skipAfter) {
            $.skipAfter = skipAfter;
            return this;
        }

        public Builder skipBefore(String skipBefore) {
            $.skipBefore = skipBefore;
            return this;
        }

        public Builder soapUri(String soapUri) {
            $.soapUri = soapUri;
            return this;
        }

        public Builder socialDataSyncTimeframe(String socialDataSyncTimeframe) {
            $.socialDataSyncTimeframe = socialDataSyncTimeframe;
            return this;
        }

        public Builder source(String source) {
            $.source = source;
            return this;
        }

        public Builder storeHash(String storeHash) {
            $.storeHash = storeHash;
            return this;
        }

        public Builder subDomain(String subDomain) {
            $.subDomain = subDomain;
            return this;
        }

        public Builder subdomain(String subdomain) {
            $.subdomain = subdomain;
            return this;
        }

        public Builder subscriberName(String subscriberName) {
            $.subscriberName = subscriberName;
            return this;
        }

        public Builder subscription(String subscription) {
            $.subscription = subscription;
            return this;
        }

        public Builder supportConnectedAccountsSync(String supportConnectedAccountsSync) {
            $.supportConnectedAccountsSync = supportConnectedAccountsSync;
            return this;
        }

        public Builder supportNestedColumns(String supportNestedColumns) {
            $.supportNestedColumns = supportNestedColumns;
            return this;
        }

        public Builder surveyIds(String surveyIds) {
            $.surveyIds = surveyIds;
            return this;
        }

        public Builder swipeAttributionWindow(String swipeAttributionWindow) {
            $.swipeAttributionWindow = swipeAttributionWindow;
            return this;
        }

        public Builder syncDataLocker(String syncDataLocker) {
            $.syncDataLocker = syncDataLocker;
            return this;
        }

        public Builder syncFormat(String syncFormat) {
            $.syncFormat = syncFormat;
            return this;
        }

        public Builder syncFormulaFields(String syncFormulaFields) {
            $.syncFormulaFields = syncFormulaFields;
            return this;
        }

        public Builder syncMetadata(String syncMetadata) {
            $.syncMetadata = syncMetadata;
            return this;
        }

        public Builder syncMethod(String syncMethod) {
            $.syncMethod = syncMethod;
            return this;
        }

        public Builder syncMode(String syncMode) {
            $.syncMode = syncMode;
            return this;
        }

        public Builder syncMultipleAccounts(String syncMultipleAccounts) {
            $.syncMultipleAccounts = syncMultipleAccounts;
            return this;
        }

        public Builder syncPackMode(String syncPackMode) {
            $.syncPackMode = syncPackMode;
            return this;
        }

        public Builder syncPullApi(String syncPullApi) {
            $.syncPullApi = syncPullApi;
            return this;
        }

        public Builder syncType(String syncType) {
            $.syncType = syncType;
            return this;
        }

        public Builder sysnr(String sysnr) {
            $.sysnr = sysnr;
            return this;
        }

        public Builder tableName(String tableName) {
            $.tableName = tableName;
            return this;
        }

        public Builder tdeCertificate(String tdeCertificate) {
            $.tdeCertificate = tdeCertificate;
            return this;
        }

        public Builder tdeCertificateName(String tdeCertificateName) {
            $.tdeCertificateName = tdeCertificateName;
            return this;
        }

        public Builder tdePassword(String tdePassword) {
            $.tdePassword = tdePassword;
            return this;
        }

        public Builder tdePrivateKey(String tdePrivateKey) {
            $.tdePrivateKey = tdePrivateKey;
            return this;
        }

        public Builder teamId(String teamId) {
            $.teamId = teamId;
            return this;
        }

        public Builder technicalAccountId(String technicalAccountId) {
            $.technicalAccountId = technicalAccountId;
            return this;
        }

        public Builder templateLabels(List<String> templateLabels) {
            $.templateLabels = templateLabels;
            return this;
        }

        public Builder templateLabels(String... templateLabels) {
            return templateLabels(List.of(templateLabels));
        }

        public Builder tenant(String tenant) {
            $.tenant = tenant;
            return this;
        }

        public Builder tenantId(String tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public Builder testTableName(String testTableName) {
            $.testTableName = testTableName;
            return this;
        }

        public Builder timeZone(String timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        public Builder timeframeMonths(String timeframeMonths) {
            $.timeframeMonths = timeframeMonths;
            return this;
        }

        public Builder tns(String tns) {
            $.tns = tns;
            return this;
        }

        public Builder tokenAuthenticatedContainer(String tokenAuthenticatedContainer) {
            $.tokenAuthenticatedContainer = tokenAuthenticatedContainer;
            return this;
        }

        public Builder tokenAuthenticatedDatabase(String tokenAuthenticatedDatabase) {
            $.tokenAuthenticatedDatabase = tokenAuthenticatedDatabase;
            return this;
        }

        public Builder tokenId(String tokenId) {
            $.tokenId = tokenId;
            return this;
        }

        public Builder tokenKey(String tokenKey) {
            $.tokenKey = tokenKey;
            return this;
        }

        public Builder tokenSecret(String tokenSecret) {
            $.tokenSecret = tokenSecret;
            return this;
        }

        public Builder tokenSecretKey(String tokenSecretKey) {
            $.tokenSecretKey = tokenSecretKey;
            return this;
        }

        public Builder topics(List<String> topics) {
            $.topics = topics;
            return this;
        }

        public Builder topics(String... topics) {
            return topics(List.of(topics));
        }

        public Builder trustStoreType(String trustStoreType) {
            $.trustStoreType = trustStoreType;
            return this;
        }

        public Builder trustedCert(String trustedCert) {
            $.trustedCert = trustedCert;
            return this;
        }

        public Builder truststore(String truststore) {
            $.truststore = truststore;
            return this;
        }

        public Builder tunnelHost(String tunnelHost) {
            $.tunnelHost = tunnelHost;
            return this;
        }

        public Builder tunnelPort(String tunnelPort) {
            $.tunnelPort = tunnelPort;
            return this;
        }

        public Builder tunnelUser(String tunnelUser) {
            $.tunnelUser = tunnelUser;
            return this;
        }

        public Builder uniqueId(String uniqueId) {
            $.uniqueId = uniqueId;
            return this;
        }

        public Builder updateConfigOnEachSync(String updateConfigOnEachSync) {
            $.updateConfigOnEachSync = updateConfigOnEachSync;
            return this;
        }

        public Builder updateMethod(String updateMethod) {
            $.updateMethod = updateMethod;
            return this;
        }

        public Builder uri(String uri) {
            $.uri = uri;
            return this;
        }

        public Builder useApiKeys(String useApiKeys) {
            $.useApiKeys = useApiKeys;
            return this;
        }

        public Builder useCustomerBucket(String useCustomerBucket) {
            $.useCustomerBucket = useCustomerBucket;
            return this;
        }

        public Builder useOracleRac(String useOracleRac) {
            $.useOracleRac = useOracleRac;
            return this;
        }

        public Builder usePgpEncryptionOptions(String usePgpEncryptionOptions) {
            $.usePgpEncryptionOptions = usePgpEncryptionOptions;
            return this;
        }

        public Builder useServiceAccount(String useServiceAccount) {
            $.useServiceAccount = useServiceAccount;
            return this;
        }

        public Builder useTemplateLabels(String useTemplateLabels) {
            $.useTemplateLabels = useTemplateLabels;
            return this;
        }

        public Builder useWebhooks(String useWebhooks) {
            $.useWebhooks = useWebhooks;
            return this;
        }

        public Builder useWorkspace(String useWorkspace) {
            $.useWorkspace = useWorkspace;
            return this;
        }

        public Builder user(String user) {
            $.user = user;
            return this;
        }

        public Builder userId(String userId) {
            $.userId = userId;
            return this;
        }

        public Builder userKey(String userKey) {
            $.userKey = userKey;
            return this;
        }

        public Builder userName(String userName) {
            $.userName = userName;
            return this;
        }

        public Builder userProfiles(List<String> userProfiles) {
            $.userProfiles = userProfiles;
            return this;
        }

        public Builder userProfiles(String... userProfiles) {
            return userProfiles(List.of(userProfiles));
        }

        public Builder username(String username) {
            $.username = username;
            return this;
        }

        public Builder viewAttributionWindow(String viewAttributionWindow) {
            $.viewAttributionWindow = viewAttributionWindow;
            return this;
        }

        public Builder viewThroughAttributionWindowSize(String viewThroughAttributionWindowSize) {
            $.viewThroughAttributionWindowSize = viewThroughAttributionWindowSize;
            return this;
        }

        public Builder webhookEndpoint(String webhookEndpoint) {
            $.webhookEndpoint = webhookEndpoint;
            return this;
        }

        public Builder webhookKey(String webhookKey) {
            $.webhookKey = webhookKey;
            return this;
        }

        public Builder webhookUrl(String webhookUrl) {
            $.webhookUrl = webhookUrl;
            return this;
        }

        public Builder wordPressSiteIdOrWoocommerceDomainName(String wordPressSiteIdOrWoocommerceDomainName) {
            $.wordPressSiteIdOrWoocommerceDomainName = wordPressSiteIdOrWoocommerceDomainName;
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            $.workspaceName = workspaceName;
            return this;
        }

        public Builder workspaceSameAsSource(String workspaceSameAsSource) {
            $.workspaceSameAsSource = workspaceSameAsSource;
            return this;
        }

        public Builder workspaceSchema(String workspaceSchema) {
            $.workspaceSchema = workspaceSchema;
            return this;
        }

        public Builder wsCertificate(String wsCertificate) {
            $.wsCertificate = wsCertificate;
            return this;
        }

        public GetConnectorConfig build() {
            $.absConnectionMethod = Objects.requireNonNull($.absConnectionMethod, "expected parameter 'absConnectionMethod' to be non-null");
            $.absConnectionString = Objects.requireNonNull($.absConnectionString, "expected parameter 'absConnectionString' to be non-null");
            $.absContainerAddress = Objects.requireNonNull($.absContainerAddress, "expected parameter 'absContainerAddress' to be non-null");
            $.absContainerName = Objects.requireNonNull($.absContainerName, "expected parameter 'absContainerName' to be non-null");
            $.absHostIp = Objects.requireNonNull($.absHostIp, "expected parameter 'absHostIp' to be non-null");
            $.absHostUser = Objects.requireNonNull($.absHostUser, "expected parameter 'absHostUser' to be non-null");
            $.absPrefix = Objects.requireNonNull($.absPrefix, "expected parameter 'absPrefix' to be non-null");
            $.absPublicKey = Objects.requireNonNull($.absPublicKey, "expected parameter 'absPublicKey' to be non-null");
            $.accessKey = Objects.requireNonNull($.accessKey, "expected parameter 'accessKey' to be non-null");
            $.accessKeyId = Objects.requireNonNull($.accessKeyId, "expected parameter 'accessKeyId' to be non-null");
            $.accessKeySecret = Objects.requireNonNull($.accessKeySecret, "expected parameter 'accessKeySecret' to be non-null");
            $.accessToken = Objects.requireNonNull($.accessToken, "expected parameter 'accessToken' to be non-null");
            $.accessType = Objects.requireNonNull($.accessType, "expected parameter 'accessType' to be non-null");
            $.account = Objects.requireNonNull($.account, "expected parameter 'account' to be non-null");
            $.accountId = Objects.requireNonNull($.accountId, "expected parameter 'accountId' to be non-null");
            $.accountIds = Objects.requireNonNull($.accountIds, "expected parameter 'accountIds' to be non-null");
            $.accountKey = Objects.requireNonNull($.accountKey, "expected parameter 'accountKey' to be non-null");
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.accountSyncMode = Objects.requireNonNull($.accountSyncMode, "expected parameter 'accountSyncMode' to be non-null");
            $.accounts = Objects.requireNonNull($.accounts, "expected parameter 'accounts' to be non-null");
            $.accountsRedditAds = Objects.requireNonNull($.accountsRedditAds, "expected parameter 'accountsRedditAds' to be non-null");
            $.accountsSyncMode = Objects.requireNonNull($.accountsSyncMode, "expected parameter 'accountsSyncMode' to be non-null");
            $.actionBreakdowns = Objects.requireNonNull($.actionBreakdowns, "expected parameter 'actionBreakdowns' to be non-null");
            $.actionReportTime = Objects.requireNonNull($.actionReportTime, "expected parameter 'actionReportTime' to be non-null");
            $.adAnalytics = Objects.requireNonNull($.adAnalytics, "expected parameter 'adAnalytics' to be non-null");
            $.adUnitView = Objects.requireNonNull($.adUnitView, "expected parameter 'adUnitView' to be non-null");
            $.adminApiKey = Objects.requireNonNull($.adminApiKey, "expected parameter 'adminApiKey' to be non-null");
            $.adobeAnalyticsConfigurations = Objects.requireNonNull($.adobeAnalyticsConfigurations, "expected parameter 'adobeAnalyticsConfigurations' to be non-null");
            $.advertisables = Objects.requireNonNull($.advertisables, "expected parameter 'advertisables' to be non-null");
            $.advertisers = Objects.requireNonNull($.advertisers, "expected parameter 'advertisers' to be non-null");
            $.advertisersIds = Objects.requireNonNull($.advertisersIds, "expected parameter 'advertisersIds' to be non-null");
            $.advertisersSyncMode = Objects.requireNonNull($.advertisersSyncMode, "expected parameter 'advertisersSyncMode' to be non-null");
            $.agentHost = Objects.requireNonNull($.agentHost, "expected parameter 'agentHost' to be non-null");
            $.agentOraHome = Objects.requireNonNull($.agentOraHome, "expected parameter 'agentOraHome' to be non-null");
            $.agentPassword = Objects.requireNonNull($.agentPassword, "expected parameter 'agentPassword' to be non-null");
            $.agentPort = Objects.requireNonNull($.agentPort, "expected parameter 'agentPort' to be non-null");
            $.agentPublicCert = Objects.requireNonNull($.agentPublicCert, "expected parameter 'agentPublicCert' to be non-null");
            $.agentUser = Objects.requireNonNull($.agentUser, "expected parameter 'agentUser' to be non-null");
            $.aggregation = Objects.requireNonNull($.aggregation, "expected parameter 'aggregation' to be non-null");
            $.alwaysEncrypted = Objects.requireNonNull($.alwaysEncrypted, "expected parameter 'alwaysEncrypted' to be non-null");
            $.apiAccessToken = Objects.requireNonNull($.apiAccessToken, "expected parameter 'apiAccessToken' to be non-null");
            $.apiId = Objects.requireNonNull($.apiId, "expected parameter 'apiId' to be non-null");
            $.apiKey = Objects.requireNonNull($.apiKey, "expected parameter 'apiKey' to be non-null");
            $.apiKeyApiSecret = Objects.requireNonNull($.apiKeyApiSecret, "expected parameter 'apiKeyApiSecret' to be non-null");
            $.apiKeys = Objects.requireNonNull($.apiKeys, "expected parameter 'apiKeys' to be non-null");
            $.apiQuota = Objects.requireNonNull($.apiQuota, "expected parameter 'apiQuota' to be non-null");
            $.apiRequestsPerMinute = Objects.requireNonNull($.apiRequestsPerMinute, "expected parameter 'apiRequestsPerMinute' to be non-null");
            $.apiSecret = Objects.requireNonNull($.apiSecret, "expected parameter 'apiSecret' to be non-null");
            $.apiSecretKey = Objects.requireNonNull($.apiSecretKey, "expected parameter 'apiSecretKey' to be non-null");
            $.apiToken = Objects.requireNonNull($.apiToken, "expected parameter 'apiToken' to be non-null");
            $.apiType = Objects.requireNonNull($.apiType, "expected parameter 'apiType' to be non-null");
            $.apiUrl = Objects.requireNonNull($.apiUrl, "expected parameter 'apiUrl' to be non-null");
            $.apiUsage = Objects.requireNonNull($.apiUsage, "expected parameter 'apiUsage' to be non-null");
            $.apiUtilizationPercentage = Objects.requireNonNull($.apiUtilizationPercentage, "expected parameter 'apiUtilizationPercentage' to be non-null");
            $.apiVersion = Objects.requireNonNull($.apiVersion, "expected parameter 'apiVersion' to be non-null");
            $.appId = Objects.requireNonNull($.appId, "expected parameter 'appId' to be non-null");
            $.appIds = Objects.requireNonNull($.appIds, "expected parameter 'appIds' to be non-null");
            $.appIdsAppsflyers = Objects.requireNonNull($.appIdsAppsflyers, "expected parameter 'appIdsAppsflyers' to be non-null");
            $.appKey = Objects.requireNonNull($.appKey, "expected parameter 'appKey' to be non-null");
            $.appSpecificPassword = Objects.requireNonNull($.appSpecificPassword, "expected parameter 'appSpecificPassword' to be non-null");
            $.appSyncMode = Objects.requireNonNull($.appSyncMode, "expected parameter 'appSyncMode' to be non-null");
            $.appendFileOption = Objects.requireNonNull($.appendFileOption, "expected parameter 'appendFileOption' to be non-null");
            $.applicationKey = Objects.requireNonNull($.applicationKey, "expected parameter 'applicationKey' to be non-null");
            $.apps = Objects.requireNonNull($.apps, "expected parameter 'apps' to be non-null");
            $.archiveLogFormat = Objects.requireNonNull($.archiveLogFormat, "expected parameter 'archiveLogFormat' to be non-null");
            $.archiveLogPath = Objects.requireNonNull($.archiveLogPath, "expected parameter 'archiveLogPath' to be non-null");
            $.archivePattern = Objects.requireNonNull($.archivePattern, "expected parameter 'archivePattern' to be non-null");
            $.areSoapCredentialsProvided = Objects.requireNonNull($.areSoapCredentialsProvided, "expected parameter 'areSoapCredentialsProvided' to be non-null");
            $.asbIp = Objects.requireNonNull($.asbIp, "expected parameter 'asbIp' to be non-null");
            $.asmOption = Objects.requireNonNull($.asmOption, "expected parameter 'asmOption' to be non-null");
            $.asmOracleHome = Objects.requireNonNull($.asmOracleHome, "expected parameter 'asmOracleHome' to be non-null");
            $.asmPassword = Objects.requireNonNull($.asmPassword, "expected parameter 'asmPassword' to be non-null");
            $.asmTns = Objects.requireNonNull($.asmTns, "expected parameter 'asmTns' to be non-null");
            $.asmUser = Objects.requireNonNull($.asmUser, "expected parameter 'asmUser' to be non-null");
            $.attributionWindow = Objects.requireNonNull($.attributionWindow, "expected parameter 'attributionWindow' to be non-null");
            $.attributionWindowSize = Objects.requireNonNull($.attributionWindowSize, "expected parameter 'attributionWindowSize' to be non-null");
            $.auth = Objects.requireNonNull($.auth, "expected parameter 'auth' to be non-null");
            $.authMethod = Objects.requireNonNull($.authMethod, "expected parameter 'authMethod' to be non-null");
            $.authMode = Objects.requireNonNull($.authMode, "expected parameter 'authMode' to be non-null");
            $.authType = Objects.requireNonNull($.authType, "expected parameter 'authType' to be non-null");
            $.authorizationMethod = Objects.requireNonNull($.authorizationMethod, "expected parameter 'authorizationMethod' to be non-null");
            $.awsRegionCode = Objects.requireNonNull($.awsRegionCode, "expected parameter 'awsRegionCode' to be non-null");
            $.baseCurrency = Objects.requireNonNull($.baseCurrency, "expected parameter 'baseCurrency' to be non-null");
            $.baseDomain = Objects.requireNonNull($.baseDomain, "expected parameter 'baseDomain' to be non-null");
            $.baseId = Objects.requireNonNull($.baseId, "expected parameter 'baseId' to be non-null");
            $.baseUrl = Objects.requireNonNull($.baseUrl, "expected parameter 'baseUrl' to be non-null");
            $.bearerToken = Objects.requireNonNull($.bearerToken, "expected parameter 'bearerToken' to be non-null");
            $.blobSasUrl = Objects.requireNonNull($.blobSasUrl, "expected parameter 'blobSasUrl' to be non-null");
            $.breakdowns = Objects.requireNonNull($.breakdowns, "expected parameter 'breakdowns' to be non-null");
            $.bucket = Objects.requireNonNull($.bucket, "expected parameter 'bucket' to be non-null");
            $.bucketName = Objects.requireNonNull($.bucketName, "expected parameter 'bucketName' to be non-null");
            $.bucketService = Objects.requireNonNull($.bucketService, "expected parameter 'bucketService' to be non-null");
            $.businessId = Objects.requireNonNull($.businessId, "expected parameter 'businessId' to be non-null");
            $.businessUnitId = Objects.requireNonNull($.businessUnitId, "expected parameter 'businessUnitId' to be non-null");
            $.certificate = Objects.requireNonNull($.certificate, "expected parameter 'certificate' to be non-null");
            $.clickAttributionWindow = Objects.requireNonNull($.clickAttributionWindow, "expected parameter 'clickAttributionWindow' to be non-null");
            $.client = Objects.requireNonNull($.client, "expected parameter 'client' to be non-null");
            $.clientCert = Objects.requireNonNull($.clientCert, "expected parameter 'clientCert' to be non-null");
            $.clientCertKey = Objects.requireNonNull($.clientCertKey, "expected parameter 'clientCertKey' to be non-null");
            $.clientId = Objects.requireNonNull($.clientId, "expected parameter 'clientId' to be non-null");
            $.clientKey = Objects.requireNonNull($.clientKey, "expected parameter 'clientKey' to be non-null");
            $.clientName = Objects.requireNonNull($.clientName, "expected parameter 'clientName' to be non-null");
            $.clientSecret = Objects.requireNonNull($.clientSecret, "expected parameter 'clientSecret' to be non-null");
            $.cloudStorageType = Objects.requireNonNull($.cloudStorageType, "expected parameter 'cloudStorageType' to be non-null");
            $.columns = Objects.requireNonNull($.columns, "expected parameter 'columns' to be non-null");
            $.companyId = Objects.requireNonNull($.companyId, "expected parameter 'companyId' to be non-null");
            $.companyKey = Objects.requireNonNull($.companyKey, "expected parameter 'companyKey' to be non-null");
            $.companyRequestToken = Objects.requireNonNull($.companyRequestToken, "expected parameter 'companyRequestToken' to be non-null");
            $.companyUuid = Objects.requireNonNull($.companyUuid, "expected parameter 'companyUuid' to be non-null");
            $.compression = Objects.requireNonNull($.compression, "expected parameter 'compression' to be non-null");
            $.configMethod = Objects.requireNonNull($.configMethod, "expected parameter 'configMethod' to be non-null");
            $.configRepositoryUrl = Objects.requireNonNull($.configRepositoryUrl, "expected parameter 'configRepositoryUrl' to be non-null");
            $.configType = Objects.requireNonNull($.configType, "expected parameter 'configType' to be non-null");
            $.connectingUser = Objects.requireNonNull($.connectingUser, "expected parameter 'connectingUser' to be non-null");
            $.connectingUserEmail = Objects.requireNonNull($.connectingUserEmail, "expected parameter 'connectingUserEmail' to be non-null");
            $.connectionMethod = Objects.requireNonNull($.connectionMethod, "expected parameter 'connectionMethod' to be non-null");
            $.connectionString = Objects.requireNonNull($.connectionString, "expected parameter 'connectionString' to be non-null");
            $.connectionType = Objects.requireNonNull($.connectionType, "expected parameter 'connectionType' to be non-null");
            $.consumerGroup = Objects.requireNonNull($.consumerGroup, "expected parameter 'consumerGroup' to be non-null");
            $.consumerKey = Objects.requireNonNull($.consumerKey, "expected parameter 'consumerKey' to be non-null");
            $.consumerSecret = Objects.requireNonNull($.consumerSecret, "expected parameter 'consumerSecret' to be non-null");
            $.containerAddress = Objects.requireNonNull($.containerAddress, "expected parameter 'containerAddress' to be non-null");
            $.containerName = Objects.requireNonNull($.containerName, "expected parameter 'containerName' to be non-null");
            $.contentOwnerId = Objects.requireNonNull($.contentOwnerId, "expected parameter 'contentOwnerId' to be non-null");
            $.conversationWebhookUrl = Objects.requireNonNull($.conversationWebhookUrl, "expected parameter 'conversationWebhookUrl' to be non-null");
            $.conversionDimensions = Objects.requireNonNull($.conversionDimensions, "expected parameter 'conversionDimensions' to be non-null");
            $.conversionReportTime = Objects.requireNonNull($.conversionReportTime, "expected parameter 'conversionReportTime' to be non-null");
            $.conversionWindowSize = Objects.requireNonNull($.conversionWindowSize, "expected parameter 'conversionWindowSize' to be non-null");
            $.csvDefinition = Objects.requireNonNull($.csvDefinition, "expected parameter 'csvDefinition' to be non-null");
            $.currency = Objects.requireNonNull($.currency, "expected parameter 'currency' to be non-null");
            $.customEventSyncMode = Objects.requireNonNull($.customEventSyncMode, "expected parameter 'customEventSyncMode' to be non-null");
            $.customEvents = Objects.requireNonNull($.customEvents, "expected parameter 'customEvents' to be non-null");
            $.customFieldIds = Objects.requireNonNull($.customFieldIds, "expected parameter 'customFieldIds' to be non-null");
            $.customFloodlightVariables = Objects.requireNonNull($.customFloodlightVariables, "expected parameter 'customFloodlightVariables' to be non-null");
            $.customReports = Objects.requireNonNull($.customReports, "expected parameter 'customReports' to be non-null");
            $.customTables = Objects.requireNonNull($.customTables, "expected parameter 'customTables' to be non-null");
            $.customerId = Objects.requireNonNull($.customerId, "expected parameter 'customerId' to be non-null");
            $.customerListId = Objects.requireNonNull($.customerListId, "expected parameter 'customerListId' to be non-null");
            $.dailyApiCallLimit = Objects.requireNonNull($.dailyApiCallLimit, "expected parameter 'dailyApiCallLimit' to be non-null");
            $.dataAccessMethod = Objects.requireNonNull($.dataAccessMethod, "expected parameter 'dataAccessMethod' to be non-null");
            $.dataCenter = Objects.requireNonNull($.dataCenter, "expected parameter 'dataCenter' to be non-null");
            $.dataSetName = Objects.requireNonNull($.dataSetName, "expected parameter 'dataSetName' to be non-null");
            $.database = Objects.requireNonNull($.database, "expected parameter 'database' to be non-null");
            $.datasetId = Objects.requireNonNull($.datasetId, "expected parameter 'datasetId' to be non-null");
            $.datasource = Objects.requireNonNull($.datasource, "expected parameter 'datasource' to be non-null");
            $.dateGranularity = Objects.requireNonNull($.dateGranularity, "expected parameter 'dateGranularity' to be non-null");
            $.delimiter = Objects.requireNonNull($.delimiter, "expected parameter 'delimiter' to be non-null");
            $.dimensionAttributes = Objects.requireNonNull($.dimensionAttributes, "expected parameter 'dimensionAttributes' to be non-null");
            $.dimensions = Objects.requireNonNull($.dimensions, "expected parameter 'dimensions' to be non-null");
            $.distributedConnectorClusterSize = Objects.requireNonNull($.distributedConnectorClusterSize, "expected parameter 'distributedConnectorClusterSize' to be non-null");
            $.domain = Objects.requireNonNull($.domain, "expected parameter 'domain' to be non-null");
            $.domainHostName = Objects.requireNonNull($.domainHostName, "expected parameter 'domainHostName' to be non-null");
            $.domainName = Objects.requireNonNull($.domainName, "expected parameter 'domainName' to be non-null");
            $.domainType = Objects.requireNonNull($.domainType, "expected parameter 'domainType' to be non-null");
            $.elements = Objects.requireNonNull($.elements, "expected parameter 'elements' to be non-null");
            $.email = Objects.requireNonNull($.email, "expected parameter 'email' to be non-null");
            $.emptyHeader = Objects.requireNonNull($.emptyHeader, "expected parameter 'emptyHeader' to be non-null");
            $.enableAllDimensionCombinations = Objects.requireNonNull($.enableAllDimensionCombinations, "expected parameter 'enableAllDimensionCombinations' to be non-null");
            $.enableArchiveLogOnly = Objects.requireNonNull($.enableArchiveLogOnly, "expected parameter 'enableArchiveLogOnly' to be non-null");
            $.enableDataExtensionsSyncing = Objects.requireNonNull($.enableDataExtensionsSyncing, "expected parameter 'enableDataExtensionsSyncing' to be non-null");
            $.enableDistributedConnectorMode = Objects.requireNonNull($.enableDistributedConnectorMode, "expected parameter 'enableDistributedConnectorMode' to be non-null");
            $.enableEnrichments = Objects.requireNonNull($.enableEnrichments, "expected parameter 'enableEnrichments' to be non-null");
            $.enableExports = Objects.requireNonNull($.enableExports, "expected parameter 'enableExports' to be non-null");
            $.enableTde = Objects.requireNonNull($.enableTde, "expected parameter 'enableTde' to be non-null");
            $.encodedPublicKey = Objects.requireNonNull($.encodedPublicKey, "expected parameter 'encodedPublicKey' to be non-null");
            $.encryptionKey = Objects.requireNonNull($.encryptionKey, "expected parameter 'encryptionKey' to be non-null");
            $.endpoint = Objects.requireNonNull($.endpoint, "expected parameter 'endpoint' to be non-null");
            $.engagementAttributionWindow = Objects.requireNonNull($.engagementAttributionWindow, "expected parameter 'engagementAttributionWindow' to be non-null");
            $.enrichedExport = Objects.requireNonNull($.enrichedExport, "expected parameter 'enrichedExport' to be non-null");
            $.entityId = Objects.requireNonNull($.entityId, "expected parameter 'entityId' to be non-null");
            $.environment = Objects.requireNonNull($.environment, "expected parameter 'environment' to be non-null");
            $.escapeChar = Objects.requireNonNull($.escapeChar, "expected parameter 'escapeChar' to be non-null");
            $.euRegion = Objects.requireNonNull($.euRegion, "expected parameter 'euRegion' to be non-null");
            $.events = Objects.requireNonNull($.events, "expected parameter 'events' to be non-null");
            $.exportStorageType = Objects.requireNonNull($.exportStorageType, "expected parameter 'exportStorageType' to be non-null");
            $.externalId = Objects.requireNonNull($.externalId, "expected parameter 'externalId' to be non-null");
            $.fields = Objects.requireNonNull($.fields, "expected parameter 'fields' to be non-null");
            $.fileType = Objects.requireNonNull($.fileType, "expected parameter 'fileType' to be non-null");
            $.filter = Objects.requireNonNull($.filter, "expected parameter 'filter' to be non-null");
            $.financeAccountSyncMode = Objects.requireNonNull($.financeAccountSyncMode, "expected parameter 'financeAccountSyncMode' to be non-null");
            $.financeAccounts = Objects.requireNonNull($.financeAccounts, "expected parameter 'financeAccounts' to be non-null");
            $.folder = Objects.requireNonNull($.folder, "expected parameter 'folder' to be non-null");
            $.folderId = Objects.requireNonNull($.folderId, "expected parameter 'folderId' to be non-null");
            $.folderPath = Objects.requireNonNull($.folderPath, "expected parameter 'folderPath' to be non-null");
            $.forecastId = Objects.requireNonNull($.forecastId, "expected parameter 'forecastId' to be non-null");
            $.ftpHost = Objects.requireNonNull($.ftpHost, "expected parameter 'ftpHost' to be non-null");
            $.ftpPassword = Objects.requireNonNull($.ftpPassword, "expected parameter 'ftpPassword' to be non-null");
            $.ftpPort = Objects.requireNonNull($.ftpPort, "expected parameter 'ftpPort' to be non-null");
            $.ftpUser = Objects.requireNonNull($.ftpUser, "expected parameter 'ftpUser' to be non-null");
            $.function = Objects.requireNonNull($.function, "expected parameter 'function' to be non-null");
            $.functionApp = Objects.requireNonNull($.functionApp, "expected parameter 'functionApp' to be non-null");
            $.functionKey = Objects.requireNonNull($.functionKey, "expected parameter 'functionKey' to be non-null");
            $.functionName = Objects.requireNonNull($.functionName, "expected parameter 'functionName' to be non-null");
            $.functionTrigger = Objects.requireNonNull($.functionTrigger, "expected parameter 'functionTrigger' to be non-null");
            $.gcsBucket = Objects.requireNonNull($.gcsBucket, "expected parameter 'gcsBucket' to be non-null");
            $.gcsFolder = Objects.requireNonNull($.gcsFolder, "expected parameter 'gcsFolder' to be non-null");
            $.groupName = Objects.requireNonNull($.groupName, "expected parameter 'groupName' to be non-null");
            $.hasManagePermissions = Objects.requireNonNull($.hasManagePermissions, "expected parameter 'hasManagePermissions' to be non-null");
            $.homeFolder = Objects.requireNonNull($.homeFolder, "expected parameter 'homeFolder' to be non-null");
            $.host = Objects.requireNonNull($.host, "expected parameter 'host' to be non-null");
            $.hostIp = Objects.requireNonNull($.hostIp, "expected parameter 'hostIp' to be non-null");
            $.hostUser = Objects.requireNonNull($.hostUser, "expected parameter 'hostUser' to be non-null");
            $.hosts = Objects.requireNonNull($.hosts, "expected parameter 'hosts' to be non-null");
            $.identity = Objects.requireNonNull($.identity, "expected parameter 'identity' to be non-null");
            $.includeOcapiEndpoints = Objects.requireNonNull($.includeOcapiEndpoints, "expected parameter 'includeOcapiEndpoints' to be non-null");
            $.instance = Objects.requireNonNull($.instance, "expected parameter 'instance' to be non-null");
            $.instanceNumber = Objects.requireNonNull($.instanceNumber, "expected parameter 'instanceNumber' to be non-null");
            $.instanceUrl = Objects.requireNonNull($.instanceUrl, "expected parameter 'instanceUrl' to be non-null");
            $.integrationKey = Objects.requireNonNull($.integrationKey, "expected parameter 'integrationKey' to be non-null");
            $.isAccountLevelConnector = Objects.requireNonNull($.isAccountLevelConnector, "expected parameter 'isAccountLevelConnector' to be non-null");
            $.isAuth2Enabled = Objects.requireNonNull($.isAuth2Enabled, "expected parameter 'isAuth2Enabled' to be non-null");
            $.isCustomApiCredentials = Objects.requireNonNull($.isCustomApiCredentials, "expected parameter 'isCustomApiCredentials' to be non-null");
            $.isExternalActivitiesEndpointSelected = Objects.requireNonNull($.isExternalActivitiesEndpointSelected, "expected parameter 'isExternalActivitiesEndpointSelected' to be non-null");
            $.isFtps = Objects.requireNonNull($.isFtps, "expected parameter 'isFtps' to be non-null");
            $.isKeypair = Objects.requireNonNull($.isKeypair, "expected parameter 'isKeypair' to be non-null");
            $.isMultiEntityFeatureEnabled = Objects.requireNonNull($.isMultiEntityFeatureEnabled, "expected parameter 'isMultiEntityFeatureEnabled' to be non-null");
            $.isNewPackage = Objects.requireNonNull($.isNewPackage, "expected parameter 'isNewPackage' to be non-null");
            $.isPrivateKeyEncrypted = Objects.requireNonNull($.isPrivateKeyEncrypted, "expected parameter 'isPrivateKeyEncrypted' to be non-null");
            $.isPrivateLinkRequired = Objects.requireNonNull($.isPrivateLinkRequired, "expected parameter 'isPrivateLinkRequired' to be non-null");
            $.isPublic = Objects.requireNonNull($.isPublic, "expected parameter 'isPublic' to be non-null");
            $.isSailthruConnectEnabled = Objects.requireNonNull($.isSailthruConnectEnabled, "expected parameter 'isSailthruConnectEnabled' to be non-null");
            $.isSecure = Objects.requireNonNull($.isSecure, "expected parameter 'isSecure' to be non-null");
            $.isSingleTableMode = Objects.requireNonNull($.isSingleTableMode, "expected parameter 'isSingleTableMode' to be non-null");
            $.isVendor = Objects.requireNonNull($.isVendor, "expected parameter 'isVendor' to be non-null");
            $.jsonDeliveryMode = Objects.requireNonNull($.jsonDeliveryMode, "expected parameter 'jsonDeliveryMode' to be non-null");
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.keyPassword = Objects.requireNonNull($.keyPassword, "expected parameter 'keyPassword' to be non-null");
            $.keyStoreType = Objects.requireNonNull($.keyStoreType, "expected parameter 'keyStoreType' to be non-null");
            $.keystore = Objects.requireNonNull($.keystore, "expected parameter 'keystore' to be non-null");
            $.keystorePassword = Objects.requireNonNull($.keystorePassword, "expected parameter 'keystorePassword' to be non-null");
            $.lastSyncedChangesUtc_ = Objects.requireNonNull($.lastSyncedChangesUtc_, "expected parameter 'lastSyncedChangesUtc_' to be non-null");
            $.latestVersion = Objects.requireNonNull($.latestVersion, "expected parameter 'latestVersion' to be non-null");
            $.limitForApiCallsToExternalActivitiesEndpoint = Objects.requireNonNull($.limitForApiCallsToExternalActivitiesEndpoint, "expected parameter 'limitForApiCallsToExternalActivitiesEndpoint' to be non-null");
            $.lineSeparator = Objects.requireNonNull($.lineSeparator, "expected parameter 'lineSeparator' to be non-null");
            $.listStrategy = Objects.requireNonNull($.listStrategy, "expected parameter 'listStrategy' to be non-null");
            $.listSyncMode = Objects.requireNonNull($.listSyncMode, "expected parameter 'listSyncMode' to be non-null");
            $.logJournal = Objects.requireNonNull($.logJournal, "expected parameter 'logJournal' to be non-null");
            $.logJournalSchema = Objects.requireNonNull($.logJournalSchema, "expected parameter 'logJournalSchema' to be non-null");
            $.login = Objects.requireNonNull($.login, "expected parameter 'login' to be non-null");
            $.loginPassword = Objects.requireNonNull($.loginPassword, "expected parameter 'loginPassword' to be non-null");
            $.managerAccounts = Objects.requireNonNull($.managerAccounts, "expected parameter 'managerAccounts' to be non-null");
            $.merchantId = Objects.requireNonNull($.merchantId, "expected parameter 'merchantId' to be non-null");
            $.messageType = Objects.requireNonNull($.messageType, "expected parameter 'messageType' to be non-null");
            $.metrics = Objects.requireNonNull($.metrics, "expected parameter 'metrics' to be non-null");
            $.namedRange = Objects.requireNonNull($.namedRange, "expected parameter 'namedRange' to be non-null");
            $.namespace = Objects.requireNonNull($.namespace, "expected parameter 'namespace' to be non-null");
            $.networkCode = Objects.requireNonNull($.networkCode, "expected parameter 'networkCode' to be non-null");
            $.nullSequence = Objects.requireNonNull($.nullSequence, "expected parameter 'nullSequence' to be non-null");
            $.oauthToken = Objects.requireNonNull($.oauthToken, "expected parameter 'oauthToken' to be non-null");
            $.oauthTokenSecret = Objects.requireNonNull($.oauthTokenSecret, "expected parameter 'oauthTokenSecret' to be non-null");
            $.ocapiClientId = Objects.requireNonNull($.ocapiClientId, "expected parameter 'ocapiClientId' to be non-null");
            $.ocapiClientSecret = Objects.requireNonNull($.ocapiClientSecret, "expected parameter 'ocapiClientSecret' to be non-null");
            $.ocapiCustomObjectTypes = Objects.requireNonNull($.ocapiCustomObjectTypes, "expected parameter 'ocapiCustomObjectTypes' to be non-null");
            $.ocapiHostname = Objects.requireNonNull($.ocapiHostname, "expected parameter 'ocapiHostname' to be non-null");
            $.onError = Objects.requireNonNull($.onError, "expected parameter 'onError' to be non-null");
            $.onPremise = Objects.requireNonNull($.onPremise, "expected parameter 'onPremise' to be non-null");
            $.organization = Objects.requireNonNull($.organization, "expected parameter 'organization' to be non-null");
            $.organizationId = Objects.requireNonNull($.organizationId, "expected parameter 'organizationId' to be non-null");
            $.organizations = Objects.requireNonNull($.organizations, "expected parameter 'organizations' to be non-null");
            $.packedModeTables = Objects.requireNonNull($.packedModeTables, "expected parameter 'packedModeTables' to be non-null");
            $.packingMode = Objects.requireNonNull($.packingMode, "expected parameter 'packingMode' to be non-null");
            $.pages = Objects.requireNonNull($.pages, "expected parameter 'pages' to be non-null");
            $.partnerCode = Objects.requireNonNull($.partnerCode, "expected parameter 'partnerCode' to be non-null");
            $.partners = Objects.requireNonNull($.partners, "expected parameter 'partners' to be non-null");
            $.passphrase = Objects.requireNonNull($.passphrase, "expected parameter 'passphrase' to be non-null");
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.pat = Objects.requireNonNull($.pat, "expected parameter 'pat' to be non-null");
            $.patName = Objects.requireNonNull($.patName, "expected parameter 'patName' to be non-null");
            $.patSecret = Objects.requireNonNull($.patSecret, "expected parameter 'patSecret' to be non-null");
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            $.pattern = Objects.requireNonNull($.pattern, "expected parameter 'pattern' to be non-null");
            $.pdbName = Objects.requireNonNull($.pdbName, "expected parameter 'pdbName' to be non-null");
            $.pemCertificate = Objects.requireNonNull($.pemCertificate, "expected parameter 'pemCertificate' to be non-null");
            $.pemPrivateKey = Objects.requireNonNull($.pemPrivateKey, "expected parameter 'pemPrivateKey' to be non-null");
            $.perInteractionDimensions = Objects.requireNonNull($.perInteractionDimensions, "expected parameter 'perInteractionDimensions' to be non-null");
            $.personalAccessToken = Objects.requireNonNull($.personalAccessToken, "expected parameter 'personalAccessToken' to be non-null");
            $.pgpPassPhrase = Objects.requireNonNull($.pgpPassPhrase, "expected parameter 'pgpPassPhrase' to be non-null");
            $.pgpSecretKey = Objects.requireNonNull($.pgpSecretKey, "expected parameter 'pgpSecretKey' to be non-null");
            $.phoneNumber = Objects.requireNonNull($.phoneNumber, "expected parameter 'phoneNumber' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.postClickAttributionWindowSize = Objects.requireNonNull($.postClickAttributionWindowSize, "expected parameter 'postClickAttributionWindowSize' to be non-null");
            $.prebuiltReport = Objects.requireNonNull($.prebuiltReport, "expected parameter 'prebuiltReport' to be non-null");
            $.prefix = Objects.requireNonNull($.prefix, "expected parameter 'prefix' to be non-null");
            $.primaryKeys = Objects.requireNonNull($.primaryKeys, "expected parameter 'primaryKeys' to be non-null");
            $.privateKey = Objects.requireNonNull($.privateKey, "expected parameter 'privateKey' to be non-null");
            $.profiles = Objects.requireNonNull($.profiles, "expected parameter 'profiles' to be non-null");
            $.projectCredentials = Objects.requireNonNull($.projectCredentials, "expected parameter 'projectCredentials' to be non-null");
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            $.projects = Objects.requireNonNull($.projects, "expected parameter 'projects' to be non-null");
            $.properties = Objects.requireNonNull($.properties, "expected parameter 'properties' to be non-null");
            $.publicKey = Objects.requireNonNull($.publicKey, "expected parameter 'publicKey' to be non-null");
            $.publicationName = Objects.requireNonNull($.publicationName, "expected parameter 'publicationName' to be non-null");
            $.queryId = Objects.requireNonNull($.queryId, "expected parameter 'queryId' to be non-null");
            $.queryParamValue = Objects.requireNonNull($.queryParamValue, "expected parameter 'queryParamValue' to be non-null");
            $.refreshTokenExpiresAt = Objects.requireNonNull($.refreshTokenExpiresAt, "expected parameter 'refreshTokenExpiresAt' to be non-null");
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            $.replicaId = Objects.requireNonNull($.replicaId, "expected parameter 'replicaId' to be non-null");
            $.replicationSlot = Objects.requireNonNull($.replicationSlot, "expected parameter 'replicationSlot' to be non-null");
            $.reportConfigurationIds = Objects.requireNonNull($.reportConfigurationIds, "expected parameter 'reportConfigurationIds' to be non-null");
            $.reportFormatType = Objects.requireNonNull($.reportFormatType, "expected parameter 'reportFormatType' to be non-null");
            $.reportSuites = Objects.requireNonNull($.reportSuites, "expected parameter 'reportSuites' to be non-null");
            $.reportTimezone = Objects.requireNonNull($.reportTimezone, "expected parameter 'reportTimezone' to be non-null");
            $.reportType = Objects.requireNonNull($.reportType, "expected parameter 'reportType' to be non-null");
            $.reportUrl = Objects.requireNonNull($.reportUrl, "expected parameter 'reportUrl' to be non-null");
            $.reports = Objects.requireNonNull($.reports, "expected parameter 'reports' to be non-null");
            $.reportsLinkedinAds = Objects.requireNonNull($.reportsLinkedinAds, "expected parameter 'reportsLinkedinAds' to be non-null");
            $.repositories = Objects.requireNonNull($.repositories, "expected parameter 'repositories' to be non-null");
            $.resourceToken = Objects.requireNonNull($.resourceToken, "expected parameter 'resourceToken' to be non-null");
            $.resourceUrl = Objects.requireNonNull($.resourceUrl, "expected parameter 'resourceUrl' to be non-null");
            $.restApiLimit = Objects.requireNonNull($.restApiLimit, "expected parameter 'restApiLimit' to be non-null");
            $.rfcLibraryPath = Objects.requireNonNull($.rfcLibraryPath, "expected parameter 'rfcLibraryPath' to be non-null");
            $.role = Objects.requireNonNull($.role, "expected parameter 'role' to be non-null");
            $.roleArn = Objects.requireNonNull($.roleArn, "expected parameter 'roleArn' to be non-null");
            $.rollbackWindowSize = Objects.requireNonNull($.rollbackWindowSize, "expected parameter 'rollbackWindowSize' to be non-null");
            $.s3Bucket = Objects.requireNonNull($.s3Bucket, "expected parameter 's3Bucket' to be non-null");
            $.s3ExportBucket = Objects.requireNonNull($.s3ExportBucket, "expected parameter 's3ExportBucket' to be non-null");
            $.s3ExportFolder = Objects.requireNonNull($.s3ExportFolder, "expected parameter 's3ExportFolder' to be non-null");
            $.s3ExportRoleArn = Objects.requireNonNull($.s3ExportRoleArn, "expected parameter 's3ExportRoleArn' to be non-null");
            $.s3RoleArn = Objects.requireNonNull($.s3RoleArn, "expected parameter 's3RoleArn' to be non-null");
            $.s3bucket = Objects.requireNonNull($.s3bucket, "expected parameter 's3bucket' to be non-null");
            $.s3externalId = Objects.requireNonNull($.s3externalId, "expected parameter 's3externalId' to be non-null");
            $.s3folder = Objects.requireNonNull($.s3folder, "expected parameter 's3folder' to be non-null");
            $.s3path = Objects.requireNonNull($.s3path, "expected parameter 's3path' to be non-null");
            $.s3roleArn = Objects.requireNonNull($.s3roleArn, "expected parameter 's3roleArn' to be non-null");
            $.salesAccountSyncMode = Objects.requireNonNull($.salesAccountSyncMode, "expected parameter 'salesAccountSyncMode' to be non-null");
            $.salesAccounts = Objects.requireNonNull($.salesAccounts, "expected parameter 'salesAccounts' to be non-null");
            $.salesforceSecurityToken = Objects.requireNonNull($.salesforceSecurityToken, "expected parameter 'salesforceSecurityToken' to be non-null");
            $.sandboxAccount = Objects.requireNonNull($.sandboxAccount, "expected parameter 'sandboxAccount' to be non-null");
            $.sapSchema = Objects.requireNonNull($.sapSchema, "expected parameter 'sapSchema' to be non-null");
            $.sapUser = Objects.requireNonNull($.sapUser, "expected parameter 'sapUser' to be non-null");
            $.saslMechanism = Objects.requireNonNull($.saslMechanism, "expected parameter 'saslMechanism' to be non-null");
            $.saslPlainKey = Objects.requireNonNull($.saslPlainKey, "expected parameter 'saslPlainKey' to be non-null");
            $.saslPlainSecret = Objects.requireNonNull($.saslPlainSecret, "expected parameter 'saslPlainSecret' to be non-null");
            $.saslScram256Key = Objects.requireNonNull($.saslScram256Key, "expected parameter 'saslScram256Key' to be non-null");
            $.saslScram256Secret = Objects.requireNonNull($.saslScram256Secret, "expected parameter 'saslScram256Secret' to be non-null");
            $.saslScram512Key = Objects.requireNonNull($.saslScram512Key, "expected parameter 'saslScram512Key' to be non-null");
            $.saslScram512Secret = Objects.requireNonNull($.saslScram512Secret, "expected parameter 'saslScram512Secret' to be non-null");
            $.schemaRegistryCredentialsSource = Objects.requireNonNull($.schemaRegistryCredentialsSource, "expected parameter 'schemaRegistryCredentialsSource' to be non-null");
            $.schemaRegistryKey = Objects.requireNonNull($.schemaRegistryKey, "expected parameter 'schemaRegistryKey' to be non-null");
            $.schemaRegistrySecret = Objects.requireNonNull($.schemaRegistrySecret, "expected parameter 'schemaRegistrySecret' to be non-null");
            $.schemaRegistryUrls = Objects.requireNonNull($.schemaRegistryUrls, "expected parameter 'schemaRegistryUrls' to be non-null");
            $.secret = Objects.requireNonNull($.secret, "expected parameter 'secret' to be non-null");
            $.secretKey = Objects.requireNonNull($.secretKey, "expected parameter 'secretKey' to be non-null");
            $.secrets = Objects.requireNonNull($.secrets, "expected parameter 'secrets' to be non-null");
            $.secretsLists = Objects.requireNonNull($.secretsLists, "expected parameter 'secretsLists' to be non-null");
            $.securityProtocol = Objects.requireNonNull($.securityProtocol, "expected parameter 'securityProtocol' to be non-null");
            $.segments = Objects.requireNonNull($.segments, "expected parameter 'segments' to be non-null");
            $.selectedExports = Objects.requireNonNull($.selectedExports, "expected parameter 'selectedExports' to be non-null");
            $.senderId = Objects.requireNonNull($.senderId, "expected parameter 'senderId' to be non-null");
            $.senderPassword = Objects.requireNonNull($.senderPassword, "expected parameter 'senderPassword' to be non-null");
            $.serverAddress = Objects.requireNonNull($.serverAddress, "expected parameter 'serverAddress' to be non-null");
            $.serverUrl = Objects.requireNonNull($.serverUrl, "expected parameter 'serverUrl' to be non-null");
            $.servers = Objects.requireNonNull($.servers, "expected parameter 'servers' to be non-null");
            $.serviceAccount = Objects.requireNonNull($.serviceAccount, "expected parameter 'serviceAccount' to be non-null");
            $.serviceAccountEmail = Objects.requireNonNull($.serviceAccountEmail, "expected parameter 'serviceAccountEmail' to be non-null");
            $.serviceAccountKey = Objects.requireNonNull($.serviceAccountKey, "expected parameter 'serviceAccountKey' to be non-null");
            $.serviceVersion = Objects.requireNonNull($.serviceVersion, "expected parameter 'serviceVersion' to be non-null");
            $.sftpHost = Objects.requireNonNull($.sftpHost, "expected parameter 'sftpHost' to be non-null");
            $.sftpIsKeyPair = Objects.requireNonNull($.sftpIsKeyPair, "expected parameter 'sftpIsKeyPair' to be non-null");
            $.sftpPassword = Objects.requireNonNull($.sftpPassword, "expected parameter 'sftpPassword' to be non-null");
            $.sftpPort = Objects.requireNonNull($.sftpPort, "expected parameter 'sftpPort' to be non-null");
            $.sftpPublicKey = Objects.requireNonNull($.sftpPublicKey, "expected parameter 'sftpPublicKey' to be non-null");
            $.sftpUser = Objects.requireNonNull($.sftpUser, "expected parameter 'sftpUser' to be non-null");
            $.shareUrl = Objects.requireNonNull($.shareUrl, "expected parameter 'shareUrl' to be non-null");
            $.sheetId = Objects.requireNonNull($.sheetId, "expected parameter 'sheetId' to be non-null");
            $.shop = Objects.requireNonNull($.shop, "expected parameter 'shop' to be non-null");
            $.shortCode = Objects.requireNonNull($.shortCode, "expected parameter 'shortCode' to be non-null");
            $.showRecordsWithNoMetrics = Objects.requireNonNull($.showRecordsWithNoMetrics, "expected parameter 'showRecordsWithNoMetrics' to be non-null");
            $.sid = Objects.requireNonNull($.sid, "expected parameter 'sid' to be non-null");
            $.signerPublicKey = Objects.requireNonNull($.signerPublicKey, "expected parameter 'signerPublicKey' to be non-null");
            $.siteAddress = Objects.requireNonNull($.siteAddress, "expected parameter 'siteAddress' to be non-null");
            $.siteId = Objects.requireNonNull($.siteId, "expected parameter 'siteId' to be non-null");
            $.siteName = Objects.requireNonNull($.siteName, "expected parameter 'siteName' to be non-null");
            $.siteUrls = Objects.requireNonNull($.siteUrls, "expected parameter 'siteUrls' to be non-null");
            $.skipAfter = Objects.requireNonNull($.skipAfter, "expected parameter 'skipAfter' to be non-null");
            $.skipBefore = Objects.requireNonNull($.skipBefore, "expected parameter 'skipBefore' to be non-null");
            $.soapUri = Objects.requireNonNull($.soapUri, "expected parameter 'soapUri' to be non-null");
            $.socialDataSyncTimeframe = Objects.requireNonNull($.socialDataSyncTimeframe, "expected parameter 'socialDataSyncTimeframe' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            $.storeHash = Objects.requireNonNull($.storeHash, "expected parameter 'storeHash' to be non-null");
            $.subDomain = Objects.requireNonNull($.subDomain, "expected parameter 'subDomain' to be non-null");
            $.subdomain = Objects.requireNonNull($.subdomain, "expected parameter 'subdomain' to be non-null");
            $.subscriberName = Objects.requireNonNull($.subscriberName, "expected parameter 'subscriberName' to be non-null");
            $.subscription = Objects.requireNonNull($.subscription, "expected parameter 'subscription' to be non-null");
            $.supportConnectedAccountsSync = Objects.requireNonNull($.supportConnectedAccountsSync, "expected parameter 'supportConnectedAccountsSync' to be non-null");
            $.supportNestedColumns = Objects.requireNonNull($.supportNestedColumns, "expected parameter 'supportNestedColumns' to be non-null");
            $.surveyIds = Objects.requireNonNull($.surveyIds, "expected parameter 'surveyIds' to be non-null");
            $.swipeAttributionWindow = Objects.requireNonNull($.swipeAttributionWindow, "expected parameter 'swipeAttributionWindow' to be non-null");
            $.syncDataLocker = Objects.requireNonNull($.syncDataLocker, "expected parameter 'syncDataLocker' to be non-null");
            $.syncFormat = Objects.requireNonNull($.syncFormat, "expected parameter 'syncFormat' to be non-null");
            $.syncFormulaFields = Objects.requireNonNull($.syncFormulaFields, "expected parameter 'syncFormulaFields' to be non-null");
            $.syncMetadata = Objects.requireNonNull($.syncMetadata, "expected parameter 'syncMetadata' to be non-null");
            $.syncMethod = Objects.requireNonNull($.syncMethod, "expected parameter 'syncMethod' to be non-null");
            $.syncMode = Objects.requireNonNull($.syncMode, "expected parameter 'syncMode' to be non-null");
            $.syncMultipleAccounts = Objects.requireNonNull($.syncMultipleAccounts, "expected parameter 'syncMultipleAccounts' to be non-null");
            $.syncPackMode = Objects.requireNonNull($.syncPackMode, "expected parameter 'syncPackMode' to be non-null");
            $.syncPullApi = Objects.requireNonNull($.syncPullApi, "expected parameter 'syncPullApi' to be non-null");
            $.syncType = Objects.requireNonNull($.syncType, "expected parameter 'syncType' to be non-null");
            $.sysnr = Objects.requireNonNull($.sysnr, "expected parameter 'sysnr' to be non-null");
            $.tableName = Objects.requireNonNull($.tableName, "expected parameter 'tableName' to be non-null");
            $.tdeCertificate = Objects.requireNonNull($.tdeCertificate, "expected parameter 'tdeCertificate' to be non-null");
            $.tdeCertificateName = Objects.requireNonNull($.tdeCertificateName, "expected parameter 'tdeCertificateName' to be non-null");
            $.tdePassword = Objects.requireNonNull($.tdePassword, "expected parameter 'tdePassword' to be non-null");
            $.tdePrivateKey = Objects.requireNonNull($.tdePrivateKey, "expected parameter 'tdePrivateKey' to be non-null");
            $.teamId = Objects.requireNonNull($.teamId, "expected parameter 'teamId' to be non-null");
            $.technicalAccountId = Objects.requireNonNull($.technicalAccountId, "expected parameter 'technicalAccountId' to be non-null");
            $.templateLabels = Objects.requireNonNull($.templateLabels, "expected parameter 'templateLabels' to be non-null");
            $.tenant = Objects.requireNonNull($.tenant, "expected parameter 'tenant' to be non-null");
            $.tenantId = Objects.requireNonNull($.tenantId, "expected parameter 'tenantId' to be non-null");
            $.testTableName = Objects.requireNonNull($.testTableName, "expected parameter 'testTableName' to be non-null");
            $.timeZone = Objects.requireNonNull($.timeZone, "expected parameter 'timeZone' to be non-null");
            $.timeframeMonths = Objects.requireNonNull($.timeframeMonths, "expected parameter 'timeframeMonths' to be non-null");
            $.tns = Objects.requireNonNull($.tns, "expected parameter 'tns' to be non-null");
            $.tokenAuthenticatedContainer = Objects.requireNonNull($.tokenAuthenticatedContainer, "expected parameter 'tokenAuthenticatedContainer' to be non-null");
            $.tokenAuthenticatedDatabase = Objects.requireNonNull($.tokenAuthenticatedDatabase, "expected parameter 'tokenAuthenticatedDatabase' to be non-null");
            $.tokenId = Objects.requireNonNull($.tokenId, "expected parameter 'tokenId' to be non-null");
            $.tokenKey = Objects.requireNonNull($.tokenKey, "expected parameter 'tokenKey' to be non-null");
            $.tokenSecret = Objects.requireNonNull($.tokenSecret, "expected parameter 'tokenSecret' to be non-null");
            $.tokenSecretKey = Objects.requireNonNull($.tokenSecretKey, "expected parameter 'tokenSecretKey' to be non-null");
            $.topics = Objects.requireNonNull($.topics, "expected parameter 'topics' to be non-null");
            $.trustStoreType = Objects.requireNonNull($.trustStoreType, "expected parameter 'trustStoreType' to be non-null");
            $.trustedCert = Objects.requireNonNull($.trustedCert, "expected parameter 'trustedCert' to be non-null");
            $.truststore = Objects.requireNonNull($.truststore, "expected parameter 'truststore' to be non-null");
            $.tunnelHost = Objects.requireNonNull($.tunnelHost, "expected parameter 'tunnelHost' to be non-null");
            $.tunnelPort = Objects.requireNonNull($.tunnelPort, "expected parameter 'tunnelPort' to be non-null");
            $.tunnelUser = Objects.requireNonNull($.tunnelUser, "expected parameter 'tunnelUser' to be non-null");
            $.uniqueId = Objects.requireNonNull($.uniqueId, "expected parameter 'uniqueId' to be non-null");
            $.updateConfigOnEachSync = Objects.requireNonNull($.updateConfigOnEachSync, "expected parameter 'updateConfigOnEachSync' to be non-null");
            $.updateMethod = Objects.requireNonNull($.updateMethod, "expected parameter 'updateMethod' to be non-null");
            $.uri = Objects.requireNonNull($.uri, "expected parameter 'uri' to be non-null");
            $.useApiKeys = Objects.requireNonNull($.useApiKeys, "expected parameter 'useApiKeys' to be non-null");
            $.useCustomerBucket = Objects.requireNonNull($.useCustomerBucket, "expected parameter 'useCustomerBucket' to be non-null");
            $.useOracleRac = Objects.requireNonNull($.useOracleRac, "expected parameter 'useOracleRac' to be non-null");
            $.usePgpEncryptionOptions = Objects.requireNonNull($.usePgpEncryptionOptions, "expected parameter 'usePgpEncryptionOptions' to be non-null");
            $.useServiceAccount = Objects.requireNonNull($.useServiceAccount, "expected parameter 'useServiceAccount' to be non-null");
            $.useTemplateLabels = Objects.requireNonNull($.useTemplateLabels, "expected parameter 'useTemplateLabels' to be non-null");
            $.useWebhooks = Objects.requireNonNull($.useWebhooks, "expected parameter 'useWebhooks' to be non-null");
            $.useWorkspace = Objects.requireNonNull($.useWorkspace, "expected parameter 'useWorkspace' to be non-null");
            $.user = Objects.requireNonNull($.user, "expected parameter 'user' to be non-null");
            $.userId = Objects.requireNonNull($.userId, "expected parameter 'userId' to be non-null");
            $.userKey = Objects.requireNonNull($.userKey, "expected parameter 'userKey' to be non-null");
            $.userName = Objects.requireNonNull($.userName, "expected parameter 'userName' to be non-null");
            $.userProfiles = Objects.requireNonNull($.userProfiles, "expected parameter 'userProfiles' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            $.viewAttributionWindow = Objects.requireNonNull($.viewAttributionWindow, "expected parameter 'viewAttributionWindow' to be non-null");
            $.viewThroughAttributionWindowSize = Objects.requireNonNull($.viewThroughAttributionWindowSize, "expected parameter 'viewThroughAttributionWindowSize' to be non-null");
            $.webhookEndpoint = Objects.requireNonNull($.webhookEndpoint, "expected parameter 'webhookEndpoint' to be non-null");
            $.webhookKey = Objects.requireNonNull($.webhookKey, "expected parameter 'webhookKey' to be non-null");
            $.webhookUrl = Objects.requireNonNull($.webhookUrl, "expected parameter 'webhookUrl' to be non-null");
            $.wordPressSiteIdOrWoocommerceDomainName = Objects.requireNonNull($.wordPressSiteIdOrWoocommerceDomainName, "expected parameter 'wordPressSiteIdOrWoocommerceDomainName' to be non-null");
            $.workspaceName = Objects.requireNonNull($.workspaceName, "expected parameter 'workspaceName' to be non-null");
            $.workspaceSameAsSource = Objects.requireNonNull($.workspaceSameAsSource, "expected parameter 'workspaceSameAsSource' to be non-null");
            $.workspaceSchema = Objects.requireNonNull($.workspaceSchema, "expected parameter 'workspaceSchema' to be non-null");
            $.wsCertificate = Objects.requireNonNull($.wsCertificate, "expected parameter 'wsCertificate' to be non-null");
            return $;
        }
    }

}
