// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class GetMetadataColumnsMetadataColumnArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetMetadataColumnsMetadataColumnArgs Empty = new GetMetadataColumnsMetadataColumnArgs();

    /**
     * The unique column identifier
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique column identifier
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * The boolean specifying whether the column is a foreign key
     * 
     */
    @Import(name="isForeignKey", required=true)
    private Output<Boolean> isForeignKey;

    /**
     * @return The boolean specifying whether the column is a foreign key
     * 
     */
    public Output<Boolean> isForeignKey() {
        return this.isForeignKey;
    }

    /**
     * The boolean specifying whether the column is a primary key
     * 
     */
    @Import(name="isPrimaryKey", required=true)
    private Output<Boolean> isPrimaryKey;

    /**
     * @return The boolean specifying whether the column is a primary key
     * 
     */
    public Output<Boolean> isPrimaryKey() {
        return this.isPrimaryKey;
    }

    /**
     * The column name in the destination
     * 
     */
    @Import(name="nameInDestination", required=true)
    private Output<String> nameInDestination;

    /**
     * @return The column name in the destination
     * 
     */
    public Output<String> nameInDestination() {
        return this.nameInDestination;
    }

    /**
     * The column name in the source
     * 
     */
    @Import(name="nameInSource", required=true)
    private Output<String> nameInSource;

    /**
     * @return The column name in the source
     * 
     */
    public Output<String> nameInSource() {
        return this.nameInSource;
    }

    /**
     * The unique identifier of the table associated with the column
     * 
     */
    @Import(name="parentId", required=true)
    private Output<String> parentId;

    /**
     * @return The unique identifier of the table associated with the column
     * 
     */
    public Output<String> parentId() {
        return this.parentId;
    }

    /**
     * The column type in the destination
     * 
     */
    @Import(name="typeInDestination", required=true)
    private Output<String> typeInDestination;

    /**
     * @return The column type in the destination
     * 
     */
    public Output<String> typeInDestination() {
        return this.typeInDestination;
    }

    /**
     * The column type in the source
     * 
     */
    @Import(name="typeInSource", required=true)
    private Output<String> typeInSource;

    /**
     * @return The column type in the source
     * 
     */
    public Output<String> typeInSource() {
        return this.typeInSource;
    }

    private GetMetadataColumnsMetadataColumnArgs() {}

    private GetMetadataColumnsMetadataColumnArgs(GetMetadataColumnsMetadataColumnArgs $) {
        this.id = $.id;
        this.isForeignKey = $.isForeignKey;
        this.isPrimaryKey = $.isPrimaryKey;
        this.nameInDestination = $.nameInDestination;
        this.nameInSource = $.nameInSource;
        this.parentId = $.parentId;
        this.typeInDestination = $.typeInDestination;
        this.typeInSource = $.typeInSource;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMetadataColumnsMetadataColumnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMetadataColumnsMetadataColumnArgs $;

        public Builder() {
            $ = new GetMetadataColumnsMetadataColumnArgs();
        }

        public Builder(GetMetadataColumnsMetadataColumnArgs defaults) {
            $ = new GetMetadataColumnsMetadataColumnArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id The unique column identifier
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique column identifier
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param isForeignKey The boolean specifying whether the column is a foreign key
         * 
         * @return builder
         * 
         */
        public Builder isForeignKey(Output<Boolean> isForeignKey) {
            $.isForeignKey = isForeignKey;
            return this;
        }

        /**
         * @param isForeignKey The boolean specifying whether the column is a foreign key
         * 
         * @return builder
         * 
         */
        public Builder isForeignKey(Boolean isForeignKey) {
            return isForeignKey(Output.of(isForeignKey));
        }

        /**
         * @param isPrimaryKey The boolean specifying whether the column is a primary key
         * 
         * @return builder
         * 
         */
        public Builder isPrimaryKey(Output<Boolean> isPrimaryKey) {
            $.isPrimaryKey = isPrimaryKey;
            return this;
        }

        /**
         * @param isPrimaryKey The boolean specifying whether the column is a primary key
         * 
         * @return builder
         * 
         */
        public Builder isPrimaryKey(Boolean isPrimaryKey) {
            return isPrimaryKey(Output.of(isPrimaryKey));
        }

        /**
         * @param nameInDestination The column name in the destination
         * 
         * @return builder
         * 
         */
        public Builder nameInDestination(Output<String> nameInDestination) {
            $.nameInDestination = nameInDestination;
            return this;
        }

        /**
         * @param nameInDestination The column name in the destination
         * 
         * @return builder
         * 
         */
        public Builder nameInDestination(String nameInDestination) {
            return nameInDestination(Output.of(nameInDestination));
        }

        /**
         * @param nameInSource The column name in the source
         * 
         * @return builder
         * 
         */
        public Builder nameInSource(Output<String> nameInSource) {
            $.nameInSource = nameInSource;
            return this;
        }

        /**
         * @param nameInSource The column name in the source
         * 
         * @return builder
         * 
         */
        public Builder nameInSource(String nameInSource) {
            return nameInSource(Output.of(nameInSource));
        }

        /**
         * @param parentId The unique identifier of the table associated with the column
         * 
         * @return builder
         * 
         */
        public Builder parentId(Output<String> parentId) {
            $.parentId = parentId;
            return this;
        }

        /**
         * @param parentId The unique identifier of the table associated with the column
         * 
         * @return builder
         * 
         */
        public Builder parentId(String parentId) {
            return parentId(Output.of(parentId));
        }

        /**
         * @param typeInDestination The column type in the destination
         * 
         * @return builder
         * 
         */
        public Builder typeInDestination(Output<String> typeInDestination) {
            $.typeInDestination = typeInDestination;
            return this;
        }

        /**
         * @param typeInDestination The column type in the destination
         * 
         * @return builder
         * 
         */
        public Builder typeInDestination(String typeInDestination) {
            return typeInDestination(Output.of(typeInDestination));
        }

        /**
         * @param typeInSource The column type in the source
         * 
         * @return builder
         * 
         */
        public Builder typeInSource(Output<String> typeInSource) {
            $.typeInSource = typeInSource;
            return this;
        }

        /**
         * @param typeInSource The column type in the source
         * 
         * @return builder
         * 
         */
        public Builder typeInSource(String typeInSource) {
            return typeInSource(Output.of(typeInSource));
        }

        public GetMetadataColumnsMetadataColumnArgs build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.isForeignKey = Objects.requireNonNull($.isForeignKey, "expected parameter 'isForeignKey' to be non-null");
            $.isPrimaryKey = Objects.requireNonNull($.isPrimaryKey, "expected parameter 'isPrimaryKey' to be non-null");
            $.nameInDestination = Objects.requireNonNull($.nameInDestination, "expected parameter 'nameInDestination' to be non-null");
            $.nameInSource = Objects.requireNonNull($.nameInSource, "expected parameter 'nameInSource' to be non-null");
            $.parentId = Objects.requireNonNull($.parentId, "expected parameter 'parentId' to be non-null");
            $.typeInDestination = Objects.requireNonNull($.typeInDestination, "expected parameter 'typeInDestination' to be non-null");
            $.typeInSource = Objects.requireNonNull($.typeInSource, "expected parameter 'typeInSource' to be non-null");
            return $;
        }
    }

}
