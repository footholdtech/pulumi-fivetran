// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.outputs;

import com.footholdtech.fivetran.outputs.GetExternalLoggingConfig;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetExternalLoggingResult {
    private List<GetExternalLoggingConfig> configs;
    /**
     * @return The boolean value specifying whether the log service is enabled.
     * 
     */
    private Boolean enabled;
    /**
     * @return The unique identifier for the log service within the Fivetran system.
     * 
     */
    private String groupId;
    /**
     * @return The unique identifier for the log service within the Fivetran system.
     * 
     */
    private String id;
    /**
     * @return Specifies whether the setup tests should be run automatically. The default value is TRUE.
     * 
     */
    private @Nullable Boolean runSetupTests;
    /**
     * @return The name for the log service type within the Fivetran system. We support the following log services: azure*monitor*log, cloudwatch, datadog*log, new*relic_log, splunkLog, stackdriver.
     * 
     */
    private String service;

    private GetExternalLoggingResult() {}
    public List<GetExternalLoggingConfig> configs() {
        return this.configs;
    }
    /**
     * @return The boolean value specifying whether the log service is enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return The unique identifier for the log service within the Fivetran system.
     * 
     */
    public String groupId() {
        return this.groupId;
    }
    /**
     * @return The unique identifier for the log service within the Fivetran system.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Specifies whether the setup tests should be run automatically. The default value is TRUE.
     * 
     */
    public Optional<Boolean> runSetupTests() {
        return Optional.ofNullable(this.runSetupTests);
    }
    /**
     * @return The name for the log service type within the Fivetran system. We support the following log services: azure*monitor*log, cloudwatch, datadog*log, new*relic_log, splunkLog, stackdriver.
     * 
     */
    public String service() {
        return this.service;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExternalLoggingResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetExternalLoggingConfig> configs;
        private Boolean enabled;
        private String groupId;
        private String id;
        private @Nullable Boolean runSetupTests;
        private String service;
        public Builder() {}
        public Builder(GetExternalLoggingResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configs = defaults.configs;
    	      this.enabled = defaults.enabled;
    	      this.groupId = defaults.groupId;
    	      this.id = defaults.id;
    	      this.runSetupTests = defaults.runSetupTests;
    	      this.service = defaults.service;
        }

        @CustomType.Setter
        public Builder configs(List<GetExternalLoggingConfig> configs) {
            this.configs = Objects.requireNonNull(configs);
            return this;
        }
        public Builder configs(GetExternalLoggingConfig... configs) {
            return configs(List.of(configs));
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        @CustomType.Setter
        public Builder groupId(String groupId) {
            this.groupId = Objects.requireNonNull(groupId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder runSetupTests(@Nullable Boolean runSetupTests) {
            this.runSetupTests = runSetupTests;
            return this;
        }
        @CustomType.Setter
        public Builder service(String service) {
            this.service = Objects.requireNonNull(service);
            return this;
        }
        public GetExternalLoggingResult build() {
            final var o = new GetExternalLoggingResult();
            o.configs = configs;
            o.enabled = enabled;
            o.groupId = groupId;
            o.id = id;
            o.runSetupTests = runSetupTests;
            o.service = service;
            return o;
        }
    }
}
