// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.footholdtech.fivetran.inputs.GetGroupConnectorsConnectorStatusTaskArgs;
import com.footholdtech.fivetran.inputs.GetGroupConnectorsConnectorStatusWarningArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetGroupConnectorsConnectorStatusArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetGroupConnectorsConnectorStatusArgs Empty = new GetGroupConnectorsConnectorStatusArgs();

    /**
     * The boolean specifying whether the connector should be triggered to re-sync all historical data. If you set this parameter to TRUE, the next scheduled sync will be historical. If the value is FALSE or not specified, the connector will not re-sync historical data. NOTE: When the value is TRUE, only the next scheduled sync will be historical, all subsequent ones will be incremental. This parameter is set to FALSE once the historical sync is completed.
     * 
     */
    @Import(name="isHistoricalSync", required=true)
    private Output<Boolean> isHistoricalSync;

    /**
     * @return The boolean specifying whether the connector should be triggered to re-sync all historical data. If you set this parameter to TRUE, the next scheduled sync will be historical. If the value is FALSE or not specified, the connector will not re-sync historical data. NOTE: When the value is TRUE, only the next scheduled sync will be historical, all subsequent ones will be incremental. This parameter is set to FALSE once the historical sync is completed.
     * 
     */
    public Output<Boolean> isHistoricalSync() {
        return this.isHistoricalSync;
    }

    /**
     * The current setup state of the connector. The available values are: \n\n - incomplete - the setup config is incomplete, the setup tests never succeeded \n\n - connected - the connector is properly set up \n\n - broken - the connector setup config is broken.
     * 
     */
    @Import(name="setupState", required=true)
    private Output<String> setupState;

    /**
     * @return The current setup state of the connector. The available values are: \n\n - incomplete - the setup config is incomplete, the setup tests never succeeded \n\n - connected - the connector is properly set up \n\n - broken - the connector setup config is broken.
     * 
     */
    public Output<String> setupState() {
        return this.setupState;
    }

    /**
     * The current sync state of the connector. The available values are: \n\n - scheduled - the sync is waiting to be run \n\n - syncing - the sync is currently running \n\n - paused - the sync is currently paused \n\n - rescheduled - the sync is waiting until more API calls are available in the source service.
     * 
     */
    @Import(name="syncState", required=true)
    private Output<String> syncState;

    /**
     * @return The current sync state of the connector. The available values are: \n\n - scheduled - the sync is waiting to be run \n\n - syncing - the sync is currently running \n\n - paused - the sync is currently paused \n\n - rescheduled - the sync is waiting until more API calls are available in the source service.
     * 
     */
    public Output<String> syncState() {
        return this.syncState;
    }

    /**
     * The collection of tasks for the connector
     * 
     */
    @Import(name="tasks", required=true)
    private Output<List<GetGroupConnectorsConnectorStatusTaskArgs>> tasks;

    /**
     * @return The collection of tasks for the connector
     * 
     */
    public Output<List<GetGroupConnectorsConnectorStatusTaskArgs>> tasks() {
        return this.tasks;
    }

    /**
     * The current data update state of the connector. The available values are: \n\n - on_schedule - the sync is running smoothly, no delays \n\n - delayed - the data is delayed for a longer time than expected for the update.
     * 
     */
    @Import(name="updateState", required=true)
    private Output<String> updateState;

    /**
     * @return The current data update state of the connector. The available values are: \n\n - on_schedule - the sync is running smoothly, no delays \n\n - delayed - the data is delayed for a longer time than expected for the update.
     * 
     */
    public Output<String> updateState() {
        return this.updateState;
    }

    @Import(name="warnings", required=true)
    private Output<List<GetGroupConnectorsConnectorStatusWarningArgs>> warnings;

    public Output<List<GetGroupConnectorsConnectorStatusWarningArgs>> warnings() {
        return this.warnings;
    }

    private GetGroupConnectorsConnectorStatusArgs() {}

    private GetGroupConnectorsConnectorStatusArgs(GetGroupConnectorsConnectorStatusArgs $) {
        this.isHistoricalSync = $.isHistoricalSync;
        this.setupState = $.setupState;
        this.syncState = $.syncState;
        this.tasks = $.tasks;
        this.updateState = $.updateState;
        this.warnings = $.warnings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGroupConnectorsConnectorStatusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGroupConnectorsConnectorStatusArgs $;

        public Builder() {
            $ = new GetGroupConnectorsConnectorStatusArgs();
        }

        public Builder(GetGroupConnectorsConnectorStatusArgs defaults) {
            $ = new GetGroupConnectorsConnectorStatusArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isHistoricalSync The boolean specifying whether the connector should be triggered to re-sync all historical data. If you set this parameter to TRUE, the next scheduled sync will be historical. If the value is FALSE or not specified, the connector will not re-sync historical data. NOTE: When the value is TRUE, only the next scheduled sync will be historical, all subsequent ones will be incremental. This parameter is set to FALSE once the historical sync is completed.
         * 
         * @return builder
         * 
         */
        public Builder isHistoricalSync(Output<Boolean> isHistoricalSync) {
            $.isHistoricalSync = isHistoricalSync;
            return this;
        }

        /**
         * @param isHistoricalSync The boolean specifying whether the connector should be triggered to re-sync all historical data. If you set this parameter to TRUE, the next scheduled sync will be historical. If the value is FALSE or not specified, the connector will not re-sync historical data. NOTE: When the value is TRUE, only the next scheduled sync will be historical, all subsequent ones will be incremental. This parameter is set to FALSE once the historical sync is completed.
         * 
         * @return builder
         * 
         */
        public Builder isHistoricalSync(Boolean isHistoricalSync) {
            return isHistoricalSync(Output.of(isHistoricalSync));
        }

        /**
         * @param setupState The current setup state of the connector. The available values are: \n\n - incomplete - the setup config is incomplete, the setup tests never succeeded \n\n - connected - the connector is properly set up \n\n - broken - the connector setup config is broken.
         * 
         * @return builder
         * 
         */
        public Builder setupState(Output<String> setupState) {
            $.setupState = setupState;
            return this;
        }

        /**
         * @param setupState The current setup state of the connector. The available values are: \n\n - incomplete - the setup config is incomplete, the setup tests never succeeded \n\n - connected - the connector is properly set up \n\n - broken - the connector setup config is broken.
         * 
         * @return builder
         * 
         */
        public Builder setupState(String setupState) {
            return setupState(Output.of(setupState));
        }

        /**
         * @param syncState The current sync state of the connector. The available values are: \n\n - scheduled - the sync is waiting to be run \n\n - syncing - the sync is currently running \n\n - paused - the sync is currently paused \n\n - rescheduled - the sync is waiting until more API calls are available in the source service.
         * 
         * @return builder
         * 
         */
        public Builder syncState(Output<String> syncState) {
            $.syncState = syncState;
            return this;
        }

        /**
         * @param syncState The current sync state of the connector. The available values are: \n\n - scheduled - the sync is waiting to be run \n\n - syncing - the sync is currently running \n\n - paused - the sync is currently paused \n\n - rescheduled - the sync is waiting until more API calls are available in the source service.
         * 
         * @return builder
         * 
         */
        public Builder syncState(String syncState) {
            return syncState(Output.of(syncState));
        }

        /**
         * @param tasks The collection of tasks for the connector
         * 
         * @return builder
         * 
         */
        public Builder tasks(Output<List<GetGroupConnectorsConnectorStatusTaskArgs>> tasks) {
            $.tasks = tasks;
            return this;
        }

        /**
         * @param tasks The collection of tasks for the connector
         * 
         * @return builder
         * 
         */
        public Builder tasks(List<GetGroupConnectorsConnectorStatusTaskArgs> tasks) {
            return tasks(Output.of(tasks));
        }

        /**
         * @param tasks The collection of tasks for the connector
         * 
         * @return builder
         * 
         */
        public Builder tasks(GetGroupConnectorsConnectorStatusTaskArgs... tasks) {
            return tasks(List.of(tasks));
        }

        /**
         * @param updateState The current data update state of the connector. The available values are: \n\n - on_schedule - the sync is running smoothly, no delays \n\n - delayed - the data is delayed for a longer time than expected for the update.
         * 
         * @return builder
         * 
         */
        public Builder updateState(Output<String> updateState) {
            $.updateState = updateState;
            return this;
        }

        /**
         * @param updateState The current data update state of the connector. The available values are: \n\n - on_schedule - the sync is running smoothly, no delays \n\n - delayed - the data is delayed for a longer time than expected for the update.
         * 
         * @return builder
         * 
         */
        public Builder updateState(String updateState) {
            return updateState(Output.of(updateState));
        }

        public Builder warnings(Output<List<GetGroupConnectorsConnectorStatusWarningArgs>> warnings) {
            $.warnings = warnings;
            return this;
        }

        public Builder warnings(List<GetGroupConnectorsConnectorStatusWarningArgs> warnings) {
            return warnings(Output.of(warnings));
        }

        public Builder warnings(GetGroupConnectorsConnectorStatusWarningArgs... warnings) {
            return warnings(List.of(warnings));
        }

        public GetGroupConnectorsConnectorStatusArgs build() {
            $.isHistoricalSync = Objects.requireNonNull($.isHistoricalSync, "expected parameter 'isHistoricalSync' to be non-null");
            $.setupState = Objects.requireNonNull($.setupState, "expected parameter 'setupState' to be non-null");
            $.syncState = Objects.requireNonNull($.syncState, "expected parameter 'syncState' to be non-null");
            $.tasks = Objects.requireNonNull($.tasks, "expected parameter 'tasks' to be non-null");
            $.updateState = Objects.requireNonNull($.updateState, "expected parameter 'updateState' to be non-null");
            $.warnings = Objects.requireNonNull($.warnings, "expected parameter 'warnings' to be non-null");
            return $;
        }
    }

}
