// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.outputs;

import com.footholdtech.fivetran.outputs.GetGroupConnectorsConnectorStatusTask;
import com.footholdtech.fivetran.outputs.GetGroupConnectorsConnectorStatusWarning;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGroupConnectorsConnectorStatus {
    /**
     * @return The boolean specifying whether the connector should be triggered to re-sync all historical data. If you set this parameter to TRUE, the next scheduled sync will be historical. If the value is FALSE or not specified, the connector will not re-sync historical data. NOTE: When the value is TRUE, only the next scheduled sync will be historical, all subsequent ones will be incremental. This parameter is set to FALSE once the historical sync is completed.
     * 
     */
    private Boolean isHistoricalSync;
    /**
     * @return The current setup state of the connector. The available values are: \n\n - incomplete - the setup config is incomplete, the setup tests never succeeded \n\n - connected - the connector is properly set up \n\n - broken - the connector setup config is broken.
     * 
     */
    private String setupState;
    /**
     * @return The current sync state of the connector. The available values are: \n\n - scheduled - the sync is waiting to be run \n\n - syncing - the sync is currently running \n\n - paused - the sync is currently paused \n\n - rescheduled - the sync is waiting until more API calls are available in the source service.
     * 
     */
    private String syncState;
    /**
     * @return The collection of tasks for the connector
     * 
     */
    private List<GetGroupConnectorsConnectorStatusTask> tasks;
    /**
     * @return The current data update state of the connector. The available values are: \n\n - on_schedule - the sync is running smoothly, no delays \n\n - delayed - the data is delayed for a longer time than expected for the update.
     * 
     */
    private String updateState;
    private List<GetGroupConnectorsConnectorStatusWarning> warnings;

    private GetGroupConnectorsConnectorStatus() {}
    /**
     * @return The boolean specifying whether the connector should be triggered to re-sync all historical data. If you set this parameter to TRUE, the next scheduled sync will be historical. If the value is FALSE or not specified, the connector will not re-sync historical data. NOTE: When the value is TRUE, only the next scheduled sync will be historical, all subsequent ones will be incremental. This parameter is set to FALSE once the historical sync is completed.
     * 
     */
    public Boolean isHistoricalSync() {
        return this.isHistoricalSync;
    }
    /**
     * @return The current setup state of the connector. The available values are: \n\n - incomplete - the setup config is incomplete, the setup tests never succeeded \n\n - connected - the connector is properly set up \n\n - broken - the connector setup config is broken.
     * 
     */
    public String setupState() {
        return this.setupState;
    }
    /**
     * @return The current sync state of the connector. The available values are: \n\n - scheduled - the sync is waiting to be run \n\n - syncing - the sync is currently running \n\n - paused - the sync is currently paused \n\n - rescheduled - the sync is waiting until more API calls are available in the source service.
     * 
     */
    public String syncState() {
        return this.syncState;
    }
    /**
     * @return The collection of tasks for the connector
     * 
     */
    public List<GetGroupConnectorsConnectorStatusTask> tasks() {
        return this.tasks;
    }
    /**
     * @return The current data update state of the connector. The available values are: \n\n - on_schedule - the sync is running smoothly, no delays \n\n - delayed - the data is delayed for a longer time than expected for the update.
     * 
     */
    public String updateState() {
        return this.updateState;
    }
    public List<GetGroupConnectorsConnectorStatusWarning> warnings() {
        return this.warnings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGroupConnectorsConnectorStatus defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean isHistoricalSync;
        private String setupState;
        private String syncState;
        private List<GetGroupConnectorsConnectorStatusTask> tasks;
        private String updateState;
        private List<GetGroupConnectorsConnectorStatusWarning> warnings;
        public Builder() {}
        public Builder(GetGroupConnectorsConnectorStatus defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.isHistoricalSync = defaults.isHistoricalSync;
    	      this.setupState = defaults.setupState;
    	      this.syncState = defaults.syncState;
    	      this.tasks = defaults.tasks;
    	      this.updateState = defaults.updateState;
    	      this.warnings = defaults.warnings;
        }

        @CustomType.Setter
        public Builder isHistoricalSync(Boolean isHistoricalSync) {
            this.isHistoricalSync = Objects.requireNonNull(isHistoricalSync);
            return this;
        }
        @CustomType.Setter
        public Builder setupState(String setupState) {
            this.setupState = Objects.requireNonNull(setupState);
            return this;
        }
        @CustomType.Setter
        public Builder syncState(String syncState) {
            this.syncState = Objects.requireNonNull(syncState);
            return this;
        }
        @CustomType.Setter
        public Builder tasks(List<GetGroupConnectorsConnectorStatusTask> tasks) {
            this.tasks = Objects.requireNonNull(tasks);
            return this;
        }
        public Builder tasks(GetGroupConnectorsConnectorStatusTask... tasks) {
            return tasks(List.of(tasks));
        }
        @CustomType.Setter
        public Builder updateState(String updateState) {
            this.updateState = Objects.requireNonNull(updateState);
            return this;
        }
        @CustomType.Setter
        public Builder warnings(List<GetGroupConnectorsConnectorStatusWarning> warnings) {
            this.warnings = Objects.requireNonNull(warnings);
            return this;
        }
        public Builder warnings(GetGroupConnectorsConnectorStatusWarning... warnings) {
            return warnings(List.of(warnings));
        }
        public GetGroupConnectorsConnectorStatus build() {
            final var o = new GetGroupConnectorsConnectorStatus();
            o.isHistoricalSync = isHistoricalSync;
            o.setupState = setupState;
            o.syncState = syncState;
            o.tasks = tasks;
            o.updateState = updateState;
            o.warnings = warnings;
            return o;
        }
    }
}
