// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorConfigCustomReportArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorConfigCustomReportArgs Empty = new ConnectorConfigCustomReportArgs();

    @Import(name="aggregate")
    private @Nullable Output<String> aggregate;

    public Optional<Output<String>> aggregate() {
        return Optional.ofNullable(this.aggregate);
    }

    @Import(name="baseMetricsFields")
    private @Nullable Output<List<String>> baseMetricsFields;

    public Optional<Output<List<String>>> baseMetricsFields() {
        return Optional.ofNullable(this.baseMetricsFields);
    }

    @Import(name="breakdown")
    private @Nullable Output<String> breakdown;

    public Optional<Output<String>> breakdown() {
        return Optional.ofNullable(this.breakdown);
    }

    @Import(name="breakout")
    private @Nullable Output<String> breakout;

    public Optional<Output<String>> breakout() {
        return Optional.ofNullable(this.breakout);
    }

    @Import(name="conversionsReportIncluded")
    private @Nullable Output<String> conversionsReportIncluded;

    public Optional<Output<String>> conversionsReportIncluded() {
        return Optional.ofNullable(this.conversionsReportIncluded);
    }

    @Import(name="customEventsIncluded")
    private @Nullable Output<String> customEventsIncluded;

    public Optional<Output<String>> customEventsIncluded() {
        return Optional.ofNullable(this.customEventsIncluded);
    }

    @Import(name="dimension")
    private @Nullable Output<String> dimension;

    public Optional<Output<String>> dimension() {
        return Optional.ofNullable(this.dimension);
    }

    @Import(name="dimensions")
    private @Nullable Output<List<String>> dimensions;

    public Optional<Output<List<String>>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    @Import(name="eventNames")
    private @Nullable Output<List<String>> eventNames;

    public Optional<Output<List<String>>> eventNames() {
        return Optional.ofNullable(this.eventNames);
    }

    @Import(name="granularity")
    private @Nullable Output<String> granularity;

    public Optional<Output<String>> granularity() {
        return Optional.ofNullable(this.granularity);
    }

    @Import(name="level")
    private @Nullable Output<String> level;

    public Optional<Output<String>> level() {
        return Optional.ofNullable(this.level);
    }

    @Import(name="metrics")
    private @Nullable Output<List<String>> metrics;

    public Optional<Output<List<String>>> metrics() {
        return Optional.ofNullable(this.metrics);
    }

    @Import(name="reportFields")
    private @Nullable Output<List<String>> reportFields;

    public Optional<Output<List<String>>> reportFields() {
        return Optional.ofNullable(this.reportFields);
    }

    @Import(name="reportName")
    private @Nullable Output<String> reportName;

    public Optional<Output<String>> reportName() {
        return Optional.ofNullable(this.reportName);
    }

    @Import(name="reportType")
    private @Nullable Output<String> reportType;

    public Optional<Output<String>> reportType() {
        return Optional.ofNullable(this.reportType);
    }

    @Import(name="segmentation")
    private @Nullable Output<String> segmentation;

    public Optional<Output<String>> segmentation() {
        return Optional.ofNullable(this.segmentation);
    }

    @Import(name="skAdMetricsFields")
    private @Nullable Output<List<String>> skAdMetricsFields;

    public Optional<Output<List<String>>> skAdMetricsFields() {
        return Optional.ofNullable(this.skAdMetricsFields);
    }

    @Import(name="tableName")
    private @Nullable Output<String> tableName;

    public Optional<Output<String>> tableName() {
        return Optional.ofNullable(this.tableName);
    }

    private ConnectorConfigCustomReportArgs() {}

    private ConnectorConfigCustomReportArgs(ConnectorConfigCustomReportArgs $) {
        this.aggregate = $.aggregate;
        this.baseMetricsFields = $.baseMetricsFields;
        this.breakdown = $.breakdown;
        this.breakout = $.breakout;
        this.conversionsReportIncluded = $.conversionsReportIncluded;
        this.customEventsIncluded = $.customEventsIncluded;
        this.dimension = $.dimension;
        this.dimensions = $.dimensions;
        this.eventNames = $.eventNames;
        this.granularity = $.granularity;
        this.level = $.level;
        this.metrics = $.metrics;
        this.reportFields = $.reportFields;
        this.reportName = $.reportName;
        this.reportType = $.reportType;
        this.segmentation = $.segmentation;
        this.skAdMetricsFields = $.skAdMetricsFields;
        this.tableName = $.tableName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorConfigCustomReportArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorConfigCustomReportArgs $;

        public Builder() {
            $ = new ConnectorConfigCustomReportArgs();
        }

        public Builder(ConnectorConfigCustomReportArgs defaults) {
            $ = new ConnectorConfigCustomReportArgs(Objects.requireNonNull(defaults));
        }

        public Builder aggregate(@Nullable Output<String> aggregate) {
            $.aggregate = aggregate;
            return this;
        }

        public Builder aggregate(String aggregate) {
            return aggregate(Output.of(aggregate));
        }

        public Builder baseMetricsFields(@Nullable Output<List<String>> baseMetricsFields) {
            $.baseMetricsFields = baseMetricsFields;
            return this;
        }

        public Builder baseMetricsFields(List<String> baseMetricsFields) {
            return baseMetricsFields(Output.of(baseMetricsFields));
        }

        public Builder baseMetricsFields(String... baseMetricsFields) {
            return baseMetricsFields(List.of(baseMetricsFields));
        }

        public Builder breakdown(@Nullable Output<String> breakdown) {
            $.breakdown = breakdown;
            return this;
        }

        public Builder breakdown(String breakdown) {
            return breakdown(Output.of(breakdown));
        }

        public Builder breakout(@Nullable Output<String> breakout) {
            $.breakout = breakout;
            return this;
        }

        public Builder breakout(String breakout) {
            return breakout(Output.of(breakout));
        }

        public Builder conversionsReportIncluded(@Nullable Output<String> conversionsReportIncluded) {
            $.conversionsReportIncluded = conversionsReportIncluded;
            return this;
        }

        public Builder conversionsReportIncluded(String conversionsReportIncluded) {
            return conversionsReportIncluded(Output.of(conversionsReportIncluded));
        }

        public Builder customEventsIncluded(@Nullable Output<String> customEventsIncluded) {
            $.customEventsIncluded = customEventsIncluded;
            return this;
        }

        public Builder customEventsIncluded(String customEventsIncluded) {
            return customEventsIncluded(Output.of(customEventsIncluded));
        }

        public Builder dimension(@Nullable Output<String> dimension) {
            $.dimension = dimension;
            return this;
        }

        public Builder dimension(String dimension) {
            return dimension(Output.of(dimension));
        }

        public Builder dimensions(@Nullable Output<List<String>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        public Builder dimensions(List<String> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        public Builder dimensions(String... dimensions) {
            return dimensions(List.of(dimensions));
        }

        public Builder eventNames(@Nullable Output<List<String>> eventNames) {
            $.eventNames = eventNames;
            return this;
        }

        public Builder eventNames(List<String> eventNames) {
            return eventNames(Output.of(eventNames));
        }

        public Builder eventNames(String... eventNames) {
            return eventNames(List.of(eventNames));
        }

        public Builder granularity(@Nullable Output<String> granularity) {
            $.granularity = granularity;
            return this;
        }

        public Builder granularity(String granularity) {
            return granularity(Output.of(granularity));
        }

        public Builder level(@Nullable Output<String> level) {
            $.level = level;
            return this;
        }

        public Builder level(String level) {
            return level(Output.of(level));
        }

        public Builder metrics(@Nullable Output<List<String>> metrics) {
            $.metrics = metrics;
            return this;
        }

        public Builder metrics(List<String> metrics) {
            return metrics(Output.of(metrics));
        }

        public Builder metrics(String... metrics) {
            return metrics(List.of(metrics));
        }

        public Builder reportFields(@Nullable Output<List<String>> reportFields) {
            $.reportFields = reportFields;
            return this;
        }

        public Builder reportFields(List<String> reportFields) {
            return reportFields(Output.of(reportFields));
        }

        public Builder reportFields(String... reportFields) {
            return reportFields(List.of(reportFields));
        }

        public Builder reportName(@Nullable Output<String> reportName) {
            $.reportName = reportName;
            return this;
        }

        public Builder reportName(String reportName) {
            return reportName(Output.of(reportName));
        }

        public Builder reportType(@Nullable Output<String> reportType) {
            $.reportType = reportType;
            return this;
        }

        public Builder reportType(String reportType) {
            return reportType(Output.of(reportType));
        }

        public Builder segmentation(@Nullable Output<String> segmentation) {
            $.segmentation = segmentation;
            return this;
        }

        public Builder segmentation(String segmentation) {
            return segmentation(Output.of(segmentation));
        }

        public Builder skAdMetricsFields(@Nullable Output<List<String>> skAdMetricsFields) {
            $.skAdMetricsFields = skAdMetricsFields;
            return this;
        }

        public Builder skAdMetricsFields(List<String> skAdMetricsFields) {
            return skAdMetricsFields(Output.of(skAdMetricsFields));
        }

        public Builder skAdMetricsFields(String... skAdMetricsFields) {
            return skAdMetricsFields(List.of(skAdMetricsFields));
        }

        public Builder tableName(@Nullable Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public ConnectorConfigCustomReportArgs build() {
            return $;
        }
    }

}
