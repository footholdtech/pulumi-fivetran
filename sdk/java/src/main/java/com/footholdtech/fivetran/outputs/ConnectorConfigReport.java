// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.footholdtech.fivetran.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ConnectorConfigReport {
    private @Nullable String aggregation;
    private @Nullable List<String> attributes;
    private @Nullable String configType;
    private @Nullable List<String> dimensions;
    private @Nullable List<String> fields;
    private @Nullable String filter;
    private @Nullable String filterFieldName;
    private @Nullable String filterType;
    private @Nullable String filterValue;
    private @Nullable List<String> metrics;
    private @Nullable String prebuiltReport;
    private @Nullable String reportType;
    private @Nullable String rollbackWindow;
    private @Nullable List<String> searchTypes;
    private @Nullable List<String> segmentIds;
    private @Nullable List<String> segments;
    private @Nullable String table;

    private ConnectorConfigReport() {}
    public Optional<String> aggregation() {
        return Optional.ofNullable(this.aggregation);
    }
    public List<String> attributes() {
        return this.attributes == null ? List.of() : this.attributes;
    }
    public Optional<String> configType() {
        return Optional.ofNullable(this.configType);
    }
    public List<String> dimensions() {
        return this.dimensions == null ? List.of() : this.dimensions;
    }
    public List<String> fields() {
        return this.fields == null ? List.of() : this.fields;
    }
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }
    public Optional<String> filterFieldName() {
        return Optional.ofNullable(this.filterFieldName);
    }
    public Optional<String> filterType() {
        return Optional.ofNullable(this.filterType);
    }
    public Optional<String> filterValue() {
        return Optional.ofNullable(this.filterValue);
    }
    public List<String> metrics() {
        return this.metrics == null ? List.of() : this.metrics;
    }
    public Optional<String> prebuiltReport() {
        return Optional.ofNullable(this.prebuiltReport);
    }
    public Optional<String> reportType() {
        return Optional.ofNullable(this.reportType);
    }
    public Optional<String> rollbackWindow() {
        return Optional.ofNullable(this.rollbackWindow);
    }
    public List<String> searchTypes() {
        return this.searchTypes == null ? List.of() : this.searchTypes;
    }
    public List<String> segmentIds() {
        return this.segmentIds == null ? List.of() : this.segmentIds;
    }
    public List<String> segments() {
        return this.segments == null ? List.of() : this.segments;
    }
    public Optional<String> table() {
        return Optional.ofNullable(this.table);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectorConfigReport defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String aggregation;
        private @Nullable List<String> attributes;
        private @Nullable String configType;
        private @Nullable List<String> dimensions;
        private @Nullable List<String> fields;
        private @Nullable String filter;
        private @Nullable String filterFieldName;
        private @Nullable String filterType;
        private @Nullable String filterValue;
        private @Nullable List<String> metrics;
        private @Nullable String prebuiltReport;
        private @Nullable String reportType;
        private @Nullable String rollbackWindow;
        private @Nullable List<String> searchTypes;
        private @Nullable List<String> segmentIds;
        private @Nullable List<String> segments;
        private @Nullable String table;
        public Builder() {}
        public Builder(ConnectorConfigReport defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregation = defaults.aggregation;
    	      this.attributes = defaults.attributes;
    	      this.configType = defaults.configType;
    	      this.dimensions = defaults.dimensions;
    	      this.fields = defaults.fields;
    	      this.filter = defaults.filter;
    	      this.filterFieldName = defaults.filterFieldName;
    	      this.filterType = defaults.filterType;
    	      this.filterValue = defaults.filterValue;
    	      this.metrics = defaults.metrics;
    	      this.prebuiltReport = defaults.prebuiltReport;
    	      this.reportType = defaults.reportType;
    	      this.rollbackWindow = defaults.rollbackWindow;
    	      this.searchTypes = defaults.searchTypes;
    	      this.segmentIds = defaults.segmentIds;
    	      this.segments = defaults.segments;
    	      this.table = defaults.table;
        }

        @CustomType.Setter
        public Builder aggregation(@Nullable String aggregation) {
            this.aggregation = aggregation;
            return this;
        }
        @CustomType.Setter
        public Builder attributes(@Nullable List<String> attributes) {
            this.attributes = attributes;
            return this;
        }
        public Builder attributes(String... attributes) {
            return attributes(List.of(attributes));
        }
        @CustomType.Setter
        public Builder configType(@Nullable String configType) {
            this.configType = configType;
            return this;
        }
        @CustomType.Setter
        public Builder dimensions(@Nullable List<String> dimensions) {
            this.dimensions = dimensions;
            return this;
        }
        public Builder dimensions(String... dimensions) {
            return dimensions(List.of(dimensions));
        }
        @CustomType.Setter
        public Builder fields(@Nullable List<String> fields) {
            this.fields = fields;
            return this;
        }
        public Builder fields(String... fields) {
            return fields(List.of(fields));
        }
        @CustomType.Setter
        public Builder filter(@Nullable String filter) {
            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder filterFieldName(@Nullable String filterFieldName) {
            this.filterFieldName = filterFieldName;
            return this;
        }
        @CustomType.Setter
        public Builder filterType(@Nullable String filterType) {
            this.filterType = filterType;
            return this;
        }
        @CustomType.Setter
        public Builder filterValue(@Nullable String filterValue) {
            this.filterValue = filterValue;
            return this;
        }
        @CustomType.Setter
        public Builder metrics(@Nullable List<String> metrics) {
            this.metrics = metrics;
            return this;
        }
        public Builder metrics(String... metrics) {
            return metrics(List.of(metrics));
        }
        @CustomType.Setter
        public Builder prebuiltReport(@Nullable String prebuiltReport) {
            this.prebuiltReport = prebuiltReport;
            return this;
        }
        @CustomType.Setter
        public Builder reportType(@Nullable String reportType) {
            this.reportType = reportType;
            return this;
        }
        @CustomType.Setter
        public Builder rollbackWindow(@Nullable String rollbackWindow) {
            this.rollbackWindow = rollbackWindow;
            return this;
        }
        @CustomType.Setter
        public Builder searchTypes(@Nullable List<String> searchTypes) {
            this.searchTypes = searchTypes;
            return this;
        }
        public Builder searchTypes(String... searchTypes) {
            return searchTypes(List.of(searchTypes));
        }
        @CustomType.Setter
        public Builder segmentIds(@Nullable List<String> segmentIds) {
            this.segmentIds = segmentIds;
            return this;
        }
        public Builder segmentIds(String... segmentIds) {
            return segmentIds(List.of(segmentIds));
        }
        @CustomType.Setter
        public Builder segments(@Nullable List<String> segments) {
            this.segments = segments;
            return this;
        }
        public Builder segments(String... segments) {
            return segments(List.of(segments));
        }
        @CustomType.Setter
        public Builder table(@Nullable String table) {
            this.table = table;
            return this;
        }
        public ConnectorConfigReport build() {
            final var o = new ConnectorConfigReport();
            o.aggregation = aggregation;
            o.attributes = attributes;
            o.configType = configType;
            o.dimensions = dimensions;
            o.fields = fields;
            o.filter = filter;
            o.filterFieldName = filterFieldName;
            o.filterType = filterType;
            o.filterValue = filterValue;
            o.metrics = metrics;
            o.prebuiltReport = prebuiltReport;
            o.reportType = reportType;
            o.rollbackWindow = rollbackWindow;
            o.searchTypes = searchTypes;
            o.segmentIds = segmentIds;
            o.segments = segments;
            o.table = table;
            return o;
        }
    }
}
