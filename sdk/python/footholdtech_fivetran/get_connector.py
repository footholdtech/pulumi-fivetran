# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetConnectorResult',
    'AwaitableGetConnectorResult',
    'get_connector',
    'get_connector_output',
]

@pulumi.output_type
class GetConnectorResult:
    """
    A collection of values returned by getConnector.
    """
    def __init__(__self__, configs=None, connected_by=None, created_at=None, daily_sync_time=None, destination_schemas=None, failed_at=None, group_id=None, id=None, name=None, pause_after_trial=None, paused=None, schedule_type=None, service=None, service_version=None, statuses=None, succeeded_at=None, sync_frequency=None):
        if configs and not isinstance(configs, list):
            raise TypeError("Expected argument 'configs' to be a list")
        pulumi.set(__self__, "configs", configs)
        if connected_by and not isinstance(connected_by, str):
            raise TypeError("Expected argument 'connected_by' to be a str")
        pulumi.set(__self__, "connected_by", connected_by)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if daily_sync_time and not isinstance(daily_sync_time, str):
            raise TypeError("Expected argument 'daily_sync_time' to be a str")
        pulumi.set(__self__, "daily_sync_time", daily_sync_time)
        if destination_schemas and not isinstance(destination_schemas, list):
            raise TypeError("Expected argument 'destination_schemas' to be a list")
        pulumi.set(__self__, "destination_schemas", destination_schemas)
        if failed_at and not isinstance(failed_at, str):
            raise TypeError("Expected argument 'failed_at' to be a str")
        pulumi.set(__self__, "failed_at", failed_at)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pause_after_trial and not isinstance(pause_after_trial, str):
            raise TypeError("Expected argument 'pause_after_trial' to be a str")
        pulumi.set(__self__, "pause_after_trial", pause_after_trial)
        if paused and not isinstance(paused, str):
            raise TypeError("Expected argument 'paused' to be a str")
        pulumi.set(__self__, "paused", paused)
        if schedule_type and not isinstance(schedule_type, str):
            raise TypeError("Expected argument 'schedule_type' to be a str")
        pulumi.set(__self__, "schedule_type", schedule_type)
        if service and not isinstance(service, str):
            raise TypeError("Expected argument 'service' to be a str")
        pulumi.set(__self__, "service", service)
        if service_version and not isinstance(service_version, str):
            raise TypeError("Expected argument 'service_version' to be a str")
        pulumi.set(__self__, "service_version", service_version)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if succeeded_at and not isinstance(succeeded_at, str):
            raise TypeError("Expected argument 'succeeded_at' to be a str")
        pulumi.set(__self__, "succeeded_at", succeeded_at)
        if sync_frequency and not isinstance(sync_frequency, str):
            raise TypeError("Expected argument 'sync_frequency' to be a str")
        pulumi.set(__self__, "sync_frequency", sync_frequency)

    @property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetConnectorConfigResult']:
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter(name="connectedBy")
    def connected_by(self) -> str:
        return pulumi.get(self, "connected_by")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dailySyncTime")
    def daily_sync_time(self) -> str:
        return pulumi.get(self, "daily_sync_time")

    @property
    @pulumi.getter(name="destinationSchemas")
    def destination_schemas(self) -> Sequence['outputs.GetConnectorDestinationSchemaResult']:
        return pulumi.get(self, "destination_schemas")

    @property
    @pulumi.getter(name="failedAt")
    def failed_at(self) -> str:
        return pulumi.get(self, "failed_at")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pauseAfterTrial")
    def pause_after_trial(self) -> str:
        return pulumi.get(self, "pause_after_trial")

    @property
    @pulumi.getter
    def paused(self) -> str:
        return pulumi.get(self, "paused")

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> str:
        return pulumi.get(self, "schedule_type")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="serviceVersion")
    def service_version(self) -> str:
        return pulumi.get(self, "service_version")

    @property
    @pulumi.getter
    def statuses(self) -> Sequence['outputs.GetConnectorStatusResult']:
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter(name="succeededAt")
    def succeeded_at(self) -> str:
        return pulumi.get(self, "succeeded_at")

    @property
    @pulumi.getter(name="syncFrequency")
    def sync_frequency(self) -> str:
        return pulumi.get(self, "sync_frequency")


class AwaitableGetConnectorResult(GetConnectorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectorResult(
            configs=self.configs,
            connected_by=self.connected_by,
            created_at=self.created_at,
            daily_sync_time=self.daily_sync_time,
            destination_schemas=self.destination_schemas,
            failed_at=self.failed_at,
            group_id=self.group_id,
            id=self.id,
            name=self.name,
            pause_after_trial=self.pause_after_trial,
            paused=self.paused,
            schedule_type=self.schedule_type,
            service=self.service,
            service_version=self.service_version,
            statuses=self.statuses,
            succeeded_at=self.succeeded_at,
            sync_frequency=self.sync_frequency)


def get_connector(configs: Optional[Sequence[pulumi.InputType['GetConnectorConfigArgs']]] = None,
                  id: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectorResult:
    """
    This data source returns a connector object.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    connector = fivetran.get_connector(id="anonymous_mystery")
    ```
    """
    __args__ = dict()
    __args__['configs'] = configs
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fivetran:index/getConnector:getConnector', __args__, opts=opts, typ=GetConnectorResult).value

    return AwaitableGetConnectorResult(
        configs=pulumi.get(__ret__, 'configs'),
        connected_by=pulumi.get(__ret__, 'connected_by'),
        created_at=pulumi.get(__ret__, 'created_at'),
        daily_sync_time=pulumi.get(__ret__, 'daily_sync_time'),
        destination_schemas=pulumi.get(__ret__, 'destination_schemas'),
        failed_at=pulumi.get(__ret__, 'failed_at'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        pause_after_trial=pulumi.get(__ret__, 'pause_after_trial'),
        paused=pulumi.get(__ret__, 'paused'),
        schedule_type=pulumi.get(__ret__, 'schedule_type'),
        service=pulumi.get(__ret__, 'service'),
        service_version=pulumi.get(__ret__, 'service_version'),
        statuses=pulumi.get(__ret__, 'statuses'),
        succeeded_at=pulumi.get(__ret__, 'succeeded_at'),
        sync_frequency=pulumi.get(__ret__, 'sync_frequency'))


@_utilities.lift_output_func(get_connector)
def get_connector_output(configs: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetConnectorConfigArgs']]]]] = None,
                         id: Optional[pulumi.Input[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConnectorResult]:
    """
    This data source returns a connector object.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    connector = fivetran.get_connector(id="anonymous_mystery")
    ```
    """
    ...
