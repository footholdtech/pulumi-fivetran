# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetUserGroupMembershipsResult',
    'AwaitableGetUserGroupMembershipsResult',
    'get_user_group_memberships',
    'get_user_group_memberships_output',
]

@pulumi.output_type
class GetUserGroupMembershipsResult:
    """
    A collection of values returned by getUserGroupMemberships.
    """
    def __init__(__self__, groups=None, id=None, user_id=None):
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence['outputs.GetUserGroupMembershipsGroupResult']]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The unique identifier for the user within your account.
        """
        return pulumi.get(self, "user_id")


class AwaitableGetUserGroupMembershipsResult(GetUserGroupMembershipsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserGroupMembershipsResult(
            groups=self.groups,
            id=self.id,
            user_id=self.user_id)


def get_user_group_memberships(groups: Optional[Sequence[pulumi.InputType['GetUserGroupMembershipsGroupArgs']]] = None,
                               user_id: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserGroupMembershipsResult:
    """
    This data source returns a list of group memberships for user.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    team_group_memberships = fivetran.get_user_group_memberships(user_id="user_id")
    ```


    :param str user_id: The unique identifier for the user within your account.
    """
    __args__ = dict()
    __args__['groups'] = groups
    __args__['userId'] = user_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fivetran:index/getUserGroupMemberships:getUserGroupMemberships', __args__, opts=opts, typ=GetUserGroupMembershipsResult).value

    return AwaitableGetUserGroupMembershipsResult(
        groups=pulumi.get(__ret__, 'groups'),
        id=pulumi.get(__ret__, 'id'),
        user_id=pulumi.get(__ret__, 'user_id'))


@_utilities.lift_output_func(get_user_group_memberships)
def get_user_group_memberships_output(groups: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetUserGroupMembershipsGroupArgs']]]]] = None,
                                      user_id: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUserGroupMembershipsResult]:
    """
    This data source returns a list of group memberships for user.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    team_group_memberships = fivetran.get_user_group_memberships(user_id="user_id")
    ```


    :param str user_id: The unique identifier for the user within your account.
    """
    ...
