# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetProxyAgentResult',
    'AwaitableGetProxyAgentResult',
    'get_proxy_agent',
    'get_proxy_agent_output',
]

@pulumi.output_type
class GetProxyAgentResult:
    """
    A collection of values returned by getProxyAgent.
    """
    def __init__(__self__, created_by=None, display_name=None, group_region=None, id=None, registred_at=None, salt=None, token=None):
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if group_region and not isinstance(group_region, str):
            raise TypeError("Expected argument 'group_region' to be a str")
        pulumi.set(__self__, "group_region", group_region)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if registred_at and not isinstance(registred_at, str):
            raise TypeError("Expected argument 'registred_at' to be a str")
        pulumi.set(__self__, "registred_at", registred_at)
        if salt and not isinstance(salt, str):
            raise TypeError("Expected argument 'salt' to be a str")
        pulumi.set(__self__, "salt", salt)
        if token and not isinstance(token, str):
            raise TypeError("Expected argument 'token' to be a str")
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The actor who created the proxy agent.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Proxy agent name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="groupRegion")
    def group_region(self) -> str:
        """
        Data processing location. This is where Fivetran will operate and run computation on data.
        """
        return pulumi.get(self, "group_region")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier for the proxy within your account.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="registredAt")
    def registred_at(self) -> str:
        """
        The timestamp of the time the proxy agent was created in your account.
        """
        return pulumi.get(self, "registred_at")

    @property
    @pulumi.getter
    def salt(self) -> str:
        """
        The salt.
        """
        return pulumi.get(self, "salt")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        The auth token.
        """
        return pulumi.get(self, "token")


class AwaitableGetProxyAgentResult(GetProxyAgentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProxyAgentResult(
            created_by=self.created_by,
            display_name=self.display_name,
            group_region=self.group_region,
            id=self.id,
            registred_at=self.registred_at,
            salt=self.salt,
            token=self.token)


def get_proxy_agent(id: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProxyAgentResult:
    """
    This data source returns a proxy agent object.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    proxy_agent = fivetran.get_proxy_agent(id="proxy_id")
    ```


    :param str id: The unique identifier for the proxy within your account.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fivetran:index/getProxyAgent:getProxyAgent', __args__, opts=opts, typ=GetProxyAgentResult).value

    return AwaitableGetProxyAgentResult(
        created_by=pulumi.get(__ret__, 'created_by'),
        display_name=pulumi.get(__ret__, 'display_name'),
        group_region=pulumi.get(__ret__, 'group_region'),
        id=pulumi.get(__ret__, 'id'),
        registred_at=pulumi.get(__ret__, 'registred_at'),
        salt=pulumi.get(__ret__, 'salt'),
        token=pulumi.get(__ret__, 'token'))


@_utilities.lift_output_func(get_proxy_agent)
def get_proxy_agent_output(id: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProxyAgentResult]:
    """
    This data source returns a proxy agent object.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    proxy_agent = fivetran.get_proxy_agent(id="proxy_id")
    ```


    :param str id: The unique identifier for the proxy within your account.
    """
    ...
