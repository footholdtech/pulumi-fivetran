# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetMetadataTablesResult',
    'AwaitableGetMetadataTablesResult',
    'get_metadata_tables',
    'get_metadata_tables_output',
]

@pulumi.output_type
class GetMetadataTablesResult:
    """
    A collection of values returned by getMetadataTables.
    """
    def __init__(__self__, id=None, metadata_tables=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metadata_tables and not isinstance(metadata_tables, list):
            raise TypeError("Expected argument 'metadata_tables' to be a list")
        pulumi.set(__self__, "metadata_tables", metadata_tables)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier for the connector within the Fivetran system. Data-source will represent a set of tables of connector.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="metadataTables")
    def metadata_tables(self) -> Sequence['outputs.GetMetadataTablesMetadataTableResult']:
        return pulumi.get(self, "metadata_tables")


class AwaitableGetMetadataTablesResult(GetMetadataTablesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetadataTablesResult(
            id=self.id,
            metadata_tables=self.metadata_tables)


def get_metadata_tables(id: Optional[str] = None,
                        metadata_tables: Optional[Sequence[pulumi.InputType['GetMetadataTablesMetadataTableArgs']]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetadataTablesResult:
    """
    This data source returns table-level metadata for an existing connector within your Fivetran account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    metadata_tables = fivetran.get_metadata_tables()
    ```


    :param str id: The unique table identifier
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['metadataTables'] = metadata_tables
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fivetran:index/getMetadataTables:getMetadataTables', __args__, opts=opts, typ=GetMetadataTablesResult).value

    return AwaitableGetMetadataTablesResult(
        id=pulumi.get(__ret__, 'id'),
        metadata_tables=pulumi.get(__ret__, 'metadata_tables'))


@_utilities.lift_output_func(get_metadata_tables)
def get_metadata_tables_output(id: Optional[pulumi.Input[str]] = None,
                               metadata_tables: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetMetadataTablesMetadataTableArgs']]]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMetadataTablesResult]:
    """
    This data source returns table-level metadata for an existing connector within your Fivetran account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    metadata_tables = fivetran.get_metadata_tables()
    ```


    :param str id: The unique table identifier
    """
    ...
