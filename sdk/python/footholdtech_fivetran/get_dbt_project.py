# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetDbtProjectResult',
    'AwaitableGetDbtProjectResult',
    'get_dbt_project',
    'get_dbt_project_output',
]

@pulumi.output_type
class GetDbtProjectResult:
    """
    A collection of values returned by getDbtProject.
    """
    def __init__(__self__, created_at=None, created_by_id=None, dbt_version=None, default_schema=None, ensure_readiness=None, environment_vars=None, group_id=None, id=None, models=None, project_config=None, public_key=None, status=None, target_name=None, threads=None, type=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by_id and not isinstance(created_by_id, str):
            raise TypeError("Expected argument 'created_by_id' to be a str")
        pulumi.set(__self__, "created_by_id", created_by_id)
        if dbt_version and not isinstance(dbt_version, str):
            raise TypeError("Expected argument 'dbt_version' to be a str")
        pulumi.set(__self__, "dbt_version", dbt_version)
        if default_schema and not isinstance(default_schema, str):
            raise TypeError("Expected argument 'default_schema' to be a str")
        pulumi.set(__self__, "default_schema", default_schema)
        if ensure_readiness and not isinstance(ensure_readiness, bool):
            raise TypeError("Expected argument 'ensure_readiness' to be a bool")
        pulumi.set(__self__, "ensure_readiness", ensure_readiness)
        if environment_vars and not isinstance(environment_vars, list):
            raise TypeError("Expected argument 'environment_vars' to be a list")
        pulumi.set(__self__, "environment_vars", environment_vars)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if models and not isinstance(models, list):
            raise TypeError("Expected argument 'models' to be a list")
        pulumi.set(__self__, "models", models)
        if project_config and not isinstance(project_config, dict):
            raise TypeError("Expected argument 'project_config' to be a dict")
        pulumi.set(__self__, "project_config", project_config)
        if public_key and not isinstance(public_key, str):
            raise TypeError("Expected argument 'public_key' to be a str")
        pulumi.set(__self__, "public_key", public_key)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if target_name and not isinstance(target_name, str):
            raise TypeError("Expected argument 'target_name' to be a str")
        pulumi.set(__self__, "target_name", target_name)
        if threads and not isinstance(threads, int):
            raise TypeError("Expected argument 'threads' to be a int")
        pulumi.set(__self__, "threads", threads)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The timestamp of the dbt Project creation.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdById")
    def created_by_id(self) -> str:
        """
        The unique identifier for the User within the Fivetran system who created the dbt Project.
        """
        return pulumi.get(self, "created_by_id")

    @property
    @pulumi.getter(name="dbtVersion")
    def dbt_version(self) -> str:
        """
        The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
        """
        return pulumi.get(self, "dbt_version")

    @property
    @pulumi.getter(name="defaultSchema")
    def default_schema(self) -> str:
        """
        Default schema in destination. This production schema will contain your transformed data.
        """
        return pulumi.get(self, "default_schema")

    @property
    @pulumi.getter(name="ensureReadiness")
    def ensure_readiness(self) -> bool:
        """
        Should resource wait for project to finish initialization. Default value: true.
        """
        return pulumi.get(self, "ensure_readiness")

    @property
    @pulumi.getter(name="environmentVars")
    def environment_vars(self) -> Sequence[str]:
        """
        List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
        """
        return pulumi.get(self, "environment_vars")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        The unique identifier for the group within the Fivetran system.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier for the dbt Project within the Fivetran system.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def models(self) -> Sequence['outputs.GetDbtProjectModelResult']:
        return pulumi.get(self, "models")

    @property
    @pulumi.getter(name="projectConfig")
    def project_config(self) -> Optional['outputs.GetDbtProjectProjectConfigResult']:
        return pulumi.get(self, "project_config")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> str:
        """
        Public key to grant Fivetran SSH access to git repository.
        """
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of dbt Project (NOT_READY, READY, ERROR).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> str:
        """
        Target name to set or override the value from the deployment.yaml
        """
        return pulumi.get(self, "target_name")

    @property
    @pulumi.getter
    def threads(self) -> int:
        """
        The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
        """
        return pulumi.get(self, "threads")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
        """
        return pulumi.get(self, "type")


class AwaitableGetDbtProjectResult(GetDbtProjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDbtProjectResult(
            created_at=self.created_at,
            created_by_id=self.created_by_id,
            dbt_version=self.dbt_version,
            default_schema=self.default_schema,
            ensure_readiness=self.ensure_readiness,
            environment_vars=self.environment_vars,
            group_id=self.group_id,
            id=self.id,
            models=self.models,
            project_config=self.project_config,
            public_key=self.public_key,
            status=self.status,
            target_name=self.target_name,
            threads=self.threads,
            type=self.type)


def get_dbt_project(id: Optional[str] = None,
                    project_config: Optional[pulumi.InputType['GetDbtProjectProjectConfigArgs']] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDbtProjectResult:
    """
    This data source returns a dbt Project object.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    project = fivetran.get_dbt_project(id="project_id")
    ```


    :param str id: The unique identifier for the dbt Project within the Fivetran system.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['projectConfig'] = project_config
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fivetran:index/getDbtProject:getDbtProject', __args__, opts=opts, typ=GetDbtProjectResult).value

    return AwaitableGetDbtProjectResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by_id=pulumi.get(__ret__, 'created_by_id'),
        dbt_version=pulumi.get(__ret__, 'dbt_version'),
        default_schema=pulumi.get(__ret__, 'default_schema'),
        ensure_readiness=pulumi.get(__ret__, 'ensure_readiness'),
        environment_vars=pulumi.get(__ret__, 'environment_vars'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        models=pulumi.get(__ret__, 'models'),
        project_config=pulumi.get(__ret__, 'project_config'),
        public_key=pulumi.get(__ret__, 'public_key'),
        status=pulumi.get(__ret__, 'status'),
        target_name=pulumi.get(__ret__, 'target_name'),
        threads=pulumi.get(__ret__, 'threads'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_dbt_project)
def get_dbt_project_output(id: Optional[pulumi.Input[str]] = None,
                           project_config: Optional[pulumi.Input[Optional[pulumi.InputType['GetDbtProjectProjectConfigArgs']]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDbtProjectResult]:
    """
    This data source returns a dbt Project object.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    project = fivetran.get_dbt_project(id="project_id")
    ```


    :param str id: The unique identifier for the dbt Project within the Fivetran system.
    """
    ...
