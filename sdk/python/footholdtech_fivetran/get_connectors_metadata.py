# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetConnectorsMetadataResult',
    'AwaitableGetConnectorsMetadataResult',
    'get_connectors_metadata',
    'get_connectors_metadata_output',
]

@pulumi.output_type
class GetConnectorsMetadataResult:
    """
    A collection of values returned by getConnectorsMetadata.
    """
    def __init__(__self__, id=None, sources=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if sources and not isinstance(sources, list):
            raise TypeError("Expected argument 'sources' to be a list")
        pulumi.set(__self__, "sources", sources)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.GetConnectorsMetadataSourceResult']]:
        return pulumi.get(self, "sources")


class AwaitableGetConnectorsMetadataResult(GetConnectorsMetadataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectorsMetadataResult(
            id=self.id,
            sources=self.sources)


def get_connectors_metadata(sources: Optional[Sequence[pulumi.InputType['GetConnectorsMetadataSourceArgs']]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectorsMetadataResult:
    """
    This data source returns all available source types within your Fivetran account. This data source makes it easier to display Fivetran connectors within your application because it provides metadata including the proper source name (‘Facebook Ad Account’ instead of facebook_ad_account), the source icon, and links to Fivetran resources. As we update source names and icons, that metadata will automatically update within this endpoint.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    sources = fivetran.get_connectors_metadata()
    ```
    """
    __args__ = dict()
    __args__['sources'] = sources
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fivetran:index/getConnectorsMetadata:getConnectorsMetadata', __args__, opts=opts, typ=GetConnectorsMetadataResult).value

    return AwaitableGetConnectorsMetadataResult(
        id=pulumi.get(__ret__, 'id'),
        sources=pulumi.get(__ret__, 'sources'))


@_utilities.lift_output_func(get_connectors_metadata)
def get_connectors_metadata_output(sources: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetConnectorsMetadataSourceArgs']]]]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConnectorsMetadataResult]:
    """
    This data source returns all available source types within your Fivetran account. This data source makes it easier to display Fivetran connectors within your application because it provides metadata including the proper source name (‘Facebook Ad Account’ instead of facebook_ad_account), the source icon, and links to Fivetran resources. As we update source names and icons, that metadata will automatically update within this endpoint.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    sources = fivetran.get_connectors_metadata()
    ```
    """
    ...
