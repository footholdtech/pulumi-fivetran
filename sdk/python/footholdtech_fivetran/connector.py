# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ConnectorArgs', 'Connector']

@pulumi.input_type
class ConnectorArgs:
    def __init__(__self__, *,
                 destination_schema: pulumi.Input['ConnectorDestinationSchemaArgs'],
                 group_id: pulumi.Input[str],
                 service: pulumi.Input[str],
                 auth: Optional[pulumi.Input['ConnectorAuthArgs']] = None,
                 config: Optional[pulumi.Input['ConnectorConfigArgs']] = None,
                 run_setup_tests: Optional[pulumi.Input[str]] = None,
                 trust_certificates: Optional[pulumi.Input[str]] = None,
                 trust_fingerprints: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Connector resource.
        :param pulumi.Input[str] group_id: The unique identifier for the Group (Destination) within the Fivetran system.
        :param pulumi.Input[str] service: The connector type name within the Fivetran system.
        :param pulumi.Input[str] run_setup_tests: Specifies whether the setup tests should be run automatically. The default value is TRUE.
        :param pulumi.Input[str] trust_certificates: Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
               trusted automatically, it has to be approved with [Certificates Management API Approve a destination
               certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
        :param pulumi.Input[str] trust_fingerprints: Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
               trusted automatically, it has to be approved with [Certificates Management API Approve a destination
               fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
        """
        pulumi.set(__self__, "destination_schema", destination_schema)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "service", service)
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if run_setup_tests is not None:
            pulumi.set(__self__, "run_setup_tests", run_setup_tests)
        if trust_certificates is not None:
            pulumi.set(__self__, "trust_certificates", trust_certificates)
        if trust_fingerprints is not None:
            pulumi.set(__self__, "trust_fingerprints", trust_fingerprints)

    @property
    @pulumi.getter(name="destinationSchema")
    def destination_schema(self) -> pulumi.Input['ConnectorDestinationSchemaArgs']:
        return pulumi.get(self, "destination_schema")

    @destination_schema.setter
    def destination_schema(self, value: pulumi.Input['ConnectorDestinationSchemaArgs']):
        pulumi.set(self, "destination_schema", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[str]:
        """
        The unique identifier for the Group (Destination) within the Fivetran system.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        The connector type name within the Fivetran system.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input['ConnectorAuthArgs']]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input['ConnectorAuthArgs']]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ConnectorConfigArgs']]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ConnectorConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="runSetupTests")
    def run_setup_tests(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the setup tests should be run automatically. The default value is TRUE.
        """
        return pulumi.get(self, "run_setup_tests")

    @run_setup_tests.setter
    def run_setup_tests(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_setup_tests", value)

    @property
    @pulumi.getter(name="trustCertificates")
    def trust_certificates(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
        trusted automatically, it has to be approved with [Certificates Management API Approve a destination
        certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
        """
        return pulumi.get(self, "trust_certificates")

    @trust_certificates.setter
    def trust_certificates(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_certificates", value)

    @property
    @pulumi.getter(name="trustFingerprints")
    def trust_fingerprints(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
        trusted automatically, it has to be approved with [Certificates Management API Approve a destination
        fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
        """
        return pulumi.get(self, "trust_fingerprints")

    @trust_fingerprints.setter
    def trust_fingerprints(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_fingerprints", value)


@pulumi.input_type
class _ConnectorState:
    def __init__(__self__, *,
                 auth: Optional[pulumi.Input['ConnectorAuthArgs']] = None,
                 config: Optional[pulumi.Input['ConnectorConfigArgs']] = None,
                 connected_by: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 destination_schema: Optional[pulumi.Input['ConnectorDestinationSchemaArgs']] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 last_updated: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 run_setup_tests: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 trust_certificates: Optional[pulumi.Input[str]] = None,
                 trust_fingerprints: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Connector resources.
        :param pulumi.Input[str] connected_by: The unique identifier of the user who has created the connector in your account
        :param pulumi.Input[str] created_at: The timestamp of the time the connector was created in your account
        :param pulumi.Input[str] group_id: The unique identifier for the Group (Destination) within the Fivetran system.
        :param pulumi.Input[str] name: The name used both as the connector's name within the Fivetran system and as the source schema's name within your
               destination.
        :param pulumi.Input[str] run_setup_tests: Specifies whether the setup tests should be run automatically. The default value is TRUE.
        :param pulumi.Input[str] service: The connector type name within the Fivetran system.
        :param pulumi.Input[str] trust_certificates: Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
               trusted automatically, it has to be approved with [Certificates Management API Approve a destination
               certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
        :param pulumi.Input[str] trust_fingerprints: Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
               trusted automatically, it has to be approved with [Certificates Management API Approve a destination
               fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
        """
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if connected_by is not None:
            pulumi.set(__self__, "connected_by", connected_by)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if destination_schema is not None:
            pulumi.set(__self__, "destination_schema", destination_schema)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if run_setup_tests is not None:
            pulumi.set(__self__, "run_setup_tests", run_setup_tests)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if trust_certificates is not None:
            pulumi.set(__self__, "trust_certificates", trust_certificates)
        if trust_fingerprints is not None:
            pulumi.set(__self__, "trust_fingerprints", trust_fingerprints)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input['ConnectorAuthArgs']]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input['ConnectorAuthArgs']]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ConnectorConfigArgs']]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ConnectorConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="connectedBy")
    def connected_by(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the user who has created the connector in your account
        """
        return pulumi.get(self, "connected_by")

    @connected_by.setter
    def connected_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connected_by", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The timestamp of the time the connector was created in your account
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="destinationSchema")
    def destination_schema(self) -> Optional[pulumi.Input['ConnectorDestinationSchemaArgs']]:
        return pulumi.get(self, "destination_schema")

    @destination_schema.setter
    def destination_schema(self, value: Optional[pulumi.Input['ConnectorDestinationSchemaArgs']]):
        pulumi.set(self, "destination_schema", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier for the Group (Destination) within the Fivetran system.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name used both as the connector's name within the Fivetran system and as the source schema's name within your
        destination.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="runSetupTests")
    def run_setup_tests(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the setup tests should be run automatically. The default value is TRUE.
        """
        return pulumi.get(self, "run_setup_tests")

    @run_setup_tests.setter
    def run_setup_tests(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_setup_tests", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        The connector type name within the Fivetran system.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="trustCertificates")
    def trust_certificates(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
        trusted automatically, it has to be approved with [Certificates Management API Approve a destination
        certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
        """
        return pulumi.get(self, "trust_certificates")

    @trust_certificates.setter
    def trust_certificates(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_certificates", value)

    @property
    @pulumi.getter(name="trustFingerprints")
    def trust_fingerprints(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
        trusted automatically, it has to be approved with [Certificates Management API Approve a destination
        fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
        """
        return pulumi.get(self, "trust_fingerprints")

    @trust_fingerprints.setter
    def trust_fingerprints(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trust_fingerprints", value)


class Connector(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth: Optional[pulumi.Input[pulumi.InputType['ConnectorAuthArgs']]] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['ConnectorConfigArgs']]] = None,
                 destination_schema: Optional[pulumi.Input[pulumi.InputType['ConnectorDestinationSchemaArgs']]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 run_setup_tests: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 trust_certificates: Optional[pulumi.Input[str]] = None,
                 trust_fingerprints: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Import

        ### How to authorize connector

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] group_id: The unique identifier for the Group (Destination) within the Fivetran system.
        :param pulumi.Input[str] run_setup_tests: Specifies whether the setup tests should be run automatically. The default value is TRUE.
        :param pulumi.Input[str] service: The connector type name within the Fivetran system.
        :param pulumi.Input[str] trust_certificates: Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
               trusted automatically, it has to be approved with [Certificates Management API Approve a destination
               certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
        :param pulumi.Input[str] trust_fingerprints: Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
               trusted automatically, it has to be approved with [Certificates Management API Approve a destination
               fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConnectorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        ### How to authorize connector

        :param str resource_name: The name of the resource.
        :param ConnectorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth: Optional[pulumi.Input[pulumi.InputType['ConnectorAuthArgs']]] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['ConnectorConfigArgs']]] = None,
                 destination_schema: Optional[pulumi.Input[pulumi.InputType['ConnectorDestinationSchemaArgs']]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 run_setup_tests: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 trust_certificates: Optional[pulumi.Input[str]] = None,
                 trust_fingerprints: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectorArgs.__new__(ConnectorArgs)

            __props__.__dict__["auth"] = auth
            __props__.__dict__["config"] = config
            if destination_schema is None and not opts.urn:
                raise TypeError("Missing required property 'destination_schema'")
            __props__.__dict__["destination_schema"] = destination_schema
            if group_id is None and not opts.urn:
                raise TypeError("Missing required property 'group_id'")
            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["run_setup_tests"] = run_setup_tests
            if service is None and not opts.urn:
                raise TypeError("Missing required property 'service'")
            __props__.__dict__["service"] = service
            __props__.__dict__["trust_certificates"] = trust_certificates
            __props__.__dict__["trust_fingerprints"] = trust_fingerprints
            __props__.__dict__["connected_by"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["last_updated"] = None
            __props__.__dict__["name"] = None
        super(Connector, __self__).__init__(
            'fivetran:index/connector:Connector',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth: Optional[pulumi.Input[pulumi.InputType['ConnectorAuthArgs']]] = None,
            config: Optional[pulumi.Input[pulumi.InputType['ConnectorConfigArgs']]] = None,
            connected_by: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            destination_schema: Optional[pulumi.Input[pulumi.InputType['ConnectorDestinationSchemaArgs']]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            last_updated: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            run_setup_tests: Optional[pulumi.Input[str]] = None,
            service: Optional[pulumi.Input[str]] = None,
            trust_certificates: Optional[pulumi.Input[str]] = None,
            trust_fingerprints: Optional[pulumi.Input[str]] = None) -> 'Connector':
        """
        Get an existing Connector resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] connected_by: The unique identifier of the user who has created the connector in your account
        :param pulumi.Input[str] created_at: The timestamp of the time the connector was created in your account
        :param pulumi.Input[str] group_id: The unique identifier for the Group (Destination) within the Fivetran system.
        :param pulumi.Input[str] name: The name used both as the connector's name within the Fivetran system and as the source schema's name within your
               destination.
        :param pulumi.Input[str] run_setup_tests: Specifies whether the setup tests should be run automatically. The default value is TRUE.
        :param pulumi.Input[str] service: The connector type name within the Fivetran system.
        :param pulumi.Input[str] trust_certificates: Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
               trusted automatically, it has to be approved with [Certificates Management API Approve a destination
               certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
        :param pulumi.Input[str] trust_fingerprints: Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
               trusted automatically, it has to be approved with [Certificates Management API Approve a destination
               fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectorState.__new__(_ConnectorState)

        __props__.__dict__["auth"] = auth
        __props__.__dict__["config"] = config
        __props__.__dict__["connected_by"] = connected_by
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["destination_schema"] = destination_schema
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["last_updated"] = last_updated
        __props__.__dict__["name"] = name
        __props__.__dict__["run_setup_tests"] = run_setup_tests
        __props__.__dict__["service"] = service
        __props__.__dict__["trust_certificates"] = trust_certificates
        __props__.__dict__["trust_fingerprints"] = trust_fingerprints
        return Connector(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def auth(self) -> pulumi.Output[Optional['outputs.ConnectorAuth']]:
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output['outputs.ConnectorConfig']:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="connectedBy")
    def connected_by(self) -> pulumi.Output[str]:
        """
        The unique identifier of the user who has created the connector in your account
        """
        return pulumi.get(self, "connected_by")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The timestamp of the time the connector was created in your account
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="destinationSchema")
    def destination_schema(self) -> pulumi.Output['outputs.ConnectorDestinationSchema']:
        return pulumi.get(self, "destination_schema")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[str]:
        """
        The unique identifier for the Group (Destination) within the Fivetran system.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> pulumi.Output[str]:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name used both as the connector's name within the Fivetran system and as the source schema's name within your
        destination.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="runSetupTests")
    def run_setup_tests(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies whether the setup tests should be run automatically. The default value is TRUE.
        """
        return pulumi.get(self, "run_setup_tests")

    @property
    @pulumi.getter
    def service(self) -> pulumi.Output[str]:
        """
        The connector type name within the Fivetran system.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="trustCertificates")
    def trust_certificates(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
        trusted automatically, it has to be approved with [Certificates Management API Approve a destination
        certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
        """
        return pulumi.get(self, "trust_certificates")

    @property
    @pulumi.getter(name="trustFingerprints")
    def trust_fingerprints(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
        trusted automatically, it has to be approved with [Certificates Management API Approve a destination
        fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
        """
        return pulumi.get(self, "trust_fingerprints")

