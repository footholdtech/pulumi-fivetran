# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetTransformationResult',
    'AwaitableGetTransformationResult',
    'get_transformation',
    'get_transformation_output',
]

@pulumi.output_type
class GetTransformationResult:
    """
    A collection of values returned by getTransformation.
    """
    def __init__(__self__, created_at=None, created_by_id=None, id=None, output_model_names=None, paused=None, schedule=None, status=None, transformation_config=None, type=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by_id and not isinstance(created_by_id, str):
            raise TypeError("Expected argument 'created_by_id' to be a str")
        pulumi.set(__self__, "created_by_id", created_by_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if output_model_names and not isinstance(output_model_names, list):
            raise TypeError("Expected argument 'output_model_names' to be a list")
        pulumi.set(__self__, "output_model_names", output_model_names)
        if paused and not isinstance(paused, bool):
            raise TypeError("Expected argument 'paused' to be a bool")
        pulumi.set(__self__, "paused", paused)
        if schedule and not isinstance(schedule, dict):
            raise TypeError("Expected argument 'schedule' to be a dict")
        pulumi.set(__self__, "schedule", schedule)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if transformation_config and not isinstance(transformation_config, dict):
            raise TypeError("Expected argument 'transformation_config' to be a dict")
        pulumi.set(__self__, "transformation_config", transformation_config)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The timestamp of when the transformation was created in your account.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdById")
    def created_by_id(self) -> str:
        """
        The unique identifier for the User within the Fivetran system who created the transformation.
        """
        return pulumi.get(self, "created_by_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier for the Transformation within the Fivetran system.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="outputModelNames")
    def output_model_names(self) -> Sequence[str]:
        """
        Identifiers of related models.
        """
        return pulumi.get(self, "output_model_names")

    @property
    @pulumi.getter
    def paused(self) -> bool:
        """
        The field indicating whether the transformation will be set into the paused state. By default, the value is false.
        """
        return pulumi.get(self, "paused")

    @property
    @pulumi.getter
    def schedule(self) -> Optional['outputs.GetTransformationScheduleResult']:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of transformation Project (NOT_READY, READY, ERROR).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="transformationConfig")
    def transformation_config(self) -> Optional['outputs.GetTransformationTransformationConfigResult']:
        return pulumi.get(self, "transformation_config")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Transformation type. The following values are supported: DBT_CORE, QUICKSTART.
        """
        return pulumi.get(self, "type")


class AwaitableGetTransformationResult(GetTransformationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTransformationResult(
            created_at=self.created_at,
            created_by_id=self.created_by_id,
            id=self.id,
            output_model_names=self.output_model_names,
            paused=self.paused,
            schedule=self.schedule,
            status=self.status,
            transformation_config=self.transformation_config,
            type=self.type)


def get_transformation(id: Optional[str] = None,
                       schedule: Optional[Union['GetTransformationScheduleArgs', 'GetTransformationScheduleArgsDict']] = None,
                       transformation_config: Optional[Union['GetTransformationTransformationConfigArgs', 'GetTransformationTransformationConfigArgsDict']] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTransformationResult:
    """
    Returns transformation details if a valid identifier was provided

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    test = fivetran.get_transformation(id="id")
    ```


    :param str id: The unique identifier for the Transformation within the Fivetran system.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['schedule'] = schedule
    __args__['transformationConfig'] = transformation_config
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fivetran:index/getTransformation:getTransformation', __args__, opts=opts, typ=GetTransformationResult).value

    return AwaitableGetTransformationResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by_id=pulumi.get(__ret__, 'created_by_id'),
        id=pulumi.get(__ret__, 'id'),
        output_model_names=pulumi.get(__ret__, 'output_model_names'),
        paused=pulumi.get(__ret__, 'paused'),
        schedule=pulumi.get(__ret__, 'schedule'),
        status=pulumi.get(__ret__, 'status'),
        transformation_config=pulumi.get(__ret__, 'transformation_config'),
        type=pulumi.get(__ret__, 'type'))
def get_transformation_output(id: Optional[pulumi.Input[str]] = None,
                              schedule: Optional[pulumi.Input[Optional[Union['GetTransformationScheduleArgs', 'GetTransformationScheduleArgsDict']]]] = None,
                              transformation_config: Optional[pulumi.Input[Optional[Union['GetTransformationTransformationConfigArgs', 'GetTransformationTransformationConfigArgsDict']]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTransformationResult]:
    """
    Returns transformation details if a valid identifier was provided

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    test = fivetran.get_transformation(id="id")
    ```


    :param str id: The unique identifier for the Transformation within the Fivetran system.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['schedule'] = schedule
    __args__['transformationConfig'] = transformation_config
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('fivetran:index/getTransformation:getTransformation', __args__, opts=opts, typ=GetTransformationResult)
    return __ret__.apply(lambda __response__: GetTransformationResult(
        created_at=pulumi.get(__response__, 'created_at'),
        created_by_id=pulumi.get(__response__, 'created_by_id'),
        id=pulumi.get(__response__, 'id'),
        output_model_names=pulumi.get(__response__, 'output_model_names'),
        paused=pulumi.get(__response__, 'paused'),
        schedule=pulumi.get(__response__, 'schedule'),
        status=pulumi.get(__response__, 'status'),
        transformation_config=pulumi.get(__response__, 'transformation_config'),
        type=pulumi.get(__response__, 'type')))
