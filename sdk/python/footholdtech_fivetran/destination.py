# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DestinationArgs', 'Destination']

@pulumi.input_type
class DestinationArgs:
    def __init__(__self__, *,
                 group_id: pulumi.Input[str],
                 region: pulumi.Input[str],
                 service: pulumi.Input[str],
                 time_zone_offset: pulumi.Input[str],
                 config: Optional[pulumi.Input['DestinationConfigArgs']] = None,
                 daylight_saving_time_enabled: Optional[pulumi.Input[bool]] = None,
                 hybrid_deployment_agent_id: Optional[pulumi.Input[str]] = None,
                 networking_method: Optional[pulumi.Input[str]] = None,
                 private_link_id: Optional[pulumi.Input[str]] = None,
                 run_setup_tests: Optional[pulumi.Input[bool]] = None,
                 timeouts: Optional[pulumi.Input['DestinationTimeoutsArgs']] = None,
                 trust_certificates: Optional[pulumi.Input[bool]] = None,
                 trust_fingerprints: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Destination resource.
        :param pulumi.Input[str] group_id: The unique identifier for the Group within the Fivetran system.
        :param pulumi.Input[str] region: Data processing location. This is where Fivetran will operate and run computation on data.
        :param pulumi.Input[str] service: The destination type id within the Fivetran system.
        :param pulumi.Input[str] time_zone_offset: Determines the time zone for the Fivetran sync schedule.
        :param pulumi.Input[bool] daylight_saving_time_enabled: Shift my UTC offset with daylight savings time (US Only)
        :param pulumi.Input[str] hybrid_deployment_agent_id: The hybrid deployment agent ID that refers to the controller created for the group the connection belongs to. If the
               value is specified, the system will try to associate the connection with an existing agent.
        :param pulumi.Input[str] networking_method: Possible values: Directly, SshTunnel, ProxyAgent.
        :param pulumi.Input[str] private_link_id: The private link ID.
        :param pulumi.Input[bool] run_setup_tests: Specifies whether the setup tests should be run automatically. The default value is TRUE.
        :param pulumi.Input[bool] trust_certificates: Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
               trusted automatically, it has to be approved with [Certificates Management API Approve a destination
               certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
        :param pulumi.Input[bool] trust_fingerprints: Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
               trusted automatically, it has to be approved with [Certificates Management API Approve a destination
               fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "time_zone_offset", time_zone_offset)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if daylight_saving_time_enabled is not None:
            pulumi.set(__self__, "daylight_saving_time_enabled", daylight_saving_time_enabled)
        if hybrid_deployment_agent_id is not None:
            pulumi.set(__self__, "hybrid_deployment_agent_id", hybrid_deployment_agent_id)
        if networking_method is not None:
            pulumi.set(__self__, "networking_method", networking_method)
        if private_link_id is not None:
            pulumi.set(__self__, "private_link_id", private_link_id)
        if run_setup_tests is not None:
            pulumi.set(__self__, "run_setup_tests", run_setup_tests)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if trust_certificates is not None:
            pulumi.set(__self__, "trust_certificates", trust_certificates)
        if trust_fingerprints is not None:
            pulumi.set(__self__, "trust_fingerprints", trust_fingerprints)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[str]:
        """
        The unique identifier for the Group within the Fivetran system.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Data processing location. This is where Fivetran will operate and run computation on data.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        The destination type id within the Fivetran system.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="timeZoneOffset")
    def time_zone_offset(self) -> pulumi.Input[str]:
        """
        Determines the time zone for the Fivetran sync schedule.
        """
        return pulumi.get(self, "time_zone_offset")

    @time_zone_offset.setter
    def time_zone_offset(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_zone_offset", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['DestinationConfigArgs']]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['DestinationConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="daylightSavingTimeEnabled")
    def daylight_saving_time_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Shift my UTC offset with daylight savings time (US Only)
        """
        return pulumi.get(self, "daylight_saving_time_enabled")

    @daylight_saving_time_enabled.setter
    def daylight_saving_time_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "daylight_saving_time_enabled", value)

    @property
    @pulumi.getter(name="hybridDeploymentAgentId")
    def hybrid_deployment_agent_id(self) -> Optional[pulumi.Input[str]]:
        """
        The hybrid deployment agent ID that refers to the controller created for the group the connection belongs to. If the
        value is specified, the system will try to associate the connection with an existing agent.
        """
        return pulumi.get(self, "hybrid_deployment_agent_id")

    @hybrid_deployment_agent_id.setter
    def hybrid_deployment_agent_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hybrid_deployment_agent_id", value)

    @property
    @pulumi.getter(name="networkingMethod")
    def networking_method(self) -> Optional[pulumi.Input[str]]:
        """
        Possible values: Directly, SshTunnel, ProxyAgent.
        """
        return pulumi.get(self, "networking_method")

    @networking_method.setter
    def networking_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "networking_method", value)

    @property
    @pulumi.getter(name="privateLinkId")
    def private_link_id(self) -> Optional[pulumi.Input[str]]:
        """
        The private link ID.
        """
        return pulumi.get(self, "private_link_id")

    @private_link_id.setter
    def private_link_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_link_id", value)

    @property
    @pulumi.getter(name="runSetupTests")
    def run_setup_tests(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the setup tests should be run automatically. The default value is TRUE.
        """
        return pulumi.get(self, "run_setup_tests")

    @run_setup_tests.setter
    def run_setup_tests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_setup_tests", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DestinationTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DestinationTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter(name="trustCertificates")
    def trust_certificates(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
        trusted automatically, it has to be approved with [Certificates Management API Approve a destination
        certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
        """
        return pulumi.get(self, "trust_certificates")

    @trust_certificates.setter
    def trust_certificates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust_certificates", value)

    @property
    @pulumi.getter(name="trustFingerprints")
    def trust_fingerprints(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
        trusted automatically, it has to be approved with [Certificates Management API Approve a destination
        fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
        """
        return pulumi.get(self, "trust_fingerprints")

    @trust_fingerprints.setter
    def trust_fingerprints(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust_fingerprints", value)


@pulumi.input_type
class _DestinationState:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['DestinationConfigArgs']] = None,
                 daylight_saving_time_enabled: Optional[pulumi.Input[bool]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 hybrid_deployment_agent_id: Optional[pulumi.Input[str]] = None,
                 networking_method: Optional[pulumi.Input[str]] = None,
                 private_link_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 run_setup_tests: Optional[pulumi.Input[bool]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 setup_status: Optional[pulumi.Input[str]] = None,
                 time_zone_offset: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['DestinationTimeoutsArgs']] = None,
                 trust_certificates: Optional[pulumi.Input[bool]] = None,
                 trust_fingerprints: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Destination resources.
        :param pulumi.Input[bool] daylight_saving_time_enabled: Shift my UTC offset with daylight savings time (US Only)
        :param pulumi.Input[str] group_id: The unique identifier for the Group within the Fivetran system.
        :param pulumi.Input[str] hybrid_deployment_agent_id: The hybrid deployment agent ID that refers to the controller created for the group the connection belongs to. If the
               value is specified, the system will try to associate the connection with an existing agent.
        :param pulumi.Input[str] networking_method: Possible values: Directly, SshTunnel, ProxyAgent.
        :param pulumi.Input[str] private_link_id: The private link ID.
        :param pulumi.Input[str] region: Data processing location. This is where Fivetran will operate and run computation on data.
        :param pulumi.Input[bool] run_setup_tests: Specifies whether the setup tests should be run automatically. The default value is TRUE.
        :param pulumi.Input[str] service: The destination type id within the Fivetran system.
        :param pulumi.Input[str] setup_status: Destination setup status.
        :param pulumi.Input[str] time_zone_offset: Determines the time zone for the Fivetran sync schedule.
        :param pulumi.Input[bool] trust_certificates: Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
               trusted automatically, it has to be approved with [Certificates Management API Approve a destination
               certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
        :param pulumi.Input[bool] trust_fingerprints: Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
               trusted automatically, it has to be approved with [Certificates Management API Approve a destination
               fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if daylight_saving_time_enabled is not None:
            pulumi.set(__self__, "daylight_saving_time_enabled", daylight_saving_time_enabled)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if hybrid_deployment_agent_id is not None:
            pulumi.set(__self__, "hybrid_deployment_agent_id", hybrid_deployment_agent_id)
        if networking_method is not None:
            pulumi.set(__self__, "networking_method", networking_method)
        if private_link_id is not None:
            pulumi.set(__self__, "private_link_id", private_link_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if run_setup_tests is not None:
            pulumi.set(__self__, "run_setup_tests", run_setup_tests)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if setup_status is not None:
            pulumi.set(__self__, "setup_status", setup_status)
        if time_zone_offset is not None:
            pulumi.set(__self__, "time_zone_offset", time_zone_offset)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if trust_certificates is not None:
            pulumi.set(__self__, "trust_certificates", trust_certificates)
        if trust_fingerprints is not None:
            pulumi.set(__self__, "trust_fingerprints", trust_fingerprints)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['DestinationConfigArgs']]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['DestinationConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="daylightSavingTimeEnabled")
    def daylight_saving_time_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Shift my UTC offset with daylight savings time (US Only)
        """
        return pulumi.get(self, "daylight_saving_time_enabled")

    @daylight_saving_time_enabled.setter
    def daylight_saving_time_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "daylight_saving_time_enabled", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier for the Group within the Fivetran system.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="hybridDeploymentAgentId")
    def hybrid_deployment_agent_id(self) -> Optional[pulumi.Input[str]]:
        """
        The hybrid deployment agent ID that refers to the controller created for the group the connection belongs to. If the
        value is specified, the system will try to associate the connection with an existing agent.
        """
        return pulumi.get(self, "hybrid_deployment_agent_id")

    @hybrid_deployment_agent_id.setter
    def hybrid_deployment_agent_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hybrid_deployment_agent_id", value)

    @property
    @pulumi.getter(name="networkingMethod")
    def networking_method(self) -> Optional[pulumi.Input[str]]:
        """
        Possible values: Directly, SshTunnel, ProxyAgent.
        """
        return pulumi.get(self, "networking_method")

    @networking_method.setter
    def networking_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "networking_method", value)

    @property
    @pulumi.getter(name="privateLinkId")
    def private_link_id(self) -> Optional[pulumi.Input[str]]:
        """
        The private link ID.
        """
        return pulumi.get(self, "private_link_id")

    @private_link_id.setter
    def private_link_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_link_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Data processing location. This is where Fivetran will operate and run computation on data.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="runSetupTests")
    def run_setup_tests(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the setup tests should be run automatically. The default value is TRUE.
        """
        return pulumi.get(self, "run_setup_tests")

    @run_setup_tests.setter
    def run_setup_tests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_setup_tests", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        The destination type id within the Fivetran system.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="setupStatus")
    def setup_status(self) -> Optional[pulumi.Input[str]]:
        """
        Destination setup status.
        """
        return pulumi.get(self, "setup_status")

    @setup_status.setter
    def setup_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "setup_status", value)

    @property
    @pulumi.getter(name="timeZoneOffset")
    def time_zone_offset(self) -> Optional[pulumi.Input[str]]:
        """
        Determines the time zone for the Fivetran sync schedule.
        """
        return pulumi.get(self, "time_zone_offset")

    @time_zone_offset.setter
    def time_zone_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone_offset", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DestinationTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DestinationTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter(name="trustCertificates")
    def trust_certificates(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
        trusted automatically, it has to be approved with [Certificates Management API Approve a destination
        certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
        """
        return pulumi.get(self, "trust_certificates")

    @trust_certificates.setter
    def trust_certificates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust_certificates", value)

    @property
    @pulumi.getter(name="trustFingerprints")
    def trust_fingerprints(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
        trusted automatically, it has to be approved with [Certificates Management API Approve a destination
        fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
        """
        return pulumi.get(self, "trust_fingerprints")

    @trust_fingerprints.setter
    def trust_fingerprints(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust_fingerprints", value)


class Destination(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[Union['DestinationConfigArgs', 'DestinationConfigArgsDict']]] = None,
                 daylight_saving_time_enabled: Optional[pulumi.Input[bool]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 hybrid_deployment_agent_id: Optional[pulumi.Input[str]] = None,
                 networking_method: Optional[pulumi.Input[str]] = None,
                 private_link_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 run_setup_tests: Optional[pulumi.Input[bool]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 time_zone_offset: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[Union['DestinationTimeoutsArgs', 'DestinationTimeoutsArgsDict']]] = None,
                 trust_certificates: Optional[pulumi.Input[bool]] = None,
                 trust_fingerprints: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        ## Import

        1. To import an existing `fivetran_destination` resource into your Terraform state, you need to get **Destination Group ID** on the destination page in your Fivetran dashboard.

        To retrieve existing groups, use the [fivetran_groups data source](/providers/fivetran/fivetran/latest/docs/data-sources/groups).

        2. Define an empty resource in your `.tf` configuration:

        hcl

        resource "fivetran_destination" "my_imported_destination" {

        }

        3. Run the `pulumi import` command with the following parameters:

        ```sh
        $ pulumi import fivetran:index/destination:Destination my_imported_destination {your Destination Group ID}
        ```

        4. Use the `terraform state show` command to get the values from the state:

        terraform state show 'fivetran_destination.my_imported_destination'

        5. Copy the values and paste them to your `.tf` configuration.

        -> The `config` object in the state contains all properties defined in the schema. You need to remove properties from the `config` that are not related to destinations. See the [Fivetran REST API documentation](https://fivetran.com/docs/rest-api/destinations/config) for reference to find the properties you need to keep in the `config` section.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] daylight_saving_time_enabled: Shift my UTC offset with daylight savings time (US Only)
        :param pulumi.Input[str] group_id: The unique identifier for the Group within the Fivetran system.
        :param pulumi.Input[str] hybrid_deployment_agent_id: The hybrid deployment agent ID that refers to the controller created for the group the connection belongs to. If the
               value is specified, the system will try to associate the connection with an existing agent.
        :param pulumi.Input[str] networking_method: Possible values: Directly, SshTunnel, ProxyAgent.
        :param pulumi.Input[str] private_link_id: The private link ID.
        :param pulumi.Input[str] region: Data processing location. This is where Fivetran will operate and run computation on data.
        :param pulumi.Input[bool] run_setup_tests: Specifies whether the setup tests should be run automatically. The default value is TRUE.
        :param pulumi.Input[str] service: The destination type id within the Fivetran system.
        :param pulumi.Input[str] time_zone_offset: Determines the time zone for the Fivetran sync schedule.
        :param pulumi.Input[bool] trust_certificates: Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
               trusted automatically, it has to be approved with [Certificates Management API Approve a destination
               certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
        :param pulumi.Input[bool] trust_fingerprints: Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
               trusted automatically, it has to be approved with [Certificates Management API Approve a destination
               fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DestinationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        1. To import an existing `fivetran_destination` resource into your Terraform state, you need to get **Destination Group ID** on the destination page in your Fivetran dashboard.

        To retrieve existing groups, use the [fivetran_groups data source](/providers/fivetran/fivetran/latest/docs/data-sources/groups).

        2. Define an empty resource in your `.tf` configuration:

        hcl

        resource "fivetran_destination" "my_imported_destination" {

        }

        3. Run the `pulumi import` command with the following parameters:

        ```sh
        $ pulumi import fivetran:index/destination:Destination my_imported_destination {your Destination Group ID}
        ```

        4. Use the `terraform state show` command to get the values from the state:

        terraform state show 'fivetran_destination.my_imported_destination'

        5. Copy the values and paste them to your `.tf` configuration.

        -> The `config` object in the state contains all properties defined in the schema. You need to remove properties from the `config` that are not related to destinations. See the [Fivetran REST API documentation](https://fivetran.com/docs/rest-api/destinations/config) for reference to find the properties you need to keep in the `config` section.

        :param str resource_name: The name of the resource.
        :param DestinationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DestinationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[Union['DestinationConfigArgs', 'DestinationConfigArgsDict']]] = None,
                 daylight_saving_time_enabled: Optional[pulumi.Input[bool]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 hybrid_deployment_agent_id: Optional[pulumi.Input[str]] = None,
                 networking_method: Optional[pulumi.Input[str]] = None,
                 private_link_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 run_setup_tests: Optional[pulumi.Input[bool]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 time_zone_offset: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[Union['DestinationTimeoutsArgs', 'DestinationTimeoutsArgsDict']]] = None,
                 trust_certificates: Optional[pulumi.Input[bool]] = None,
                 trust_fingerprints: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DestinationArgs.__new__(DestinationArgs)

            __props__.__dict__["config"] = config
            __props__.__dict__["daylight_saving_time_enabled"] = daylight_saving_time_enabled
            if group_id is None and not opts.urn:
                raise TypeError("Missing required property 'group_id'")
            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["hybrid_deployment_agent_id"] = hybrid_deployment_agent_id
            __props__.__dict__["networking_method"] = networking_method
            __props__.__dict__["private_link_id"] = private_link_id
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["run_setup_tests"] = run_setup_tests
            if service is None and not opts.urn:
                raise TypeError("Missing required property 'service'")
            __props__.__dict__["service"] = service
            if time_zone_offset is None and not opts.urn:
                raise TypeError("Missing required property 'time_zone_offset'")
            __props__.__dict__["time_zone_offset"] = time_zone_offset
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["trust_certificates"] = trust_certificates
            __props__.__dict__["trust_fingerprints"] = trust_fingerprints
            __props__.__dict__["setup_status"] = None
        super(Destination, __self__).__init__(
            'fivetran:index/destination:Destination',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config: Optional[pulumi.Input[Union['DestinationConfigArgs', 'DestinationConfigArgsDict']]] = None,
            daylight_saving_time_enabled: Optional[pulumi.Input[bool]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            hybrid_deployment_agent_id: Optional[pulumi.Input[str]] = None,
            networking_method: Optional[pulumi.Input[str]] = None,
            private_link_id: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            run_setup_tests: Optional[pulumi.Input[bool]] = None,
            service: Optional[pulumi.Input[str]] = None,
            setup_status: Optional[pulumi.Input[str]] = None,
            time_zone_offset: Optional[pulumi.Input[str]] = None,
            timeouts: Optional[pulumi.Input[Union['DestinationTimeoutsArgs', 'DestinationTimeoutsArgsDict']]] = None,
            trust_certificates: Optional[pulumi.Input[bool]] = None,
            trust_fingerprints: Optional[pulumi.Input[bool]] = None) -> 'Destination':
        """
        Get an existing Destination resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] daylight_saving_time_enabled: Shift my UTC offset with daylight savings time (US Only)
        :param pulumi.Input[str] group_id: The unique identifier for the Group within the Fivetran system.
        :param pulumi.Input[str] hybrid_deployment_agent_id: The hybrid deployment agent ID that refers to the controller created for the group the connection belongs to. If the
               value is specified, the system will try to associate the connection with an existing agent.
        :param pulumi.Input[str] networking_method: Possible values: Directly, SshTunnel, ProxyAgent.
        :param pulumi.Input[str] private_link_id: The private link ID.
        :param pulumi.Input[str] region: Data processing location. This is where Fivetran will operate and run computation on data.
        :param pulumi.Input[bool] run_setup_tests: Specifies whether the setup tests should be run automatically. The default value is TRUE.
        :param pulumi.Input[str] service: The destination type id within the Fivetran system.
        :param pulumi.Input[str] setup_status: Destination setup status.
        :param pulumi.Input[str] time_zone_offset: Determines the time zone for the Fivetran sync schedule.
        :param pulumi.Input[bool] trust_certificates: Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
               trusted automatically, it has to be approved with [Certificates Management API Approve a destination
               certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
        :param pulumi.Input[bool] trust_fingerprints: Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
               trusted automatically, it has to be approved with [Certificates Management API Approve a destination
               fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DestinationState.__new__(_DestinationState)

        __props__.__dict__["config"] = config
        __props__.__dict__["daylight_saving_time_enabled"] = daylight_saving_time_enabled
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["hybrid_deployment_agent_id"] = hybrid_deployment_agent_id
        __props__.__dict__["networking_method"] = networking_method
        __props__.__dict__["private_link_id"] = private_link_id
        __props__.__dict__["region"] = region
        __props__.__dict__["run_setup_tests"] = run_setup_tests
        __props__.__dict__["service"] = service
        __props__.__dict__["setup_status"] = setup_status
        __props__.__dict__["time_zone_offset"] = time_zone_offset
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["trust_certificates"] = trust_certificates
        __props__.__dict__["trust_fingerprints"] = trust_fingerprints
        return Destination(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[Optional['outputs.DestinationConfig']]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="daylightSavingTimeEnabled")
    def daylight_saving_time_enabled(self) -> pulumi.Output[bool]:
        """
        Shift my UTC offset with daylight savings time (US Only)
        """
        return pulumi.get(self, "daylight_saving_time_enabled")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[str]:
        """
        The unique identifier for the Group within the Fivetran system.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="hybridDeploymentAgentId")
    def hybrid_deployment_agent_id(self) -> pulumi.Output[Optional[str]]:
        """
        The hybrid deployment agent ID that refers to the controller created for the group the connection belongs to. If the
        value is specified, the system will try to associate the connection with an existing agent.
        """
        return pulumi.get(self, "hybrid_deployment_agent_id")

    @property
    @pulumi.getter(name="networkingMethod")
    def networking_method(self) -> pulumi.Output[str]:
        """
        Possible values: Directly, SshTunnel, ProxyAgent.
        """
        return pulumi.get(self, "networking_method")

    @property
    @pulumi.getter(name="privateLinkId")
    def private_link_id(self) -> pulumi.Output[Optional[str]]:
        """
        The private link ID.
        """
        return pulumi.get(self, "private_link_id")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Data processing location. This is where Fivetran will operate and run computation on data.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="runSetupTests")
    def run_setup_tests(self) -> pulumi.Output[bool]:
        """
        Specifies whether the setup tests should be run automatically. The default value is TRUE.
        """
        return pulumi.get(self, "run_setup_tests")

    @property
    @pulumi.getter
    def service(self) -> pulumi.Output[str]:
        """
        The destination type id within the Fivetran system.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="setupStatus")
    def setup_status(self) -> pulumi.Output[str]:
        """
        Destination setup status.
        """
        return pulumi.get(self, "setup_status")

    @property
    @pulumi.getter(name="timeZoneOffset")
    def time_zone_offset(self) -> pulumi.Output[str]:
        """
        Determines the time zone for the Fivetran sync schedule.
        """
        return pulumi.get(self, "time_zone_offset")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.DestinationTimeouts']]:
        return pulumi.get(self, "timeouts")

    @property
    @pulumi.getter(name="trustCertificates")
    def trust_certificates(self) -> pulumi.Output[bool]:
        """
        Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not
        trusted automatically, it has to be approved with [Certificates Management API Approve a destination
        certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).
        """
        return pulumi.get(self, "trust_certificates")

    @property
    @pulumi.getter(name="trustFingerprints")
    def trust_fingerprints(self) -> pulumi.Output[bool]:
        """
        Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not
        trusted automatically, it has to be approved with [Certificates Management API Approve a destination
        fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).
        """
        return pulumi.get(self, "trust_fingerprints")

