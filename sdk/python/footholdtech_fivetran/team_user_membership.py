# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TeamUserMembershipArgs', 'TeamUserMembership']

@pulumi.input_type
class TeamUserMembershipArgs:
    def __init__(__self__, *,
                 team_id: pulumi.Input[builtins.str],
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['TeamUserMembershipUserArgs']]]] = None):
        """
        The set of arguments for constructing a TeamUserMembership resource.
        :param pulumi.Input[builtins.str] team_id: The unique identifier for the team within your account.
        """
        pulumi.set(__self__, "team_id", team_id)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> pulumi.Input[builtins.str]:
        """
        The unique identifier for the team within your account.
        """
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "team_id", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TeamUserMembershipUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TeamUserMembershipUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class _TeamUserMembershipState:
    def __init__(__self__, *,
                 team_id: Optional[pulumi.Input[builtins.str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['TeamUserMembershipUserArgs']]]] = None):
        """
        Input properties used for looking up and filtering TeamUserMembership resources.
        :param pulumi.Input[builtins.str] team_id: The unique identifier for the team within your account.
        """
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The unique identifier for the team within your account.
        """
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "team_id", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TeamUserMembershipUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TeamUserMembershipUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.type_token("fivetran:index/teamUserMembership:TeamUserMembership")
class TeamUserMembership(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 team_id: Optional[pulumi.Input[builtins.str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TeamUserMembershipUserArgs', 'TeamUserMembershipUserArgsDict']]]]] = None,
                 __props__=None):
        """
        This resource allows you to create, update, and delete user membership for teams

        ## Example Usage

        ```python
        import pulumi
        import footholdtech_fivetran as fivetran

        test_team_user_membership = fivetran.TeamUserMembership("test_team_user_membership",
            team_id="test_team",
            users=[
                {
                    "user_id": "test_user",
                    "role": "Connector Administrator",
                },
                {
                    "user_id": "test_user",
                    "role": "Connector Administrator",
                },
            ])
        ```

        ## Import

        1. To import an existing `fivetran_team_user_membership` resource into your Terraform state, you need to get `team_id` and `user_id`

        You can retrieve all teams using the [fivetran_teams data source](/docs/data-sources/teams).

        2. Define an empty resource in your `.tf` configuration:

        hcl

        resource "fivetran_team_user_membership" "my_imported_fivetran_team_user_membership" {

        }

        3. Run the `pulumi import` command:

        ```sh
        $ pulumi import fivetran:index/teamUserMembership:TeamUserMembership my_imported_fivetran_team_user_membership {team_id}
        ```

        4. Use the `terraform state show` command to get the values from the state:

        terraform state show 'fivetran_team_user_membership.my_imported_fivetran_team_user_membership'

        5. Copy the values and paste them to your `.tf` configuration.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] team_id: The unique identifier for the team within your account.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TeamUserMembershipArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource allows you to create, update, and delete user membership for teams

        ## Example Usage

        ```python
        import pulumi
        import footholdtech_fivetran as fivetran

        test_team_user_membership = fivetran.TeamUserMembership("test_team_user_membership",
            team_id="test_team",
            users=[
                {
                    "user_id": "test_user",
                    "role": "Connector Administrator",
                },
                {
                    "user_id": "test_user",
                    "role": "Connector Administrator",
                },
            ])
        ```

        ## Import

        1. To import an existing `fivetran_team_user_membership` resource into your Terraform state, you need to get `team_id` and `user_id`

        You can retrieve all teams using the [fivetran_teams data source](/docs/data-sources/teams).

        2. Define an empty resource in your `.tf` configuration:

        hcl

        resource "fivetran_team_user_membership" "my_imported_fivetran_team_user_membership" {

        }

        3. Run the `pulumi import` command:

        ```sh
        $ pulumi import fivetran:index/teamUserMembership:TeamUserMembership my_imported_fivetran_team_user_membership {team_id}
        ```

        4. Use the `terraform state show` command to get the values from the state:

        terraform state show 'fivetran_team_user_membership.my_imported_fivetran_team_user_membership'

        5. Copy the values and paste them to your `.tf` configuration.

        :param str resource_name: The name of the resource.
        :param TeamUserMembershipArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TeamUserMembershipArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 team_id: Optional[pulumi.Input[builtins.str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TeamUserMembershipUserArgs', 'TeamUserMembershipUserArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TeamUserMembershipArgs.__new__(TeamUserMembershipArgs)

            if team_id is None and not opts.urn:
                raise TypeError("Missing required property 'team_id'")
            __props__.__dict__["team_id"] = team_id
            __props__.__dict__["users"] = users
        super(TeamUserMembership, __self__).__init__(
            'fivetran:index/teamUserMembership:TeamUserMembership',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            team_id: Optional[pulumi.Input[builtins.str]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TeamUserMembershipUserArgs', 'TeamUserMembershipUserArgsDict']]]]] = None) -> 'TeamUserMembership':
        """
        Get an existing TeamUserMembership resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] team_id: The unique identifier for the team within your account.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TeamUserMembershipState.__new__(_TeamUserMembershipState)

        __props__.__dict__["team_id"] = team_id
        __props__.__dict__["users"] = users
        return TeamUserMembership(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> pulumi.Output[builtins.str]:
        """
        The unique identifier for the team within your account.
        """
        return pulumi.get(self, "team_id")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional[Sequence['outputs.TeamUserMembershipUser']]]:
        return pulumi.get(self, "users")

