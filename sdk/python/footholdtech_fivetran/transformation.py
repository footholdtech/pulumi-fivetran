# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TransformationArgs', 'Transformation']

@pulumi.input_type
class TransformationArgs:
    def __init__(__self__, *,
                 paused: Optional[pulumi.Input[bool]] = None,
                 schedule: Optional[pulumi.Input['TransformationScheduleArgs']] = None,
                 transformation_config: Optional[pulumi.Input['TransformationTransformationConfigArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Transformation resource.
        :param pulumi.Input[bool] paused: The field indicating whether the transformation will be set into the paused state. By default, the value is false.
        :param pulumi.Input[str] type: Transformation type. The following values are supported: DBT_CORE, QUICKSTART.
        """
        if paused is not None:
            pulumi.set(__self__, "paused", paused)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if transformation_config is not None:
            pulumi.set(__self__, "transformation_config", transformation_config)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def paused(self) -> Optional[pulumi.Input[bool]]:
        """
        The field indicating whether the transformation will be set into the paused state. By default, the value is false.
        """
        return pulumi.get(self, "paused")

    @paused.setter
    def paused(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "paused", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input['TransformationScheduleArgs']]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input['TransformationScheduleArgs']]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="transformationConfig")
    def transformation_config(self) -> Optional[pulumi.Input['TransformationTransformationConfigArgs']]:
        return pulumi.get(self, "transformation_config")

    @transformation_config.setter
    def transformation_config(self, value: Optional[pulumi.Input['TransformationTransformationConfigArgs']]):
        pulumi.set(self, "transformation_config", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Transformation type. The following values are supported: DBT_CORE, QUICKSTART.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _TransformationState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 created_by_id: Optional[pulumi.Input[str]] = None,
                 output_model_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 paused: Optional[pulumi.Input[bool]] = None,
                 schedule: Optional[pulumi.Input['TransformationScheduleArgs']] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transformation_config: Optional[pulumi.Input['TransformationTransformationConfigArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Transformation resources.
        :param pulumi.Input[str] created_at: The timestamp of when the transformation was created in your account.
        :param pulumi.Input[str] created_by_id: The unique identifier for the User within the Fivetran system who created the transformation.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] output_model_names: Identifiers of related models.
        :param pulumi.Input[bool] paused: The field indicating whether the transformation will be set into the paused state. By default, the value is false.
        :param pulumi.Input[str] status: Status of transformation Project (NOT_READY, READY, ERROR).
        :param pulumi.Input[str] type: Transformation type. The following values are supported: DBT_CORE, QUICKSTART.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by_id is not None:
            pulumi.set(__self__, "created_by_id", created_by_id)
        if output_model_names is not None:
            pulumi.set(__self__, "output_model_names", output_model_names)
        if paused is not None:
            pulumi.set(__self__, "paused", paused)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if transformation_config is not None:
            pulumi.set(__self__, "transformation_config", transformation_config)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The timestamp of when the transformation was created in your account.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="createdById")
    def created_by_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier for the User within the Fivetran system who created the transformation.
        """
        return pulumi.get(self, "created_by_id")

    @created_by_id.setter
    def created_by_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_id", value)

    @property
    @pulumi.getter(name="outputModelNames")
    def output_model_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Identifiers of related models.
        """
        return pulumi.get(self, "output_model_names")

    @output_model_names.setter
    def output_model_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "output_model_names", value)

    @property
    @pulumi.getter
    def paused(self) -> Optional[pulumi.Input[bool]]:
        """
        The field indicating whether the transformation will be set into the paused state. By default, the value is false.
        """
        return pulumi.get(self, "paused")

    @paused.setter
    def paused(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "paused", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input['TransformationScheduleArgs']]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input['TransformationScheduleArgs']]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of transformation Project (NOT_READY, READY, ERROR).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="transformationConfig")
    def transformation_config(self) -> Optional[pulumi.Input['TransformationTransformationConfigArgs']]:
        return pulumi.get(self, "transformation_config")

    @transformation_config.setter
    def transformation_config(self, value: Optional[pulumi.Input['TransformationTransformationConfigArgs']]):
        pulumi.set(self, "transformation_config", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Transformation type. The following values are supported: DBT_CORE, QUICKSTART.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class Transformation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 paused: Optional[pulumi.Input[bool]] = None,
                 schedule: Optional[pulumi.Input[Union['TransformationScheduleArgs', 'TransformationScheduleArgsDict']]] = None,
                 transformation_config: Optional[pulumi.Input[Union['TransformationTransformationConfigArgs', 'TransformationTransformationConfigArgsDict']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Resource is in ALPHA state.

        This resource allows you to add, manage and delete transformation projects in your account.

        ## Example Usage

        ## Import

        1. To import an existing `fivetran_transformation` resource into your Terraform state, you need to get **Transformation ID** via API call `GET https://api.fivetran.com/v1/transformations` to retrieve available projects.

        2. Fetch transformation details for particular `transformation-id` using `GET https://api.fivetran.com/v1/transformations/{transformation-id}` to ensure that this is the transformation you want to import.

        3. Define an empty resource in your `.tf` configuration:

        hcl

        resource "fivetran_transformation" "my_imported_fivetran_transformation" {

        }

        4. Run the `pulumi import` command:

        ```sh
        $ pulumi import fivetran:index/transformation:Transformation my_imported_fivetran_transformation {Transformation ID}
        ```

        4. Use the `terraform state show` command to get the values from the state:

        terraform state show 'fivetran_transformation.my_imported_fivetran_transformation'

        5. Copy the values and paste them to your `.tf` configuration.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] paused: The field indicating whether the transformation will be set into the paused state. By default, the value is false.
        :param pulumi.Input[str] type: Transformation type. The following values are supported: DBT_CORE, QUICKSTART.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[TransformationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource is in ALPHA state.

        This resource allows you to add, manage and delete transformation projects in your account.

        ## Example Usage

        ## Import

        1. To import an existing `fivetran_transformation` resource into your Terraform state, you need to get **Transformation ID** via API call `GET https://api.fivetran.com/v1/transformations` to retrieve available projects.

        2. Fetch transformation details for particular `transformation-id` using `GET https://api.fivetran.com/v1/transformations/{transformation-id}` to ensure that this is the transformation you want to import.

        3. Define an empty resource in your `.tf` configuration:

        hcl

        resource "fivetran_transformation" "my_imported_fivetran_transformation" {

        }

        4. Run the `pulumi import` command:

        ```sh
        $ pulumi import fivetran:index/transformation:Transformation my_imported_fivetran_transformation {Transformation ID}
        ```

        4. Use the `terraform state show` command to get the values from the state:

        terraform state show 'fivetran_transformation.my_imported_fivetran_transformation'

        5. Copy the values and paste them to your `.tf` configuration.

        :param str resource_name: The name of the resource.
        :param TransformationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TransformationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 paused: Optional[pulumi.Input[bool]] = None,
                 schedule: Optional[pulumi.Input[Union['TransformationScheduleArgs', 'TransformationScheduleArgsDict']]] = None,
                 transformation_config: Optional[pulumi.Input[Union['TransformationTransformationConfigArgs', 'TransformationTransformationConfigArgsDict']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TransformationArgs.__new__(TransformationArgs)

            __props__.__dict__["paused"] = paused
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["transformation_config"] = transformation_config
            __props__.__dict__["type"] = type
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by_id"] = None
            __props__.__dict__["output_model_names"] = None
            __props__.__dict__["status"] = None
        super(Transformation, __self__).__init__(
            'fivetran:index/transformation:Transformation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            created_by_id: Optional[pulumi.Input[str]] = None,
            output_model_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            paused: Optional[pulumi.Input[bool]] = None,
            schedule: Optional[pulumi.Input[Union['TransformationScheduleArgs', 'TransformationScheduleArgsDict']]] = None,
            status: Optional[pulumi.Input[str]] = None,
            transformation_config: Optional[pulumi.Input[Union['TransformationTransformationConfigArgs', 'TransformationTransformationConfigArgsDict']]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'Transformation':
        """
        Get an existing Transformation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_at: The timestamp of when the transformation was created in your account.
        :param pulumi.Input[str] created_by_id: The unique identifier for the User within the Fivetran system who created the transformation.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] output_model_names: Identifiers of related models.
        :param pulumi.Input[bool] paused: The field indicating whether the transformation will be set into the paused state. By default, the value is false.
        :param pulumi.Input[str] status: Status of transformation Project (NOT_READY, READY, ERROR).
        :param pulumi.Input[str] type: Transformation type. The following values are supported: DBT_CORE, QUICKSTART.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TransformationState.__new__(_TransformationState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by_id"] = created_by_id
        __props__.__dict__["output_model_names"] = output_model_names
        __props__.__dict__["paused"] = paused
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["status"] = status
        __props__.__dict__["transformation_config"] = transformation_config
        __props__.__dict__["type"] = type
        return Transformation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The timestamp of when the transformation was created in your account.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdById")
    def created_by_id(self) -> pulumi.Output[str]:
        """
        The unique identifier for the User within the Fivetran system who created the transformation.
        """
        return pulumi.get(self, "created_by_id")

    @property
    @pulumi.getter(name="outputModelNames")
    def output_model_names(self) -> pulumi.Output[Sequence[str]]:
        """
        Identifiers of related models.
        """
        return pulumi.get(self, "output_model_names")

    @property
    @pulumi.getter
    def paused(self) -> pulumi.Output[bool]:
        """
        The field indicating whether the transformation will be set into the paused state. By default, the value is false.
        """
        return pulumi.get(self, "paused")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[Optional['outputs.TransformationSchedule']]:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Status of transformation Project (NOT_READY, READY, ERROR).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="transformationConfig")
    def transformation_config(self) -> pulumi.Output[Optional['outputs.TransformationTransformationConfig']]:
        return pulumi.get(self, "transformation_config")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Transformation type. The following values are supported: DBT_CORE, QUICKSTART.
        """
        return pulumi.get(self, "type")

