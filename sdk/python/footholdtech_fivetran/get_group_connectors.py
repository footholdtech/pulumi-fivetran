# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetGroupConnectorsResult',
    'AwaitableGetGroupConnectorsResult',
    'get_group_connectors',
    'get_group_connectors_output',
]

@pulumi.output_type
class GetGroupConnectorsResult:
    """
    A collection of values returned by getGroupConnectors.
    """
    def __init__(__self__, connectors=None, id=None, schema=None):
        if connectors and not isinstance(connectors, list):
            raise TypeError("Expected argument 'connectors' to be a list")
        pulumi.set(__self__, "connectors", connectors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if schema and not isinstance(schema, str):
            raise TypeError("Expected argument 'schema' to be a str")
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def connectors(self) -> Optional[Sequence['outputs.GetGroupConnectorsConnectorResult']]:
        return pulumi.get(self, "connectors")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def schema(self) -> Optional[str]:
        """
        Optional filter. When defined, the data source will only contain information for the connector with the specified schema name.
        """
        return pulumi.get(self, "schema")


class AwaitableGetGroupConnectorsResult(GetGroupConnectorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupConnectorsResult(
            connectors=self.connectors,
            id=self.id,
            schema=self.schema)


def get_group_connectors(connectors: Optional[Sequence[pulumi.InputType['GetGroupConnectorsConnectorArgs']]] = None,
                         id: Optional[str] = None,
                         schema: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupConnectorsResult:
    """
    This data source returns a list of information about all connectors within a group in your Fivetran account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    group_connectors = fivetran.get_group_connectors(id="anonymous_mystery",
        schema="connector_schema_name")
    ```


    :param str id: The ID of this resource.
    :param str schema: Optional filter. When defined, the data source will only contain information for the connector with the specified schema name.
    """
    __args__ = dict()
    __args__['connectors'] = connectors
    __args__['id'] = id
    __args__['schema'] = schema
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fivetran:index/getGroupConnectors:getGroupConnectors', __args__, opts=opts, typ=GetGroupConnectorsResult).value

    return AwaitableGetGroupConnectorsResult(
        connectors=pulumi.get(__ret__, 'connectors'),
        id=pulumi.get(__ret__, 'id'),
        schema=pulumi.get(__ret__, 'schema'))


@_utilities.lift_output_func(get_group_connectors)
def get_group_connectors_output(connectors: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetGroupConnectorsConnectorArgs']]]]] = None,
                                id: Optional[pulumi.Input[str]] = None,
                                schema: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGroupConnectorsResult]:
    """
    This data source returns a list of information about all connectors within a group in your Fivetran account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    group_connectors = fivetran.get_group_connectors(id="anonymous_mystery",
        schema="connector_schema_name")
    ```


    :param str id: The ID of this resource.
    :param str schema: Optional filter. When defined, the data source will only contain information for the connector with the specified schema name.
    """
    ...
