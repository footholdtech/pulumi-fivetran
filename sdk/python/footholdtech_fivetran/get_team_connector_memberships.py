# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetTeamConnectorMembershipsResult',
    'AwaitableGetTeamConnectorMembershipsResult',
    'get_team_connector_memberships',
    'get_team_connector_memberships_output',
]

@pulumi.output_type
class GetTeamConnectorMembershipsResult:
    """
    A collection of values returned by getTeamConnectorMemberships.
    """
    def __init__(__self__, connectors=None, id=None, team_id=None):
        if connectors and not isinstance(connectors, list):
            raise TypeError("Expected argument 'connectors' to be a list")
        pulumi.set(__self__, "connectors", connectors)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if team_id and not isinstance(team_id, str):
            raise TypeError("Expected argument 'team_id' to be a str")
        pulumi.set(__self__, "team_id", team_id)

    @property
    @pulumi.getter
    def connectors(self) -> Optional[Sequence['outputs.GetTeamConnectorMembershipsConnectorResult']]:
        return pulumi.get(self, "connectors")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier for resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> str:
        """
        The unique identifier for the team within your account.
        """
        return pulumi.get(self, "team_id")


class AwaitableGetTeamConnectorMembershipsResult(GetTeamConnectorMembershipsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTeamConnectorMembershipsResult(
            connectors=self.connectors,
            id=self.id,
            team_id=self.team_id)


def get_team_connector_memberships(connectors: Optional[Sequence[pulumi.InputType['GetTeamConnectorMembershipsConnectorArgs']]] = None,
                                   team_id: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTeamConnectorMembershipsResult:
    """
    This data source returns a connector membership within team object.


    :param str team_id: The unique identifier for the team within your account.
    """
    __args__ = dict()
    __args__['connectors'] = connectors
    __args__['teamId'] = team_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fivetran:index/getTeamConnectorMemberships:getTeamConnectorMemberships', __args__, opts=opts, typ=GetTeamConnectorMembershipsResult).value

    return AwaitableGetTeamConnectorMembershipsResult(
        connectors=pulumi.get(__ret__, 'connectors'),
        id=pulumi.get(__ret__, 'id'),
        team_id=pulumi.get(__ret__, 'team_id'))


@_utilities.lift_output_func(get_team_connector_memberships)
def get_team_connector_memberships_output(connectors: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetTeamConnectorMembershipsConnectorArgs']]]]] = None,
                                          team_id: Optional[pulumi.Input[str]] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTeamConnectorMembershipsResult]:
    """
    This data source returns a connector membership within team object.


    :param str team_id: The unique identifier for the team within your account.
    """
    ...
