# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DestinationFingerprintsArgs', 'DestinationFingerprints']

@pulumi.input_type
class DestinationFingerprintsArgs:
    def __init__(__self__, *,
                 destination_id: pulumi.Input[str],
                 fingerprints: Optional[pulumi.Input[Sequence[pulumi.Input['DestinationFingerprintsFingerprintArgs']]]] = None):
        """
        The set of arguments for constructing a DestinationFingerprints resource.
        :param pulumi.Input[str] destination_id: The unique identifier for the target destination within the Fivetran system.
        """
        pulumi.set(__self__, "destination_id", destination_id)
        if fingerprints is not None:
            pulumi.set(__self__, "fingerprints", fingerprints)

    @property
    @pulumi.getter(name="destinationId")
    def destination_id(self) -> pulumi.Input[str]:
        """
        The unique identifier for the target destination within the Fivetran system.
        """
        return pulumi.get(self, "destination_id")

    @destination_id.setter
    def destination_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_id", value)

    @property
    @pulumi.getter
    def fingerprints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DestinationFingerprintsFingerprintArgs']]]]:
        return pulumi.get(self, "fingerprints")

    @fingerprints.setter
    def fingerprints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DestinationFingerprintsFingerprintArgs']]]]):
        pulumi.set(self, "fingerprints", value)


@pulumi.input_type
class _DestinationFingerprintsState:
    def __init__(__self__, *,
                 destination_id: Optional[pulumi.Input[str]] = None,
                 fingerprints: Optional[pulumi.Input[Sequence[pulumi.Input['DestinationFingerprintsFingerprintArgs']]]] = None):
        """
        Input properties used for looking up and filtering DestinationFingerprints resources.
        :param pulumi.Input[str] destination_id: The unique identifier for the target destination within the Fivetran system.
        """
        if destination_id is not None:
            pulumi.set(__self__, "destination_id", destination_id)
        if fingerprints is not None:
            pulumi.set(__self__, "fingerprints", fingerprints)

    @property
    @pulumi.getter(name="destinationId")
    def destination_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier for the target destination within the Fivetran system.
        """
        return pulumi.get(self, "destination_id")

    @destination_id.setter
    def destination_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_id", value)

    @property
    @pulumi.getter
    def fingerprints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DestinationFingerprintsFingerprintArgs']]]]:
        return pulumi.get(self, "fingerprints")

    @fingerprints.setter
    def fingerprints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DestinationFingerprintsFingerprintArgs']]]]):
        pulumi.set(self, "fingerprints", value)


class DestinationFingerprints(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_id: Optional[pulumi.Input[str]] = None,
                 fingerprints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DestinationFingerprintsFingerprintArgs']]]]] = None,
                 __props__=None):
        """
        This resource allows you to manage list of approved SSH fingerprints for a particular destination.

        ## Example Usage

        ```python
        import pulumi
        import footholdtech_fivetran as fivetran

        my_destination_approved_fingerprints = fivetran.DestinationFingerprints("myDestinationApprovedFingerprints",
            destination_id=fivetran_destination["my_destination"]["id"],
            fingerprints=[
                fivetran.DestinationFingerprintsFingerprintArgs(
                    hash="jhgfJfgrI6yy...",
                    public_key="ssh-rsa CCCCB3NzaC1yc2ECCASFWFWDFRWT5WAS ... fivetran user key",
                ),
                fivetran.DestinationFingerprintsFingerprintArgs(
                    hash="eUtPirI6yytWe...",
                    public_key="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6 ... fivetran user key",
                ),
            ])
        ```

        ## Import

        1. To import an existing `fivetran_destination_fingerprints` resource into your Terraform state, you need to get **Destination Group ID** on the destination page in your Fivetran dashboard. 2. To retrieve existing groups, use the [fivetran_groups data source](/docs/data-sources/groups). 3. Define an empty resource in your `.tf` configurationhcl resource "fivetran_destination_fingerprints" "my_imported_destination_fingerprints" { }

        ```sh
         $ pulumi import fivetran:index/destinationFingerprints:DestinationFingerprints

        Run the `terraform import` command
        ```

        ```sh
         $ pulumi import fivetran:index/destinationFingerprints:DestinationFingerprints my_imported_destination_fingerprints {your Destination Group ID}
        ```

        5.  

        Use the `terraform state show` command to get the values from the stateterraform state show 'fivetran_destination_fingerprints.my_imported_destination_fingerprints' 6. Copy the values and paste them to your `.tf` configuration.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] destination_id: The unique identifier for the target destination within the Fivetran system.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DestinationFingerprintsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource allows you to manage list of approved SSH fingerprints for a particular destination.

        ## Example Usage

        ```python
        import pulumi
        import footholdtech_fivetran as fivetran

        my_destination_approved_fingerprints = fivetran.DestinationFingerprints("myDestinationApprovedFingerprints",
            destination_id=fivetran_destination["my_destination"]["id"],
            fingerprints=[
                fivetran.DestinationFingerprintsFingerprintArgs(
                    hash="jhgfJfgrI6yy...",
                    public_key="ssh-rsa CCCCB3NzaC1yc2ECCASFWFWDFRWT5WAS ... fivetran user key",
                ),
                fivetran.DestinationFingerprintsFingerprintArgs(
                    hash="eUtPirI6yytWe...",
                    public_key="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6 ... fivetran user key",
                ),
            ])
        ```

        ## Import

        1. To import an existing `fivetran_destination_fingerprints` resource into your Terraform state, you need to get **Destination Group ID** on the destination page in your Fivetran dashboard. 2. To retrieve existing groups, use the [fivetran_groups data source](/docs/data-sources/groups). 3. Define an empty resource in your `.tf` configurationhcl resource "fivetran_destination_fingerprints" "my_imported_destination_fingerprints" { }

        ```sh
         $ pulumi import fivetran:index/destinationFingerprints:DestinationFingerprints

        Run the `terraform import` command
        ```

        ```sh
         $ pulumi import fivetran:index/destinationFingerprints:DestinationFingerprints my_imported_destination_fingerprints {your Destination Group ID}
        ```

        5.  

        Use the `terraform state show` command to get the values from the stateterraform state show 'fivetran_destination_fingerprints.my_imported_destination_fingerprints' 6. Copy the values and paste them to your `.tf` configuration.

        :param str resource_name: The name of the resource.
        :param DestinationFingerprintsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DestinationFingerprintsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_id: Optional[pulumi.Input[str]] = None,
                 fingerprints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DestinationFingerprintsFingerprintArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DestinationFingerprintsArgs.__new__(DestinationFingerprintsArgs)

            if destination_id is None and not opts.urn:
                raise TypeError("Missing required property 'destination_id'")
            __props__.__dict__["destination_id"] = destination_id
            __props__.__dict__["fingerprints"] = fingerprints
        super(DestinationFingerprints, __self__).__init__(
            'fivetran:index/destinationFingerprints:DestinationFingerprints',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            destination_id: Optional[pulumi.Input[str]] = None,
            fingerprints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DestinationFingerprintsFingerprintArgs']]]]] = None) -> 'DestinationFingerprints':
        """
        Get an existing DestinationFingerprints resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] destination_id: The unique identifier for the target destination within the Fivetran system.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DestinationFingerprintsState.__new__(_DestinationFingerprintsState)

        __props__.__dict__["destination_id"] = destination_id
        __props__.__dict__["fingerprints"] = fingerprints
        return DestinationFingerprints(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="destinationId")
    def destination_id(self) -> pulumi.Output[str]:
        """
        The unique identifier for the target destination within the Fivetran system.
        """
        return pulumi.get(self, "destination_id")

    @property
    @pulumi.getter
    def fingerprints(self) -> pulumi.Output[Optional[Sequence['outputs.DestinationFingerprintsFingerprint']]]:
        return pulumi.get(self, "fingerprints")

