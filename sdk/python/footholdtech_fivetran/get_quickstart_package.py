# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetQuickstartPackageResult',
    'AwaitableGetQuickstartPackageResult',
    'get_quickstart_package',
    'get_quickstart_package_output',
]

@pulumi.output_type
class GetQuickstartPackageResult:
    """
    A collection of values returned by getQuickstartPackage.
    """
    def __init__(__self__, connector_types=None, id=None, name=None, output_model_names=None, version=None):
        if connector_types and not isinstance(connector_types, list):
            raise TypeError("Expected argument 'connector_types' to be a list")
        pulumi.set(__self__, "connector_types", connector_types)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if output_model_names and not isinstance(output_model_names, list):
            raise TypeError("Expected argument 'output_model_names' to be a list")
        pulumi.set(__self__, "output_model_names", output_model_names)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="connectorTypes")
    def connector_types(self) -> Sequence[str]:
        """
        The set of connector types
        """
        return pulumi.get(self, "connector_types")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier for the Quickstart transformation package definition within the Fivetran system
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Quickstart transformation package name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outputModelNames")
    def output_model_names(self) -> Sequence[str]:
        """
        The list of transformation output models
        """
        return pulumi.get(self, "output_model_names")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The Quickstart package definition version
        """
        return pulumi.get(self, "version")


class AwaitableGetQuickstartPackageResult(GetQuickstartPackageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetQuickstartPackageResult(
            connector_types=self.connector_types,
            id=self.id,
            name=self.name,
            output_model_names=self.output_model_names,
            version=self.version)


def get_quickstart_package(id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetQuickstartPackageResult:
    """
    This data source returns the metadata details of the Quickstart transformation package if a valid identifier is provided

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    test = fivetran.get_quickstart_package(id="id")
    ```


    :param str id: The unique identifier for the Quickstart transformation package definition within the Fivetran system
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fivetran:index/getQuickstartPackage:getQuickstartPackage', __args__, opts=opts, typ=GetQuickstartPackageResult).value

    return AwaitableGetQuickstartPackageResult(
        connector_types=pulumi.get(__ret__, 'connector_types'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        output_model_names=pulumi.get(__ret__, 'output_model_names'),
        version=pulumi.get(__ret__, 'version'))
def get_quickstart_package_output(id: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetQuickstartPackageResult]:
    """
    This data source returns the metadata details of the Quickstart transformation package if a valid identifier is provided

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    test = fivetran.get_quickstart_package(id="id")
    ```


    :param str id: The unique identifier for the Quickstart transformation package definition within the Fivetran system
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('fivetran:index/getQuickstartPackage:getQuickstartPackage', __args__, opts=opts, typ=GetQuickstartPackageResult)
    return __ret__.apply(lambda __response__: GetQuickstartPackageResult(
        connector_types=pulumi.get(__response__, 'connector_types'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        output_model_names=pulumi.get(__response__, 'output_model_names'),
        version=pulumi.get(__response__, 'version')))
