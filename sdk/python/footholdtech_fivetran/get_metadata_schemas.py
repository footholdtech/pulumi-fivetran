# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetMetadataSchemasResult',
    'AwaitableGetMetadataSchemasResult',
    'get_metadata_schemas',
    'get_metadata_schemas_output',
]

@pulumi.output_type
class GetMetadataSchemasResult:
    """
    A collection of values returned by getMetadataSchemas.
    """
    def __init__(__self__, id=None, metadata_schemas=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metadata_schemas and not isinstance(metadata_schemas, list):
            raise TypeError("Expected argument 'metadata_schemas' to be a list")
        pulumi.set(__self__, "metadata_schemas", metadata_schemas)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier for the connector within the Fivetran system. Data-source will represent a set of schemas of connector.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="metadataSchemas")
    def metadata_schemas(self) -> Sequence['outputs.GetMetadataSchemasMetadataSchemaResult']:
        return pulumi.get(self, "metadata_schemas")


class AwaitableGetMetadataSchemasResult(GetMetadataSchemasResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetadataSchemasResult(
            id=self.id,
            metadata_schemas=self.metadata_schemas)


def get_metadata_schemas(id: Optional[str] = None,
                         metadata_schemas: Optional[Sequence[pulumi.InputType['GetMetadataSchemasMetadataSchemaArgs']]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetadataSchemasResult:
    """
    Returns schema-level metadata for an existing connector within your Fivetran account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    metadata_schemas = fivetran.get_metadata_schemas()
    ```


    :param str id: The unique schema identifier
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['metadataSchemas'] = metadata_schemas
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fivetran:index/getMetadataSchemas:getMetadataSchemas', __args__, opts=opts, typ=GetMetadataSchemasResult).value

    return AwaitableGetMetadataSchemasResult(
        id=pulumi.get(__ret__, 'id'),
        metadata_schemas=pulumi.get(__ret__, 'metadata_schemas'))


@_utilities.lift_output_func(get_metadata_schemas)
def get_metadata_schemas_output(id: Optional[pulumi.Input[str]] = None,
                                metadata_schemas: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetMetadataSchemasMetadataSchemaArgs']]]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMetadataSchemasResult]:
    """
    Returns schema-level metadata for an existing connector within your Fivetran account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    metadata_schemas = fivetran.get_metadata_schemas()
    ```


    :param str id: The unique schema identifier
    """
    ...
