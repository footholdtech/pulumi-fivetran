# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetPrivateLinkResult',
    'AwaitableGetPrivateLinkResult',
    'get_private_link',
    'get_private_link_output',
]

@pulumi.output_type
class GetPrivateLinkResult:
    """
    A collection of values returned by getPrivateLink.
    """
    def __init__(__self__, cloud_provider=None, config_map=None, created_at=None, created_by=None, id=None, name=None, region=None, service=None, state=None, state_summary=None):
        if cloud_provider and not isinstance(cloud_provider, str):
            raise TypeError("Expected argument 'cloud_provider' to be a str")
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        if config_map and not isinstance(config_map, dict):
            raise TypeError("Expected argument 'config_map' to be a dict")
        pulumi.set(__self__, "config_map", config_map)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if service and not isinstance(service, str):
            raise TypeError("Expected argument 'service' to be a str")
        pulumi.set(__self__, "service", service)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if state_summary and not isinstance(state_summary, str):
            raise TypeError("Expected argument 'state_summary' to be a str")
        pulumi.set(__self__, "state_summary", state_summary)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> str:
        """
        The cloud provider name.
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter(name="configMap")
    def config_map(self) -> Mapping[str, str]:
        """
        Configuration.
        """
        return pulumi.get(self, "config_map")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The date and time the membership was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The unique identifier for the User within the Fivetran system.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier for the private link within the Fivetran system.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The private link name within the account. The name must start with a letter or underscore and can only contain letters, numbers, or underscores. Maximum size of name is 23 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Data processing location. This is where Fivetran will operate and run computation on data.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def service(self) -> str:
        """
        Service type.
        """
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the private link.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateSummary")
    def state_summary(self) -> str:
        """
        The state of the private link.
        """
        return pulumi.get(self, "state_summary")


class AwaitableGetPrivateLinkResult(GetPrivateLinkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrivateLinkResult(
            cloud_provider=self.cloud_provider,
            config_map=self.config_map,
            created_at=self.created_at,
            created_by=self.created_by,
            id=self.id,
            name=self.name,
            region=self.region,
            service=self.service,
            state=self.state,
            state_summary=self.state_summary)


def get_private_link(id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrivateLinkResult:
    """
    This data source returns a private link object.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    private_link = fivetran.get_private_link(id="private_link_id")
    ```


    :param str id: The unique identifier for the private link within the Fivetran system.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fivetran:index/getPrivateLink:getPrivateLink', __args__, opts=opts, typ=GetPrivateLinkResult).value

    return AwaitableGetPrivateLinkResult(
        cloud_provider=pulumi.get(__ret__, 'cloud_provider'),
        config_map=pulumi.get(__ret__, 'config_map'),
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by=pulumi.get(__ret__, 'created_by'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        service=pulumi.get(__ret__, 'service'),
        state=pulumi.get(__ret__, 'state'),
        state_summary=pulumi.get(__ret__, 'state_summary'))
def get_private_link_output(id: Optional[pulumi.Input[str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPrivateLinkResult]:
    """
    This data source returns a private link object.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    private_link = fivetran.get_private_link(id="private_link_id")
    ```


    :param str id: The unique identifier for the private link within the Fivetran system.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('fivetran:index/getPrivateLink:getPrivateLink', __args__, opts=opts, typ=GetPrivateLinkResult)
    return __ret__.apply(lambda __response__: GetPrivateLinkResult(
        cloud_provider=pulumi.get(__response__, 'cloud_provider'),
        config_map=pulumi.get(__response__, 'config_map'),
        created_at=pulumi.get(__response__, 'created_at'),
        created_by=pulumi.get(__response__, 'created_by'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        service=pulumi.get(__response__, 'service'),
        state=pulumi.get(__response__, 'state'),
        state_summary=pulumi.get(__response__, 'state_summary')))
