# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DbtProjectArgs', 'DbtProject']

@pulumi.input_type
class DbtProjectArgs:
    def __init__(__self__, *,
                 dbt_version: pulumi.Input[str],
                 default_schema: pulumi.Input[str],
                 group_id: pulumi.Input[str],
                 ensure_readiness: Optional[pulumi.Input[bool]] = None,
                 environment_vars: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_config: Optional[pulumi.Input['DbtProjectProjectConfigArgs']] = None,
                 target_name: Optional[pulumi.Input[str]] = None,
                 threads: Optional[pulumi.Input[int]] = None,
                 timeouts: Optional[pulumi.Input['DbtProjectTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DbtProject resource.
        :param pulumi.Input[str] dbt_version: The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
        :param pulumi.Input[str] default_schema: Default schema in destination. This production schema will contain your transformed data.
        :param pulumi.Input[str] group_id: The unique identifier for the group within the Fivetran system.
        :param pulumi.Input[bool] ensure_readiness: Should resource wait for project to finish initialization. Default value: true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_vars: List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
        :param pulumi.Input[str] target_name: Target name to set or override the value from the deployment.yaml
        :param pulumi.Input[int] threads: The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
        :param pulumi.Input[str] type: Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
        """
        pulumi.set(__self__, "dbt_version", dbt_version)
        pulumi.set(__self__, "default_schema", default_schema)
        pulumi.set(__self__, "group_id", group_id)
        if ensure_readiness is not None:
            pulumi.set(__self__, "ensure_readiness", ensure_readiness)
        if environment_vars is not None:
            pulumi.set(__self__, "environment_vars", environment_vars)
        if project_config is not None:
            pulumi.set(__self__, "project_config", project_config)
        if target_name is not None:
            pulumi.set(__self__, "target_name", target_name)
        if threads is not None:
            pulumi.set(__self__, "threads", threads)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="dbtVersion")
    def dbt_version(self) -> pulumi.Input[str]:
        """
        The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
        """
        return pulumi.get(self, "dbt_version")

    @dbt_version.setter
    def dbt_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "dbt_version", value)

    @property
    @pulumi.getter(name="defaultSchema")
    def default_schema(self) -> pulumi.Input[str]:
        """
        Default schema in destination. This production schema will contain your transformed data.
        """
        return pulumi.get(self, "default_schema")

    @default_schema.setter
    def default_schema(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_schema", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[str]:
        """
        The unique identifier for the group within the Fivetran system.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="ensureReadiness")
    def ensure_readiness(self) -> Optional[pulumi.Input[bool]]:
        """
        Should resource wait for project to finish initialization. Default value: true.
        """
        return pulumi.get(self, "ensure_readiness")

    @ensure_readiness.setter
    def ensure_readiness(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ensure_readiness", value)

    @property
    @pulumi.getter(name="environmentVars")
    def environment_vars(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
        """
        return pulumi.get(self, "environment_vars")

    @environment_vars.setter
    def environment_vars(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_vars", value)

    @property
    @pulumi.getter(name="projectConfig")
    def project_config(self) -> Optional[pulumi.Input['DbtProjectProjectConfigArgs']]:
        return pulumi.get(self, "project_config")

    @project_config.setter
    def project_config(self, value: Optional[pulumi.Input['DbtProjectProjectConfigArgs']]):
        pulumi.set(self, "project_config", value)

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> Optional[pulumi.Input[str]]:
        """
        Target name to set or override the value from the deployment.yaml
        """
        return pulumi.get(self, "target_name")

    @target_name.setter
    def target_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_name", value)

    @property
    @pulumi.getter
    def threads(self) -> Optional[pulumi.Input[int]]:
        """
        The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
        """
        return pulumi.get(self, "threads")

    @threads.setter
    def threads(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threads", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DbtProjectTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DbtProjectTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _DbtProjectState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 created_by_id: Optional[pulumi.Input[str]] = None,
                 dbt_version: Optional[pulumi.Input[str]] = None,
                 default_schema: Optional[pulumi.Input[str]] = None,
                 ensure_readiness: Optional[pulumi.Input[bool]] = None,
                 environment_vars: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 models: Optional[pulumi.Input[Sequence[pulumi.Input['DbtProjectModelArgs']]]] = None,
                 project_config: Optional[pulumi.Input['DbtProjectProjectConfigArgs']] = None,
                 public_key: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 target_name: Optional[pulumi.Input[str]] = None,
                 threads: Optional[pulumi.Input[int]] = None,
                 timeouts: Optional[pulumi.Input['DbtProjectTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DbtProject resources.
        :param pulumi.Input[str] created_at: The timestamp of the dbt Project creation.
        :param pulumi.Input[str] created_by_id: The unique identifier for the User within the Fivetran system who created the dbt Project.
        :param pulumi.Input[str] dbt_version: The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
        :param pulumi.Input[str] default_schema: Default schema in destination. This production schema will contain your transformed data.
        :param pulumi.Input[bool] ensure_readiness: Should resource wait for project to finish initialization. Default value: true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_vars: List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
        :param pulumi.Input[str] group_id: The unique identifier for the group within the Fivetran system.
        :param pulumi.Input[str] public_key: Public key to grant Fivetran SSH access to git repository.
        :param pulumi.Input[str] status: Status of dbt Project (NOT_READY, READY, ERROR).
        :param pulumi.Input[str] target_name: Target name to set or override the value from the deployment.yaml
        :param pulumi.Input[int] threads: The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
        :param pulumi.Input[str] type: Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by_id is not None:
            pulumi.set(__self__, "created_by_id", created_by_id)
        if dbt_version is not None:
            pulumi.set(__self__, "dbt_version", dbt_version)
        if default_schema is not None:
            pulumi.set(__self__, "default_schema", default_schema)
        if ensure_readiness is not None:
            pulumi.set(__self__, "ensure_readiness", ensure_readiness)
        if environment_vars is not None:
            pulumi.set(__self__, "environment_vars", environment_vars)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if models is not None:
            pulumi.set(__self__, "models", models)
        if project_config is not None:
            pulumi.set(__self__, "project_config", project_config)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if target_name is not None:
            pulumi.set(__self__, "target_name", target_name)
        if threads is not None:
            pulumi.set(__self__, "threads", threads)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The timestamp of the dbt Project creation.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="createdById")
    def created_by_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier for the User within the Fivetran system who created the dbt Project.
        """
        return pulumi.get(self, "created_by_id")

    @created_by_id.setter
    def created_by_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_id", value)

    @property
    @pulumi.getter(name="dbtVersion")
    def dbt_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
        """
        return pulumi.get(self, "dbt_version")

    @dbt_version.setter
    def dbt_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbt_version", value)

    @property
    @pulumi.getter(name="defaultSchema")
    def default_schema(self) -> Optional[pulumi.Input[str]]:
        """
        Default schema in destination. This production schema will contain your transformed data.
        """
        return pulumi.get(self, "default_schema")

    @default_schema.setter
    def default_schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_schema", value)

    @property
    @pulumi.getter(name="ensureReadiness")
    def ensure_readiness(self) -> Optional[pulumi.Input[bool]]:
        """
        Should resource wait for project to finish initialization. Default value: true.
        """
        return pulumi.get(self, "ensure_readiness")

    @ensure_readiness.setter
    def ensure_readiness(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ensure_readiness", value)

    @property
    @pulumi.getter(name="environmentVars")
    def environment_vars(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
        """
        return pulumi.get(self, "environment_vars")

    @environment_vars.setter
    def environment_vars(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_vars", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier for the group within the Fivetran system.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def models(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DbtProjectModelArgs']]]]:
        return pulumi.get(self, "models")

    @models.setter
    def models(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DbtProjectModelArgs']]]]):
        pulumi.set(self, "models", value)

    @property
    @pulumi.getter(name="projectConfig")
    def project_config(self) -> Optional[pulumi.Input['DbtProjectProjectConfigArgs']]:
        return pulumi.get(self, "project_config")

    @project_config.setter
    def project_config(self, value: Optional[pulumi.Input['DbtProjectProjectConfigArgs']]):
        pulumi.set(self, "project_config", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[str]]:
        """
        Public key to grant Fivetran SSH access to git repository.
        """
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_key", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of dbt Project (NOT_READY, READY, ERROR).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> Optional[pulumi.Input[str]]:
        """
        Target name to set or override the value from the deployment.yaml
        """
        return pulumi.get(self, "target_name")

    @target_name.setter
    def target_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_name", value)

    @property
    @pulumi.getter
    def threads(self) -> Optional[pulumi.Input[int]]:
        """
        The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
        """
        return pulumi.get(self, "threads")

    @threads.setter
    def threads(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threads", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DbtProjectTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DbtProjectTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class DbtProject(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dbt_version: Optional[pulumi.Input[str]] = None,
                 default_schema: Optional[pulumi.Input[str]] = None,
                 ensure_readiness: Optional[pulumi.Input[bool]] = None,
                 environment_vars: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 project_config: Optional[pulumi.Input[pulumi.InputType['DbtProjectProjectConfigArgs']]] = None,
                 target_name: Optional[pulumi.Input[str]] = None,
                 threads: Optional[pulumi.Input[int]] = None,
                 timeouts: Optional[pulumi.Input[pulumi.InputType['DbtProjectTimeoutsArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Resource is in ALPHA state.

        This resource allows you to add, manage and delete dbt Projects in your account.

        ## Import

        1. To import an existing `fivetran_dbt_project` resource into your Terraform state, you need to get **Dbt Project ID** via API call `GET https://api.fivetran.com/v1/dbt/projects` to retrieve available projects.

        2. Fetch project details for particular `project-id` using `GET https://api.fivetran.com/v1/dbt/projects/{project-id}` to ensure that this is the project you want to import.

        3. Define an empty resource in your `.tf` configuration:

        hcl

        resource "fivetran_dbt_project" "my_imported_fivetran_dbt_project" {

        }

        4. Run the `pulumi import` command:

        ```sh
        $ pulumi import fivetran:index/dbtProject:DbtProject my_imported_fivetran_dbt_project {Dbt Project ID}
        ```

        4. Use the `terraform state show` command to get the values from the state:

        terraform state show 'fivetran_dbt_project.my_imported_fivetran_dbt_project'

        5. Copy the values and paste them to your `.tf` configuration.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dbt_version: The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
        :param pulumi.Input[str] default_schema: Default schema in destination. This production schema will contain your transformed data.
        :param pulumi.Input[bool] ensure_readiness: Should resource wait for project to finish initialization. Default value: true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_vars: List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
        :param pulumi.Input[str] group_id: The unique identifier for the group within the Fivetran system.
        :param pulumi.Input[str] target_name: Target name to set or override the value from the deployment.yaml
        :param pulumi.Input[int] threads: The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
        :param pulumi.Input[str] type: Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DbtProjectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource is in ALPHA state.

        This resource allows you to add, manage and delete dbt Projects in your account.

        ## Import

        1. To import an existing `fivetran_dbt_project` resource into your Terraform state, you need to get **Dbt Project ID** via API call `GET https://api.fivetran.com/v1/dbt/projects` to retrieve available projects.

        2. Fetch project details for particular `project-id` using `GET https://api.fivetran.com/v1/dbt/projects/{project-id}` to ensure that this is the project you want to import.

        3. Define an empty resource in your `.tf` configuration:

        hcl

        resource "fivetran_dbt_project" "my_imported_fivetran_dbt_project" {

        }

        4. Run the `pulumi import` command:

        ```sh
        $ pulumi import fivetran:index/dbtProject:DbtProject my_imported_fivetran_dbt_project {Dbt Project ID}
        ```

        4. Use the `terraform state show` command to get the values from the state:

        terraform state show 'fivetran_dbt_project.my_imported_fivetran_dbt_project'

        5. Copy the values and paste them to your `.tf` configuration.

        :param str resource_name: The name of the resource.
        :param DbtProjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DbtProjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dbt_version: Optional[pulumi.Input[str]] = None,
                 default_schema: Optional[pulumi.Input[str]] = None,
                 ensure_readiness: Optional[pulumi.Input[bool]] = None,
                 environment_vars: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 project_config: Optional[pulumi.Input[pulumi.InputType['DbtProjectProjectConfigArgs']]] = None,
                 target_name: Optional[pulumi.Input[str]] = None,
                 threads: Optional[pulumi.Input[int]] = None,
                 timeouts: Optional[pulumi.Input[pulumi.InputType['DbtProjectTimeoutsArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DbtProjectArgs.__new__(DbtProjectArgs)

            if dbt_version is None and not opts.urn:
                raise TypeError("Missing required property 'dbt_version'")
            __props__.__dict__["dbt_version"] = dbt_version
            if default_schema is None and not opts.urn:
                raise TypeError("Missing required property 'default_schema'")
            __props__.__dict__["default_schema"] = default_schema
            __props__.__dict__["ensure_readiness"] = ensure_readiness
            __props__.__dict__["environment_vars"] = environment_vars
            if group_id is None and not opts.urn:
                raise TypeError("Missing required property 'group_id'")
            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["project_config"] = project_config
            __props__.__dict__["target_name"] = target_name
            __props__.__dict__["threads"] = threads
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["type"] = type
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by_id"] = None
            __props__.__dict__["models"] = None
            __props__.__dict__["public_key"] = None
            __props__.__dict__["status"] = None
        super(DbtProject, __self__).__init__(
            'fivetran:index/dbtProject:DbtProject',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            created_by_id: Optional[pulumi.Input[str]] = None,
            dbt_version: Optional[pulumi.Input[str]] = None,
            default_schema: Optional[pulumi.Input[str]] = None,
            ensure_readiness: Optional[pulumi.Input[bool]] = None,
            environment_vars: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            models: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DbtProjectModelArgs']]]]] = None,
            project_config: Optional[pulumi.Input[pulumi.InputType['DbtProjectProjectConfigArgs']]] = None,
            public_key: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            target_name: Optional[pulumi.Input[str]] = None,
            threads: Optional[pulumi.Input[int]] = None,
            timeouts: Optional[pulumi.Input[pulumi.InputType['DbtProjectTimeoutsArgs']]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'DbtProject':
        """
        Get an existing DbtProject resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_at: The timestamp of the dbt Project creation.
        :param pulumi.Input[str] created_by_id: The unique identifier for the User within the Fivetran system who created the dbt Project.
        :param pulumi.Input[str] dbt_version: The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
        :param pulumi.Input[str] default_schema: Default schema in destination. This production schema will contain your transformed data.
        :param pulumi.Input[bool] ensure_readiness: Should resource wait for project to finish initialization. Default value: true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_vars: List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
        :param pulumi.Input[str] group_id: The unique identifier for the group within the Fivetran system.
        :param pulumi.Input[str] public_key: Public key to grant Fivetran SSH access to git repository.
        :param pulumi.Input[str] status: Status of dbt Project (NOT_READY, READY, ERROR).
        :param pulumi.Input[str] target_name: Target name to set or override the value from the deployment.yaml
        :param pulumi.Input[int] threads: The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
        :param pulumi.Input[str] type: Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DbtProjectState.__new__(_DbtProjectState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by_id"] = created_by_id
        __props__.__dict__["dbt_version"] = dbt_version
        __props__.__dict__["default_schema"] = default_schema
        __props__.__dict__["ensure_readiness"] = ensure_readiness
        __props__.__dict__["environment_vars"] = environment_vars
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["models"] = models
        __props__.__dict__["project_config"] = project_config
        __props__.__dict__["public_key"] = public_key
        __props__.__dict__["status"] = status
        __props__.__dict__["target_name"] = target_name
        __props__.__dict__["threads"] = threads
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        return DbtProject(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The timestamp of the dbt Project creation.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdById")
    def created_by_id(self) -> pulumi.Output[str]:
        """
        The unique identifier for the User within the Fivetran system who created the dbt Project.
        """
        return pulumi.get(self, "created_by_id")

    @property
    @pulumi.getter(name="dbtVersion")
    def dbt_version(self) -> pulumi.Output[str]:
        """
        The version of dbt that should run the project. We support the following versions: 0.18.0 - 0.18.2, 0.19.0 - 0.19.2, 0.20.0 - 0.20.2, 0.21.0 - 0.21.1, 1.0.0, 1.0.1, 1.0.3 - 1.0.9, 1.1.0 - 1.1.3, 1.2.0 - 1.2.4, 1.3.0 - 1.3.2, 1.4.1.
        """
        return pulumi.get(self, "dbt_version")

    @property
    @pulumi.getter(name="defaultSchema")
    def default_schema(self) -> pulumi.Output[str]:
        """
        Default schema in destination. This production schema will contain your transformed data.
        """
        return pulumi.get(self, "default_schema")

    @property
    @pulumi.getter(name="ensureReadiness")
    def ensure_readiness(self) -> pulumi.Output[bool]:
        """
        Should resource wait for project to finish initialization. Default value: true.
        """
        return pulumi.get(self, "ensure_readiness")

    @property
    @pulumi.getter(name="environmentVars")
    def environment_vars(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
        """
        return pulumi.get(self, "environment_vars")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[str]:
        """
        The unique identifier for the group within the Fivetran system.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def models(self) -> pulumi.Output[Sequence['outputs.DbtProjectModel']]:
        return pulumi.get(self, "models")

    @property
    @pulumi.getter(name="projectConfig")
    def project_config(self) -> pulumi.Output[Optional['outputs.DbtProjectProjectConfig']]:
        return pulumi.get(self, "project_config")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Output[str]:
        """
        Public key to grant Fivetran SSH access to git repository.
        """
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Status of dbt Project (NOT_READY, READY, ERROR).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> pulumi.Output[Optional[str]]:
        """
        Target name to set or override the value from the deployment.yaml
        """
        return pulumi.get(self, "target_name")

    @property
    @pulumi.getter
    def threads(self) -> pulumi.Output[int]:
        """
        The number of threads dbt will use (from 1 to 32). Make sure this value is compatible with your destination type. For example, Snowflake supports only 8 concurrent queries on an X-Small warehouse.
        """
        return pulumi.get(self, "threads")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.DbtProjectTimeouts']]:
        return pulumi.get(self, "timeouts")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        Type of dbt Project. Currently only `GIT` supported. Empty value will be considered as default (GIT).
        """
        return pulumi.get(self, "type")

