# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ExternalLoggingArgs', 'ExternalLogging']

@pulumi.input_type
class ExternalLoggingArgs:
    def __init__(__self__, *,
                 group_id: pulumi.Input[str],
                 service: pulumi.Input[str],
                 config: Optional[pulumi.Input['ExternalLoggingConfigArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 run_setup_tests: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a ExternalLogging resource.
        :param pulumi.Input[str] group_id: The unique identifier for the log service within the Fivetran system.
        :param pulumi.Input[str] service: The name for the log service type within the Fivetran system. We support the following log services: azure*monitor*log, cloudwatch, datadog*log, new*relic_log, splunkLog, stackdriver.
        :param pulumi.Input[bool] enabled: The boolean value specifying whether the log service is enabled.
        :param pulumi.Input[bool] run_setup_tests: Specifies whether the setup tests should be run automatically. The default value is TRUE.
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "service", service)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if run_setup_tests is not None:
            pulumi.set(__self__, "run_setup_tests", run_setup_tests)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[str]:
        """
        The unique identifier for the log service within the Fivetran system.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        The name for the log service type within the Fivetran system. We support the following log services: azure*monitor*log, cloudwatch, datadog*log, new*relic_log, splunkLog, stackdriver.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ExternalLoggingConfigArgs']]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ExternalLoggingConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        The boolean value specifying whether the log service is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="runSetupTests")
    def run_setup_tests(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the setup tests should be run automatically. The default value is TRUE.
        """
        return pulumi.get(self, "run_setup_tests")

    @run_setup_tests.setter
    def run_setup_tests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_setup_tests", value)


@pulumi.input_type
class _ExternalLoggingState:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['ExternalLoggingConfigArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 run_setup_tests: Optional[pulumi.Input[bool]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ExternalLogging resources.
        :param pulumi.Input[bool] enabled: The boolean value specifying whether the log service is enabled.
        :param pulumi.Input[str] group_id: The unique identifier for the log service within the Fivetran system.
        :param pulumi.Input[bool] run_setup_tests: Specifies whether the setup tests should be run automatically. The default value is TRUE.
        :param pulumi.Input[str] service: The name for the log service type within the Fivetran system. We support the following log services: azure*monitor*log, cloudwatch, datadog*log, new*relic_log, splunkLog, stackdriver.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if run_setup_tests is not None:
            pulumi.set(__self__, "run_setup_tests", run_setup_tests)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['ExternalLoggingConfigArgs']]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['ExternalLoggingConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        The boolean value specifying whether the log service is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier for the log service within the Fivetran system.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="runSetupTests")
    def run_setup_tests(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the setup tests should be run automatically. The default value is TRUE.
        """
        return pulumi.get(self, "run_setup_tests")

    @run_setup_tests.setter
    def run_setup_tests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_setup_tests", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the log service type within the Fivetran system. We support the following log services: azure*monitor*log, cloudwatch, datadog*log, new*relic_log, splunkLog, stackdriver.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


class ExternalLogging(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[Union['ExternalLoggingConfigArgs', 'ExternalLoggingConfigArgsDict']]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 run_setup_tests: Optional[pulumi.Input[bool]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Import

        1. To import an existing `fivetran_external_logging` resource into your Terraform state, you need to get **External Logging Group ID** on the external logging page in your Fivetran dashboard.

        To retrieve existing groups, use the [fivetran_groups data source](/docs/data-sources/groups).

        2. Define an empty resource in your `.tf` configuration:

        hcl

        resource "fivetran_external_logging" "my_imported_external_logging" {

        }

        3. Run the `pulumi import` command with the following parameters:

        ```sh
        $ pulumi import fivetran:index/externalLogging:ExternalLogging my_imported_external_logging {your External Logging Group ID}
        ```

        4. Use the `terraform state show` command to get the values from the state:

        terraform state show 'fivetran_external_logging.my_imported_external_logging'

        5. Copy the values and paste them to your `.tf` configuration.

        -> The `config` object in the state contains all properties defined in the schema. You need to remove properties from the `config` that are not related to destinations. See the [Fivetran REST API documentation](https://fivetran.com/docs/rest-api/log-service-management#logservicesetupconfigurations) for reference to find the properties you need to keep in the `config` section.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: The boolean value specifying whether the log service is enabled.
        :param pulumi.Input[str] group_id: The unique identifier for the log service within the Fivetran system.
        :param pulumi.Input[bool] run_setup_tests: Specifies whether the setup tests should be run automatically. The default value is TRUE.
        :param pulumi.Input[str] service: The name for the log service type within the Fivetran system. We support the following log services: azure*monitor*log, cloudwatch, datadog*log, new*relic_log, splunkLog, stackdriver.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ExternalLoggingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        1. To import an existing `fivetran_external_logging` resource into your Terraform state, you need to get **External Logging Group ID** on the external logging page in your Fivetran dashboard.

        To retrieve existing groups, use the [fivetran_groups data source](/docs/data-sources/groups).

        2. Define an empty resource in your `.tf` configuration:

        hcl

        resource "fivetran_external_logging" "my_imported_external_logging" {

        }

        3. Run the `pulumi import` command with the following parameters:

        ```sh
        $ pulumi import fivetran:index/externalLogging:ExternalLogging my_imported_external_logging {your External Logging Group ID}
        ```

        4. Use the `terraform state show` command to get the values from the state:

        terraform state show 'fivetran_external_logging.my_imported_external_logging'

        5. Copy the values and paste them to your `.tf` configuration.

        -> The `config` object in the state contains all properties defined in the schema. You need to remove properties from the `config` that are not related to destinations. See the [Fivetran REST API documentation](https://fivetran.com/docs/rest-api/log-service-management#logservicesetupconfigurations) for reference to find the properties you need to keep in the `config` section.

        :param str resource_name: The name of the resource.
        :param ExternalLoggingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExternalLoggingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[Union['ExternalLoggingConfigArgs', 'ExternalLoggingConfigArgsDict']]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 run_setup_tests: Optional[pulumi.Input[bool]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExternalLoggingArgs.__new__(ExternalLoggingArgs)

            __props__.__dict__["config"] = config
            __props__.__dict__["enabled"] = enabled
            if group_id is None and not opts.urn:
                raise TypeError("Missing required property 'group_id'")
            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["run_setup_tests"] = run_setup_tests
            if service is None and not opts.urn:
                raise TypeError("Missing required property 'service'")
            __props__.__dict__["service"] = service
        super(ExternalLogging, __self__).__init__(
            'fivetran:index/externalLogging:ExternalLogging',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config: Optional[pulumi.Input[Union['ExternalLoggingConfigArgs', 'ExternalLoggingConfigArgsDict']]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            run_setup_tests: Optional[pulumi.Input[bool]] = None,
            service: Optional[pulumi.Input[str]] = None) -> 'ExternalLogging':
        """
        Get an existing ExternalLogging resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: The boolean value specifying whether the log service is enabled.
        :param pulumi.Input[str] group_id: The unique identifier for the log service within the Fivetran system.
        :param pulumi.Input[bool] run_setup_tests: Specifies whether the setup tests should be run automatically. The default value is TRUE.
        :param pulumi.Input[str] service: The name for the log service type within the Fivetran system. We support the following log services: azure*monitor*log, cloudwatch, datadog*log, new*relic_log, splunkLog, stackdriver.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExternalLoggingState.__new__(_ExternalLoggingState)

        __props__.__dict__["config"] = config
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["run_setup_tests"] = run_setup_tests
        __props__.__dict__["service"] = service
        return ExternalLogging(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[Optional['outputs.ExternalLoggingConfig']]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        The boolean value specifying whether the log service is enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[str]:
        """
        The unique identifier for the log service within the Fivetran system.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="runSetupTests")
    def run_setup_tests(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether the setup tests should be run automatically. The default value is TRUE.
        """
        return pulumi.get(self, "run_setup_tests")

    @property
    @pulumi.getter
    def service(self) -> pulumi.Output[str]:
        """
        The name for the log service type within the Fivetran system. We support the following log services: azure*monitor*log, cloudwatch, datadog*log, new*relic_log, splunkLog, stackdriver.
        """
        return pulumi.get(self, "service")

