# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetDbtTransformationResult',
    'AwaitableGetDbtTransformationResult',
    'get_dbt_transformation',
    'get_dbt_transformation_output',
]

@pulumi.output_type
class GetDbtTransformationResult:
    """
    A collection of values returned by getDbtTransformation.
    """
    def __init__(__self__, connector_ids=None, created_at=None, dbt_model_id=None, dbt_model_name=None, dbt_project_id=None, id=None, model_ids=None, output_model_name=None, paused=None, run_tests=None, schedule=None):
        if connector_ids and not isinstance(connector_ids, list):
            raise TypeError("Expected argument 'connector_ids' to be a list")
        pulumi.set(__self__, "connector_ids", connector_ids)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if dbt_model_id and not isinstance(dbt_model_id, str):
            raise TypeError("Expected argument 'dbt_model_id' to be a str")
        pulumi.set(__self__, "dbt_model_id", dbt_model_id)
        if dbt_model_name and not isinstance(dbt_model_name, str):
            raise TypeError("Expected argument 'dbt_model_name' to be a str")
        pulumi.set(__self__, "dbt_model_name", dbt_model_name)
        if dbt_project_id and not isinstance(dbt_project_id, str):
            raise TypeError("Expected argument 'dbt_project_id' to be a str")
        pulumi.set(__self__, "dbt_project_id", dbt_project_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if model_ids and not isinstance(model_ids, list):
            raise TypeError("Expected argument 'model_ids' to be a list")
        pulumi.set(__self__, "model_ids", model_ids)
        if output_model_name and not isinstance(output_model_name, str):
            raise TypeError("Expected argument 'output_model_name' to be a str")
        pulumi.set(__self__, "output_model_name", output_model_name)
        if paused and not isinstance(paused, bool):
            raise TypeError("Expected argument 'paused' to be a bool")
        pulumi.set(__self__, "paused", paused)
        if run_tests and not isinstance(run_tests, bool):
            raise TypeError("Expected argument 'run_tests' to be a bool")
        pulumi.set(__self__, "run_tests", run_tests)
        if schedule and not isinstance(schedule, dict):
            raise TypeError("Expected argument 'schedule' to be a dict")
        pulumi.set(__self__, "schedule", schedule)

    @property
    @pulumi.getter(name="connectorIds")
    def connector_ids(self) -> Sequence[str]:
        """
        Identifiers of related connectors.
        """
        return pulumi.get(self, "connector_ids")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The timestamp of the dbt Transformation creation.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dbtModelId")
    def dbt_model_id(self) -> str:
        """
        The unique identifier for the dbt Model within the Fivetran system.
        """
        return pulumi.get(self, "dbt_model_id")

    @property
    @pulumi.getter(name="dbtModelName")
    def dbt_model_name(self) -> str:
        """
        Target dbt Model name.
        """
        return pulumi.get(self, "dbt_model_name")

    @property
    @pulumi.getter(name="dbtProjectId")
    def dbt_project_id(self) -> str:
        """
        The unique identifier for the dbt Project within the Fivetran system.
        """
        return pulumi.get(self, "dbt_project_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier for the dbt Transformation within the Fivetran system.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modelIds")
    def model_ids(self) -> Sequence[str]:
        """
        Identifiers of related models.
        """
        return pulumi.get(self, "model_ids")

    @property
    @pulumi.getter(name="outputModelName")
    def output_model_name(self) -> str:
        """
        The dbt Model name.
        """
        return pulumi.get(self, "output_model_name")

    @property
    @pulumi.getter
    def paused(self) -> bool:
        """
        The field indicating whether the transformation will be set into the paused state. By default, the value is false.
        """
        return pulumi.get(self, "paused")

    @property
    @pulumi.getter(name="runTests")
    def run_tests(self) -> bool:
        """
        The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
        """
        return pulumi.get(self, "run_tests")

    @property
    @pulumi.getter
    def schedule(self) -> Optional['outputs.GetDbtTransformationScheduleResult']:
        return pulumi.get(self, "schedule")


class AwaitableGetDbtTransformationResult(GetDbtTransformationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDbtTransformationResult(
            connector_ids=self.connector_ids,
            created_at=self.created_at,
            dbt_model_id=self.dbt_model_id,
            dbt_model_name=self.dbt_model_name,
            dbt_project_id=self.dbt_project_id,
            id=self.id,
            model_ids=self.model_ids,
            output_model_name=self.output_model_name,
            paused=self.paused,
            run_tests=self.run_tests,
            schedule=self.schedule)


def get_dbt_transformation(id: Optional[str] = None,
                           schedule: Optional[pulumi.InputType['GetDbtTransformationScheduleArgs']] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDbtTransformationResult:
    """
    This data source returns a dbt Transformation object.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    transformation = fivetran.get_dbt_transformation(id="transformation_id")
    ```


    :param str id: The unique identifier for the dbt Transformation within the Fivetran system.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['schedule'] = schedule
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fivetran:index/getDbtTransformation:getDbtTransformation', __args__, opts=opts, typ=GetDbtTransformationResult).value

    return AwaitableGetDbtTransformationResult(
        connector_ids=pulumi.get(__ret__, 'connector_ids'),
        created_at=pulumi.get(__ret__, 'created_at'),
        dbt_model_id=pulumi.get(__ret__, 'dbt_model_id'),
        dbt_model_name=pulumi.get(__ret__, 'dbt_model_name'),
        dbt_project_id=pulumi.get(__ret__, 'dbt_project_id'),
        id=pulumi.get(__ret__, 'id'),
        model_ids=pulumi.get(__ret__, 'model_ids'),
        output_model_name=pulumi.get(__ret__, 'output_model_name'),
        paused=pulumi.get(__ret__, 'paused'),
        run_tests=pulumi.get(__ret__, 'run_tests'),
        schedule=pulumi.get(__ret__, 'schedule'))


@_utilities.lift_output_func(get_dbt_transformation)
def get_dbt_transformation_output(id: Optional[pulumi.Input[str]] = None,
                                  schedule: Optional[pulumi.Input[Optional[pulumi.InputType['GetDbtTransformationScheduleArgs']]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDbtTransformationResult]:
    """
    This data source returns a dbt Transformation object.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    transformation = fivetran.get_dbt_transformation(id="transformation_id")
    ```


    :param str id: The unique identifier for the dbt Transformation within the Fivetran system.
    """
    ...
