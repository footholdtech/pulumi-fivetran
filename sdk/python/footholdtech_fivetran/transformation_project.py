# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TransformationProjectArgs', 'TransformationProject']

@pulumi.input_type
class TransformationProjectArgs:
    def __init__(__self__, *,
                 group_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 project_config: Optional[pulumi.Input['TransformationProjectProjectConfigArgs']] = None,
                 run_tests: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a TransformationProject resource.
        :param pulumi.Input[str] group_id: The unique identifier for the group within the Fivetran system.
        :param pulumi.Input[str] type: Transformation project type.
        :param pulumi.Input[bool] run_tests: Specifies whether the setup tests should be run automatically. The default value is TRUE.
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "type", type)
        if project_config is not None:
            pulumi.set(__self__, "project_config", project_config)
        if run_tests is not None:
            pulumi.set(__self__, "run_tests", run_tests)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[str]:
        """
        The unique identifier for the group within the Fivetran system.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Transformation project type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="projectConfig")
    def project_config(self) -> Optional[pulumi.Input['TransformationProjectProjectConfigArgs']]:
        return pulumi.get(self, "project_config")

    @project_config.setter
    def project_config(self, value: Optional[pulumi.Input['TransformationProjectProjectConfigArgs']]):
        pulumi.set(self, "project_config", value)

    @property
    @pulumi.getter(name="runTests")
    def run_tests(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the setup tests should be run automatically. The default value is TRUE.
        """
        return pulumi.get(self, "run_tests")

    @run_tests.setter
    def run_tests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_tests", value)


@pulumi.input_type
class _TransformationProjectState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 created_by_id: Optional[pulumi.Input[str]] = None,
                 errors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 project_config: Optional[pulumi.Input['TransformationProjectProjectConfigArgs']] = None,
                 run_tests: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering TransformationProject resources.
        :param pulumi.Input[str] created_at: The timestamp of the transformation Project creation.
        :param pulumi.Input[str] created_by_id: The unique identifier for the User within the Fivetran system who created the dbt Project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] errors: List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
        :param pulumi.Input[str] group_id: The unique identifier for the group within the Fivetran system.
        :param pulumi.Input[bool] run_tests: Specifies whether the setup tests should be run automatically. The default value is TRUE.
        :param pulumi.Input[str] status: Status of transformation Project (NOT_READY, READY, ERROR).
        :param pulumi.Input[str] type: Transformation project type.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by_id is not None:
            pulumi.set(__self__, "created_by_id", created_by_id)
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if project_config is not None:
            pulumi.set(__self__, "project_config", project_config)
        if run_tests is not None:
            pulumi.set(__self__, "run_tests", run_tests)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The timestamp of the transformation Project creation.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="createdById")
    def created_by_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier for the User within the Fivetran system who created the dbt Project.
        """
        return pulumi.get(self, "created_by_id")

    @created_by_id.setter
    def created_by_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_id", value)

    @property
    @pulumi.getter
    def errors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
        """
        return pulumi.get(self, "errors")

    @errors.setter
    def errors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "errors", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier for the group within the Fivetran system.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="projectConfig")
    def project_config(self) -> Optional[pulumi.Input['TransformationProjectProjectConfigArgs']]:
        return pulumi.get(self, "project_config")

    @project_config.setter
    def project_config(self, value: Optional[pulumi.Input['TransformationProjectProjectConfigArgs']]):
        pulumi.set(self, "project_config", value)

    @property
    @pulumi.getter(name="runTests")
    def run_tests(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the setup tests should be run automatically. The default value is TRUE.
        """
        return pulumi.get(self, "run_tests")

    @run_tests.setter
    def run_tests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_tests", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of transformation Project (NOT_READY, READY, ERROR).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Transformation project type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class TransformationProject(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 project_config: Optional[pulumi.Input[Union['TransformationProjectProjectConfigArgs', 'TransformationProjectProjectConfigArgsDict']]] = None,
                 run_tests: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Import

        1. To import an existing `fivetran_transformation_project` resource into your Terraform state, you need to get **Transformation Project ID** via API call `GET https://api.fivetran.com/v1/transformation-projects` to retrieve available projects.

        2. Fetch project details for particular `project-id` using `GET https://api.fivetran.com/v1/transformation-projects/{project-id}` to ensure that this is the project you want to import.

        3. Define an empty resource in your `.tf` configuration:

        hcl

        resource "fivetran_transformation_project" "my_imported_fivetran_transformation_project" {

        }

        4. Run the `pulumi import` command:

        ```sh
        $ pulumi import fivetran:index/transformationProject:TransformationProject my_imported_fivetran_transformation_project {Transformation Project ID}
        ```

        4. Use the `terraform state show` command to get the values from the state:

        terraform state show 'fivetran_transformation_project.my_imported_fivetran_transformation_project'

        5. Copy the values and paste them to your `.tf` configuration.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] group_id: The unique identifier for the group within the Fivetran system.
        :param pulumi.Input[bool] run_tests: Specifies whether the setup tests should be run automatically. The default value is TRUE.
        :param pulumi.Input[str] type: Transformation project type.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TransformationProjectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        1. To import an existing `fivetran_transformation_project` resource into your Terraform state, you need to get **Transformation Project ID** via API call `GET https://api.fivetran.com/v1/transformation-projects` to retrieve available projects.

        2. Fetch project details for particular `project-id` using `GET https://api.fivetran.com/v1/transformation-projects/{project-id}` to ensure that this is the project you want to import.

        3. Define an empty resource in your `.tf` configuration:

        hcl

        resource "fivetran_transformation_project" "my_imported_fivetran_transformation_project" {

        }

        4. Run the `pulumi import` command:

        ```sh
        $ pulumi import fivetran:index/transformationProject:TransformationProject my_imported_fivetran_transformation_project {Transformation Project ID}
        ```

        4. Use the `terraform state show` command to get the values from the state:

        terraform state show 'fivetran_transformation_project.my_imported_fivetran_transformation_project'

        5. Copy the values and paste them to your `.tf` configuration.

        :param str resource_name: The name of the resource.
        :param TransformationProjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TransformationProjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 project_config: Optional[pulumi.Input[Union['TransformationProjectProjectConfigArgs', 'TransformationProjectProjectConfigArgsDict']]] = None,
                 run_tests: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TransformationProjectArgs.__new__(TransformationProjectArgs)

            if group_id is None and not opts.urn:
                raise TypeError("Missing required property 'group_id'")
            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["project_config"] = project_config
            __props__.__dict__["run_tests"] = run_tests
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by_id"] = None
            __props__.__dict__["errors"] = None
            __props__.__dict__["status"] = None
        super(TransformationProject, __self__).__init__(
            'fivetran:index/transformationProject:TransformationProject',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            created_by_id: Optional[pulumi.Input[str]] = None,
            errors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            project_config: Optional[pulumi.Input[Union['TransformationProjectProjectConfigArgs', 'TransformationProjectProjectConfigArgsDict']]] = None,
            run_tests: Optional[pulumi.Input[bool]] = None,
            status: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'TransformationProject':
        """
        Get an existing TransformationProject resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_at: The timestamp of the transformation Project creation.
        :param pulumi.Input[str] created_by_id: The unique identifier for the User within the Fivetran system who created the dbt Project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] errors: List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
        :param pulumi.Input[str] group_id: The unique identifier for the group within the Fivetran system.
        :param pulumi.Input[bool] run_tests: Specifies whether the setup tests should be run automatically. The default value is TRUE.
        :param pulumi.Input[str] status: Status of transformation Project (NOT_READY, READY, ERROR).
        :param pulumi.Input[str] type: Transformation project type.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TransformationProjectState.__new__(_TransformationProjectState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by_id"] = created_by_id
        __props__.__dict__["errors"] = errors
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["project_config"] = project_config
        __props__.__dict__["run_tests"] = run_tests
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        return TransformationProject(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The timestamp of the transformation Project creation.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdById")
    def created_by_id(self) -> pulumi.Output[str]:
        """
        The unique identifier for the User within the Fivetran system who created the dbt Project.
        """
        return pulumi.get(self, "created_by_id")

    @property
    @pulumi.getter
    def errors(self) -> pulumi.Output[Sequence[str]]:
        """
        List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[str]:
        """
        The unique identifier for the group within the Fivetran system.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="projectConfig")
    def project_config(self) -> pulumi.Output[Optional['outputs.TransformationProjectProjectConfig']]:
        return pulumi.get(self, "project_config")

    @property
    @pulumi.getter(name="runTests")
    def run_tests(self) -> pulumi.Output[bool]:
        """
        Specifies whether the setup tests should be run automatically. The default value is TRUE.
        """
        return pulumi.get(self, "run_tests")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Status of transformation Project (NOT_READY, READY, ERROR).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Transformation project type.
        """
        return pulumi.get(self, "type")

