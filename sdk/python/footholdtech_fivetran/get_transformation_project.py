# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetTransformationProjectResult',
    'AwaitableGetTransformationProjectResult',
    'get_transformation_project',
    'get_transformation_project_output',
]

@pulumi.output_type
class GetTransformationProjectResult:
    """
    A collection of values returned by getTransformationProject.
    """
    def __init__(__self__, created_at=None, created_by_id=None, errors=None, group_id=None, id=None, project_config=None, status=None, type=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by_id and not isinstance(created_by_id, str):
            raise TypeError("Expected argument 'created_by_id' to be a str")
        pulumi.set(__self__, "created_by_id", created_by_id)
        if errors and not isinstance(errors, list):
            raise TypeError("Expected argument 'errors' to be a list")
        pulumi.set(__self__, "errors", errors)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if project_config and not isinstance(project_config, dict):
            raise TypeError("Expected argument 'project_config' to be a dict")
        pulumi.set(__self__, "project_config", project_config)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The timestamp of the transformation Project creation.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdById")
    def created_by_id(self) -> str:
        """
        The unique identifier for the User within the Fivetran system who created the dbt Project.
        """
        return pulumi.get(self, "created_by_id")

    @property
    @pulumi.getter
    def errors(self) -> Sequence[str]:
        """
        List of environment variables defined as key-value pairs in the raw string format using = as a separator. The variable name should have the DBT_ prefix and can contain A-Z, 0-9, dash, underscore, or dot characters. Example: "DBT*VARIABLE=variable*value"
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        The unique identifier for the group within the Fivetran system.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique identifier for the transformation Project within the Fivetran system.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectConfig")
    def project_config(self) -> Optional['outputs.GetTransformationProjectProjectConfigResult']:
        return pulumi.get(self, "project_config")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of transformation Project (NOT_READY, READY, ERROR).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Transformation project type.
        """
        return pulumi.get(self, "type")


class AwaitableGetTransformationProjectResult(GetTransformationProjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTransformationProjectResult(
            created_at=self.created_at,
            created_by_id=self.created_by_id,
            errors=self.errors,
            group_id=self.group_id,
            id=self.id,
            project_config=self.project_config,
            status=self.status,
            type=self.type)


def get_transformation_project(id: Optional[str] = None,
                               project_config: Optional[Union['GetTransformationProjectProjectConfigArgs', 'GetTransformationProjectProjectConfigArgsDict']] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTransformationProjectResult:
    """
    Returns transformation project details if a valid identifier was provided

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    test = fivetran.get_transformation_project(id="id")
    ```


    :param str id: The unique identifier for the transformation Project within the Fivetran system.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['projectConfig'] = project_config
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fivetran:index/getTransformationProject:getTransformationProject', __args__, opts=opts, typ=GetTransformationProjectResult).value

    return AwaitableGetTransformationProjectResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by_id=pulumi.get(__ret__, 'created_by_id'),
        errors=pulumi.get(__ret__, 'errors'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        project_config=pulumi.get(__ret__, 'project_config'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'))
def get_transformation_project_output(id: Optional[pulumi.Input[str]] = None,
                                      project_config: Optional[pulumi.Input[Optional[Union['GetTransformationProjectProjectConfigArgs', 'GetTransformationProjectProjectConfigArgsDict']]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTransformationProjectResult]:
    """
    Returns transformation project details if a valid identifier was provided

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fivetran as fivetran

    test = fivetran.get_transformation_project(id="id")
    ```


    :param str id: The unique identifier for the transformation Project within the Fivetran system.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['projectConfig'] = project_config
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('fivetran:index/getTransformationProject:getTransformationProject', __args__, opts=opts, typ=GetTransformationProjectResult)
    return __ret__.apply(lambda __response__: GetTransformationProjectResult(
        created_at=pulumi.get(__response__, 'created_at'),
        created_by_id=pulumi.get(__response__, 'created_by_id'),
        errors=pulumi.get(__response__, 'errors'),
        group_id=pulumi.get(__response__, 'group_id'),
        id=pulumi.get(__response__, 'id'),
        project_config=pulumi.get(__response__, 'project_config'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type')))
