# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DbtTransformationArgs', 'DbtTransformation']

@pulumi.input_type
class DbtTransformationArgs:
    def __init__(__self__, *,
                 dbt_model_name: pulumi.Input[str],
                 dbt_project_id: pulumi.Input[str],
                 paused: Optional[pulumi.Input[bool]] = None,
                 run_tests: Optional[pulumi.Input[bool]] = None,
                 schedule: Optional[pulumi.Input['DbtTransformationScheduleArgs']] = None,
                 timeouts: Optional[pulumi.Input['DbtTransformationTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a DbtTransformation resource.
        :param pulumi.Input[str] dbt_model_name: Target dbt Model name.
        :param pulumi.Input[str] dbt_project_id: The unique identifier for the dbt Project within the Fivetran system.
        :param pulumi.Input[bool] paused: The field indicating whether the transformation will be set into the paused state. By default, the value is false.
        :param pulumi.Input[bool] run_tests: The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
        """
        pulumi.set(__self__, "dbt_model_name", dbt_model_name)
        pulumi.set(__self__, "dbt_project_id", dbt_project_id)
        if paused is not None:
            pulumi.set(__self__, "paused", paused)
        if run_tests is not None:
            pulumi.set(__self__, "run_tests", run_tests)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter(name="dbtModelName")
    def dbt_model_name(self) -> pulumi.Input[str]:
        """
        Target dbt Model name.
        """
        return pulumi.get(self, "dbt_model_name")

    @dbt_model_name.setter
    def dbt_model_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "dbt_model_name", value)

    @property
    @pulumi.getter(name="dbtProjectId")
    def dbt_project_id(self) -> pulumi.Input[str]:
        """
        The unique identifier for the dbt Project within the Fivetran system.
        """
        return pulumi.get(self, "dbt_project_id")

    @dbt_project_id.setter
    def dbt_project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "dbt_project_id", value)

    @property
    @pulumi.getter
    def paused(self) -> Optional[pulumi.Input[bool]]:
        """
        The field indicating whether the transformation will be set into the paused state. By default, the value is false.
        """
        return pulumi.get(self, "paused")

    @paused.setter
    def paused(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "paused", value)

    @property
    @pulumi.getter(name="runTests")
    def run_tests(self) -> Optional[pulumi.Input[bool]]:
        """
        The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
        """
        return pulumi.get(self, "run_tests")

    @run_tests.setter
    def run_tests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_tests", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input['DbtTransformationScheduleArgs']]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input['DbtTransformationScheduleArgs']]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DbtTransformationTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DbtTransformationTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _DbtTransformationState:
    def __init__(__self__, *,
                 connector_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 dbt_model_id: Optional[pulumi.Input[str]] = None,
                 dbt_model_name: Optional[pulumi.Input[str]] = None,
                 dbt_project_id: Optional[pulumi.Input[str]] = None,
                 model_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 output_model_name: Optional[pulumi.Input[str]] = None,
                 paused: Optional[pulumi.Input[bool]] = None,
                 run_tests: Optional[pulumi.Input[bool]] = None,
                 schedule: Optional[pulumi.Input['DbtTransformationScheduleArgs']] = None,
                 timeouts: Optional[pulumi.Input['DbtTransformationTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering DbtTransformation resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] connector_ids: Identifiers of related connectors.
        :param pulumi.Input[str] created_at: The timestamp of the dbt Transformation creation.
        :param pulumi.Input[str] dbt_model_id: The unique identifier for the dbt Model within the Fivetran system.
        :param pulumi.Input[str] dbt_model_name: Target dbt Model name.
        :param pulumi.Input[str] dbt_project_id: The unique identifier for the dbt Project within the Fivetran system.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] model_ids: Identifiers of related models.
        :param pulumi.Input[str] output_model_name: The dbt Model name.
        :param pulumi.Input[bool] paused: The field indicating whether the transformation will be set into the paused state. By default, the value is false.
        :param pulumi.Input[bool] run_tests: The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
        """
        if connector_ids is not None:
            pulumi.set(__self__, "connector_ids", connector_ids)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if dbt_model_id is not None:
            pulumi.set(__self__, "dbt_model_id", dbt_model_id)
        if dbt_model_name is not None:
            pulumi.set(__self__, "dbt_model_name", dbt_model_name)
        if dbt_project_id is not None:
            pulumi.set(__self__, "dbt_project_id", dbt_project_id)
        if model_ids is not None:
            pulumi.set(__self__, "model_ids", model_ids)
        if output_model_name is not None:
            pulumi.set(__self__, "output_model_name", output_model_name)
        if paused is not None:
            pulumi.set(__self__, "paused", paused)
        if run_tests is not None:
            pulumi.set(__self__, "run_tests", run_tests)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter(name="connectorIds")
    def connector_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Identifiers of related connectors.
        """
        return pulumi.get(self, "connector_ids")

    @connector_ids.setter
    def connector_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "connector_ids", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The timestamp of the dbt Transformation creation.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="dbtModelId")
    def dbt_model_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier for the dbt Model within the Fivetran system.
        """
        return pulumi.get(self, "dbt_model_id")

    @dbt_model_id.setter
    def dbt_model_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbt_model_id", value)

    @property
    @pulumi.getter(name="dbtModelName")
    def dbt_model_name(self) -> Optional[pulumi.Input[str]]:
        """
        Target dbt Model name.
        """
        return pulumi.get(self, "dbt_model_name")

    @dbt_model_name.setter
    def dbt_model_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbt_model_name", value)

    @property
    @pulumi.getter(name="dbtProjectId")
    def dbt_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier for the dbt Project within the Fivetran system.
        """
        return pulumi.get(self, "dbt_project_id")

    @dbt_project_id.setter
    def dbt_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dbt_project_id", value)

    @property
    @pulumi.getter(name="modelIds")
    def model_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Identifiers of related models.
        """
        return pulumi.get(self, "model_ids")

    @model_ids.setter
    def model_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "model_ids", value)

    @property
    @pulumi.getter(name="outputModelName")
    def output_model_name(self) -> Optional[pulumi.Input[str]]:
        """
        The dbt Model name.
        """
        return pulumi.get(self, "output_model_name")

    @output_model_name.setter
    def output_model_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_model_name", value)

    @property
    @pulumi.getter
    def paused(self) -> Optional[pulumi.Input[bool]]:
        """
        The field indicating whether the transformation will be set into the paused state. By default, the value is false.
        """
        return pulumi.get(self, "paused")

    @paused.setter
    def paused(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "paused", value)

    @property
    @pulumi.getter(name="runTests")
    def run_tests(self) -> Optional[pulumi.Input[bool]]:
        """
        The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
        """
        return pulumi.get(self, "run_tests")

    @run_tests.setter
    def run_tests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_tests", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input['DbtTransformationScheduleArgs']]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input['DbtTransformationScheduleArgs']]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['DbtTransformationTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['DbtTransformationTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


class DbtTransformation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dbt_model_name: Optional[pulumi.Input[str]] = None,
                 dbt_project_id: Optional[pulumi.Input[str]] = None,
                 paused: Optional[pulumi.Input[bool]] = None,
                 run_tests: Optional[pulumi.Input[bool]] = None,
                 schedule: Optional[pulumi.Input[pulumi.InputType['DbtTransformationScheduleArgs']]] = None,
                 timeouts: Optional[pulumi.Input[pulumi.InputType['DbtTransformationTimeoutsArgs']]] = None,
                 __props__=None):
        """
        Resource is in ALPHA state.

        This resource allows you to add, manage and delete dbt Transformations for existing dbt Model.
        To retrieve available dbt Models use this [Retrieve dbt Project models](https://fivetran.com/docs/rest-api/dbt-transformation-management#retrievedbtprojectmodels) endpoint.

        ## Import

        1. To import an existing `fivetran_dbt_transformation` resource into your Terraform state, you need to get **Transformation ID** on the transformation page in your Fivetran dashboard.

        2. Define an empty resource in your `.tf` configuration:

        hcl

        resource "fivetran_dbt_transformation" "my_imported_fivetran_dbt_transformation" {

        }

        3. Run the `pulumi import` command:

        ```sh
        $ pulumi import fivetran:index/dbtTransformation:DbtTransformation my_imported_fivetran_dbt_transformation {Transformation ID}
        ```

        4. Use the `terraform state show` command to get the values from the state:

        terraform state show 'fivetran_dbt_transformation.my_imported_fivetran_dbt_transformation'

        5. Copy the values and paste them to your `.tf` configuration.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dbt_model_name: Target dbt Model name.
        :param pulumi.Input[str] dbt_project_id: The unique identifier for the dbt Project within the Fivetran system.
        :param pulumi.Input[bool] paused: The field indicating whether the transformation will be set into the paused state. By default, the value is false.
        :param pulumi.Input[bool] run_tests: The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DbtTransformationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource is in ALPHA state.

        This resource allows you to add, manage and delete dbt Transformations for existing dbt Model.
        To retrieve available dbt Models use this [Retrieve dbt Project models](https://fivetran.com/docs/rest-api/dbt-transformation-management#retrievedbtprojectmodels) endpoint.

        ## Import

        1. To import an existing `fivetran_dbt_transformation` resource into your Terraform state, you need to get **Transformation ID** on the transformation page in your Fivetran dashboard.

        2. Define an empty resource in your `.tf` configuration:

        hcl

        resource "fivetran_dbt_transformation" "my_imported_fivetran_dbt_transformation" {

        }

        3. Run the `pulumi import` command:

        ```sh
        $ pulumi import fivetran:index/dbtTransformation:DbtTransformation my_imported_fivetran_dbt_transformation {Transformation ID}
        ```

        4. Use the `terraform state show` command to get the values from the state:

        terraform state show 'fivetran_dbt_transformation.my_imported_fivetran_dbt_transformation'

        5. Copy the values and paste them to your `.tf` configuration.

        :param str resource_name: The name of the resource.
        :param DbtTransformationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DbtTransformationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dbt_model_name: Optional[pulumi.Input[str]] = None,
                 dbt_project_id: Optional[pulumi.Input[str]] = None,
                 paused: Optional[pulumi.Input[bool]] = None,
                 run_tests: Optional[pulumi.Input[bool]] = None,
                 schedule: Optional[pulumi.Input[pulumi.InputType['DbtTransformationScheduleArgs']]] = None,
                 timeouts: Optional[pulumi.Input[pulumi.InputType['DbtTransformationTimeoutsArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DbtTransformationArgs.__new__(DbtTransformationArgs)

            if dbt_model_name is None and not opts.urn:
                raise TypeError("Missing required property 'dbt_model_name'")
            __props__.__dict__["dbt_model_name"] = dbt_model_name
            if dbt_project_id is None and not opts.urn:
                raise TypeError("Missing required property 'dbt_project_id'")
            __props__.__dict__["dbt_project_id"] = dbt_project_id
            __props__.__dict__["paused"] = paused
            __props__.__dict__["run_tests"] = run_tests
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["connector_ids"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["dbt_model_id"] = None
            __props__.__dict__["model_ids"] = None
            __props__.__dict__["output_model_name"] = None
        super(DbtTransformation, __self__).__init__(
            'fivetran:index/dbtTransformation:DbtTransformation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connector_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            dbt_model_id: Optional[pulumi.Input[str]] = None,
            dbt_model_name: Optional[pulumi.Input[str]] = None,
            dbt_project_id: Optional[pulumi.Input[str]] = None,
            model_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            output_model_name: Optional[pulumi.Input[str]] = None,
            paused: Optional[pulumi.Input[bool]] = None,
            run_tests: Optional[pulumi.Input[bool]] = None,
            schedule: Optional[pulumi.Input[pulumi.InputType['DbtTransformationScheduleArgs']]] = None,
            timeouts: Optional[pulumi.Input[pulumi.InputType['DbtTransformationTimeoutsArgs']]] = None) -> 'DbtTransformation':
        """
        Get an existing DbtTransformation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] connector_ids: Identifiers of related connectors.
        :param pulumi.Input[str] created_at: The timestamp of the dbt Transformation creation.
        :param pulumi.Input[str] dbt_model_id: The unique identifier for the dbt Model within the Fivetran system.
        :param pulumi.Input[str] dbt_model_name: Target dbt Model name.
        :param pulumi.Input[str] dbt_project_id: The unique identifier for the dbt Project within the Fivetran system.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] model_ids: Identifiers of related models.
        :param pulumi.Input[str] output_model_name: The dbt Model name.
        :param pulumi.Input[bool] paused: The field indicating whether the transformation will be set into the paused state. By default, the value is false.
        :param pulumi.Input[bool] run_tests: The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DbtTransformationState.__new__(_DbtTransformationState)

        __props__.__dict__["connector_ids"] = connector_ids
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["dbt_model_id"] = dbt_model_id
        __props__.__dict__["dbt_model_name"] = dbt_model_name
        __props__.__dict__["dbt_project_id"] = dbt_project_id
        __props__.__dict__["model_ids"] = model_ids
        __props__.__dict__["output_model_name"] = output_model_name
        __props__.__dict__["paused"] = paused
        __props__.__dict__["run_tests"] = run_tests
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["timeouts"] = timeouts
        return DbtTransformation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="connectorIds")
    def connector_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Identifiers of related connectors.
        """
        return pulumi.get(self, "connector_ids")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The timestamp of the dbt Transformation creation.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dbtModelId")
    def dbt_model_id(self) -> pulumi.Output[str]:
        """
        The unique identifier for the dbt Model within the Fivetran system.
        """
        return pulumi.get(self, "dbt_model_id")

    @property
    @pulumi.getter(name="dbtModelName")
    def dbt_model_name(self) -> pulumi.Output[str]:
        """
        Target dbt Model name.
        """
        return pulumi.get(self, "dbt_model_name")

    @property
    @pulumi.getter(name="dbtProjectId")
    def dbt_project_id(self) -> pulumi.Output[str]:
        """
        The unique identifier for the dbt Project within the Fivetran system.
        """
        return pulumi.get(self, "dbt_project_id")

    @property
    @pulumi.getter(name="modelIds")
    def model_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Identifiers of related models.
        """
        return pulumi.get(self, "model_ids")

    @property
    @pulumi.getter(name="outputModelName")
    def output_model_name(self) -> pulumi.Output[str]:
        """
        The dbt Model name.
        """
        return pulumi.get(self, "output_model_name")

    @property
    @pulumi.getter
    def paused(self) -> pulumi.Output[bool]:
        """
        The field indicating whether the transformation will be set into the paused state. By default, the value is false.
        """
        return pulumi.get(self, "paused")

    @property
    @pulumi.getter(name="runTests")
    def run_tests(self) -> pulumi.Output[bool]:
        """
        The field indicating whether the tests have been configured for dbt Transformation. By default, the value is false.
        """
        return pulumi.get(self, "run_tests")

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Output[Optional['outputs.DbtTransformationSchedule']]:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.DbtTransformationTimeouts']]:
        return pulumi.get(self, "timeouts")

