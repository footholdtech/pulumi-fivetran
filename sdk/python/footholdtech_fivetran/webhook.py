# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['WebhookArgs', 'Webhook']

@pulumi.input_type
class WebhookArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 events: pulumi.Input[Sequence[pulumi.Input[str]]],
                 secret: pulumi.Input[str],
                 type: pulumi.Input[str],
                 url: pulumi.Input[str],
                 group_id: Optional[pulumi.Input[str]] = None,
                 run_tests: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Webhook resource.
        :param pulumi.Input[bool] active: Boolean, if set to true, webhooks are immediately sent in response to events
        :param pulumi.Input[Sequence[pulumi.Input[str]]] events: The array of event types
        :param pulumi.Input[str] secret: The secret string used for payload signing and masked in the response.
        :param pulumi.Input[str] type: The webhook type (group, account)
        :param pulumi.Input[str] url: Your webhooks URL endpoint for your application
        :param pulumi.Input[str] group_id: The group ID
        :param pulumi.Input[bool] run_tests: Specifies whether the setup tests should be run
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "events", events)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if run_tests is not None:
            pulumi.set(__self__, "run_tests", run_tests)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        Boolean, if set to true, webhooks are immediately sent in response to events
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def events(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The array of event types
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        """
        The secret string used for payload signing and masked in the response.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The webhook type (group, account)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Your webhooks URL endpoint for your application
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The group ID
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="runTests")
    def run_tests(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the setup tests should be run
        """
        return pulumi.get(self, "run_tests")

    @run_tests.setter
    def run_tests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_tests", value)


@pulumi.input_type
class _WebhookState:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[bool]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 run_tests: Optional[pulumi.Input[bool]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Webhook resources.
        :param pulumi.Input[bool] active: Boolean, if set to true, webhooks are immediately sent in response to events
        :param pulumi.Input[str] created_at: The webhook creation timestamp
        :param pulumi.Input[str] created_by: The ID of the user who created the webhook.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] events: The array of event types
        :param pulumi.Input[str] group_id: The group ID
        :param pulumi.Input[bool] run_tests: Specifies whether the setup tests should be run
        :param pulumi.Input[str] secret: The secret string used for payload signing and masked in the response.
        :param pulumi.Input[str] type: The webhook type (group, account)
        :param pulumi.Input[str] url: Your webhooks URL endpoint for your application
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if run_tests is not None:
            pulumi.set(__self__, "run_tests", run_tests)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean, if set to true, webhooks are immediately sent in response to events
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The webhook creation timestamp
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the user who created the webhook.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The array of event types
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The group ID
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="runTests")
    def run_tests(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the setup tests should be run
        """
        return pulumi.get(self, "run_tests")

    @run_tests.setter
    def run_tests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_tests", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        The secret string used for payload signing and masked in the response.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The webhook type (group, account)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Your webhooks URL endpoint for your application
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class Webhook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 run_tests: Optional[pulumi.Input[bool]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource allows you to create, update, and delete webhooks.

        ## Import

        1. To import an existing `fivetran_webhook` resource into your Terraform state, you need to get `webhook_id`.

        You can retrieve all webhooks using the [fivetran_webhooks data source](/docs/data-sources/webhooks).

        2. Define an empty resource in your `.tf` configuration:

        hcl

        resource "fivetran_webhook" "my_imported_fivetran_webhook" {

        }

        3. Run the `pulumi import` command:

        ```sh
        $ pulumi import fivetran:index/webhook:Webhook my_imported_fivetran_webhook {webhook_id}
        ```

        4. Use the `terraform state show` command to get the values from the state:

        terraform state show 'fivetran_webhook.my_imported_fivetran_webhook'

        5. Copy the values and paste them to your `.tf` configuration.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Boolean, if set to true, webhooks are immediately sent in response to events
        :param pulumi.Input[Sequence[pulumi.Input[str]]] events: The array of event types
        :param pulumi.Input[str] group_id: The group ID
        :param pulumi.Input[bool] run_tests: Specifies whether the setup tests should be run
        :param pulumi.Input[str] secret: The secret string used for payload signing and masked in the response.
        :param pulumi.Input[str] type: The webhook type (group, account)
        :param pulumi.Input[str] url: Your webhooks URL endpoint for your application
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WebhookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource allows you to create, update, and delete webhooks.

        ## Import

        1. To import an existing `fivetran_webhook` resource into your Terraform state, you need to get `webhook_id`.

        You can retrieve all webhooks using the [fivetran_webhooks data source](/docs/data-sources/webhooks).

        2. Define an empty resource in your `.tf` configuration:

        hcl

        resource "fivetran_webhook" "my_imported_fivetran_webhook" {

        }

        3. Run the `pulumi import` command:

        ```sh
        $ pulumi import fivetran:index/webhook:Webhook my_imported_fivetran_webhook {webhook_id}
        ```

        4. Use the `terraform state show` command to get the values from the state:

        terraform state show 'fivetran_webhook.my_imported_fivetran_webhook'

        5. Copy the values and paste them to your `.tf` configuration.

        :param str resource_name: The name of the resource.
        :param WebhookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WebhookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 run_tests: Optional[pulumi.Input[bool]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WebhookArgs.__new__(WebhookArgs)

            if active is None and not opts.urn:
                raise TypeError("Missing required property 'active'")
            __props__.__dict__["active"] = active
            if events is None and not opts.urn:
                raise TypeError("Missing required property 'events'")
            __props__.__dict__["events"] = events
            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["run_tests"] = run_tests
            if secret is None and not opts.urn:
                raise TypeError("Missing required property 'secret'")
            __props__.__dict__["secret"] = None if secret is None else pulumi.Output.secret(secret)
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["secret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Webhook, __self__).__init__(
            'fivetran:index/webhook:Webhook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active: Optional[pulumi.Input[bool]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            created_by: Optional[pulumi.Input[str]] = None,
            events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            run_tests: Optional[pulumi.Input[bool]] = None,
            secret: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'Webhook':
        """
        Get an existing Webhook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Boolean, if set to true, webhooks are immediately sent in response to events
        :param pulumi.Input[str] created_at: The webhook creation timestamp
        :param pulumi.Input[str] created_by: The ID of the user who created the webhook.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] events: The array of event types
        :param pulumi.Input[str] group_id: The group ID
        :param pulumi.Input[bool] run_tests: Specifies whether the setup tests should be run
        :param pulumi.Input[str] secret: The secret string used for payload signing and masked in the response.
        :param pulumi.Input[str] type: The webhook type (group, account)
        :param pulumi.Input[str] url: Your webhooks URL endpoint for your application
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WebhookState.__new__(_WebhookState)

        __props__.__dict__["active"] = active
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["events"] = events
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["run_tests"] = run_tests
        __props__.__dict__["secret"] = secret
        __props__.__dict__["type"] = type
        __props__.__dict__["url"] = url
        return Webhook(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Output[bool]:
        """
        Boolean, if set to true, webhooks are immediately sent in response to events
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The webhook creation timestamp
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[str]:
        """
        The ID of the user who created the webhook.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def events(self) -> pulumi.Output[Sequence[str]]:
        """
        The array of event types
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[Optional[str]]:
        """
        The group ID
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="runTests")
    def run_tests(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether the setup tests should be run
        """
        return pulumi.get(self, "run_tests")

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Output[str]:
        """
        The secret string used for payload signing and masked in the response.
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The webhook type (group, account)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        Your webhooks URL endpoint for your application
        """
        return pulumi.get(self, "url")

