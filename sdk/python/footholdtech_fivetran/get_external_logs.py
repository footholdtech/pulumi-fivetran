# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetExternalLogsResult',
    'AwaitableGetExternalLogsResult',
    'get_external_logs',
    'get_external_logs_output',
]

@pulumi.output_type
class GetExternalLogsResult:
    """
    A collection of values returned by getExternalLogs.
    """
    def __init__(__self__, id=None, logs=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if logs and not isinstance(logs, list):
            raise TypeError("Expected argument 'logs' to be a list")
        pulumi.set(__self__, "logs", logs)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logs(self) -> Optional[Sequence['outputs.GetExternalLogsLogResult']]:
        return pulumi.get(self, "logs")


class AwaitableGetExternalLogsResult(GetExternalLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetExternalLogsResult(
            id=self.id,
            logs=self.logs)


def get_external_logs(logs: Optional[Sequence[Union['GetExternalLogsLogArgs', 'GetExternalLogsLogArgsDict']]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetExternalLogsResult:
    """
    This data source returns list of logging service objects.
    """
    __args__ = dict()
    __args__['logs'] = logs
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fivetran:index/getExternalLogs:getExternalLogs', __args__, opts=opts, typ=GetExternalLogsResult).value

    return AwaitableGetExternalLogsResult(
        id=pulumi.get(__ret__, 'id'),
        logs=pulumi.get(__ret__, 'logs'))
def get_external_logs_output(logs: Optional[pulumi.Input[Optional[Sequence[Union['GetExternalLogsLogArgs', 'GetExternalLogsLogArgsDict']]]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetExternalLogsResult]:
    """
    This data source returns list of logging service objects.
    """
    __args__ = dict()
    __args__['logs'] = logs
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('fivetran:index/getExternalLogs:getExternalLogs', __args__, opts=opts, typ=GetExternalLogsResult)
    return __ret__.apply(lambda __response__: GetExternalLogsResult(
        id=pulumi.get(__response__, 'id'),
        logs=pulumi.get(__response__, 'logs')))
